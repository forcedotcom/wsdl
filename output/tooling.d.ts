export type EmailToCaseRoutingAddressType = 'EmailToCase' 
      | 'Outlook' 
      | 'GmailOAuth' 
      | 'E2cEasy';

export type KnowledgeCaseEditor = 'simple' 
      | 'standard';

export type KnowledgeLanguageLookupValueType = 'User' 
      | 'Queue';

export type Complexity = 'NoRestriction' 
      | 'AlphaNumeric' 
      | 'SpecialCharacters' 
      | 'UpperLowerCaseNumeric' 
      | 'UpperLowerCaseNumericSpecialCharacters' 
      | 'Any3UpperLowerCaseNumericSpecialCharacters';

export type Expiration = 'ThirtyDays' 
      | 'SixtyDays' 
      | 'NinetyDays' 
      | 'SixMonths' 
      | 'OneYear' 
      | 'Never';

export type LockoutInterval = 'FifteenMinutes' 
      | 'ThirtyMinutes' 
      | 'SixtyMinutes' 
      | 'Forever';

export type MaxLoginAttempts = 'ThreeAttempts' 
      | 'FiveAttempts' 
      | 'TenAttempts' 
      | 'NoLimit';

export type QuestionRestriction = 'None' 
      | 'DoesNotContainPassword';

export type SessionTimeout = 'TwentyFourHours' 
      | 'TwelveHours' 
      | 'EightHours' 
      | 'FourHours' 
      | 'TwoHours' 
      | 'NinetyMinutes' 
      | 'SixtyMinutes' 
      | 'ThirtyMinutes' 
      | 'FifteenMinutes';

export type TabVisibility = 'Hidden' 
      | 'DefaultOff' 
      | 'DefaultOn';

export type ID = string;

export type StatusCode = 'ALERT_NOTIFICATION_LIMIT_EXCEEDED' 
      | 'ALL_OR_NONE_OPERATION_ROLLED_BACK' 
      | 'ALREADY_APPLIED' 
      | 'ALREADY_IN_PROCESS' 
      | 'ALREADY_REDEEMED_VOUCHER' 
      | 'APEX_DATA_ACCESS_RESTRICTION' 
      | 'APEX_FAILED' 
      | 'APPLICATION_ALREADY_EXISTS' 
      | 'ASSIGNEE_TYPE_REQUIRED' 
      | 'ATTRIBUTE_DEFINITION_LIMIT_EXCEEDED' 
      | 'AURA_COMPILE_ERROR' 
      | 'AUTH_PROVIDER_NEEDS_AUTH' 
      | 'AUTH_PROVIDER_NOT_FOUND' 
      | 'B2B_SEARCH_ADMIN_ERROR' 
      | 'BAD_CUSTOM_ENTITY_PARENT_DOMAIN' 
      | 'BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED' 
      | 'BLOCKED_EXCLUSIVE' 
      | 'CANNOT_CASCADE_PRODUCT_ACTIVE' 
      | 'CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD' 
      | 'CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD' 
      | 'CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE' 
      | 'CANNOT_DEACTIVATE_DIVISION' 
      | 'CANNOT_DELETE_GLOBAL_ACTION_LIST' 
      | 'CANNOT_DELETE_LAST_DATED_CONVERSION_RATE' 
      | 'CANNOT_DELETE_MANAGED_OBJECT' 
      | 'CANNOT_DISABLE_LAST_ADMIN' 
      | 'CANNOT_ENABLE_IP_RESTRICT_REQUESTS' 
      | 'CANNOT_EXECUTE_FLOW_TRIGGER' 
      | 'CANNOT_FREEZE_SELF' 
      | 'CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY' 
      | 'CANNOT_MODIFY_MANAGED_OBJECT' 
      | 'CANNOT_PASSWORD_LOCKOUT' 
      | 'CANNOT_POST_TO_ARCHIVED_GROUP' 
      | 'CANNOT_RENAME_APEX_REFERENCED_FIELD' 
      | 'CANNOT_RENAME_APEX_REFERENCED_OBJECT' 
      | 'CANNOT_RENAME_REFERENCED_FIELD' 
      | 'CANNOT_RENAME_REFERENCED_OBJECT' 
      | 'CANNOT_REPARENT_RECORD' 
      | 'CANNOT_UPDATE_CONVERTED_LEAD' 
      | 'CANNOT_UPDATE_IS_THIRD_PARTY' 
      | 'CANNOT_UPDATE_PAYMENT_METHOD_SET' 
      | 'CANT_DISABLE_CORP_CURRENCY' 
      | 'CANT_UNSET_CORP_CURRENCY' 
      | 'CART_DELIVERY_GROUP_NOT_FOUND' 
      | 'CART_ITEM_NOT_FOUND' 
      | 'CART_NOT_FOUND' 
      | 'CHECKOUT_CONFLICT' 
      | 'CHECKOUT_EXPIRED' 
      | 'CHECKOUT_INVALIDATED' 
      | 'CHECKOUT_LOCKED' 
      | 'CHECKOUT_NOT_FOUND' 
      | 'CHECKOUT_UNAUTHORIZED' 
      | 'CHILD_SHARE_FAILS_PARENT' 
      | 'CIRCULAR_DEPENDENCY' 
      | 'CLEAN_SERVICE_ERROR' 
      | 'CLM_INSUFFICIENT_ACCESS' 
      | 'CLM_RECORD_NOT_FOUND' 
      | 'CLONE_FIELD_INTEGRITY_EXCEPTION' 
      | 'CLONE_NOT_SUPPORTED' 
      | 'CMS_FOLDER_ITEM_MOVE_FAILED' 
      | 'COLLISION_DETECTED' 
      | 'COMMERCE_SEARCH_INDEXING_SYSTEM_ERROR' 
      | 'COMMERCE_SEARCH_MQ_ERROR' 
      | 'COMMERCE_SEARCH_PROVIDER_LIMIT_EXCEEDED' 
      | 'COMMERCE_SEARCH_RESOURCE_NOT_FOUND' 
      | 'COMMERCIAL_CONTROL_ERROR' 
      | 'COMMUNITY_NOT_ACCESSIBLE' 
      | 'CONFLICT' 
      | 'CONFLICTING_ENVIRONMENT_HUB_MEMBER' 
      | 'CONFLICTING_SSO_USER_MAPPING' 
      | 'CONTENT_NOT_FOUND' 
      | 'CONTENT_SEARCH_NOT_ENABLED' 
      | 'CONTENT_TYPE_DISABLED_FOR_API' 
      | 'CONTENT_TYPE_NOT_FOUND' 
      | 'COUPON_REDEMPTION_LIMIT_EXCEEDED' 
      | 'CUSTOM_APEX_ERROR' 
      | 'CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED' 
      | 'CUSTOM_ENTITY_OR_FIELD_LIMIT' 
      | 'CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED' 
      | 'CUSTOM_INDEX_EXISTS' 
      | 'CUSTOM_LINK_LIMIT_EXCEEDED' 
      | 'CUSTOM_METADATA_LIMIT_EXCEEDED' 
      | 'CUSTOM_METADATA_REL_FIELD_MANAGEABILITY' 
      | 'CUSTOM_SETTINGS_LIMIT_EXCEEDED' 
      | 'CUSTOM_TAB_LIMIT_EXCEEDED' 
      | 'DATAASSESSMENT_CONFIG_ASSESSMENT_IN_PROGRESS_ERROR' 
      | 'DATAASSESSMENT_CONFIG_SERVICE_ERROR' 
      | 'DATACLOUDADDRESS_NO_RECORDS_FOUND' 
      | 'DATACLOUDADDRESS_PROCESSING_ERROR' 
      | 'DATACLOUDADDRESS_SERVER_ERROR' 
      | 'DATA_MAPPING_NOT_FOUND' 
      | 'DATA_MAPPING_SCHEMA_NOT_FOUND' 
      | 'DATA_TRANSFER_RECORD_LIMIT_EXCEEDED' 
      | 'DATA_TYPE_NOT_SUPPORTED' 
      | 'DATE_OUT_OF_RANGE' 
      | 'DELETE_FAILED' 
      | 'DELETE_NOT_ALLOWED' 
      | 'DELETE_OPERATION_TOO_LARGE' 
      | 'DELETE_REQUIRED_ON_CASCADE' 
      | 'DEPENDENCY_EXISTS' 
      | 'DUPLICATES_DETECTED' 
      | 'DUPLICATE_CASE_SOLUTION' 
      | 'DUPLICATE_COMM_NICKNAME' 
      | 'DUPLICATE_CUSTOM_ENTITY_DEFINITION' 
      | 'DUPLICATE_CUSTOM_TAB_MOTIF' 
      | 'DUPLICATE_DEVELOPER_NAME' 
      | 'DUPLICATE_EXTERNAL_ID' 
      | 'DUPLICATE_MASTER_LABEL' 
      | 'DUPLICATE_SENDER_DISPLAY_NAME' 
      | 'DUPLICATE_USERNAME' 
      | 'DUPLICATE_VALUE' 
      | 'EMAIL_ADDRESS_BOUNCED' 
      | 'EMAIL_EXTERNAL_TRANSPORT_CONNECTION_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_PERMISSION_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_TOKEN_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_TOO_LARGE_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_TOO_MANY_REQUESTS_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_UNKNOWN_ERROR' 
      | 'EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR' 
      | 'EMAIL_OPTED_OUT' 
      | 'EMAIL_TEMPLATE_FORMULA_ERROR' 
      | 'EMAIL_TEMPLATE_MERGEFIELD_ACCESS_ERROR' 
      | 'EMAIL_TEMPLATE_MERGEFIELD_ERROR' 
      | 'EMAIL_TEMPLATE_MERGEFIELD_VALUE_ERROR' 
      | 'EMAIL_TEMPLATE_PROCESSING_ERROR' 
      | 'EMPTY_CATALOG' 
      | 'EMPTY_INGESTION_JOB' 
      | 'EMPTY_SCONTROL_FILE_NAME' 
      | 'ENHANCED_EMAIL_TEMPLATE_COMPILATION_ERROR' 
      | 'ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE' 
      | 'ENTITY_IS_ARCHIVED' 
      | 'ENTITY_IS_DELETED' 
      | 'ENTITY_IS_LOCKED' 
      | 'ENTITY_SAVE_ERROR' 
      | 'ENTITY_SAVE_VALIDATION_ERROR' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN' 
      | 'ERROR_CALCULATING_EXPIRY_DATE' 
      | 'ERROR_IN_MAILER' 
      | 'EXCEEDED_MAX_SEMIJOIN_SUBSELECTS_WRITE' 
      | 'EXCHANGE_WEB_SERVICES_URL_INVALID' 
      | 'EXTERNAL_RESOURCE_FORBIDDEN' 
      | 'FAILED_ACTIVATION' 
      | 'FAILED_DUE_TO_OTHER_INPUTS' 
      | 'FAILED_TO_RESOLVE_MAPPING' 
      | 'FAILED_TO_RESOLVE_SCHEMA_INFORMATION' 
      | 'FIELD_CUSTOM_VALIDATION_EXCEPTION' 
      | 'FIELD_FILTER_VALIDATION_EXCEPTION' 
      | 'FIELD_INTEGRITY_EXCEPTION' 
      | 'FIELD_KEYWORD_LIST_MATCH_LIMIT' 
      | 'FIELD_MAPPING_ERROR' 
      | 'FIELD_MODERATION_RULE_BLOCK' 
      | 'FIELD_NOT_UPDATABLE' 
      | 'FILE_EXTENSION_NOT_ALLOWED' 
      | 'FILE_SIZE_LIMIT_EXCEEDED' 
      | 'FILTERED_LOOKUP_LIMIT_EXCEEDED' 
      | 'FIND_DUPLICATES_ERROR' 
      | 'FLOW_EXCEPTION' 
      | 'FUNCTIONALITY_NOT_ENABLED' 
      | 'GET_EINSTEIN_TENANT_ERROR' 
      | 'GUEST_INSUFFICIENT_ACCESS' 
      | 'HAS_PUBLIC_REFERENCES' 
      | 'HTML_FILE_UPLOAD_NOT_ALLOWED' 
      | 'IAS_AM_AUTH_BAD_REQUEST' 
      | 'IAS_AM_AUTH_UNAUTHORIZED' 
      | 'IAS_INVALID_AUTH' 
      | 'IAS_INVALID_REQUEST_PARAMETER' 
      | 'IAS_RECORD_DOES_NOT_EXIST' 
      | 'IAS_TENANT_NOT_PROVISIONED' 
      | 'IAS_UNCOMMITTED_WORK' 
      | 'IMAGE_TOO_LARGE' 
      | 'INACTIVE_OWNER_OR_USER' 
      | 'INACTIVE_RULE_ERROR' 
      | 'INDEX_ITEM_LIMIT_EXCEEDED' 
      | 'INDEX_PAYLOAD_NOT_FOUND' 
      | 'INGESTION_JOB_RECORDS_LIMIT_EXCEEDED' 
      | 'INGESTION_TOTAL_FILE_SIZE_LIMIT_EXCEEDED' 
      | 'INPUTPARAM_INCOMPATIBLE_DATATYPE' 
      | 'INSERT_UPDATE_DELETE_NOT_ALLOWED_DURING_MAINTENANCE' 
      | 'INSUFFICIENT_ACCESS' 
      | 'INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY' 
      | 'INSUFFICIENT_ACCESS_OR_READONLY' 
      | 'INSUFFICIENT_ACCESS_TO_INSIGHTSEXTERNALDATA' 
      | 'INSUFFICIENT_BALANCE' 
      | 'INSUFFICIENT_BENEFIT_REMAINING' 
      | 'INSUFFICIENT_CREDITS' 
      | 'INTEGRATION_CANCELLED' 
      | 'INTERNAL_ERROR' 
      | 'INVALID_ACCESS_LEVEL' 
      | 'INVALID_ACCESS_TOKEN' 
      | 'INVALID_ACCOUNT' 
      | 'INVALID_ACTION_VERSION' 
      | 'INVALID_API_INPUT' 
      | 'INVALID_ARGUMENT_TYPE' 
      | 'INVALID_ASSIGNEE_TYPE' 
      | 'INVALID_ASSIGNMENT_RULE' 
      | 'INVALID_AUTH_HEADER' 
      | 'INVALID_BATCH_OPERATION' 
      | 'INVALID_BUSINESS_HOURS_NAME' 
      | 'INVALID_CATEGORY_NETWORK' 
      | 'INVALID_CHECKOUT_INPUT' 
      | 'INVALID_CONTACT' 
      | 'INVALID_CONTENT_TYPE' 
      | 'INVALID_CREDIT_CARD_INFO' 
      | 'INVALID_CROSS_REFERENCE_KEY' 
      | 'INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD' 
      | 'INVALID_CURRENCY_CONV_RATE' 
      | 'INVALID_CURRENCY_CORP_RATE' 
      | 'INVALID_CURRENCY_ISO' 
      | 'INVALID_DATASET_REFERENCE_INPUT' 
      | 'INVALID_DATA_CATEGORY_GROUP_REFERENCE' 
      | 'INVALID_DATA_URI' 
      | 'INVALID_EBV_OPERATION' 
      | 'INVALID_EMAIL_ADDRESS' 
      | 'INVALID_EMPTY_KEY_OWNER' 
      | 'INVALID_ENTITY_FOR_MATCH_ENGINE_ERROR' 
      | 'INVALID_ENTITY_FOR_MATCH_OPERATION_ERROR' 
      | 'INVALID_ENTITY_FOR_UPSERT' 
      | 'INVALID_ENVIRONMENT_HUB_MEMBER' 
      | 'INVALID_EVENT_DELIVERY' 
      | 'INVALID_EVENT_INPUT' 
      | 'INVALID_EVENT_SUBSCRIPTION' 
      | 'INVALID_EXTENSION_ID' 
      | 'INVALID_EXTERNAL_ID_FIELD_NAME' 
      | 'INVALID_FIELD' 
      | 'INVALID_FIELD_FOR_INSERT_UPDATE' 
      | 'INVALID_FIELD_WHEN_USING_TEMPLATE' 
      | 'INVALID_FILTER_ACTION' 
      | 'INVALID_GOOGLE_DOCS_URL' 
      | 'INVALID_ID_FIELD' 
      | 'INVALID_INET_ADDRESS' 
      | 'INVALID_INPUT' 
      | 'INVALID_INPUT_FORMAT' 
      | 'INVALID_KEY_FIELD_INPUT' 
      | 'INVALID_LINEITEM_CLONE_STATE' 
      | 'INVALID_MARKUP' 
      | 'INVALID_MASTER_OR_TRANSLATED_SOLUTION' 
      | 'INVALID_MERCHANT_ACCOUNT_MODE' 
      | 'INVALID_MERCHANT_ACCOUNT_MODE_OR_STATUS' 
      | 'INVALID_MERGE_RECORD' 
      | 'INVALID_MESSAGE_ID_REFERENCE' 
      | 'INVALID_NAMESPACE_PREFIX' 
      | 'INVALID_OAUTH_URL' 
      | 'INVALID_OPERATION' 
      | 'INVALID_OPERATOR' 
      | 'INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST' 
      | 'INVALID_OWNER' 
      | 'INVALID_PACKAGE_LICENSE' 
      | 'INVALID_PACKAGE_VERSION' 
      | 'INVALID_PARTNER_NETWORK_STATUS' 
      | 'INVALID_PAYLOAD_VERSION' 
      | 'INVALID_PERSON_ACCOUNT_OPERATION' 
      | 'INVALID_PROFILE' 
      | 'INVALID_PROMOTION' 
      | 'INVALID_PROVIDER_TYPE' 
      | 'INVALID_QUERY_KEY' 
      | 'INVALID_QUERY_LOCATOR' 
      | 'INVALID_QUERY_VALUE' 
      | 'INVALID_READ_ONLY_USER_DML' 
      | 'INVALID_RECEIVEDDOCUMENTID_ATTACHMENT' 
      | 'INVALID_RECORD_ATTRIBUTE_VALUE' 
      | 'INVALID_RECORD_TYPE' 
      | 'INVALID_REFRESH_TOKEN' 
      | 'INVALID_REORDER_PORTAL_RECORD_ASSOCIATION' 
      | 'INVALID_REQUEST_STATE' 
      | 'INVALID_RUNTIME_VALUE' 
      | 'INVALID_SAVE_AS_ACTIVITY_FLAG' 
      | 'INVALID_SCS_INBOUND_USER' 
      | 'INVALID_SEARCH_PROVIDER_REQUEST' 
      | 'INVALID_SESSION_ID' 
      | 'INVALID_SETUP_OWNER' 
      | 'INVALID_SIGNUP_COUNTRY' 
      | 'INVALID_SIGNUP_OPTION' 
      | 'INVALID_SITE_DELETE_EXCEPTION' 
      | 'INVALID_SITE_FILE_IMPORTED_EXCEPTION' 
      | 'INVALID_SITE_FILE_TYPE_EXCEPTION' 
      | 'INVALID_SOURCE_OBJECT_ID' 
      | 'INVALID_STATUS' 
      | 'INVALID_SUBDOMAIN' 
      | 'INVALID_TARGET_OBJECT_NAME' 
      | 'INVALID_TEXT_REPRESENTATION' 
      | 'INVALID_TYPE' 
      | 'INVALID_TYPE_FOR_OPERATION' 
      | 'INVALID_TYPE_ON_FIELD_IN_RECORD' 
      | 'INVALID_UNMERGE_RECORD' 
      | 'INVALID_USERID' 
      | 'INVALID_USER_OBJECT' 
      | 'IP_RANGE_LIMIT_EXCEEDED' 
      | 'ITEM_NOT_FOUND' 
      | 'JIGSAW_IMPORT_LIMIT_EXCEEDED' 
      | 'LICENSE_LIMIT_EXCEEDED' 
      | 'LIGHT_PORTAL_USER_EXCEPTION' 
      | 'LIMIT_EXCEEDED' 
      | 'LIST_PRICE_NOT_FOUND' 
      | 'MALFORMED_ID' 
      | 'MANAGER_NOT_DEFINED' 
      | 'MASSMAIL_RETRY_LIMIT_EXCEEDED' 
      | 'MASS_MAIL_LIMIT_EXCEEDED' 
      | 'MATCH_DEFINITION_ERROR' 
      | 'MATCH_OPERATION_ERROR' 
      | 'MATCH_OPERATION_INVALID_ENGINE_ERROR' 
      | 'MATCH_OPERATION_INVALID_RULE_ERROR' 
      | 'MATCH_OPERATION_MISSING_ENGINE_ERROR' 
      | 'MATCH_OPERATION_MISSING_OBJECT_TYPE_ERROR' 
      | 'MATCH_OPERATION_MISSING_OPTIONS_ERROR' 
      | 'MATCH_OPERATION_MISSING_RULE_ERROR' 
      | 'MATCH_OPERATION_UNKNOWN_RULE_ERROR' 
      | 'MATCH_OPERATION_UNSUPPORTED_VERSION_ERROR' 
      | 'MATCH_PRECONDITION_FAILED' 
      | 'MATCH_PRECONDITION_REQUIRED' 
      | 'MATCH_RUNTIME_ERROR' 
      | 'MATCH_SERVICE_ERROR' 
      | 'MATCH_SERVICE_TIMED_OUT' 
      | 'MATCH_SERVICE_UNAVAILABLE_ERROR' 
      | 'MAXIMUM_CCEMAILS_EXCEEDED' 
      | 'MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED' 
      | 'MAXIMUM_HIERARCHY_CHILDREN_REACHED' 
      | 'MAXIMUM_HIERARCHY_LEVELS_REACHED' 
      | 'MAXIMUM_HIERARCHY_TREE_SIZE_REACHED' 
      | 'MAXIMUM_SIZE_OF_ATTACHMENT' 
      | 'MAXIMUM_SIZE_OF_DOCUMENT' 
      | 'MAX_ACTIONS_PER_RULE_EXCEEDED' 
      | 'MAX_ACTIVE_RULES_EXCEEDED' 
      | 'MAX_APPROVAL_STEPS_EXCEEDED' 
      | 'MAX_DEPTH_IN_FLOW_EXECUTION' 
      | 'MAX_FORMULAS_PER_RULE_EXCEEDED' 
      | 'MAX_LIMIT_EXCEEDED' 
      | 'MAX_LOCALES_EXCEEDED' 
      | 'MAX_RULES_EXCEEDED' 
      | 'MAX_RULE_ENTRIES_EXCEEDED' 
      | 'MAX_TASK_DESCRIPTION_EXCEEEDED' 
      | 'MAX_TM_RULES_EXCEEDED' 
      | 'MAX_TM_RULE_ITEMS_EXCEEDED' 
      | 'MAX_TRIGGERS_EXCEEDED' 
      | 'MERGE_FAILED' 
      | 'METADATA_FIELD_UPDATE_ERROR' 
      | 'METHOD_NOT_ALLOWED' 
      | 'MISMATCHING_TYPES' 
      | 'MISSING_ARGUMENT' 
      | 'MISSING_OMNI_PROCESS_ID' 
      | 'MISSING_PAY_NOW_SITE_URL_ORG_VALUE' 
      | 'MISSING_RECEIVEDDOCUMENTID_ATTACHMENT' 
      | 'MISSING_RECORD' 
      | 'MIXED_DML_OPERATION' 
      | 'MODEL_NOT_ACTIVE' 
      | 'MULTIPLE_CONTENT_FOUND' 
      | 'MULTIPLE_VOUCHERS' 
      | 'NONUNIQUE_SHIPPING_ADDRESS' 
      | 'NOT_FOUND' 
      | 'NOT_RECOVERABLE_SEARCH_PROVIDER_ERROR' 
      | 'NO_ACCESS_TOKEN' 
      | 'NO_ACCESS_TOKEN_FROM_REFRESH' 
      | 'NO_APPLICABLE_PROCESS' 
      | 'NO_ATTACHMENT_PERMISSION' 
      | 'NO_AUTH_PROVIDER' 
      | 'NO_BUSINESS_HOURS_FOUND' 
      | 'NO_INACTIVE_DIVISION_MEMBERS' 
      | 'NO_MASS_MAIL_PERMISSION' 
      | 'NO_MESSAGE_TYPE_MESSAGES' 
      | 'NO_PARTNER_PERMISSION' 
      | 'NO_REFRESH_TOKEN' 
      | 'NO_SEARCH_ATTRIBUTES' 
      | 'NO_SINGLE_MAIL_PERMISSION' 
      | 'NO_SORT_PRICEBOOK_ASSOCIATED_ERROR' 
      | 'NO_SUCH_USER_EXISTS' 
      | 'NO_TOKEN_ENDPOINT' 
      | 'NUMBER_OUTSIDE_VALID_RANGE' 
      | 'NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED' 
      | 'OCR_INVALID_REQUEST' 
      | 'OPERATION_ENQUEUED' 
      | 'OPERATION_WITH_CALLBACK_ENQUEUED' 
      | 'OPTED_OUT_OF_MASS_MAIL' 
      | 'OP_WITH_INVALID_USER_TYPE_EXCEPTION' 
      | 'ORCHESTRATION_INVALID' 
      | 'ORDER_MANAGEMENT_ACTION_NOT_ALLOWED' 
      | 'ORDER_MANAGEMENT_INVALID_RECORD' 
      | 'ORDER_MANAGEMENT_RECORD_EXISTS' 
      | 'ORDER_MANAGEMENT_RECORD_NOT_FOUND' 
      | 'ORG_SETTING_REQUIRED' 
      | 'PACKAGE_DISABLED' 
      | 'PACKAGE_LICENSE_REQUIRED' 
      | 'PACKAGING_API_INSTALL_FAILED' 
      | 'PACKAGING_API_UNINSTALL_FAILED' 
      | 'PALI_INVALID_ACTION_ID' 
      | 'PALI_INVALID_ACTION_NAME' 
      | 'PALI_INVALID_ACTION_TYPE' 
      | 'PAL_INVALID_ASSISTANT_RECOMMENDATION_TYPE_ID' 
      | 'PAL_INVALID_ENTITY_ID' 
      | 'PAL_INVALID_FLEXIPAGE_ID' 
      | 'PAL_INVALID_LAYOUT_ID' 
      | 'PAL_INVALID_PARAMETERS' 
      | 'PARAMETER_TOO_LARGE' 
      | 'PARTICIPANT_RELATIONSHIP_EXISTS' 
      | 'PAYLOAD_SIZE_EXCEEDED' 
      | 'PA_API_EXCEPTION' 
      | 'PA_AXIS_FAULT' 
      | 'PA_INVALID_ID_EXCEPTION' 
      | 'PA_NO_ACCESS_EXCEPTION' 
      | 'PA_NO_DATA_FOUND_EXCEPTION' 
      | 'PA_URI_SYNTAX_EXCEPTION' 
      | 'PA_VISIBLE_ACTIONS_FILTER_ORDERING_EXCEPTION' 
      | 'PENDING_COMMIT' 
      | 'PICKLIST_INACTIVE_VALUES_EXCEEDED' 
      | 'PLATFORM_EVENT_ENCRYPTION_ERROR' 
      | 'PLATFORM_EVENT_PUBLISHING_UNAVAILABLE' 
      | 'PLATFORM_EVENT_PUBLISH_FAILED' 
      | 'PORTAL_NO_ACCESS' 
      | 'PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT' 
      | 'PORTAL_USER_CREATION_RESTRICTED_WITH_ENCRYPTION' 
      | 'PRICE_NOT_FOUND' 
      | 'PRIVATE_CONTACT_ON_ASSET' 
      | 'PROCESSING_HALTED' 
      | 'PROGRAM_PROGRESS_NOT_ACTIVE' 
      | 'PROMOTION_NOT_FOUND' 
      | 'QA_INVALID_CREATE_FEED_ITEM' 
      | 'QA_INVALID_SUCCESS_MESSAGE' 
      | 'QUERY_REFINEMENT_VALUE_LIMIT_EXCEEDED' 
      | 'QUERY_TIMEOUT' 
      | 'QUERY_TOKEN_COUNT_LIMIT_EXCEEDED' 
      | 'QUICK_ACTION_LIST_ITEM_NOT_ALLOWED' 
      | 'QUICK_ACTION_LIST_NOT_ALLOWED' 
      | 'RECORD_CREATION_FAILED' 
      | 'RECORD_IN_USE_BY_WORKFLOW' 
      | 'RECORD_MISSING_REQUIRED_FIELD' 
      | 'RECORD_TYPE_LIMIT_EXCEEDED' 
      | 'RECORD_UPDATE_FAILED' 
      | 'RECOVERABLE_SEARCH_PROVIDER_ERROR' 
      | 'REFRESH_FAILED' 
      | 'RELATED_ENTITY_FILTER_VALIDATION_EXCEPTION' 
      | 'REL_FIELD_BAD_ACCESSIBILITY' 
      | 'REPUTATION_MINIMUM_NUMBER_NOT_REACHED' 
      | 'REQUEST_RUNNING_TOO_LONG' 
      | 'REQUIRED_FEATURE_MISSING' 
      | 'REQUIRED_FIELD_MISSING' 
      | 'REQUIRE_CONNECTED_APP_SCS' 
      | 'REQUIRE_CONNECTED_APP_SESSION_SCS' 
      | 'REQUIRE_RUNAS_USER' 
      | 'RESOURCE_NOT_AVAILABLE' 
      | 'RETRIEVE_EXCHANGE_ATTACHMENT_FAILED' 
      | 'RETRIEVE_EXCHANGE_EMAIL_FAILED' 
      | 'RETRIEVE_EXCHANGE_EVENT_FAILED' 
      | 'RETRIEVE_GOOGLE_EMAIL_FAILED' 
      | 'RETRIEVE_GOOGLE_EVENT_FAILED' 
      | 'RETRIEVE_USER_CONFIG_ERROR' 
      | 'ROUTES_EVALUATION_LIMIT_EXCEEDED' 
      | 'SALESFORCE_INBOX_TRANSPORT_CONNECTION_ERROR' 
      | 'SALESFORCE_INBOX_TRANSPORT_INVALID_INPUT_ERROR' 
      | 'SALESFORCE_INBOX_TRANSPORT_TOKEN_ERROR' 
      | 'SALESFORCE_INBOX_TRANSPORT_UNKNOWN_ERROR' 
      | 'SCHEMA_OBJECT_NOT_FOUND' 
      | 'SCREEN_POP_REQUIRED_INPUT_MISSING' 
      | 'SEARCH_INCLUDE_RULES_MAX_RULE_DEFINITION_LIMIT_EXCEEDED' 
      | 'SEARCH_INCLUDE_RULES_MIN_RULE_DEFINITION_NOT_MET' 
      | 'SEARCH_PROVIDER_PATH_LIMIT_EXCEEDED' 
      | 'SEARCH_PROVIDER_REQUEST_RATE_EXCEEDED' 
      | 'SEGMENT_COUNT_LIMIT_EXCEEDED' 
      | 'SELF_REFERENCE_FROM_FLOW' 
      | 'SELF_REFERENCE_FROM_TRIGGER' 
      | 'SERVICE_UNAVAILABLE' 
      | 'SESSION_EXPIRED' 
      | 'SESSION_INVALIDATED' 
      | 'SHARE_NEEDED_FOR_CHILD_OWNER' 
      | 'SINGLE_EMAIL_LIMIT_EXCEEDED' 
      | 'SLACK_API_ERROR' 
      | 'SOCIAL_ACCOUNT_NOT_FOUND' 
      | 'SOCIAL_ACTION_INVALID' 
      | 'SOCIAL_PERSONA_NOT_FOUND' 
      | 'SOCIAL_POST_INVALID' 
      | 'SOCIAL_POST_NOT_FOUND' 
      | 'SPECIFICATION_GENERATION_EXCEPTION' 
      | 'STANDARD_PRICE_NOT_DEFINED' 
      | 'STORAGE_LIMIT_EXCEEDED' 
      | 'STRING_TOO_LONG' 
      | 'SUBDOMAIN_IN_USE' 
      | 'TABSET_LIMIT_EXCEEDED' 
      | 'TEMPLATE_NOT_ACTIVE' 
      | 'TEMPLATE_NOT_FOUND' 
      | 'TERMS_OF_SERVICE_UNREAD' 
      | 'TERRITORY_REALIGN_IN_PROGRESS' 
      | 'TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET' 
      | 'TEXT_TO_PICKLIST_VALUES_EXCEEDED' 
      | 'TOO_MANY_APEX_REQUESTS' 
      | 'TOO_MANY_ENUM_VALUE' 
      | 'TOO_MANY_JOBS' 
      | 'TOO_MANY_POSSIBLE_USERS_EXIST' 
      | 'TRANSFER_REQUIRES_READ' 
      | 'TXN_SECURITY_NO_ACCESS' 
      | 'UISF_ENTITY_QUERY_FAILED' 
      | 'UISF_NO_MAPPINGS_FOUND' 
      | 'UISF_TOKEN_NOT_FOUND' 
      | 'UISF_UNKNOWN_EXCEPTION' 
      | 'UISF_USER_MAPPING_FAILED' 
      | 'UNABLE_TO_LOCK_ROW' 
      | 'UNAUTHORIZED_SEARCH_PROVIDER_REQUEST' 
      | 'UNAVAILABLE_RECORDTYPE_EXCEPTION' 
      | 'UNAVAILABLE_REF' 
      | 'UNDEFINED_MAPPING_DEFINITION' 
      | 'UNDELETE_FAILED' 
      | 'UNKNOWN_EXCEPTION' 
      | 'UNKNOWN_TOKEN_ERROR' 
      | 'UNPROCESSABLE_REQUEST' 
      | 'UNQUALIFIED_CART' 
      | 'UNRESOLVABLE_PAY_NOW_WEBSTORE' 
      | 'UNSAFE_HTML_CONTENT' 
      | 'UNSPECIFIED_EMAIL_ADDRESS' 
      | 'UNSUPPORTED_APEX_TRIGGER_OPERATON' 
      | 'UNSUPPORTED_MODE' 
      | 'UNSUPPORTED_PAYMENT_GATEWAY_TYPE' 
      | 'UNSUPPORTED_PAYMENT_REQUEST_TYPE' 
      | 'UNSUPPORTED_SITE' 
      | 'UNSUPPORTED_SITE_FILE_IMPORTED_EXCEPTION' 
      | 'UNSUPPORTED_SOCIAL_PROVIDER' 
      | 'UNVERIFIED_SENDER_ADDRESS' 
      | 'UPDATE_GOOGLE_EMAIL_LABEL_FAILED' 
      | 'USER_OWNS_PORTAL_ACCOUNT_EXCEPTION' 
      | 'USER_WITHOUT_WEM_PERMISSION' 
      | 'USER_WITH_APEX_SHARES_EXCEPTION' 
      | 'VARIANT_NOT_FOUND' 
      | 'VF_COMPILE_ERROR' 
      | 'VOICE_CAPACITY_ERROR' 
      | 'WEBLINK_SIZE_LIMIT_EXCEEDED' 
      | 'WEBLINK_URL_INVALID' 
      | 'WEM_SEGMENTS_CAN_NOT_HAVE_NON_ACTIVE_SEGMENT_TYPE' 
      | 'WEM_SHIFT_SEGMENT_TIME_IS_OUTSIDE_OF_THE_SHIFT_DURATION' 
      | 'WEM_USER_NOT_ORG_ADMIN' 
      | 'WORKSPACE_NOT_FOUND' 
      | 'WRONG_CONTROLLER_TYPE' 
      | 'XCLEAN_DJ_MATCH_IGNORABLE_ERROR' 
      | 'XCLEAN_DJ_MATCH_INTERNAL_DJ_ERROR' 
      | 'XCLEAN_DJ_MATCH_NON_RETRIABLE_ERROR' 
      | 'XCLEAN_DJ_MATCH_RETRIABLE_ERROR' 
      | 'XCLEAN_DJ_MATCH_UNKNOWN_ERROR' 
      | 'XCLEAN_UNEXPECTED_ERROR';

export type ExtendedErrorCode = 'ACTIONCALL_DUPLICATE_INPUT_PARAM' 
      | 'ACTIONCALL_DUPLICATE_OUTPUT_PARAM' 
      | 'ACTIONCALL_INPUT_VALIDATION_FAILED' 
      | 'ACTIONCALL_INVALID_INPUT_PARAM_NAME' 
      | 'ACTIONCALL_MISSING_NAME' 
      | 'ACTIONCALL_MISSING_REQUIRED_PARAM' 
      | 'ACTIONCALL_MISSING_REQUIRED_TYPE' 
      | 'ACTIONCALL_NOT_FOUND_WITH_NAME_AND_TYPE' 
      | 'ACTIONCALL_NOT_SUPPORTED_FOR_PROCESSTYPE' 
      | 'ACTIONCALL_NOT_SUPPORTED_FOR_TRIGGERTYPE' 
      | 'ACTIONCALL_TRANSACTION_MODEL_NOT_ALLOWED' 
      | 'ACTIONCALL_TRANSACTION_MODEL_NOT_SUPPORTED' 
      | 'ACTIONCALL_TRIGGERING_RECORD_MISMATCHED_OBJECTTYPE' 
      | 'ACTION_CALL_INPUT_SETUPREFTYPE_REQUIRES_SETUPREFVALUE' 
      | 'ACTION_CALL_INVALID_CONFIGURATION' 
      | 'ACTION_CALL_INVALID_INPUT_PARAM' 
      | 'ACTION_CALL_INVALID_OUTPUT_PARAM' 
      | 'ACTION_INPUT_PARAMETER_REQUIRES_ID_TYPE_FOR_SETUP_REFERENCE' 
      | 'ACTION_INPUT_PARAMETER_TYPE_AND_SETUP_REFERENCE_TYPE_DO_NOT_MATCH' 
      | 'ACTION_TYPE_REQUIRED_FOR_STEP' 
      | 'ADDING_ATTACHMENT_QUESTIONS_ADDITION_TO_EXISTING_SURVEY' 
      | 'APEXCALLOUT_INPUT_DUPLICATE' 
      | 'APEXCALLOUT_INPUT_INCOMPATIBLE_DATATYPE' 
      | 'APEXCALLOUT_INVALID' 
      | 'APEXCALLOUT_MISSING_CLASSNAME' 
      | 'APEXCALLOUT_NOT_FOUND' 
      | 'APEXCALLOUT_OUTPUT_INCOMPATIBLE_DATATYPE' 
      | 'APEXCALLOUT_OUTPUT_INVALID' 
      | 'APEXCALLOUT_REQUIRED_INPUT_MISSING' 
      | 'APEXCLASS_MISSING_INTERFACE' 
      | 'APEX_CLASS_VARIABLE_NOT_FOUND' 
      | 'ASSIGNEE_AUTOPROC' 
      | 'ASSIGNEE_REQUIRED_WHEN_SPECIFYING_RUN_AS_USER' 
      | 'ASSIGNEE_USER_USERNAME' 
      | 'ASSIGNMENTITEM_ELEMENT_MISSING_DATATYPE' 
      | 'ASSIGNMENTITEM_ELEMENT_NOT_SUPPORTED' 
      | 'ASSIGNMENTITEM_FIELD_INVALID_DATATYPE' 
      | 'ASSIGNMENTITEM_FIELD_INVALID_DATATYPE_WITH_ELEMENT' 
      | 'ASSIGNMENTITEM_INCOMPATIBLE_DATATYPES' 
      | 'ASSIGNMENTITEM_INVALID_ASSIGNTOREFERENCE' 
      | 'ASSIGNMENTITEM_INVALID_COLLECTION' 
      | 'ASSIGNMENTITEM_INVALID_DATATYPE_IN_ELEMENT' 
      | 'ASSIGNMENTITEM_INVALID_ELEMENTREFERENCE' 
      | 'ASSIGNMENTITEM_INVALID_MERGE_FIELD' 
      | 'ASSIGNMENTITEM_INVALID_OPERATOR' 
      | 'ASSIGNMENTITEM_INVALID_REFERENCE' 
      | 'ASSIGNMENTITEM_INVALID_VALUE' 
      | 'ASSIGNMENTITEM_LEFT_DATATYPE_INVALID_FOR_OPERATOR' 
      | 'ASSIGNMENTITEM_MODIFIES_NONVARIABLE' 
      | 'ASSIGNMENTITEM_NONEXISTENT_REFERENCE' 
      | 'ASSIGNMENTITEM_REQUIRED' 
      | 'ASSIGNMENTITEM_RIGHT_DATATYPE_INVALID_FOR_OPERATOR' 
      | 'AUTOLAUNCHED_CHOICELOOKUP_NOT_SUPPORTED' 
      | 'AUTOLAUNCHED_CHOICE_NOT_SUPPORTED' 
      | 'AUTOLAUNCHED_SCREEN_NOT_SUPPORTED' 
      | 'AUTOLAUNCHED_STEP_NOT_SUPPORTED' 
      | 'AUTOLAUNCHED_SUBFLOW_INCOMPATIBLE_FLOWTYPE' 
      | 'AUTOLAUNCHED_WAIT_NOT_SUPPORTED' 
      | 'BEFORE_SAVE_FLOW_RECORD_UPDATE_CANNOT_HAVE_FAULT_CONNECTOR' 
      | 'BEFORE_SAVE_FLOW_RECORD_UPDATE_INVALID_REFERENCE' 
      | 'BEFORE_SAVE_FLOW_RECORD_UPDATE_RELATED_RECORD_REQUIRES_INPUTASSIGNMENTS' 
      | 'BEFORE_SAVE_FLOW_RECORD_UPDATE_REQUIRES_INPUTASSIGNMENTS' 
      | 'BOTH_START_NODE_AND_REFERENCE_FOUND' 
      | 'CHOICEFIELD_DEFAULT_CHOICE_NOT_FOUND' 
      | 'CHOICEFIELD_MISSING_CHOICE' 
      | 'CHOICELOOKUP_DATATYPE_INCOMPATIBLE_WITH_CHOICEFIELD' 
      | 'CHOICE_DATATYPE_INCOMPATIBLE_WITH_CHOICEFIELD' 
      | 'CHOICE_LOOKUP_COLLECTION_REFERENCE_NULL' 
      | 'CHOICE_LOOKUP_INVALID_COLLECTION_REFERENCE' 
      | 'CHOICE_NOT_SUPPORTED_FOR_SCREENFIELDTYPE' 
      | 'CHOICE_USED_MULTIPLE_TIMES_IN_SAME_FIELD' 
      | 'COLLECTION_PROCESSOR_DUPLICATE_MAPITEM' 
      | 'COLLECTION_PROCESSOR_INVALID_COLLECTION_REFERENCE' 
      | 'COLLECTION_PROCESSOR_INVALID_CONFIGURATION' 
      | 'COLLECTION_PROCESSOR_INVALID_OUTPUTSOBJECTTYPE' 
      | 'COLLECTION_PROCESSOR_MAX_SORT_FIELDS_LIMIT_EXCEEDED' 
      | 'COLLECTION_PROCESSOR_MISMATCHED_OBJECTTYPE' 
      | 'COLLECTION_PROCESSOR_MISSING_MAP' 
      | 'COLLECTION_PROCESSOR_MISSING_OUTPUTSOBJECTTYPE' 
      | 'COLLECTION_PROCESSOR_MISSING_PARAMETER' 
      | 'COLLECTION_PROCESSOR_MISSING_SORT' 
      | 'COLLECTION_PROCESSOR_NOT_SUPPORTED_FOR_API_VERSION' 
      | 'COLLECTION_PROCESSOR_REQUIRES_PERM' 
      | 'COLLECTION_PROCESSOR_SORT_FIELD_INVALID_FOR_OBJECT' 
      | 'COLLECTION_PROCESSOR_TYPE_NOT_SUPPORTED' 
      | 'COLLECTION_PROCESSOR_VARIABLE_NULL' 
      | 'CONDITIONAL_SCREENFIELD_VISIBILITY_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'CONDITIONAL_SCREEN_FIELD_VISIBILITY_NOT_SUPPORTED_FOR_SCREEN_FIELD' 
      | 'CONDITION_BUILDER_MISSING_FLOW_VARIABLE' 
      | 'CONDITION_BUILDER_MISSING_REQUIRED_PERMISSIONS' 
      | 'CONDITION_BUILDER_UNSUPPORTED_FLOW_VARIABLE' 
      | 'CONDITION_INVALID_LEFTOPERAND' 
      | 'CONDITION_LOGIC_EXCEEDS_LIMIT' 
      | 'CONDITION_LOGIC_INVALID' 
      | 'CONDITION_LOGIC_MISSING' 
      | 'CONDITION_MISSING_DATATYPE' 
      | 'CONDITION_MISSING_OPERATOR' 
      | 'CONDITION_OPERAND_DATATYPES_INCOMPATIBLE' 
      | 'CONDITION_OPERAND_INCOMPATIBLE_WITH_ELEMENT' 
      | 'CONDITION_OPERATOR_INCOMPATIBLE' 
      | 'CONDITION_REFERENCED_ELEMENT_NOT_FOUND' 
      | 'CONDITION_RIGHTOPERAND_NULL' 
      | 'CONDITION_TRAVERSAL_TOO_DEEP' 
      | 'CONNECTOR_MISSING_TARGET' 
      | 'CONSTANT_INCLUDES_REFERENCES' 
      | 'CONTENT_KEY_OR_ID_NOT_FOUND' 
      | 'CUSTOMEVENTS_NOT_ENABLED' 
      | 'CUSTOMEVENT_MISSING_PROCESSMETADATAVALUES' 
      | 'CUSTOMEVENT_OBJECTTYPE_NOT_FOUND' 
      | 'CUSTOMEVENT_OBJECTTYPE_NOT_SUPPORTED' 
      | 'CUSTOMEVENT_PROCESSMETADATAVALUES_MISSING_NAME' 
      | 'CUSTOMEVENT_PROCESSMETADATAVALUES_MORE_THAN_ONE_NAME' 
      | 'DATATYPE_INVALID' 
      | 'DATATYPE_MISSING' 
      | 'DATA_TYPE_NOT_SUPPORTED_FOR_PROCESSTYPE' 
      | 'DECISION_DEFAULT_CONNECTOR_MISSING_LABEL' 
      | 'DECISION_MISSING_OUTCOME' 
      | 'DETERMINATION_FLOW_ACTION_TYPE_REQUIRED' 
      | 'DYNAMIC_TYPE_MAPPING_MISSING' 
      | 'EITHER_CONDITIONS_OR_ACTION_NOT_SUPPORTED' 
      | 'ELEMENT_CONNECTS_TO_SELF' 
      | 'ELEMENT_COORDINATES_INVALID' 
      | 'ELEMENT_INVALID_CONNECTOR' 
      | 'ELEMENT_INVALID_REFERENCE' 
      | 'ELEMENT_INVALID_REFERENCE_FOR_CONFLICTING_FIELD_VALUE' 
      | 'ELEMENT_MISSING_CONNECTOR' 
      | 'ELEMENT_MISSING_LABEL' 
      | 'ELEMENT_MISSING_NAME' 
      | 'ELEMENT_MISSING_REFERENCE' 
      | 'ELEMENT_MORE_THAN_ONE_FIELD' 
      | 'ELEMENT_NAME_INVALID' 
      | 'ELEMENT_NEVER_USED' 
      | 'ELEMENT_NOT_SUPPORTED_IN_SUBFLOW_FOR_TRIGGER_TYPE' 
      | 'ELEMENT_REQUIRES_PERM' 
      | 'ELEMENT_SCALE_SMALLER_THAN_DEFAULTVALUE' 
      | 'ELEMENT_SUBTYPE_NOT_SUPPORTED_FOR_ELEMENTTYPE' 
      | 'ELEMENT_SUBTYPE_NOT_SUPPORTED_FOR_PROCESSTYPE' 
      | 'ELEMENT_TYPE_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'ENTRY_CONDITION_CONFLICTING_FILTERS' 
      | 'ENVIRONMENTS_VALUE_CHANGED' 
      | 'ENVIRONMENT_PERMISSION_REQUIRED' 
      | 'EXTERNAL_OBJECTS_NOT_SUPPORTED' 
      | 'EXTERNAL_OBJECT_FIELDS_NOT_SUPPORTED' 
      | 'EX_AUTOLAUNCHED_SUBFLOW_INCOMPATIBLE_FLOWTYPE' 
      | 'FEATURE_DISABLED' 
      | 'FIELDASSIGNMENT_FIELD_INCOMPATIBLE_DATATYPE' 
      | 'FIELDASSIGNMENT_INVALID_DATATYPE' 
      | 'FIELDASSIGNMENT_INVALID_ELEMENT' 
      | 'FIELDASSIGNMENT_INVALID_REFERENCE' 
      | 'FIELDASSIGNMENT_MULTIPLE_REFERENCES_SAME_FIELD' 
      | 'FIELDASSIGNMENT_PICKLISTFIELD_INCOMPATIBLE_DATATYPE' 
      | 'FIELDASSIGNMENT_REFERENCED_ELEMENT_MISSING_DATATYPE' 
      | 'FIELDSERVICE_UNSUPPORTED_FIELD_TYPE' 
      | 'FIELD_INVALID_VALUE' 
      | 'FIELD_NOT_FOUND' 
      | 'FIELD_RELATIONSHIP_NOT_SUPPORTED' 
      | 'FIELD_REQUIRES_PERM' 
      | 'FIELD_TYPE_NOT_SUPPORTED_AS_CHILD_OF_SCREENFIELD_REGION_OR_REGIONCONTAINER' 
      | 'FIELD_TYPE_NOT_SUPPORTED_AS_PARENT' 
      | 'FIELD_VALUE_REQUIRES_PERM' 
      | 'FLEXIPAGE_COMPONENT_ATTRIBUTE_EXPRESSION_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_ATTRIBUTE_GENERIC_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_ATTRIBUTE_MISSING_REQUIRED' 
      | 'FLEXIPAGE_COMPONENT_ATTRIBUTE_TOO_LONG' 
      | 'FLEXIPAGE_COMPONENT_CUSTOM_VALIDATION_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_DESIGN_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_EVENT_DUPLICATE_TARGET_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_EVENT_EMPTY_TARGET_MAPPING_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_EVENT_INVALID_FORMFACTOR_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_EVENT_INVALID_SERVICE_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_EVENT_SOURCE_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_MAX_LIMIT_EXCEPTION' 
      | 'FLEXIPAGE_COMPONENT_RULE_VALIDATION_EXCEPTION' 
      | 'FLEXIPAGE_DUPLICATE_PROPERTY_COMPONENT_EXCEPTION' 
      | 'FLEXIPAGE_EVENT_ATTRIBUTE_GENERIC_EXCEPTION' 
      | 'FLEXIPAGE_INVALID_ITEM_INSTANCE_TYPE_EXCEPTION' 
      | 'FLEXIPAGE_INVALID_PROPERTY_TYPE_COMPONENT_EXCEPTION' 
      | 'FLEXIPAGE_INVALID_PROPERTY_TYPE_EVENT_TARGET_EXCEPTION' 
      | 'FLEXIPAGE_ITEM_INSTANCE_CUSTOM_VALIDATION_EXCEPTION' 
      | 'FLEXIPAGE_MAX_INTERACTIONS_EXCEPTION' 
      | 'FLEXIPAGE_PICKLIST_INVALID_VALUE_EXCEPTION' 
      | 'FLEXIPAGE_RENAMED_COMPONENT_VALIDATION_EXCEPTION' 
      | 'FLEXIPAGE_TEMPLATE_INVALID_SWITCH' 
      | 'FLOW_ALREADY_OVERRIDDEN' 
      | 'FLOW_CAPABILITY_INPUT_DATA_TYPE_INVALID' 
      | 'FLOW_CAPABILITY_INPUT_INVALID' 
      | 'FLOW_CAPABILITY_INPUT_MISSING' 
      | 'FLOW_CAPABILITY_INVALID' 
      | 'FLOW_CAPABILITY_MISSING' 
      | 'FLOW_COMPLEX_VALUE_COLLECTION_TYPE_EXPECTED' 
      | 'FLOW_COMPLEX_VALUE_INVALID_JSON' 
      | 'FLOW_COMPLEX_VALUE_INVALID_MERGE_FIELD' 
      | 'FLOW_COMPLEX_VALUE_NOT_SUPPORTED' 
      | 'FLOW_COMPLEX_VALUE_SCALAR_TYPE_EXPECTED' 
      | 'FLOW_CONTEXT_RECORD_ASSIGNMENT_VARIABLE_INVALID' 
      | 'FLOW_CUSTOM_ERROR_COMPOUND_FIELD_NOT_SUPPORTED' 
      | 'FLOW_CUSTOM_ERROR_EMPTY_MESSAGES_LIST' 
      | 'FLOW_CUSTOM_ERROR_INVALID_OR_INCOMPLETE_FIELD' 
      | 'FLOW_CUSTOM_ERROR_MULTIPLE_ERRORS_ON_FIELD' 
      | 'FLOW_CUSTOM_ERROR_MULTIPLE_PAGE_ERRORS_EXCEPTION' 
      | 'FLOW_CUSTOM_ERROR_NO_FIELD_SELECTION_FOR_FIELD_ERROR' 
      | 'FLOW_ELEMENT_SCALE_LESS_THAN_ZERO' 
      | 'FLOW_FORMULA_FIELD_MISSING' 
      | 'FLOW_FORMULA_NOT_SUPPORTED' 
      | 'FLOW_IMMEDIATE_PATH_INCOMPATIBLE_WITH_EXTERNAL_CALLOUTS' 
      | 'FLOW_IMMEDIATE_PATH_INCOMPATIBLE_WITH_EXTERNAL_OBJECTS' 
      | 'FLOW_INCLUDES_STEP' 
      | 'FLOW_INPUTPARAM_MISMATCHED_APEX_CLASS' 
      | 'FLOW_INTERVIEW_BULK_EXECUTION' 
      | 'FLOW_INTERVIEW_HANDLED_ERROR' 
      | 'FLOW_INTERVIEW_INPUT_VALIDATION' 
      | 'FLOW_INTERVIEW_INTERACTION_NOT_FOUND' 
      | 'FLOW_INTERVIEW_INVALID_CHOICE_USER_INPUT' 
      | 'FLOW_INTERVIEW_INVALID_FIELD_VALUE' 
      | 'FLOW_INTERVIEW_INVALID_START_REQUEST' 
      | 'FLOW_INTERVIEW_LIMIT_EXCEEDED' 
      | 'FLOW_INTERVIEW_MISSING_CHOICE_FOR_REQUIRED_CHOICE_FIELD' 
      | 'FLOW_INTERVIEW_MISSING_VALUE_FOR_REQUIRED_INPUT_FIELD' 
      | 'FLOW_INTERVIEW_NAVIGATE' 
      | 'FLOW_INTERVIEW_RANGE_VALIDATION' 
      | 'FLOW_INTERVIEW_REGEX_VALIDATION' 
      | 'FLOW_INTERVIEW_RESUME_INTERVIEW' 
      | 'FLOW_INTERVIEW_SAVE_RESULT' 
      | 'FLOW_INTERVIEW_SET_CHOICE_SELECTED' 
      | 'FLOW_INTERVIEW_START_INTERVIEW' 
      | 'FLOW_INTERVIEW_TYPE_CONVERSION' 
      | 'FLOW_INVALID_NAME' 
      | 'FLOW_NAME_USED_IN_OTHER_CLIENT' 
      | 'FLOW_ORCHESTRATOR_FREEMIUM_PRODUCT' 
      | 'FLOW_OVERRIDABLE_CANNOT_BE_OVERRIDE' 
      | 'FLOW_OVERRIDABLE_CANNOT_BE_TEMPLATE' 
      | 'FLOW_OVERRIDDEN_FLOW_INVALID_REFERENCE' 
      | 'FLOW_OVERRIDE_EXTRA_VARIABLE' 
      | 'FLOW_OVERRIDE_INCOMPATIBLE_PROCESS_TYPE' 
      | 'FLOW_OVERRIDE_INCOMPATIBLE_TYPE' 
      | 'FLOW_OVERRIDE_INCOMPATIBLE_VARIABLE' 
      | 'FLOW_RECORD_PRIOR_AUTOLAUNCH_UPDATE_ONLY' 
      | 'FLOW_RECORD_PRIOR_INVALID_IN_RECORD_CREATE' 
      | 'FLOW_RECORD_PRIOR_INVALID_IN_RECORD_DELETE' 
      | 'FLOW_RECORD_PRIOR_INVALID_IN_RECORD_UPDATE' 
      | 'FLOW_RECORD_PRIOR_READ_ONLY' 
      | 'FLOW_REFERENCES_APEX_CLASS_NOT_IN_SAME_PACKAGE' 
      | 'FLOW_RESOURCE_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'FLOW_RULE_REQUIRE_RECORD_CHANGED_NEVER_CHECKED_FOR_RECORD_PRIOR' 
      | 'FLOW_SCHEDULED_PATH_ALLOWED_ONE_ASYNCAFTERCOMMIT_PATH' 
      | 'FLOW_SCHEDULED_PATH_ASYNCAFTERCOMMIT_REQUIRES_RECORD_CHANGED_OR_ISCHANGED' 
      | 'FLOW_SCHEDULED_PATH_CANNOT_USE_IS_CHANGED' 
      | 'FLOW_SCHEDULED_PATH_INCOMPATIBLE_TIME_SOURCE' 
      | 'FLOW_SCHEDULED_PATH_INCOMPATIBLE_WHEN_DECISION_REQUIRES_RECORD_CHANGED' 
      | 'FLOW_SCHEDULED_PATH_INCOMPATIBLE_WITH_FLOW_TRIGGER_TYPE' 
      | 'FLOW_SCHEDULED_PATH_INCOMPATIBLE_WITH_RECORD_PRIOR' 
      | 'FLOW_SCHEDULED_PATH_INVALID_BATCH_SIZE' 
      | 'FLOW_SCHEDULED_PATH_INVALID_OFFSET' 
      | 'FLOW_SCHEDULED_PATH_REQUIRED_FIELDS_MISSING' 
      | 'FLOW_SCHEDULED_PATH_REQUIRES_DEFAULT_WORKFLOW_USER' 
      | 'FLOW_SCHEDULED_PATH_REQUIRES_RECORD_CHANGED_TO_MEET_CRITERIA' 
      | 'FLOW_SCHEDULE_INFORMATION_INCOMPLETE' 
      | 'FLOW_SOBJECT_VARIABLE_NOT_PERSISTED' 
      | 'FLOW_SOURCE_TEMPLATE_INVALID_REFERENCE' 
      | 'FLOW_STAGE_INCLUDES_REFERENCES' 
      | 'FLOW_STAGE_ORDER_DUPLICATE' 
      | 'FLOW_STAGE_ORDER_OUT_OF_RANGE' 
      | 'FLOW_SYSTEM_VARIABLE_NOT_SUPPORTED_FOR_TRIGGERTYPE' 
      | 'FLOW_TEST_API_NAME_DUPLICATED' 
      | 'FLOW_TEST_ASSERTION_MISSING' 
      | 'FLOW_TEST_ASSERTION_NOT_SUPPORTED' 
      | 'FLOW_TEST_CONDITION_INCOMPATIBLE' 
      | 'FLOW_TEST_CONDITION_INVALID_DATATYPE_MAPPING' 
      | 'FLOW_TEST_CONDITION_LIMIT' 
      | 'FLOW_TEST_CONDITION_NOT_SUPPORTED' 
      | 'FLOW_TEST_DATATYPE_INVALID' 
      | 'FLOW_TEST_FLOW_INVALID' 
      | 'FLOW_TEST_IMMEDIATE_PATH_MISSING' 
      | 'FLOW_TEST_MERGE_FIELD_INVALID' 
      | 'FLOW_TEST_MERGE_FIELD_NOT_SUPPORTED' 
      | 'FLOW_TEST_OPERATOR_INVALID' 
      | 'FLOW_TEST_PARAMETER_DUPLICATED' 
      | 'FLOW_TEST_PARAMETER_INCOMPATIBLE' 
      | 'FLOW_TEST_PARAMETER_INVALID' 
      | 'FLOW_TEST_PARAMETER_LEFTVALUEREFERENCE_INVALID' 
      | 'FLOW_TEST_PARAMETER_MISSING' 
      | 'FLOW_TEST_PARAMETER_NOT_SUPPORTED' 
      | 'FLOW_TEST_PARAMETER_TYPE_INVALID' 
      | 'FLOW_TEST_PARAMETER_VALUE_INVALID' 
      | 'FLOW_TEST_PARAMETER_VALUE_MISSING' 
      | 'FLOW_TEST_PARAMS_REQUIRED' 
      | 'FLOW_TEST_POINTS_DUPLICATED' 
      | 'FLOW_TEST_POINT_MISSING' 
      | 'FLOW_TEST_POINT_NOT_SUPPORTED' 
      | 'FLOW_TEST_PROCESSTYPE_INVALID' 
      | 'FLOW_TEST_RIGHTVALUE_INVALID' 
      | 'FLOW_TRANSFORM_AGGR_COLL_NUM_OF_REF' 
      | 'FLOW_TRANSFORM_AGGR_SOURCE_INVALID' 
      | 'FLOW_TRANSFORM_APEX_CLASS_INCOMPATIBLE' 
      | 'FLOW_TRANSFORM_API_VERSION_NOT_SUPPORTED' 
      | 'FLOW_TRANSFORM_ELEMENT_REFERENCE_INVALID' 
      | 'FLOW_TRANSFORM_ELEMENT_REFERENCE_TYPE_INCOMPATIBLE' 
      | 'FLOW_TRANSFORM_FMLAFOR_COLL_NOT_SUPP' 
      | 'FLOW_TRANSFORM_FMLA_COLL_MULT_RSRC' 
      | 'FLOW_TRANSFORM_INPUT_PARAM_DUPLICATED' 
      | 'FLOW_TRANSFORM_INPUT_PARAM_INVALID' 
      | 'FLOW_TRANSFORM_INPUT_PARAM_MISSING' 
      | 'FLOW_TRANSFORM_MAP_COLL_MISSING' 
      | 'FLOW_TRANSFORM_MAP_COLL_MISSING_SOURCE' 
      | 'FLOW_TRANSFORM_MAP_COLL_MULT_SOURCE' 
      | 'FLOW_TRANSFORM_MAP_COLL_NUM_OF_REF' 
      | 'FLOW_TRANSFORM_MAP_COLL_RELA_RECORDS' 
      | 'FLOW_TRANSFORM_MAP_COL_PRIMITIVE_INCOMPA' 
      | 'FLOW_TRANSFORM_MAP_RSRC_TYPE_NOT_SUPPORTED' 
      | 'FLOW_TRANSFORM_MAP_STATIC_VAL_COLL_MISSING' 
      | 'FLOW_TRANSFORM_OUTPUT_FIELD_API_NAME_INVALID' 
      | 'FLOW_TRANSFORM_SUM_SOURCE_TYPE_INVALID' 
      | 'FLOW_TRANSFORM_TYPE_NOT_SUPPORTED' 
      | 'FLOW_TRANSFORM_VALUES_MISSING' 
      | 'FLOW_TRANSFORM_VALUE_INVALID' 
      | 'FLOW_TRIGGER_DERIVED_FIELD_NOT_SUPPORTED' 
      | 'FLOW_TRIGGER_ORDER_OUT_OF_BOUNDS' 
      | 'FLOW_TRIGGER_TYPE_INCOMPATIBLE_WITH_RECORD_TRIGGER_TYPE' 
      | 'FORMULA_CMT_LIMIT_EXCEEDED' 
      | 'FORMULA_EXPRESSION_INVALID' 
      | 'FORM_ALREADY_IN_USE_BY_DRAFT_VERSION' 
      | 'FORM_ALREADY_IN_USE_BY_FLOW' 
      | 'FTEST_EXTENSION_CODE_FOR_TEST' 
      | 'GLOBAL_VARIABLE_NOT_SUPPORTED_FOR_PROCESSTYPE' 
      | 'HELP_TEXT_NOT_SUPPORTED_FOR_SCREEN_FIELD' 
      | 'HTTP_METHOD_NOT_SUPPORTED' 
      | 'INCONSISTENT_ACTION_VERSIONS' 
      | 'INCONSISTENT_DYNAMIC_TYPE_MAPPING' 
      | 'INCONSISTENT_VALUE_FOR_DYNAMIC_VALUE_FIELD' 
      | 'INDIVIDUAL_CONTACT_POINT_NOT_FOUND' 
      | 'INDIVIDUAL_NOT_FOUND' 
      | 'INPUTPARAM_CONFIGURATION_NOT_FOUND' 
      | 'INPUTPARAM_INCOMPATIBLE_CONFIGURATION_ONLY' 
      | 'INPUTPARAM_INCOMPATIBLE_DATATYPE' 
      | 'INPUTPARAM_INCOMPATIBLE_WITH_COLLECTION_VARIABLE' 
      | 'INPUTPARAM_INCOMPATIBLE_WITH_NONCOLLECTION_VARIABLE' 
      | 'INPUTPARAM_MISMATCHED_OBJECTTYPE' 
      | 'INPUTVARIABLE_COLLECTION_NOT_SUPPORTED_FOR_DYNAMIC_ACTION' 
      | 'INPUTVARIABLE_COLLECTION_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'INPUTVARIABLE_DATATYPE_NOT_SUPPORTED_FOR_DYNAMIC_ACTION' 
      | 'INPUTVARIABLE_DATATYPE_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'INVALID_ACTION_TYPE_FOR_STEP' 
      | 'INVALID_ASSIGNEE' 
      | 'INVALID_CONTENT_TYPE' 
      | 'INVALID_EMAIL_ADDRESS' 
      | 'INVALID_ENVIRONMENTS_VALUE' 
      | 'INVALID_FLOW' 
      | 'INVALID_FLOW_INTERVIEW' 
      | 'INVALID_PROCESSTYPE_ENVIRONMENT_COMBINATION' 
      | 'INVALID_QUERY_LOCATOR_FORMAT' 
      | 'INVALID_REGEX_IN_SURVEY_QUESTIONS' 
      | 'INVALID_RUN_CONTEXT' 
      | 'INVALID_SEGMENT_STATUS_FOR_ACTIVATION' 
      | 'INVALID_SENDER_TYPE' 
      | 'INVALID_SETUP_REFERENCE_TYPE' 
      | 'INVALID_STAGE_STEP_ASSIGNEE_TYPE' 
      | 'INVALID_SURVEY_VARIABLE_NAME_OR_TYPE' 
      | 'INVALID_TIME_ZONE' 
      | 'INVOCABLE_ACTION_TYPE_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'LOCATOR_LOCATION_EXCEEDS_SIZE' 
      | 'LOOP_ASSIGNNEXTVALUETO_MISMATCHED_APEXCLASSTYPE' 
      | 'LOOP_ASSIGNNEXTVALUETO_MISMATCHED_DATATYPE' 
      | 'LOOP_ASSIGNNEXTVALUETO_MISMATCHED_OBJECTTYPE' 
      | 'LOOP_ASSIGNNEXTVALUETO_MISSING' 
      | 'LOOP_ASSIGNNEXTVALUETO_MISSING_VARIABLE' 
      | 'LOOP_ASSIGNNEXTVALUETO_REFERENCE_NOT_FOUND' 
      | 'LOOP_COLLECTION_ELEMENT_NOT_FOUND' 
      | 'LOOP_COLLECTION_NOT_FOUND' 
      | 'LOOP_COLLECTION_NOT_SUPPORTED_FOR_FIELD' 
      | 'LOOP_MISSING_COLLECTION' 
      | 'MAX_CHILD_TYPES' 
      | 'MAX_EXTERNAL_REFERENCES_IN_QUERY' 
      | 'MAX_STATEMENT_SIZE' 
      | 'MESSAGING_API_ENTITLEMENT_REACHED' 
      | 'MESSAGING_INACTIVE_CHANNEL' 
      | 'MISSING_ASSIGNEE' 
      | 'MISSING_ASSIGNEE_TYPE' 
      | 'MISSING_EMAIL_RECIPIENTS' 
      | 'MISSING_FLOW_TRANSFORM_SUM_FIELD' 
      | 'MISSING_MULESOFT_STEP_ASSIGNEE' 
      | 'MULTIPLE_ASSIGNEES_NOT_ALLOWED' 
      | 'NON_EXPOSED_COMPONENT_IN_FLOW' 
      | 'NON_GLOBAL_COMPONENT_IN_EXPORTED_FLOW' 
      | 'NUMBER_OF_SCREENFIELD_REGIONS_EXCEEDS_LIMIT' 
      | 'OBJECTTYPE_INVALID' 
      | 'OBJECT_CANNOT_BE_CREATED' 
      | 'OBJECT_CANNOT_BE_DELETED' 
      | 'OBJECT_CANNOT_BE_QUERIED' 
      | 'OBJECT_CANNOT_BE_UPDATED' 
      | 'OBJECT_ENCRYPTED_FIELDS_NOT_SUPPORTED' 
      | 'OBJECT_NOT_FOUND' 
      | 'OBJECT_TYPE_DOES_NOT_EXIST' 
      | 'OBJECT_TYPE_NOT_CDC_ENABLED' 
      | 'ORCHESTRATION_REQUIRESASYNCPROCESSING_NOT_SUPPORTED' 
      | 'ORCHESTRATION_REQUIRESASYNCPROCESSING_REQUIRED' 
      | 'ORG_WIDE_EMAIL_INVALID' 
      | 'ORG_WIDE_EMAIL_NOT_USED' 
      | 'OUTPUTPARAM_ASSIGNTOREFERENCE_INVALID' 
      | 'OUTPUTPARAM_ASSIGNTOREFERENCE_NOTFOUND' 
      | 'OUTPUTPARAM_INCOMPATIBLE_DATATYPE' 
      | 'OUTPUTPARAM_MISMATCHED_OBJECTTYPE' 
      | 'OUTPUTPARAM_MISMATCHED_WITH_COLLECTION_VARIABLE' 
      | 'OUTPUTPARAM_MISSING_ASSIGNTOREFERENCE' 
      | 'OUTPUTPARAM_MISTMATCHED_WITH_NONCOLLECTION_VARIABLE' 
      | 'PARAM_DATATYPE_NOT_SUPPORTED' 
      | 'PAST_SCHEDULE_FLOW_WILL_NOT_RUN' 
      | 'PLATFORM_EVENT_TRIGGERED_FLOW_REQUIRES_DEFAULT_WORKFLOW_USER' 
      | 'PRICE_ADJUSTMENT_TIER_VALIDATION_ERROR' 
      | 'PROCESSMETADATAVALUES_NOT_SUPPORTED_FOR_PROCESSTYPE' 
      | 'PROCESSMETADATAVALUE_NONEXISTENT_ELEMENT' 
      | 'PROCESSTYPE_COMPONENTTYPE_NOT_SUPPORTED' 
      | 'PROCESSTYPE_ELEMENT_CONFIG_NOT_SUPPORTED' 
      | 'PROCESSTYPE_ELEMENT_NOT_SUPPORTED' 
      | 'PROCESSTYPE_EVALUATIONFLOW_REQUIRED' 
      | 'PROCESSTYPE_NOT_SUPPORTED' 
      | 'PROCESSTYPE_SCREEN_FIELDTYPE_NOT_SUPPORTED' 
      | 'PROCESS_TYPE_ELEMENT_ATTRIBUTE_REQUIRED' 
      | 'PROCESS_TYPE_INCOMPATIBLE' 
      | 'PROMPT_FLOW_CONTAINS_INVALID_VARIABLE' 
      | 'QUERY_LOCATOR_EXPIRED' 
      | 'QUERY_LOCATOR_NOT_FOUND' 
      | 'RECOMMENDATION_STRATEGY_EXCEPTION' 
      | 'RECORDFILTER_ENCRYPTED_FIELDS_NOT_SUPPORTED' 
      | 'RECORDFILTER_GEOLOCATION_FIELDS_NOT_SUPPORTED' 
      | 'RECORDFILTER_INVALID_DATATYPE' 
      | 'RECORDFILTER_INVALID_ELEMENT' 
      | 'RECORDFILTER_INVALID_OPERATOR' 
      | 'RECORDFILTER_INVALID_REFERENCE' 
      | 'RECORDFILTER_MISSING_DATATYPE' 
      | 'RECORDFILTER_MULTIPLE_QUERIES_SAME_FIELD' 
      | 'RECORDFILTER_NON_PRIMITIVE' 
      | 'RECORDLOOKUP_IDASSIGNMENT_VARIABLE_INCOMPATIBLE_DATATYPE' 
      | 'RECORDLOOKUP_IDASSIGNMENT_VARIABLE_NOT_FOUND' 
      | 'RECORDUPDATE_MISSING_FILTERS' 
      | 'RECORD_CHANGE_LISTENER_CONDITIONS_NON_RECORD_GLOBAL_VARIABLE' 
      | 'RECORD_CHANGE_LISTENER_CONDITIONS_NOT_SUPPORTED' 
      | 'RECORD_CHANGE_LISTENER_CONDITIONS_THRESHOLD_BREACHED' 
      | 'RECORD_PRIOR_VALUE_REMAIN_SAME_BEFORE_TRIGGER' 
      | 'REFERENCED_ELEMENT_NOT_FOUND' 
      | 'REPEATER_API_VERSION_NOT_SUPPORTED' 
      | 'REPEATER_COMPONENT_CURRENTLY_NOT_SUPPORTED' 
      | 'REQUIRED_VARIABLE_INVALID' 
      | 'REQUIRED_VARIABLE_MISSING' 
      | 'RESOURCE_NOT_SUPPORTED' 
      | 'RULE_MISSING_CONDITION' 
      | 'RULE_REQUIRE_RECORD_CHANGED_NEVER_CHECKED' 
      | 'RUN_AS_USER_NOT_SUPPORTED' 
      | 'RUN_AS_USER_REQUIRED_WHEN_SPECIFYING_ASSIGNEE' 
      | 'SCHEDULE_TRIGGERED_FLOW_REQUIRES_DEFAULT_WORKFLOW_USER' 
      | 'SCREENACTIONTYPE_NOT_SUPPORTED_IN_ORG' 
      | 'SCREENACTION_NOT_SUPPORTED_IN_ORG' 
      | 'SCREENACTION_TRIGGER_EVENT_SOURCE_NOT_ON_SAME_SCREEN' 
      | 'SCREENACTION_TRIGGER_HANDLER_NOT_VALID_SCREEN_ACTION' 
      | 'SCREENCOMPONENT_CONTAINS_VISIBILITY_RULE' 
      | 'SCREENFIELD_API_VERSION_NOT_SUPPORTED' 
      | 'SCREENFIELD_BOOLEAN_ISREQUIRED_IS_FALSE' 
      | 'SCREENFIELD_CANNOT_HAVE_BOTH_DEFAULTVALUE_AND_DEFAULTSELECTEDCHOICEREFERENCE' 
      | 'SCREENFIELD_DEFAULTVALUE_NOT_SUPPORTED' 
      | 'SCREENFIELD_EXTENSION_DUPLICATE_INPUT_PARAM' 
      | 'SCREENFIELD_EXTENSION_DUPLICATE_OUTPUT_PARAM' 
      | 'SCREENFIELD_EXTENSION_IMPLEMENTATION_INVALID' 
      | 'SCREENFIELD_EXTENSION_INPUT_ATTRIBUTE_INVALID' 
      | 'SCREENFIELD_EXTENSION_NAME_INVALID' 
      | 'SCREENFIELD_EXTENSION_NAME_MISSING' 
      | 'SCREENFIELD_EXTENSION_NAME_NOT_SUPPORTED' 
      | 'SCREENFIELD_EXTENSION_OUTPUT_ATTRIBUTE_INVALID' 
      | 'SCREENFIELD_EXTENSION_REQUIRED_INPUT_MISSING' 
      | 'SCREENFIELD_INPUTS_NOT_SUPPORTED' 
      | 'SCREENFIELD_INPUTS_ON_NEXT_NAV_TO_ASSOC_SCRN_NOT_SUPPORTED' 
      | 'SCREENFIELD_INVALID_DATATYPE' 
      | 'SCREENFIELD_MULTISELECTCHOICE_SEMICOLON_NOT_SUPPORTED' 
      | 'SCREENFIELD_OBJECTFIELDREFERENCE_INVALID_FORMAT' 
      | 'SCREENFIELD_OBJECTPROVIDED_CANNOT_HAVE_DEFAULTVALUE' 
      | 'SCREENFIELD_OBJECTPROVIDED_CANNOT_HAVE_HELPTEXT' 
      | 'SCREENFIELD_OBJECTPROVIDED_INVALID_DATATYPE' 
      | 'SCREENFIELD_OBJECTPROVIDED_ISREQUIRED_NOT_SUPPORTED' 
      | 'SCREENFIELD_OBJECTPROVIDED_LIGHTNING_RUNTIME_DISABLED' 
      | 'SCREENFIELD_OBJECTPROVIDED_MISSING_OBJECTFIELDREFERENCE' 
      | 'SCREENFIELD_OUTPUTS_NOT_SUPPORTED' 
      | 'SCREENFIELD_REGION_CONTAINS_DUPLICATE_INPUT_PARAMETER_VALUES' 
      | 'SCREENFIELD_REGION_INPUT_PARAMETER_NOT_SUPPORTED' 
      | 'SCREENFIELD_REGION_MISSING_REQUIRED_PERMISSIONS' 
      | 'SCREENFIELD_REGION_NOT_IN_CONTAINER' 
      | 'SCREENFIELD_REGION_REQUIRED_INPUT_PARAMETER_MISSING' 
      | 'SCREENFIELD_REGION_WIDTH_SUM_EXCEEDS_LIMIT' 
      | 'SCREENFIELD_REGION_WIDTH_VALUE_INVALID' 
      | 'SCREENFIELD_TYPE_NOT_SUPPORTED' 
      | 'SCREENFIELD_TYPE_NOT_SUPPORTED_FOR_API_VERSION' 
      | 'SCREENFIELD_TYPE_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'SCREENFIELD_USERINPUT_NOT_SUPPORTED_FOR_CHOICETYPE' 
      | 'SCREENFIELD_VALIDATIONRULE_NOT_SUPPORTED' 
      | 'SCREENFIELD_VALIDATION_RULES_NOT_SUPPORTED_FOR_ENVIRONMENT' 
      | 'SCREENFIELD_VALIDATION_RULES_NOT_SUPPORTED_FOR_EXTENSIONS_WITHOUT_OUTPUTS' 
      | 'SCREENFOOTER_MERGEFIELD_NOT_SUPPORTED' 
      | 'SCREENRULE_ACTION_INVALID_ATTRIBUTE' 
      | 'SCREENRULE_ACTION_INVALID_ATTRIBUTE_FOR_API_VERSION' 
      | 'SCREENRULE_ACTION_INVALID_VALUE' 
      | 'SCREENRULE_ACTION_MISSING_ATTRIBUTE' 
      | 'SCREENRULE_ACTION_MISSING_FIELDREFERENCE' 
      | 'SCREENRULE_ACTION_MISSING_VALUE' 
      | 'SCREENRULE_ATTRIBUTE_NOT_SUPPORTED_FOR_SCREENFIELD' 
      | 'SCREENRULE_FIELD_NOT_FOUND_ON_SCREEN' 
      | 'SCREENRULE_MISSING_ACTION' 
      | 'SCREENRULE_NOT_SUPPORTED_IN_ORG' 
      | 'SCREENRULE_SCREENFIELD_NOT_VISIBLE' 
      | 'SCREENRULE_VISIBILITY_NOT_SUPPORTED_IN_ORG' 
      | 'SCREEN_ACTION_MISSING_REQUIRED_NAME' 
      | 'SCREEN_ACTION_MISSING_REQUIRED_TYPE' 
      | 'SCREEN_ACTION_NOT_FOUND_WITH_NAME_AND_TYPE' 
      | 'SCREEN_ALLOWBACK_ALLOWFINISH_BOTH_FALSE' 
      | 'SCREEN_CONTAINS_LIGHTNING_COMPONENT' 
      | 'SCREEN_CONTAINS_REGION_CONTAINER_COMPONENT' 
      | 'SCREEN_FIELD_REGION_CONTAINER_TYPE_INVALID_VALUE' 
      | 'SCREEN_FIELD_REGION_CONTAINER_TYPE_MISSING' 
      | 'SCREEN_FIELD_SECTION_HEADER_INVALID_VALUE' 
      | 'SCREEN_FIELD_SECTION_HEADER_MISSING' 
      | 'SCREEN_MISSING_FOOTER_AND_LIGHTNING_COMPONENT' 
      | 'SCREEN_MISSING_LABEL' 
      | 'SCREEN_MULTISELECTFIELD_DOESNT_SUPPORT_CHOICE_WITH_USERINPUT' 
      | 'SCREEN_PAUSEDTEXT_NOT_SHOWN_WHEN_ALLOWPAUSE_IS_FALSE' 
      | 'SETTING_FIELD_MAKES_OTHER_FIELD_REQUIRED' 
      | 'SETTING_FIELD_MAKES_OTHER_FIELD_UNSUPPORTED' 
      | 'SETTING_FIELD_VALUE_MAKES_OTHER_FIELD_UNSUPPORTED' 
      | 'SETTING_FIELD_VALUE_MAKES_OTHER_FIELD_VALUE_UNSUPPORTED' 
      | 'SETUP_REFERENCE_ALLOWED_ONLY_IN_ACTION_INPUT' 
      | 'SETUP_REFERENCE_TYPE_NOT_PACKAGEABLE' 
      | 'SETUP_REFERENCE_VALUE_REQUIRES_DEVELOPER_NAMES' 
      | 'SLACK_API_EXCEPTION_EXTENSION' 
      | 'SOBJECT_ELEMENT_INCOMPATIBLE_DATATYPE' 
      | 'SOBJECT_ELEMENT_MISMATCHED_OBJECTTYPE' 
      | 'SORT_ENCRYPTED_FIELDS_NOT_SUPPORTED' 
      | 'SORT_FIELD_MISSING' 
      | 'SORT_FIELD_NOT_SUPPORTED' 
      | 'SORT_GEOLOCATION_FIELDS_NOT_SUPPORTED' 
      | 'SORT_LIMIT_INVALID' 
      | 'SORT_ORDER_MISSING' 
      | 'SPECIFIC_FIELD_VALUE_MAKES_OTHER_FIELD_REQUIRED' 
      | 'SPECIFIC_FIELD_VALUE_MAKES_OTHER_FIELD_VALUE_REQUIRED' 
      | 'STAGE_NAME_NOT_FULLY_QUALIFIED' 
      | 'STAGE_STEP_ASSIGNEE_NOT_SUPPORTED' 
      | 'START_ELEMENT_MISSING' 
      | 'SUBFLOW_DESKTOP_DESIGNER_FLOWS_NOT_SUPPORTED' 
      | 'SUBFLOW_DIFFERENT_RUNMODE' 
      | 'SUBFLOW_INPUT_MISSING_NAME' 
      | 'SUBFLOW_INPUT_MULTIPLE_ASSIGNMENTS_TO_ONE_VARIABLE' 
      | 'SUBFLOW_INPUT_REFERENCES_FIELD_ON_SOBJECT_VARIABLE' 
      | 'SUBFLOW_INPUT_VARIABLE_NOT_FOUND_IN_REFERENCEDFLOW' 
      | 'SUBFLOW_INPUT_VARIABLE_NO_INPUT_ACCESS' 
      | 'SUBFLOW_INVALID_NAME' 
      | 'SUBFLOW_INVALID_REFERENCE' 
      | 'SUBFLOW_MASTER_FLOW_TYPE_NOT_AUTOLAUNCHED' 
      | 'SUBFLOW_MISSING_NAME' 
      | 'SUBFLOW_NO_ACTIVE_VERSION' 
      | 'SUBFLOW_OUTPUT_INCOMPATIBLE_DATATYPES' 
      | 'SUBFLOW_OUTPUT_MISMATCHED_APEX_CLASS' 
      | 'SUBFLOW_OUTPUT_MISMATCHED_COLLECTIONTYPES' 
      | 'SUBFLOW_OUTPUT_MISMATCHED_OBJECTS' 
      | 'SUBFLOW_OUTPUT_MISSING_ASSIGNTOREFERENCE' 
      | 'SUBFLOW_OUTPUT_MISSING_NAME' 
      | 'SUBFLOW_OUTPUT_MULTIPLE_ASSIGNMENTS_TO_ONE_VARIABLE' 
      | 'SUBFLOW_OUTPUT_REFERENCES_FIELD_ON_SOBJECT_VARIABLE' 
      | 'SUBFLOW_OUTPUT_TARGET_DOES_NOT_EXIST_IN_MASTER_FLOW' 
      | 'SUBFLOW_OUTPUT_VARIABLE_NOT_FOUND_IN_MASTERFLOW' 
      | 'SUBFLOW_OUTPUT_VARIABLE_NOT_FOUND_IN_REFERENCEDFLOW' 
      | 'SUBFLOW_OUTPUT_VARIABLE_NO_OUTPUT_ACCESS' 
      | 'SUBFLOW_PROCESSTYPE_NOT_SUPPORTED' 
      | 'SUBFLOW_PROCESS_TYPE_INCOMPATIBLE' 
      | 'SUBFLOW_REFERENCES_MASTERFLOW' 
      | 'SURVEY_ADVANCED_CONDITION_LOGIC_NOT_SUPPORTED' 
      | 'SURVEY_CHOICE_NOT_REFERENCED_BY_A_QUESTION' 
      | 'SURVEY_CHOICE_REFERENCED_BY_MULTIPLE_QUESTIONS' 
      | 'SURVEY_ELEMENT_NEVER_REACHED' 
      | 'SURVEY_ENRICH_INVALID_CONFIGURATION' 
      | 'SURVEY_INACTIVE_SUBFLOWS' 
      | 'SURVEY_INVALID_ATTACHMENT_QUESTION_CONFIGURATION' 
      | 'SURVEY_INVALID_CMT_CONFIGURED' 
      | 'SURVEY_INVALID_CUSTOM_THANK_YOU_CONFIGURATION' 
      | 'SURVEY_INVALID_LINK_TARGET_IN_QUESTION_LABEL' 
      | 'SURVEY_INVALID_MATRIX_QUESTION_CONFIGURATION' 
      | 'SURVEY_INVALID_MERGE_FIELD_CONFIGURATION' 
      | 'SURVEY_INVALID_OUTPUT_VARIABLE' 
      | 'SURVEY_MISSING_QUESTION_OR_SUBFLOW' 
      | 'SURVEY_MISSING_REQUIRED_VARIABLES' 
      | 'SURVEY_MULTIPLE_SCREENS_CANNOT_CONNECT_TO_SAME_DECISION' 
      | 'SURVEY_NESTED_SUBFLOWS' 
      | 'SURVEY_NONSURVEY_SUBFLOWS' 
      | 'SURVEY_RULE_INVALID_LEFT_OPERAND' 
      | 'SURVEY_RULE_INVALID_RIGHT_OPERAND' 
      | 'SURVEY_SAVE_ERROR' 
      | 'SURVEY_SCREENFIELD_TYPE_NOT_SUPPORTED_FOR_QUESTION' 
      | 'SURVEY_START_ELEMENT_INVALID' 
      | 'SURVEY_VARIABLE_ACCESS_INVALID' 
      | 'SYSTEM_MODE_NOT_ALLOWED' 
      | 'SYSTEM_VARIABLE_MISSING_FIELD_REFERENCE' 
      | 'TEMPORARY_QUERY_MORE_FAILURE' 
      | 'TRIGGERED_FLOW_REDUNDANT_QUERY' 
      | 'TRIGGERING_RECORD_UPDATE_REQUIRES_INPUTASSIGNMENTS' 
      | 'TRIGGER_ORDER_NOT_SUPPORTED' 
      | 'TRIGGER_TYPE_CONTEXT_OBJECT_NOT_SUPPORTED' 
      | 'TRIGGER_TYPE_ELEMENT_NOT_SUPPORTED' 
      | 'TRIGGER_TYPE_INCOMPATIBLE_WITH_PROCESS_TYPE' 
      | 'TRIGGER_TYPE_NOT_ALLOWED_FOR_SUBFLOW' 
      | 'TYPE_MAPPING_DUPLICATED' 
      | 'TYPE_MAPPING_NAME_MISSING' 
      | 'TYPE_MAPPING_NOT_FOUND' 
      | 'TYPE_MAPPING_NOT_SUPPORTED' 
      | 'TYPE_MAPPING_NOT_SUPPORTED_FOR_API_VERSION' 
      | 'TYPE_MAPPING_NOT_SUPPORTED_FOR_PROCESS_TYPE' 
      | 'UNAUTHORIZED_USER_FOR_CURSOR' 
      | 'UNEXPECTED_ERROR' 
      | 'VALIDATION_EXCEPTION' 
      | 'VALUE_CHAR_LIMIT_EXCEEDED' 
      | 'VARIABLE_FIELD_IS_READ_ONLY' 
      | 'VARIABLE_FIELD_NOT_SUPPORTED_FOR_DATATYPE' 
      | 'VARIABLE_FIELD_NOT_SUPPORTED_FOR_DATATYPE_AND_COLLECTION' 
      | 'VARIABLE_FIELD_REQUIRED_FOR_DATATYPE' 
      | 'VARIABLE_NAME_IS_RESERVED_FOR_PROCESS_TYPE' 
      | 'VARIABLE_SCALE_EXCEEDS_LIMIT' 
      | 'VARIABLE_SCALE_NEGATIVE_INTEGER' 
      | 'VARIABLE_SCALE_NULL' 
      | 'VERSION_NOT_VALID' 
      | 'VISIBILITY_RULE_EXCEEDS_CONDITION_LIMIT' 
      | 'VISIBILITY_RULE_NOT_AVAILABLE_IN_ORG' 
      | 'VISIBILITY_RULE_NOT_SUPPORTED_FOR_API_VERSION' 
      | 'VISIBILITY_RULE_NOT_SUPPORTED_FOR_PROCESSTYPE' 
      | 'VISIBILITY_RULE_NO_CONDITIONS' 
      | 'WAITEVENT_BATCH_SIZE_NOT_SUPPORTED_FOR_EVENTTYPE' 
      | 'WAITEVENT_DEFAULT_CONNECTOR_MISSING_LABEL' 
      | 'WAITEVENT_DUPLICATE_INPUT_PARAM' 
      | 'WAITEVENT_INPUT_NOT_SUPPORTED_FOR_EVENTTYPE' 
      | 'WAITEVENT_INPUT_REQUIRES_LITERAL_VALUE' 
      | 'WAITEVENT_INVALID_CONDITION_LOGIC' 
      | 'WAITEVENT_INVALID_VALUE' 
      | 'WAITEVENT_MISSING' 
      | 'WAITEVENT_MISSING_CONNECTOR' 
      | 'WAITEVENT_MISSING_EVENTTYPE' 
      | 'WAITEVENT_OBJECT_NOT_SUPPORTED_FOR_EVENTTYPE' 
      | 'WAITEVENT_OUTPUT_NOT_SUPPORTED_FOR_EVENTTYPE' 
      | 'WAITEVENT_RELATIVEALARM_INVALID_DATETIME_FIELD' 
      | 'WAITEVENT_RELATIVEALARM_INVALID_FIELD' 
      | 'WAITEVENT_RELATIVEALARM_INVALID_OBJECTTYPE' 
      | 'WAITEVENT_RELATIVEALARM_INVALID_OFFSETNUMBER' 
      | 'WAITEVENT_RELATIVEALARM_INVALID_OFFSETUNIT' 
      | 'WAITEVENT_REQUIRED_INPUT_MISSING' 
      | 'WAITEVENT_RESUME_DATE_IN_PAST' 
      | 'WAITEVENT_TYPE_INVALID_OR_NOT_SUPPORTED' 
      | 'WORKFLOW_MISSING_PROCESSMETADATAVALUES' 
      | 'WORKFLOW_OBJECTTYPE_NOT_FOUND' 
      | 'WORKFLOW_OBJECTTYPE_NOT_SUPPORTED' 
      | 'WORKFLOW_OBJECTVARIABLE_AND_OLDOBJECTVARIABLE_REFERENCE_SAME_SOBJECT_VARIABLE' 
      | 'WORKFLOW_OBJECTVARIABLE_DOESNT_SUPPORT_INPUT' 
      | 'WORKFLOW_OLDOBJECTVARIABLE_DOESNT_SUPPORT_INPUT' 
      | 'WORKFLOW_PROCESSMETADATAVALUES_MORE_THAN_ONE_NAME' 
      | 'WORKFLOW_PROCESS_METADATAVALUES_MISSING_NAME' 
      | 'WORKFLOW_RECURSIVECOUNTVARIABLE_DOESNT_SUPPORT_INPUT' 
      | 'WORKFLOW_RULE_NOT_DEACTIVATED' 
      | 'WORKFLOW_TRIGGERTYPE_INVALID_VALUE';

export type WebLinkWindowType = 'newWindow' 
      | 'sidebar' 
      | 'noSidebar' 
      | 'replace' 
      | 'onClickJavaScript';

export type WebLinkType = 'url' 
      | 'sControl' 
      | 'javascript' 
      | 'page' 
      | 'flow';

export type WebLinkPosition = 'fullScreen' 
      | 'none' 
      | 'topLeft';

export type ReportChartComponentSize = 'SMALL' 
      | 'MEDIUM' 
      | 'LARGE';

export type TabOrderType = 'LeftToRight' 
      | 'TopToBottom';

export type ShareAccessLevel = 'Read' 
      | 'Edit' 
      | 'All';

export type orderByDirection = 'ascending' 
      | 'descending';

export type orderByNullsPosition = 'first' 
      | 'last';

export type soqlOperator = 'equals' 
      | 'excludes' 
      | 'greaterThan' 
      | 'greaterThanOrEqualTo' 
      | 'in' 
      | 'includes' 
      | 'lessThan' 
      | 'lessThanOrEqualTo' 
      | 'like' 
      | 'notEquals' 
      | 'notIn' 
      | 'within' 
      | 'notLike';

export type soqlConjunction = 'and' 
      | 'or';

export type FlowProcessType = 'AutoLaunchedFlow' 
      | 'Flow' 
      | 'Workflow' 
      | 'CustomEvent' 
      | 'InvocableProcess' 
      | 'LoginFlow' 
      | 'ActionPlan' 
      | 'JourneyBuilderIntegration' 
      | 'UserProvisioningFlow' 
      | 'Survey' 
      | 'SurveyEnrich' 
      | 'Appointments' 
      | 'FSCLending' 
      | 'DigitalForm' 
      | 'FieldServiceMobile' 
      | 'OrchestrationFlow' 
      | 'FieldServiceWeb' 
      | 'TransactionSecurityFlow' 
      | 'ContactRequestFlow' 
      | 'ActionCadenceFlow' 
      | 'ManagedContentFlow' 
      | 'CheckoutFlow' 
      | 'CartAsyncFlow' 
      | 'DataCaptureFlow' 
      | 'CustomerLifecycle' 
      | 'Journey' 
      | 'RecommendationStrategy' 
      | 'Orchestrator' 
      | 'RoutingFlow' 
      | 'ServiceCatalogItemFlow' 
      | 'EvaluationFlow' 
      | 'LoyaltyManagementFlow' 
      | 'ManagedContentAuthoringWorkflow' 
      | 'ActionCadenceAutolaunchedFlow' 
      | 'ActionCadenceStepFlow' 
      | 'IndicatorResultFlow' 
      | 'IndividualObjectLinkingFlow' 
      | 'PromptFlow';

export type TestLevel = 'NoTestRun' 
      | 'RunSpecifiedTests' 
      | 'RunLocalTests' 
      | 'RunAllTestsInOrg';

export type PerfOption = 'NONE' 
      | 'MINIMUM';

export type LogCategory = 'Db' 
      | 'Workflow' 
      | 'Validation' 
      | 'Callout' 
      | 'Apex_code' 
      | 'Apex_profiling' 
      | 'Visualforce' 
      | 'System' 
      | 'Wave' 
      | 'Nba' 
      | 'All';

export type LogCategoryLevel = 'None' 
      | 'Finest' 
      | 'Finer' 
      | 'Fine' 
      | 'Debug' 
      | 'Info' 
      | 'Warn' 
      | 'Error';

export type LogType = 'None' 
      | 'Debugonly' 
      | 'Db' 
      | 'Profiling' 
      | 'Callout' 
      | 'Detail';

export type MetadataVersionCheckFact = 'DescribeLayoutVersion' 
      | 'DescribeSObjectVersion' 
      | 'SystemConfigurationVersion';

export type Operation = 'RetrieveTokens' 
      | 'ErrorOnNewerVersion' 
      | 'SkipOnSameVersion';

export type ID = string;

export type QueryLocator = string;

export type StatusCode = 'ALERT_NOTIFICATION_LIMIT_EXCEEDED' 
      | 'ALL_OR_NONE_OPERATION_ROLLED_BACK' 
      | 'ALREADY_APPLIED' 
      | 'ALREADY_IN_PROCESS' 
      | 'ALREADY_REDEEMED_VOUCHER' 
      | 'APEX_DATA_ACCESS_RESTRICTION' 
      | 'APEX_FAILED' 
      | 'APPLICATION_ALREADY_EXISTS' 
      | 'ASSIGNEE_TYPE_REQUIRED' 
      | 'ATTRIBUTE_DEFINITION_LIMIT_EXCEEDED' 
      | 'AURA_COMPILE_ERROR' 
      | 'AUTH_PROVIDER_NEEDS_AUTH' 
      | 'AUTH_PROVIDER_NOT_FOUND' 
      | 'B2B_SEARCH_ADMIN_ERROR' 
      | 'BAD_CUSTOM_ENTITY_PARENT_DOMAIN' 
      | 'BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED' 
      | 'BLOCKED_EXCLUSIVE' 
      | 'CANNOT_CASCADE_PRODUCT_ACTIVE' 
      | 'CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD' 
      | 'CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD' 
      | 'CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE' 
      | 'CANNOT_DEACTIVATE_DIVISION' 
      | 'CANNOT_DELETE_GLOBAL_ACTION_LIST' 
      | 'CANNOT_DELETE_LAST_DATED_CONVERSION_RATE' 
      | 'CANNOT_DELETE_MANAGED_OBJECT' 
      | 'CANNOT_DISABLE_LAST_ADMIN' 
      | 'CANNOT_ENABLE_IP_RESTRICT_REQUESTS' 
      | 'CANNOT_EXECUTE_FLOW_TRIGGER' 
      | 'CANNOT_FREEZE_SELF' 
      | 'CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY' 
      | 'CANNOT_MODIFY_MANAGED_OBJECT' 
      | 'CANNOT_PASSWORD_LOCKOUT' 
      | 'CANNOT_POST_TO_ARCHIVED_GROUP' 
      | 'CANNOT_RENAME_APEX_REFERENCED_FIELD' 
      | 'CANNOT_RENAME_APEX_REFERENCED_OBJECT' 
      | 'CANNOT_RENAME_REFERENCED_FIELD' 
      | 'CANNOT_RENAME_REFERENCED_OBJECT' 
      | 'CANNOT_REPARENT_RECORD' 
      | 'CANNOT_UPDATE_CONVERTED_LEAD' 
      | 'CANNOT_UPDATE_IS_THIRD_PARTY' 
      | 'CANNOT_UPDATE_PAYMENT_METHOD_SET' 
      | 'CANT_DISABLE_CORP_CURRENCY' 
      | 'CANT_UNSET_CORP_CURRENCY' 
      | 'CART_DELIVERY_GROUP_NOT_FOUND' 
      | 'CART_ITEM_NOT_FOUND' 
      | 'CART_NOT_FOUND' 
      | 'CHECKOUT_CONFLICT' 
      | 'CHECKOUT_EXPIRED' 
      | 'CHECKOUT_INVALIDATED' 
      | 'CHECKOUT_LOCKED' 
      | 'CHECKOUT_NOT_FOUND' 
      | 'CHECKOUT_UNAUTHORIZED' 
      | 'CHILD_SHARE_FAILS_PARENT' 
      | 'CIRCULAR_DEPENDENCY' 
      | 'CLEAN_SERVICE_ERROR' 
      | 'CLM_INSUFFICIENT_ACCESS' 
      | 'CLM_RECORD_NOT_FOUND' 
      | 'CLONE_FIELD_INTEGRITY_EXCEPTION' 
      | 'CLONE_NOT_SUPPORTED' 
      | 'CMS_FOLDER_ITEM_MOVE_FAILED' 
      | 'COLLISION_DETECTED' 
      | 'COMMERCE_SEARCH_INDEXING_SYSTEM_ERROR' 
      | 'COMMERCE_SEARCH_MQ_ERROR' 
      | 'COMMERCE_SEARCH_PROVIDER_LIMIT_EXCEEDED' 
      | 'COMMERCE_SEARCH_RESOURCE_NOT_FOUND' 
      | 'COMMERCIAL_CONTROL_ERROR' 
      | 'COMMUNITY_NOT_ACCESSIBLE' 
      | 'CONFLICT' 
      | 'CONFLICTING_ENVIRONMENT_HUB_MEMBER' 
      | 'CONFLICTING_SSO_USER_MAPPING' 
      | 'CONTENT_NOT_FOUND' 
      | 'CONTENT_SEARCH_NOT_ENABLED' 
      | 'CONTENT_TYPE_DISABLED_FOR_API' 
      | 'CONTENT_TYPE_NOT_FOUND' 
      | 'COUPON_REDEMPTION_LIMIT_EXCEEDED' 
      | 'CUSTOM_APEX_ERROR' 
      | 'CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED' 
      | 'CUSTOM_ENTITY_OR_FIELD_LIMIT' 
      | 'CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED' 
      | 'CUSTOM_INDEX_EXISTS' 
      | 'CUSTOM_LINK_LIMIT_EXCEEDED' 
      | 'CUSTOM_METADATA_LIMIT_EXCEEDED' 
      | 'CUSTOM_METADATA_REL_FIELD_MANAGEABILITY' 
      | 'CUSTOM_SETTINGS_LIMIT_EXCEEDED' 
      | 'CUSTOM_TAB_LIMIT_EXCEEDED' 
      | 'DATAASSESSMENT_CONFIG_ASSESSMENT_IN_PROGRESS_ERROR' 
      | 'DATAASSESSMENT_CONFIG_SERVICE_ERROR' 
      | 'DATACLOUDADDRESS_NO_RECORDS_FOUND' 
      | 'DATACLOUDADDRESS_PROCESSING_ERROR' 
      | 'DATACLOUDADDRESS_SERVER_ERROR' 
      | 'DATA_MAPPING_NOT_FOUND' 
      | 'DATA_MAPPING_SCHEMA_NOT_FOUND' 
      | 'DATA_TRANSFER_RECORD_LIMIT_EXCEEDED' 
      | 'DATA_TYPE_NOT_SUPPORTED' 
      | 'DATE_OUT_OF_RANGE' 
      | 'DELETE_FAILED' 
      | 'DELETE_NOT_ALLOWED' 
      | 'DELETE_OPERATION_TOO_LARGE' 
      | 'DELETE_REQUIRED_ON_CASCADE' 
      | 'DEPENDENCY_EXISTS' 
      | 'DUPLICATES_DETECTED' 
      | 'DUPLICATE_CASE_SOLUTION' 
      | 'DUPLICATE_COMM_NICKNAME' 
      | 'DUPLICATE_CUSTOM_ENTITY_DEFINITION' 
      | 'DUPLICATE_CUSTOM_TAB_MOTIF' 
      | 'DUPLICATE_DEVELOPER_NAME' 
      | 'DUPLICATE_EXTERNAL_ID' 
      | 'DUPLICATE_MASTER_LABEL' 
      | 'DUPLICATE_SENDER_DISPLAY_NAME' 
      | 'DUPLICATE_USERNAME' 
      | 'DUPLICATE_VALUE' 
      | 'EMAIL_ADDRESS_BOUNCED' 
      | 'EMAIL_EXTERNAL_TRANSPORT_CONNECTION_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_PERMISSION_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_TOKEN_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_TOO_LARGE_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_TOO_MANY_REQUESTS_ERROR' 
      | 'EMAIL_EXTERNAL_TRANSPORT_UNKNOWN_ERROR' 
      | 'EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR' 
      | 'EMAIL_OPTED_OUT' 
      | 'EMAIL_TEMPLATE_FORMULA_ERROR' 
      | 'EMAIL_TEMPLATE_MERGEFIELD_ACCESS_ERROR' 
      | 'EMAIL_TEMPLATE_MERGEFIELD_ERROR' 
      | 'EMAIL_TEMPLATE_MERGEFIELD_VALUE_ERROR' 
      | 'EMAIL_TEMPLATE_PROCESSING_ERROR' 
      | 'EMPTY_CATALOG' 
      | 'EMPTY_INGESTION_JOB' 
      | 'EMPTY_SCONTROL_FILE_NAME' 
      | 'ENHANCED_EMAIL_TEMPLATE_COMPILATION_ERROR' 
      | 'ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE' 
      | 'ENTITY_IS_ARCHIVED' 
      | 'ENTITY_IS_DELETED' 
      | 'ENTITY_IS_LOCKED' 
      | 'ENTITY_SAVE_ERROR' 
      | 'ENTITY_SAVE_VALIDATION_ERROR' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN' 
      | 'ERROR_CALCULATING_EXPIRY_DATE' 
      | 'ERROR_IN_MAILER' 
      | 'EXCEEDED_MAX_SEMIJOIN_SUBSELECTS_WRITE' 
      | 'EXCHANGE_WEB_SERVICES_URL_INVALID' 
      | 'EXTERNAL_RESOURCE_FORBIDDEN' 
      | 'FAILED_ACTIVATION' 
      | 'FAILED_DUE_TO_OTHER_INPUTS' 
      | 'FAILED_TO_RESOLVE_MAPPING' 
      | 'FAILED_TO_RESOLVE_SCHEMA_INFORMATION' 
      | 'FIELD_CUSTOM_VALIDATION_EXCEPTION' 
      | 'FIELD_FILTER_VALIDATION_EXCEPTION' 
      | 'FIELD_INTEGRITY_EXCEPTION' 
      | 'FIELD_KEYWORD_LIST_MATCH_LIMIT' 
      | 'FIELD_MAPPING_ERROR' 
      | 'FIELD_MODERATION_RULE_BLOCK' 
      | 'FIELD_NOT_UPDATABLE' 
      | 'FILE_EXTENSION_NOT_ALLOWED' 
      | 'FILE_SIZE_LIMIT_EXCEEDED' 
      | 'FILTERED_LOOKUP_LIMIT_EXCEEDED' 
      | 'FIND_DUPLICATES_ERROR' 
      | 'FLOW_EXCEPTION' 
      | 'FUNCTIONALITY_NOT_ENABLED' 
      | 'GET_EINSTEIN_TENANT_ERROR' 
      | 'GUEST_INSUFFICIENT_ACCESS' 
      | 'HAS_PUBLIC_REFERENCES' 
      | 'HTML_FILE_UPLOAD_NOT_ALLOWED' 
      | 'IAS_AM_AUTH_BAD_REQUEST' 
      | 'IAS_AM_AUTH_UNAUTHORIZED' 
      | 'IAS_INVALID_AUTH' 
      | 'IAS_INVALID_REQUEST_PARAMETER' 
      | 'IAS_RECORD_DOES_NOT_EXIST' 
      | 'IAS_TENANT_NOT_PROVISIONED' 
      | 'IAS_UNCOMMITTED_WORK' 
      | 'IMAGE_TOO_LARGE' 
      | 'INACTIVE_OWNER_OR_USER' 
      | 'INACTIVE_RULE_ERROR' 
      | 'INDEX_ITEM_LIMIT_EXCEEDED' 
      | 'INDEX_PAYLOAD_NOT_FOUND' 
      | 'INGESTION_JOB_RECORDS_LIMIT_EXCEEDED' 
      | 'INGESTION_TOTAL_FILE_SIZE_LIMIT_EXCEEDED' 
      | 'INPUTPARAM_INCOMPATIBLE_DATATYPE' 
      | 'INSERT_UPDATE_DELETE_NOT_ALLOWED_DURING_MAINTENANCE' 
      | 'INSUFFICIENT_ACCESS' 
      | 'INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY' 
      | 'INSUFFICIENT_ACCESS_OR_READONLY' 
      | 'INSUFFICIENT_ACCESS_TO_INSIGHTSEXTERNALDATA' 
      | 'INSUFFICIENT_BALANCE' 
      | 'INSUFFICIENT_BENEFIT_REMAINING' 
      | 'INSUFFICIENT_CREDITS' 
      | 'INTEGRATION_CANCELLED' 
      | 'INTERNAL_ERROR' 
      | 'INVALID_ACCESS_LEVEL' 
      | 'INVALID_ACCESS_TOKEN' 
      | 'INVALID_ACCOUNT' 
      | 'INVALID_ACTION_VERSION' 
      | 'INVALID_API_INPUT' 
      | 'INVALID_ARGUMENT_TYPE' 
      | 'INVALID_ASSIGNEE_TYPE' 
      | 'INVALID_ASSIGNMENT_RULE' 
      | 'INVALID_AUTH_HEADER' 
      | 'INVALID_BATCH_OPERATION' 
      | 'INVALID_BUSINESS_HOURS_NAME' 
      | 'INVALID_CATEGORY_NETWORK' 
      | 'INVALID_CHECKOUT_INPUT' 
      | 'INVALID_CONTACT' 
      | 'INVALID_CONTENT_TYPE' 
      | 'INVALID_CREDIT_CARD_INFO' 
      | 'INVALID_CROSS_REFERENCE_KEY' 
      | 'INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD' 
      | 'INVALID_CURRENCY_CONV_RATE' 
      | 'INVALID_CURRENCY_CORP_RATE' 
      | 'INVALID_CURRENCY_ISO' 
      | 'INVALID_DATASET_REFERENCE_INPUT' 
      | 'INVALID_DATA_CATEGORY_GROUP_REFERENCE' 
      | 'INVALID_DATA_URI' 
      | 'INVALID_EBV_OPERATION' 
      | 'INVALID_EMAIL_ADDRESS' 
      | 'INVALID_EMPTY_KEY_OWNER' 
      | 'INVALID_ENTITY_FOR_MATCH_ENGINE_ERROR' 
      | 'INVALID_ENTITY_FOR_MATCH_OPERATION_ERROR' 
      | 'INVALID_ENTITY_FOR_UPSERT' 
      | 'INVALID_ENVIRONMENT_HUB_MEMBER' 
      | 'INVALID_EVENT_DELIVERY' 
      | 'INVALID_EVENT_INPUT' 
      | 'INVALID_EVENT_SUBSCRIPTION' 
      | 'INVALID_EXTENSION_ID' 
      | 'INVALID_EXTERNAL_ID_FIELD_NAME' 
      | 'INVALID_FIELD' 
      | 'INVALID_FIELD_FOR_INSERT_UPDATE' 
      | 'INVALID_FIELD_WHEN_USING_TEMPLATE' 
      | 'INVALID_FILTER_ACTION' 
      | 'INVALID_GOOGLE_DOCS_URL' 
      | 'INVALID_ID_FIELD' 
      | 'INVALID_INET_ADDRESS' 
      | 'INVALID_INPUT' 
      | 'INVALID_INPUT_FORMAT' 
      | 'INVALID_KEY_FIELD_INPUT' 
      | 'INVALID_LINEITEM_CLONE_STATE' 
      | 'INVALID_MARKUP' 
      | 'INVALID_MASTER_OR_TRANSLATED_SOLUTION' 
      | 'INVALID_MERCHANT_ACCOUNT_MODE' 
      | 'INVALID_MERCHANT_ACCOUNT_MODE_OR_STATUS' 
      | 'INVALID_MERGE_RECORD' 
      | 'INVALID_MESSAGE_ID_REFERENCE' 
      | 'INVALID_NAMESPACE_PREFIX' 
      | 'INVALID_OAUTH_URL' 
      | 'INVALID_OPERATION' 
      | 'INVALID_OPERATOR' 
      | 'INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST' 
      | 'INVALID_OWNER' 
      | 'INVALID_PACKAGE_LICENSE' 
      | 'INVALID_PACKAGE_VERSION' 
      | 'INVALID_PARTNER_NETWORK_STATUS' 
      | 'INVALID_PAYLOAD_VERSION' 
      | 'INVALID_PERSON_ACCOUNT_OPERATION' 
      | 'INVALID_PROFILE' 
      | 'INVALID_PROMOTION' 
      | 'INVALID_PROVIDER_TYPE' 
      | 'INVALID_QUERY_KEY' 
      | 'INVALID_QUERY_LOCATOR' 
      | 'INVALID_QUERY_VALUE' 
      | 'INVALID_READ_ONLY_USER_DML' 
      | 'INVALID_RECEIVEDDOCUMENTID_ATTACHMENT' 
      | 'INVALID_RECORD_ATTRIBUTE_VALUE' 
      | 'INVALID_RECORD_TYPE' 
      | 'INVALID_REFRESH_TOKEN' 
      | 'INVALID_REORDER_PORTAL_RECORD_ASSOCIATION' 
      | 'INVALID_REQUEST_STATE' 
      | 'INVALID_RUNTIME_VALUE' 
      | 'INVALID_SAVE_AS_ACTIVITY_FLAG' 
      | 'INVALID_SCS_INBOUND_USER' 
      | 'INVALID_SEARCH_PROVIDER_REQUEST' 
      | 'INVALID_SESSION_ID' 
      | 'INVALID_SETUP_OWNER' 
      | 'INVALID_SIGNUP_COUNTRY' 
      | 'INVALID_SIGNUP_OPTION' 
      | 'INVALID_SITE_DELETE_EXCEPTION' 
      | 'INVALID_SITE_FILE_IMPORTED_EXCEPTION' 
      | 'INVALID_SITE_FILE_TYPE_EXCEPTION' 
      | 'INVALID_SOURCE_OBJECT_ID' 
      | 'INVALID_STATUS' 
      | 'INVALID_SUBDOMAIN' 
      | 'INVALID_TARGET_OBJECT_NAME' 
      | 'INVALID_TEXT_REPRESENTATION' 
      | 'INVALID_TYPE' 
      | 'INVALID_TYPE_FOR_OPERATION' 
      | 'INVALID_TYPE_ON_FIELD_IN_RECORD' 
      | 'INVALID_UNMERGE_RECORD' 
      | 'INVALID_USERID' 
      | 'INVALID_USER_OBJECT' 
      | 'IP_RANGE_LIMIT_EXCEEDED' 
      | 'ITEM_NOT_FOUND' 
      | 'JIGSAW_IMPORT_LIMIT_EXCEEDED' 
      | 'LICENSE_LIMIT_EXCEEDED' 
      | 'LIGHT_PORTAL_USER_EXCEPTION' 
      | 'LIMIT_EXCEEDED' 
      | 'LIST_PRICE_NOT_FOUND' 
      | 'MALFORMED_ID' 
      | 'MANAGER_NOT_DEFINED' 
      | 'MASSMAIL_RETRY_LIMIT_EXCEEDED' 
      | 'MASS_MAIL_LIMIT_EXCEEDED' 
      | 'MATCH_DEFINITION_ERROR' 
      | 'MATCH_OPERATION_ERROR' 
      | 'MATCH_OPERATION_INVALID_ENGINE_ERROR' 
      | 'MATCH_OPERATION_INVALID_RULE_ERROR' 
      | 'MATCH_OPERATION_MISSING_ENGINE_ERROR' 
      | 'MATCH_OPERATION_MISSING_OBJECT_TYPE_ERROR' 
      | 'MATCH_OPERATION_MISSING_OPTIONS_ERROR' 
      | 'MATCH_OPERATION_MISSING_RULE_ERROR' 
      | 'MATCH_OPERATION_UNKNOWN_RULE_ERROR' 
      | 'MATCH_OPERATION_UNSUPPORTED_VERSION_ERROR' 
      | 'MATCH_PRECONDITION_FAILED' 
      | 'MATCH_PRECONDITION_REQUIRED' 
      | 'MATCH_RUNTIME_ERROR' 
      | 'MATCH_SERVICE_ERROR' 
      | 'MATCH_SERVICE_TIMED_OUT' 
      | 'MATCH_SERVICE_UNAVAILABLE_ERROR' 
      | 'MAXIMUM_CCEMAILS_EXCEEDED' 
      | 'MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED' 
      | 'MAXIMUM_HIERARCHY_CHILDREN_REACHED' 
      | 'MAXIMUM_HIERARCHY_LEVELS_REACHED' 
      | 'MAXIMUM_HIERARCHY_TREE_SIZE_REACHED' 
      | 'MAXIMUM_SIZE_OF_ATTACHMENT' 
      | 'MAXIMUM_SIZE_OF_DOCUMENT' 
      | 'MAX_ACTIONS_PER_RULE_EXCEEDED' 
      | 'MAX_ACTIVE_RULES_EXCEEDED' 
      | 'MAX_APPROVAL_STEPS_EXCEEDED' 
      | 'MAX_DEPTH_IN_FLOW_EXECUTION' 
      | 'MAX_FORMULAS_PER_RULE_EXCEEDED' 
      | 'MAX_LIMIT_EXCEEDED' 
      | 'MAX_LOCALES_EXCEEDED' 
      | 'MAX_RULES_EXCEEDED' 
      | 'MAX_RULE_ENTRIES_EXCEEDED' 
      | 'MAX_TASK_DESCRIPTION_EXCEEEDED' 
      | 'MAX_TM_RULES_EXCEEDED' 
      | 'MAX_TM_RULE_ITEMS_EXCEEDED' 
      | 'MAX_TRIGGERS_EXCEEDED' 
      | 'MERGE_FAILED' 
      | 'METADATA_FIELD_UPDATE_ERROR' 
      | 'METHOD_NOT_ALLOWED' 
      | 'MISMATCHING_TYPES' 
      | 'MISSING_ARGUMENT' 
      | 'MISSING_OMNI_PROCESS_ID' 
      | 'MISSING_PAY_NOW_SITE_URL_ORG_VALUE' 
      | 'MISSING_RECEIVEDDOCUMENTID_ATTACHMENT' 
      | 'MISSING_RECORD' 
      | 'MIXED_DML_OPERATION' 
      | 'MODEL_NOT_ACTIVE' 
      | 'MULTIPLE_CONTENT_FOUND' 
      | 'MULTIPLE_VOUCHERS' 
      | 'NONUNIQUE_SHIPPING_ADDRESS' 
      | 'NOT_FOUND' 
      | 'NOT_RECOVERABLE_SEARCH_PROVIDER_ERROR' 
      | 'NO_ACCESS_TOKEN' 
      | 'NO_ACCESS_TOKEN_FROM_REFRESH' 
      | 'NO_APPLICABLE_PROCESS' 
      | 'NO_ATTACHMENT_PERMISSION' 
      | 'NO_AUTH_PROVIDER' 
      | 'NO_BUSINESS_HOURS_FOUND' 
      | 'NO_INACTIVE_DIVISION_MEMBERS' 
      | 'NO_MASS_MAIL_PERMISSION' 
      | 'NO_MESSAGE_TYPE_MESSAGES' 
      | 'NO_PARTNER_PERMISSION' 
      | 'NO_REFRESH_TOKEN' 
      | 'NO_SEARCH_ATTRIBUTES' 
      | 'NO_SINGLE_MAIL_PERMISSION' 
      | 'NO_SORT_PRICEBOOK_ASSOCIATED_ERROR' 
      | 'NO_SUCH_USER_EXISTS' 
      | 'NO_TOKEN_ENDPOINT' 
      | 'NUMBER_OUTSIDE_VALID_RANGE' 
      | 'NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED' 
      | 'OCR_INVALID_REQUEST' 
      | 'OPERATION_ENQUEUED' 
      | 'OPERATION_WITH_CALLBACK_ENQUEUED' 
      | 'OPTED_OUT_OF_MASS_MAIL' 
      | 'OP_WITH_INVALID_USER_TYPE_EXCEPTION' 
      | 'ORCHESTRATION_INVALID' 
      | 'ORDER_MANAGEMENT_ACTION_NOT_ALLOWED' 
      | 'ORDER_MANAGEMENT_INVALID_RECORD' 
      | 'ORDER_MANAGEMENT_RECORD_EXISTS' 
      | 'ORDER_MANAGEMENT_RECORD_NOT_FOUND' 
      | 'ORG_SETTING_REQUIRED' 
      | 'PACKAGE_DISABLED' 
      | 'PACKAGE_LICENSE_REQUIRED' 
      | 'PACKAGING_API_INSTALL_FAILED' 
      | 'PACKAGING_API_UNINSTALL_FAILED' 
      | 'PALI_INVALID_ACTION_ID' 
      | 'PALI_INVALID_ACTION_NAME' 
      | 'PALI_INVALID_ACTION_TYPE' 
      | 'PAL_INVALID_ASSISTANT_RECOMMENDATION_TYPE_ID' 
      | 'PAL_INVALID_ENTITY_ID' 
      | 'PAL_INVALID_FLEXIPAGE_ID' 
      | 'PAL_INVALID_LAYOUT_ID' 
      | 'PAL_INVALID_PARAMETERS' 
      | 'PARAMETER_TOO_LARGE' 
      | 'PARTICIPANT_RELATIONSHIP_EXISTS' 
      | 'PAYLOAD_SIZE_EXCEEDED' 
      | 'PA_API_EXCEPTION' 
      | 'PA_AXIS_FAULT' 
      | 'PA_INVALID_ID_EXCEPTION' 
      | 'PA_NO_ACCESS_EXCEPTION' 
      | 'PA_NO_DATA_FOUND_EXCEPTION' 
      | 'PA_URI_SYNTAX_EXCEPTION' 
      | 'PA_VISIBLE_ACTIONS_FILTER_ORDERING_EXCEPTION' 
      | 'PENDING_COMMIT' 
      | 'PICKLIST_INACTIVE_VALUES_EXCEEDED' 
      | 'PLATFORM_EVENT_ENCRYPTION_ERROR' 
      | 'PLATFORM_EVENT_PUBLISHING_UNAVAILABLE' 
      | 'PLATFORM_EVENT_PUBLISH_FAILED' 
      | 'PORTAL_NO_ACCESS' 
      | 'PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT' 
      | 'PORTAL_USER_CREATION_RESTRICTED_WITH_ENCRYPTION' 
      | 'PRICE_NOT_FOUND' 
      | 'PRIVATE_CONTACT_ON_ASSET' 
      | 'PROCESSING_HALTED' 
      | 'PROGRAM_PROGRESS_NOT_ACTIVE' 
      | 'PROMOTION_NOT_FOUND' 
      | 'QA_INVALID_CREATE_FEED_ITEM' 
      | 'QA_INVALID_SUCCESS_MESSAGE' 
      | 'QUERY_REFINEMENT_VALUE_LIMIT_EXCEEDED' 
      | 'QUERY_TIMEOUT' 
      | 'QUERY_TOKEN_COUNT_LIMIT_EXCEEDED' 
      | 'QUICK_ACTION_LIST_ITEM_NOT_ALLOWED' 
      | 'QUICK_ACTION_LIST_NOT_ALLOWED' 
      | 'RECORD_CREATION_FAILED' 
      | 'RECORD_IN_USE_BY_WORKFLOW' 
      | 'RECORD_MISSING_REQUIRED_FIELD' 
      | 'RECORD_TYPE_LIMIT_EXCEEDED' 
      | 'RECORD_UPDATE_FAILED' 
      | 'RECOVERABLE_SEARCH_PROVIDER_ERROR' 
      | 'REFRESH_FAILED' 
      | 'RELATED_ENTITY_FILTER_VALIDATION_EXCEPTION' 
      | 'REL_FIELD_BAD_ACCESSIBILITY' 
      | 'REPUTATION_MINIMUM_NUMBER_NOT_REACHED' 
      | 'REQUEST_RUNNING_TOO_LONG' 
      | 'REQUIRED_FEATURE_MISSING' 
      | 'REQUIRED_FIELD_MISSING' 
      | 'REQUIRE_CONNECTED_APP_SCS' 
      | 'REQUIRE_CONNECTED_APP_SESSION_SCS' 
      | 'REQUIRE_RUNAS_USER' 
      | 'RESOURCE_NOT_AVAILABLE' 
      | 'RETRIEVE_EXCHANGE_ATTACHMENT_FAILED' 
      | 'RETRIEVE_EXCHANGE_EMAIL_FAILED' 
      | 'RETRIEVE_EXCHANGE_EVENT_FAILED' 
      | 'RETRIEVE_GOOGLE_EMAIL_FAILED' 
      | 'RETRIEVE_GOOGLE_EVENT_FAILED' 
      | 'RETRIEVE_USER_CONFIG_ERROR' 
      | 'ROUTES_EVALUATION_LIMIT_EXCEEDED' 
      | 'SALESFORCE_INBOX_TRANSPORT_CONNECTION_ERROR' 
      | 'SALESFORCE_INBOX_TRANSPORT_INVALID_INPUT_ERROR' 
      | 'SALESFORCE_INBOX_TRANSPORT_TOKEN_ERROR' 
      | 'SALESFORCE_INBOX_TRANSPORT_UNKNOWN_ERROR' 
      | 'SCHEMA_OBJECT_NOT_FOUND' 
      | 'SCREEN_POP_REQUIRED_INPUT_MISSING' 
      | 'SEARCH_INCLUDE_RULES_MAX_RULE_DEFINITION_LIMIT_EXCEEDED' 
      | 'SEARCH_INCLUDE_RULES_MIN_RULE_DEFINITION_NOT_MET' 
      | 'SEARCH_PROVIDER_PATH_LIMIT_EXCEEDED' 
      | 'SEARCH_PROVIDER_REQUEST_RATE_EXCEEDED' 
      | 'SEGMENT_COUNT_LIMIT_EXCEEDED' 
      | 'SELF_REFERENCE_FROM_FLOW' 
      | 'SELF_REFERENCE_FROM_TRIGGER' 
      | 'SERVICE_UNAVAILABLE' 
      | 'SESSION_EXPIRED' 
      | 'SESSION_INVALIDATED' 
      | 'SHARE_NEEDED_FOR_CHILD_OWNER' 
      | 'SINGLE_EMAIL_LIMIT_EXCEEDED' 
      | 'SLACK_API_ERROR' 
      | 'SOCIAL_ACCOUNT_NOT_FOUND' 
      | 'SOCIAL_ACTION_INVALID' 
      | 'SOCIAL_PERSONA_NOT_FOUND' 
      | 'SOCIAL_POST_INVALID' 
      | 'SOCIAL_POST_NOT_FOUND' 
      | 'SPECIFICATION_GENERATION_EXCEPTION' 
      | 'STANDARD_PRICE_NOT_DEFINED' 
      | 'STORAGE_LIMIT_EXCEEDED' 
      | 'STRING_TOO_LONG' 
      | 'SUBDOMAIN_IN_USE' 
      | 'TABSET_LIMIT_EXCEEDED' 
      | 'TEMPLATE_NOT_ACTIVE' 
      | 'TEMPLATE_NOT_FOUND' 
      | 'TERMS_OF_SERVICE_UNREAD' 
      | 'TERRITORY_REALIGN_IN_PROGRESS' 
      | 'TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET' 
      | 'TEXT_TO_PICKLIST_VALUES_EXCEEDED' 
      | 'TOO_MANY_APEX_REQUESTS' 
      | 'TOO_MANY_ENUM_VALUE' 
      | 'TOO_MANY_JOBS' 
      | 'TOO_MANY_POSSIBLE_USERS_EXIST' 
      | 'TRANSFER_REQUIRES_READ' 
      | 'TXN_SECURITY_NO_ACCESS' 
      | 'UISF_ENTITY_QUERY_FAILED' 
      | 'UISF_NO_MAPPINGS_FOUND' 
      | 'UISF_TOKEN_NOT_FOUND' 
      | 'UISF_UNKNOWN_EXCEPTION' 
      | 'UISF_USER_MAPPING_FAILED' 
      | 'UNABLE_TO_LOCK_ROW' 
      | 'UNAUTHORIZED_SEARCH_PROVIDER_REQUEST' 
      | 'UNAVAILABLE_RECORDTYPE_EXCEPTION' 
      | 'UNAVAILABLE_REF' 
      | 'UNDEFINED_MAPPING_DEFINITION' 
      | 'UNDELETE_FAILED' 
      | 'UNKNOWN_EXCEPTION' 
      | 'UNKNOWN_TOKEN_ERROR' 
      | 'UNPROCESSABLE_REQUEST' 
      | 'UNQUALIFIED_CART' 
      | 'UNRESOLVABLE_PAY_NOW_WEBSTORE' 
      | 'UNSAFE_HTML_CONTENT' 
      | 'UNSPECIFIED_EMAIL_ADDRESS' 
      | 'UNSUPPORTED_APEX_TRIGGER_OPERATON' 
      | 'UNSUPPORTED_MODE' 
      | 'UNSUPPORTED_PAYMENT_GATEWAY_TYPE' 
      | 'UNSUPPORTED_PAYMENT_REQUEST_TYPE' 
      | 'UNSUPPORTED_SITE' 
      | 'UNSUPPORTED_SITE_FILE_IMPORTED_EXCEPTION' 
      | 'UNSUPPORTED_SOCIAL_PROVIDER' 
      | 'UNVERIFIED_SENDER_ADDRESS' 
      | 'UPDATE_GOOGLE_EMAIL_LABEL_FAILED' 
      | 'USER_OWNS_PORTAL_ACCOUNT_EXCEPTION' 
      | 'USER_WITHOUT_WEM_PERMISSION' 
      | 'USER_WITH_APEX_SHARES_EXCEPTION' 
      | 'VARIANT_NOT_FOUND' 
      | 'VF_COMPILE_ERROR' 
      | 'VOICE_CAPACITY_ERROR' 
      | 'WEBLINK_SIZE_LIMIT_EXCEEDED' 
      | 'WEBLINK_URL_INVALID' 
      | 'WEM_SEGMENTS_CAN_NOT_HAVE_NON_ACTIVE_SEGMENT_TYPE' 
      | 'WEM_SHIFT_SEGMENT_TIME_IS_OUTSIDE_OF_THE_SHIFT_DURATION' 
      | 'WEM_USER_NOT_ORG_ADMIN' 
      | 'WORKSPACE_NOT_FOUND' 
      | 'WRONG_CONTROLLER_TYPE' 
      | 'XCLEAN_DJ_MATCH_IGNORABLE_ERROR' 
      | 'XCLEAN_DJ_MATCH_INTERNAL_DJ_ERROR' 
      | 'XCLEAN_DJ_MATCH_NON_RETRIABLE_ERROR' 
      | 'XCLEAN_DJ_MATCH_RETRIABLE_ERROR' 
      | 'XCLEAN_DJ_MATCH_UNKNOWN_ERROR' 
      | 'XCLEAN_UNEXPECTED_ERROR';

export type ACPStatus = 'New' 
      | 'Pending' 
      | 'Deployed';

export type AIApplicationStatus = 'Draft' 
      | 'Migrated' 
      | 'Enabled' 
      | 'Disabled';

export type AIApplicationType = 'Platform' 
      | 'LeadScoring' 
      | 'ForecastingPredictive' 
      | 'CaseClassification' 
      | 'PredictionBuilder' 
      | 'Assistant' 
      | 'Bots' 
      | 'EPLite' 
      | 'Discovery' 
      | 'ReferralScoring' 
      | 'IntelligentOffers' 
      | 'CaseWrapUp' 
      | 'VoiceWrapUp' 
      | 'RecommendationBuilder' 
      | 'OpportunityScoring' 
      | 'SalesAILeadScoring' 
      | 'ServiceCaseWrapUp' 
      | 'ServiceCaseClassification' 
      | 'KeyAccountIdentification' 
      | 'OpportunityPushedOutInsight' 
      | 'InvoiceLatePaymentRiskCalculation' 
      | 'SalesAIOpportunityScoring' 
      | 'SalesAIForecastingPredictive' 
      | 'CallCaseWrapUp' 
      | 'SalesAIOpportunityForecasting' 
      | 'CustomizablePropensityScoring' 
      | 'GenerativeIntelligence' 
      | 'OmOrderRoutingPrediction';

export type AIDataSetType = 'HoldOut' 
      | 'Training' 
      | 'Live' 
      | 'Model' 
      | 'Baseline';

export type AIFilterOperation = 'And' 
      | 'Or' 
      | 'Not' 
      | 'LessThan' 
      | 'LessThanOrEqual' 
      | 'GreaterThan' 
      | 'GreaterThanOrEqual' 
      | 'Equals' 
      | 'NotEquals' 
      | 'Add' 
      | 'Subtract' 
      | 'Multiply' 
      | 'Divide' 
      | 'IsNull' 
      | 'IsNotNull' 
      | 'StartsWith' 
      | 'EndsWith' 
      | 'Contains' 
      | 'Concat' 
      | 'DoesNotContain' 
      | 'Between' 
      | 'In';

export type AIFilterUnit = 'Milliseconds' 
      | 'Seconds' 
      | 'Minutes' 
      | 'Hours' 
      | 'Days' 
      | 'Weeks' 
      | 'Months' 
      | 'Years';

export type AIIntensityType = 'Weight' 
      | 'Importance' 
      | 'Correlation';

export type AIManagedFieldType = 'Included' 
      | 'Excluded';

export type AIMetricType = 'auROC' 
      | 'Accuracy' 
      | 'BalancedAccuracy' 
      | 'Precision' 
      | 'Recall' 
      | 'FMeasure' 
      | 'RootMeanSquaredError' 
      | 'MeanAbsoluteError' 
      | 'RSquared' 
      | 'auPR' 
      | 'PrecisionAtK' 
      | 'RecallAtK' 
      | 'HitRateAtK' 
      | 'F1Score' 
      | 'MeanPercentileRank' 
      | 'MeanAbsoluteRank' 
      | 'ExpectedTopPercentileRank' 
      | 'ExpectedTopAbsoluteRank' 
      | 'MeanReciprocalRankAtK' 
      | 'DiscountedCumulativeGainAtK' 
      | 'NormalizedDiscountedCumulativeGainsAtK' 
      | 'AveragePrecision' 
      | 'MeanAveragePrecisionAtK' 
      | 'MeanReciprocalRank' 
      | 'MeanTopReciprocalRank' 
      | 'LiftBucket';

export type AIModelApproval = 'Pending' 
      | 'Approved' 
      | 'Rejected';

export type AIModelDefinitionApprovalType = 'RequireApproval' 
      | 'PreApproved';

export type AIModelDefinitionStatus = 'Enabled' 
      | 'Disabled';

export type AIModelFactorType = 'Basic' 
      | 'And' 
      | 'Or';

export type AIModelGraphType = 'ConfidencePlot' 
      | 'LiftPlot' 
      | 'PrecisionGraph' 
      | 'RecallGraph' 
      | 'HitRateGraph' 
      | 'MeanReciprocalRankGraph' 
      | 'DiscountedCumulativeGainsGraph' 
      | 'NormalizedDiscountedCumulativeGainsGraph' 
      | 'KBasedRankingGraph' 
      | 'ConfusionMatrixPerThreshold' 
      | 'RegressionErrorBands' 
      | 'MultiClassMisclassifications' 
      | 'MultiClassConfusionMatrixPerThreshold';

export type AIModelMetricOperation = 'LessThan' 
      | 'Equals' 
      | 'NotEquals' 
      | 'GreaterThan' 
      | 'IsNull' 
      | 'IsNotNull' 
      | 'StartsWith' 
      | 'EndsWith' 
      | 'Contains';

export type AIModelType = 'RandomForest' 
      | 'LogisticRegression' 
      | 'LinearRegression' 
      | 'DecisionTree' 
      | 'DeepLearningIntent' 
      | 'DeepLearningNER' 
      | 'GlobalDeepLearningIntent' 
      | 'GlobalDeepLearningNER' 
      | 'GlobalLanguageDetection' 
      | 'BinaryClassification' 
      | 'GeneralizedLinearModels' 
      | 'GradientBoostedTrees' 
      | 'LinearSupportVectorClassifiers' 
      | 'MulticlassClassification' 
      | 'NaiveBayes' 
      | 'Regression' 
      | 'XGBoost' 
      | 'NeuralNet' 
      | 'PopularityCount';

export type AIPredictionDefinitionStatus = 'Enabled' 
      | 'Disabled';

export type AIPredictionStrategy = 'Maximize' 
      | 'Minimize';

export type AIPredictionType = 'ScoringSpecificOutcome' 
      | 'BinaryClassification' 
      | 'MulticlassClassification' 
      | 'Regression' 
      | 'LanguageDetection' 
      | 'DeepLearningIntentClassification' 
      | 'DeepLearningNameEntityRecognition' 
      | 'GlobalDeepLearningIntentClassification' 
      | 'GlobalDeepLearningNameEntityRecognition';

export type AIScoringMode = 'Batch' 
      | 'OnDemand' 
      | 'Streaming';

export type AIScoringModelDefVersionMode = 'TRAIN' 
      | 'DEPLOY' 
      | 'TRAIN_AND_DEPLOY';

export type AIScoringModelVersionStatus = 'DRAFT' 
      | 'ACTIVATING' 
      | 'DEACTIVATING' 
      | 'ACTIVE' 
      | 'INACTIVE' 
      | 'FAILED' 
      | 'ACTIVATIONFAILED' 
      | 'DEACTIVATIONFAILED';

export type AIScoringStatus = 'Enabled' 
      | 'Disabled';

export type AIScoringStepValidationStatus = 'PENDING' 
      | 'SUCCESS' 
      | 'FAILED' 
      | 'DRAFT';

export type AISide = 'Left' 
      | 'Right';

export type AIValueType = 'Number' 
      | 'String' 
      | 'Boolean' 
      | 'Date' 
      | 'DateTime' 
      | 'Supplier' 
      | 'Currency' 
      | 'Varchar' 
      | 'Comparison';

export type AccessMethod = 'Get' 
      | 'Post';

export type AccessResourceType = 'ConnectedApplication' 
      | 'DataExport' 
      | 'DelegatedTwoFactor' 
      | 'ExternalClientApplication' 
      | 'ManageAuthProviders' 
      | 'ManageCertificates' 
      | 'ManageEncryptionKeys' 
      | 'ManageIpAddresses' 
      | 'ManageLoginAccessPolicies' 
      | 'ManagePasswordPolicies' 
      | 'ManageProfilesPermissionsets' 
      | 'ManageRemoteAccess' 
      | 'ManageRoles' 
      | 'ManageSharing' 
      | 'ManageTwoFactor' 
      | 'ManageUsers' 
      | 'Reports' 
      | 'ReportsExportPrint' 
      | 'ResetPasswords' 
      | 'ViewHealthCheck';

export type AccountingType = 'Revenue' 
      | 'Expense';

export type AccumulateResultCondInputType = 'Variable' 
      | 'Expression' 
      | 'String';

export type AccumulateResultOperator = 'Any' 
      | 'Equals' 
      | 'NotEquals' 
      | 'LessThan' 
      | 'LessOrEqual' 
      | 'GreaterThan' 
      | 'GreaterOrEqual';

export type ActionChatterPostRecipTypes = 'CollaborationGroup' 
      | 'Group' 
      | 'User' 
      | 'OpportunityTeam' 
      | 'AccountTeam' 
      | 'Owner' 
      | 'Creator' 
      | 'PartnerUser' 
      | 'AccountOwner' 
      | 'CustomerSuccessUser' 
      | 'ContactLookup' 
      | 'UserLookup' 
      | 'CaseTeam' 
      | 'CampaignMemberDerivedOwner';

export type ActionChatterPostSenderType = 'CurrentUser' 
      | 'DefaultChatterUser' 
      | 'DefaultWorkflowUser';

export type ActionEmailRecipientTypes = 'group' 
      | 'role' 
      | 'user' 
      | 'opportunityTeam' 
      | 'accountTeam' 
      | 'roleSubordinates' 
      | 'owner' 
      | 'creator' 
      | 'partnerUser' 
      | 'accountOwner' 
      | 'customerPortalUser' 
      | 'portalRole' 
      | 'portalRoleSubordinates' 
      | 'contactLookup' 
      | 'userLookup' 
      | 'roleSubordinatesInternal' 
      | 'email' 
      | 'caseTeam' 
      | 'campaignMemberDerivedOwner';

export type ActionEmailSenderType = 'CurrentUser' 
      | 'OrgWideEmailAddress' 
      | 'DefaultWorkflowUser';

export type ActionForNoRecordFound = 'CreateNewRecordAndLink' 
      | 'PromptAgent';

export type ActionForSingleRecordFound = 'AutoLink' 
      | 'PromptAgent';

export type ActionHttpMethod = 'GET' 
      | 'PUT' 
      | 'POST' 
      | 'DELETE' 
      | 'PATCH';

export type ActionLinkExecutionsAllowed = 'Once' 
      | 'OncePerUser' 
      | 'Unlimited';

export type ActionLinkHttpMethod = 'HttpDelete' 
      | 'HttpHead' 
      | 'HttpGet' 
      | 'HttpPatch' 
      | 'HttpPost' 
      | 'HttpPut';

export type ActionLinkType = 'API' 
      | 'APIAsync' 
      | 'Download' 
      | 'UI';

export type ActionLinkUserVisibility = 'Creator' 
      | 'Everyone' 
      | 'EveryoneButCreator' 
      | 'Manager' 
      | 'CustomUser' 
      | 'CustomExcludedUser';

export type ActionLogSchemaType = 'Other' 
      | 'ExpressionSet';

export type ActionOverrideType = 'Default' 
      | 'Standard' 
      | 'Scontrol' 
      | 'Visualforce' 
      | 'Flexipage' 
      | 'LightningComponent';

export type ActionSubtype = 'ScreenAction' 
      | 'Action';

export type ActionTaskAssignedToTypes = 'user' 
      | 'role' 
      | 'opportunityTeam' 
      | 'accountTeam' 
      | 'owner' 
      | 'accountOwner' 
      | 'creator' 
      | 'accountCreator' 
      | 'partnerUser' 
      | 'portalRole';

export type ActionableListKPIAggType = 'SUM' 
      | 'COUNT' 
      | 'MIN' 
      | 'MAX' 
      | 'AVG';

export type ActionableListKPIStType = 'ACTIVE' 
      | 'INACTIVE';

export type ActionableListSourceType = 'CrmAnalytics' 
      | 'DataCloudPlatform';

export type ActivationAppType = string;

export type ActivationFeatureType = 'LEX' 
      | 'Reports';

export type ActivationPlatformConnectorType = 'S3' 
      | 'OAUTH';

export type ActivationPlatformFieldDataType = 'Text' 
      | 'Number';

export type ActivationPlatformFileOutputFormat = 'CSV' 
      | 'JSON' 
      | 'PARQUET';

export type ActivationPlatformFileOutputGrouping = 'PER_SEGMENT' 
      | 'PER_ACCOUNT';

export type ActivationPlatformIdentifierHashMethod = 'SHA1' 
      | 'SHA256' 
      | 'MD5' 
      | 'NONE';

export type ActivationPlatformIdentifierType = 'EMAIL' 
      | 'PHONE' 
      | 'OTT' 
      | 'MAID';

export type ActivationPlatformPeriodicFullRefresh = 'NEVER' 
      | 'REFRESH_30' 
      | 'REFRESH_60' 
      | 'REFRESH_90' 
      | 'REFRESH_180' 
      | 'REFRESH_365';

export type ActivationPlatformRefreshFrequency = 'FOUR' 
      | 'TWELVE' 
      | 'TWENTY_FOUR';

export type ActivationPlatformRefreshMode = 'FULL' 
      | 'INCREMENTAL';

export type ActivationPlatformType = 'Advertising' 
      | 'Publishing' 
      | 'Analytics' 
      | 'Marketing' 
      | 'Technology';

export type ActualsCalculationMode = 'Manual' 
      | 'Orders' 
      | 'OrdersThroughContracts';

export type AdvAccForecastSetStatus = 'Active' 
      | 'Inactive';

export type AdvAcctFcstAggregationType = 'SUM' 
      | 'MINIMUM' 
      | 'MAXIMUM' 
      | 'AVERAGE';

export type AdvAcctFcstCalcFrequency = 'Monthly' 
      | 'Quarterly' 
      | 'Yearly' 
      | 'Weekly';

export type AdvAcctFcstComputationMethod = 'DATA_PROCESSING_ENGINE_DEFINITION' 
      | 'CUSTOM' 
      | 'FORMULA';

export type AdvAcctFcstFormulaType = 'QUANTITY' 
      | 'REVENUE';

export type AdvAcctFcstMeasureType = 'QUANTITY' 
      | 'REVENUE';

export type AdvAcctFrcstDisplayGroupType = string;

export type AiAssistantTemplateStatus = 'DISABLED' 
      | 'ENABLED';

export type AnimationFrequencyUnit = 'always' 
      | 'often' 
      | 'sometimes' 
      | 'rarely';

export type AnimationRuleRecordTypeContext = 'All' 
      | 'Custom' 
      | 'Master';

export type ApexCodeUnitStatus = 'Inactive' 
      | 'Active' 
      | 'Deleted';

export type ApexDebuggerBreakpointHitCondition = 'None' 
      | 'GreaterOrEquals' 
      | 'Equals' 
      | 'Modulo';

export type ApexDebuggerBreakpointType = 'Line' 
      | 'Call' 
      | 'Return' 
      | 'Exception';

export type ApexDebuggerEventType = 'Stopped' 
      | 'Resumed' 
      | 'RequestStarted' 
      | 'RequestFinished' 
      | 'SystemInfo' 
      | 'SystemWarning' 
      | 'SystemGack' 
      | 'OrgChange' 
      | 'SessionTerminated' 
      | 'LogLine' 
      | 'Debug' 
      | 'HeartBeat' 
      | 'ApexException' 
      | 'Ready';

export type ApexDebuggerKilledBy = 'NoOne' 
      | 'Debugger' 
      | 'Metadata' 
      | 'BT' 
      | 'OrgAdmin' 
      | 'Sweeper';

export type ApexDebuggerLicenseType = 'Self' 
      | 'Sandbox' 
      | 'LMO' 
      | 'Scratch';

export type ApexDebuggerStatus = 'Pending' 
      | 'Active' 
      | 'Detach' 
      | 'Kill' 
      | 'KillAll' 
      | 'Dead';

export type ApexExecutionOverlayActionType = 'None' 
      | 'Apex' 
      | 'SOQL';

export type ApexLogLevel = 'NONE' 
      | 'INTERNAL' 
      | 'FINEST' 
      | 'FINER' 
      | 'FINE' 
      | 'DEBUG' 
      | 'INFO' 
      | 'WARN' 
      | 'ERROR';

export type ApexLogLocation = 'Monitoring' 
      | 'Profiling' 
      | 'SystemLog' 
      | 'Preserved';

export type ApexRequestType = 'BATCH_APEX' 
      | 'FUTURE' 
      | 'SCHEDULED' 
      | 'SYNCHRONOUS' 
      | 'RUN_TESTS_ASYNCHRONOUS' 
      | 'RUN_TESTS_SYNCHRONOUS' 
      | 'RUN_TESTS_DEPLOY' 
      | 'VISUALFORCE' 
      | 'QUEUEABLE' 
      | 'REMOTE_ACTION' 
      | 'LIGHTNING' 
      | 'QUICK_ACTION' 
      | 'BULK' 
      | 'SOAP' 
      | 'REST' 
      | 'INVOCABLE_ACTION' 
      | 'EXECUTE_ANONYMOUS' 
      | 'INBOUND_EMAIL_SERVICE' 
      | 'DISCOVERABLE_LOGIN' 
      | 'POST_INSTALL_SCRIPT' 
      | 'EXTERNAL_SERVICE_CALLBACK';

export type ApexTestOutcome = 'Pass' 
      | 'Fail' 
      | 'CompileFail' 
      | 'Skip';

export type AppAnalyticsDataType = 'PackageUsageSummary' 
      | 'PackageUsageLog' 
      | 'SubscriberSnapshot';

export type AppAnalyticsDeliveryConfigStatus = 'Waiting' 
      | 'Running' 
      | 'Error';

export type AppAnalyticsQueryRequestFileCompression = 'none' 
      | 'gzip' 
      | 'snappy';

export type AppAnalyticsQueryRequestFileType = 'csv' 
      | 'parquet';

export type AppDomainUsageType = string;

export type AppMenuType = 'AppSwitcher' 
      | 'Salesforce1' 
      | 'NetworkTabs';

export type AppleEnvironmentType = 'Sandbox' 
      | 'Production';

export type ApplicationObjectName = 'BusinessLicenseApplication' 
      | 'IndividualApplication';

export type ApplicationSourceType = 'REPLY_RECOMMENDATION' 
      | 'ARTICLE_RECOMMENDATION' 
      | 'UTTERANCE_RECOMMENDATION' 
      | 'FAQ' 
      | 'EAR_FOR_CONVERSATION' 
      | 'USE_CASE_EXPLORER' 
      | 'EAR_FOR_VOICE' 
      | 'FTEST';

export type ApplicationType = 'TEST' 
      | 'SALESFORCE1_IOS' 
      | 'SALESFORCE1_ANDROID' 
      | 'SALESFORCE_FILES' 
      | 'CHATTER_DESKTOP' 
      | 'SALESFORCE_OUTLOOK' 
      | 'WAVE_ANALYTICS_IOS' 
      | 'WAVE_ANALYTICS_ANDROID' 
      | 'WAVE_WEB' 
      | 'CHATTER_WINDOWS' 
      | 'FIELD_SERVICE_IOS' 
      | 'FIELD_SERVICE_ANDROID' 
      | 'SALESFORCE_A_IOS' 
      | 'SALESFORCE_A_ANDROID' 
      | 'CINNAMON_APP' 
      | 'SALESFORCE_DESKTOP' 
      | 'KONE_FSM' 
      | 'MYCOMMUNITIES_IOS' 
      | 'MYCOMMUNITIES_ANDROID' 
      | 'SALESFORCE_IQ' 
      | 'SALESFORCE_HUB' 
      | 'PARDOT_INTEGRATION' 
      | 'TRAILBLAZER_COMMUNITY' 
      | 'LWCOFFLINETESTHARNESS_IOS' 
      | 'LWCOFFLINETESTHARNESS_ANDROID';

export type ApplicationUsageType = 'LPI' 
      | 'ERM' 
      | 'HC' 
      | 'EDU' 
      | 'BA' 
      | 'CCM' 
      | 'Grantmaking';

export type AppointmentEndpointName = 'FIND_SLOTS' 
      | 'GET_SLOT_STATUS' 
      | 'CREATE_APPOINTMENT' 
      | 'CANCEL_APPOINTMENT' 
      | 'GET_APPOINTMENT' 
      | 'CREATE_PATIENT';

export type ApptAssistantRadiusUnit = 'Kilometer' 
      | 'Meter' 
      | 'Mile' 
      | 'Yard';

export type Article = 'None' 
      | 'Indefinite' 
      | 'Definite';

export type AssessmentConfigurationOption = string;

export type AssessmentType = string;

export type AssignToLookupValueType = 'User' 
      | 'Queue';

export type AssignmentPolicyType = string;

export type AssistantDefinitionStatus = 'DISABLED' 
      | 'ENABLED';

export type AssistantSearchType = 'AllFields' 
      | 'EmailFields' 
      | 'NameFields' 
      | 'PhoneFields';

export type AssistantSkillSobjectActionType = 'CREATE' 
      | 'UPDATE' 
      | 'READ';

export type AssistantSkillType = 'AGENDA' 
      | 'SOBJECT';

export type AssistantStandardSlotClass = '_Text' 
      | '_Boolean' 
      | '_DateTime' 
      | '_Date' 
      | '_Money' 
      | '_Number' 
      | '_Object' 
      | '_Person' 
      | '_Location' 
      | '_Organization' 
      | '_Percent' 
      | '_Phone' 
      | '_Email' 
      | '_Time' 
      | '_Url';

export type AssociationEventType = 'Create' 
      | 'Update';

export type AssociationStatusType = 'Draft' 
      | 'Active' 
      | 'Inactive';

export type AssociationType = string;

export type AsyncApexJobStatus = 'Queued' 
      | 'Processing' 
      | 'Aborted' 
      | 'Completed' 
      | 'Failed' 
      | 'Preparing' 
      | 'Holding';

export type AsyncApexJobType = 'Future' 
      | 'SharingRecalculation' 
      | 'ScheduledApex' 
      | 'BatchApex' 
      | 'BatchApexWorker' 
      | 'TestRequest' 
      | 'TestWorker' 
      | 'ApexToken' 
      | 'Queueable';

export type AsyncRequestSource = 'Api' 
      | 'Changeset';

export type AttrDataType = 'String' 
      | 'Integer' 
      | 'Double' 
      | 'Date' 
      | 'DateTime' 
      | 'Percentage' 
      | 'Boolean';

export type AttributeDefnDataType = 'Checkbox' 
      | 'Date' 
      | 'Datetime' 
      | 'Number' 
      | 'Text' 
      | 'Currency' 
      | 'Percent' 
      | 'Picklist' 
      | 'Multipicklist';

export type AttributeDisplayType = 'ComboBox' 
      | 'Text' 
      | 'RadioButton' 
      | 'CheckBox' 
      | 'Toggle' 
      | 'Number' 
      | 'Date' 
      | 'Datetime' 
      | 'Currency' 
      | 'Percentage' 
      | 'Multipicklist' 
      | 'Slider' 
      | 'MultiValueComboBox' 
      | 'MultiSelectCheckBox';

export type AudienceCriteriaType = 'CustomList' 
      | 'MaxDaysInCommunity';

export type AudienceCriterionOperator = 'Equal' 
      | 'NotEqual' 
      | 'GreaterThan' 
      | 'GreaterThanOrEqual' 
      | 'LessThan' 
      | 'LessThanOrEqual' 
      | 'Contains' 
      | 'StartsWith' 
      | 'Includes' 
      | 'NotIncludes';

export type AudienceCriterionType = 'Default' 
      | 'Profile' 
      | 'FieldBased' 
      | 'GeoLocation' 
      | 'Domain' 
      | 'Permission' 
      | 'Audience';

export type AudienceFieldType = 'Boolean' 
      | 'Text' 
      | 'Encrypted' 
      | 'Number' 
      | 'Double' 
      | 'Date' 
      | 'DateTime' 
      | 'Email' 
      | 'Phone' 
      | 'Time' 
      | 'URL';

export type AuraBundleType = 'Application' 
      | 'Component' 
      | 'Event' 
      | 'Interface' 
      | 'Tokens';

export type AuraDefType = 'APPLICATION' 
      | 'CONTROLLER' 
      | 'COMPONENT' 
      | 'EVENT' 
      | 'HELPER' 
      | 'INTERFACE' 
      | 'RENDERER' 
      | 'STYLE' 
      | 'PROVIDER' 
      | 'MODEL' 
      | 'TESTSUITE' 
      | 'DOCUMENTATION' 
      | 'TOKENS' 
      | 'DESIGN' 
      | 'SVG' 
      | 'MODULE';

export type AuraFormat = 'XML' 
      | 'JS' 
      | 'CSS' 
      | 'TEMPLATE_CSS' 
      | 'SVG';

export type AuthProviderType = 'Facebook' 
      | 'Janrain' 
      | 'Salesforce' 
      | 'OpenIdConnect' 
      | 'MicrosoftACS' 
      | 'LinkedIn' 
      | 'Twitter' 
      | 'Google' 
      | 'GitHub' 
      | 'Custom' 
      | 'Apple' 
      | 'Evergreen' 
      | 'Slack' 
      | 'HubSpot' 
      | 'Microsoft' 
      | 'MuleSoft';

export type AuthType = 'SfdcXi' 
      | 'HttpBasic' 
      | 'MutualSsl' 
      | 'Hmac' 
      | 'C2c' 
      | 'C2cCloud' 
      | 'None';

export type AuthenticationProtocol = 'NoAuthentication' 
      | 'Certificate' 
      | 'Oauth' 
      | 'Password' 
      | 'NTLM' 
      | 'AwsSv4' 
      | 'Jwt' 
      | 'JwtExchange' 
      | 'C2c' 
      | 'ApiKey' 
      | 'Custom' 
      | 'InternalOAuth' 
      | 'OrgJwt' 
      | 'Basic';

export type AuthoringMode = 'OmniScriptForm' 
      | 'Microsoft365Word' 
      | 'OmniScriptAndMcrsft365Wrd';

export type AvailabilityStatus = 'Available' 
      | 'In_Use';

export type BannerFontFamily = 'Serif' 
      | 'SansSerif' 
      | 'Cursive' 
      | 'Fantasy' 
      | 'SystemUi' 
      | 'UiSerif' 
      | 'UiSansSerif' 
      | 'UiMonospace' 
      | 'UiRounded' 
      | 'Fangsong';

export type BannerPosition = 'Top' 
      | 'Bottom';

export type BatchCalcJobAggregateFunction = 'Unique' 
      | 'Sum' 
      | 'Max' 
      | 'Min' 
      | 'Avg' 
      | 'Std' 
      | 'StdP' 
      | 'Var' 
      | 'VarP' 
      | 'Count';

export type BatchCalcJobDataType = 'Text' 
      | 'Numeric' 
      | 'Date' 
      | 'DateTime';

export type BatchCalcJobDatasourceType = 'StandardObject' 
      | 'Analytics' 
      | 'DataModelObject' 
      | 'CalculatedInsightsObject' 
      | 'CRMObject' 
      | 'CSV' 
      | 'DataLakeObject';

export type BatchCalcJobFilterOperator = 'Equals' 
      | 'NotEquals' 
      | 'GreaterThan' 
      | 'GreaterThanOrEquals' 
      | 'LessThan' 
      | 'LessThanOrEquals' 
      | 'StartsWith' 
      | 'EndsWith' 
      | 'Contains' 
      | 'DoesNotContain' 
      | 'IsNull' 
      | 'IsNotNull' 
      | 'In' 
      | 'NotIn';

export type BatchCalcJobFrcstAccuracy = 'None' 
      | 'Eighty' 
      | 'NinetyFive';

export type BatchCalcJobFrcstModel = 'Additive' 
      | 'Multiplicative' 
      | 'Auto';

export type BatchCalcJobFrcstPeriodType = 'Year' 
      | 'YearQuarter' 
      | 'YearMonth' 
      | 'YearWeek' 
      | 'YearMonthDay' 
      | 'FiscalYear' 
      | 'FiscalYearQuarter' 
      | 'FiscalYearMonth' 
      | 'FiscalYearWeek';

export type BatchCalcJobFrcstSeasonality = 'Auto' 
      | 'None' 
      | 'Two' 
      | 'Three' 
      | 'Four' 
      | 'Five' 
      | 'Six' 
      | 'Seven' 
      | 'Eight' 
      | 'Nine' 
      | 'Ten' 
      | 'Eleven' 
      | 'Twelve' 
      | 'Thirteen' 
      | 'Fourteen' 
      | 'Fifteen' 
      | 'Sixteen' 
      | 'Seventeen' 
      | 'Eighteen' 
      | 'Nineteen' 
      | 'Twenty' 
      | 'TwentyOne' 
      | 'TwentyTwo' 
      | 'TwentyThree' 
      | 'TwentyFour';

export type BatchCalcJobOrderType = 'Ascending' 
      | 'Descending';

export type BatchCalcJobParameterDataType = 'Text' 
      | 'Numeric' 
      | 'Date' 
      | 'DateTime' 
      | 'Filter' 
      | 'Expression';

export type BatchCalcJobSourceJoinType = 'LeftOuter' 
      | 'RightOuter' 
      | 'Inner' 
      | 'Outer';

export type BatchCalcJobTransformType = 'Expression' 
      | 'Slice' 
      | 'ComputeRelative';

export type BatchCalcJobTrfmDataType = 'Text' 
      | 'Numeric' 
      | 'Date' 
      | 'DateTime';

export type BatchCalcJobWritebackOpn = 'Insert' 
      | 'Update' 
      | 'Upsert' 
      | 'Delete' 
      | 'Overwrite';

export type BatchCalcJobWritebackType = 'sObject' 
      | 'Analytics' 
      | 'DataLakeObject' 
      | 'DataModelObject' 
      | 'CalculatedInsights';

export type BatchCalcProcessType = 'DataProcessingEngine' 
      | 'Rebates' 
      | 'FSCHierarchyRollUp' 
      | 'Loyalty' 
      | 'AdvancedAccountForecast' 
      | 'LoyaltyPartnerManagement' 
      | 'LoyaltyPointsAggregation' 
      | 'NetZero' 
      | 'ProgramBasedBusiness' 
      | 'ProviderSearch' 
      | 'AccountingSubledger' 
      | 'ActionableList' 
      | 'DecisionMatrixDataUpload' 
      | 'ProgramManagementRollups' 
      | 'NetZeroHidden' 
      | 'CriteriaBsdSearchAndFilter' 
      | 'RecordAggregation' 
      | 'Education' 
      | 'CDPEnrichment' 
      | 'CdpActionableList' 
      | 'CSVCoreUpload';

export type BatchInputSourceType = 'CRMA' 
      | 'Data_Cloud';

export type BatchJobDefinitionStatus = 'Active' 
      | 'Inactive';

export type BatchJobDefinitionType = 'Flow' 
      | 'Calc' 
      | 'LoyaltyProgramProcess';

export type BenefitActionDataType = 'String' 
      | 'Date' 
      | 'DateTime' 
      | 'Boolean' 
      | 'Picklist' 
      | 'EntityPicklist' 
      | 'Number';

export type BenefitActionProcessType = string;

export type BenefitActionType = string;

export type BlankValueBehavior = 'MatchBlanks' 
      | 'NullNotAllowed';

export type BotInvocationMappingType = 'Input' 
      | 'Output' 
      | 'Error';

export type BotNavigationType = 'Call' 
      | 'Redirect' 
      | 'TransferToAgent' 
      | 'EndChat';

export type BotQuickReplyType = 'Static' 
      | 'Dynamic';

export type BotStatusCode = 'Active' 
      | 'Inactive';

export type BotStepConditionOperatorType = 'Equals' 
      | 'NotEquals' 
      | 'IsSet' 
      | 'IsNotSet' 
      | 'GreaterThan' 
      | 'LessThan' 
      | 'GreaterThanOrEqualTo' 
      | 'LessThanOrEqualTo';

export type BotStepType = 'Navigation' 
      | 'Invocation' 
      | 'VariableOperation' 
      | 'Message' 
      | 'Wait' 
      | 'Group' 
      | 'SystemMessage' 
      | 'RecordLookup' 
      | 'RichMessage' 
      | 'GoalStep';

export type BotType = 'Bot' 
      | 'InternalCopilot' 
      | 'ExternalCopilot';

export type BotVariableOperandType = 'Source' 
      | 'Target';

export type BotVariableOperationType = 'Set' 
      | 'Unset' 
      | 'Collect' 
      | 'SetConversationLanguage' 
      | 'CollectAttachment';

export type BotWidgetType = 'Menu' 
      | 'Buttons';

export type BriefcaseFilterOperator = 'e' 
      | 'n' 
      | 'l' 
      | 'g' 
      | 'm' 
      | 'h' 
      | 's' 
      | 'd';

export type BriefcaseRuleRelationshipType = 'ParentToChild' 
      | 'ChildToParent';

export type BriefcaseType = 'Standard' 
      | 'HighVolume';

export type BuildingEnergyIntensityType = 'BuildingEnergyIntensity' 
      | 'RegionalBuildingEnergyIntensity';

export type BusinessHoursSourceType = 'None' 
      | 'Case' 
      | 'Static';

export type BusinessKnowledgeModel = 'CreditPoints' 
      | 'DebitPoints' 
      | 'IssueVoucher' 
      | 'IncreaseUsageForCumulativePromotion' 
      | 'UpdateUsageForCumulativePromotion' 
      | 'AssignParameterValues' 
      | 'RunFlow' 
      | 'GetOutputsFromDecisionTable' 
      | 'UpdatePointBalance' 
      | 'GetMemberPointBalance' 
      | 'GetMemberTier' 
      | 'BreAggregator' 
      | 'GetOutputsFromDecisionMatrix' 
      | 'GetMemberAttributesValues' 
      | 'UpdateCurrentValueForMemberAttribute' 
      | 'BreAggregatorAssignment' 
      | 'Crud' 
      | 'AssignBadgeToMember' 
      | 'CheckMemberBadgeAssignment' 
      | 'ChangeMemberTier' 
      | 'RunProgramProcess' 
      | 'GetMemberPromotions' 
      | 'TestCustomElement' 
      | 'AiAcceleratorSubscriberChurnPrediction' 
      | 'RedeemVoucher' 
      | 'ListPrice' 
      | 'PriceAdjustmentMatrix' 
      | 'SendMail' 
      | 'VolumeDiscount' 
      | 'GetUserData' 
      | 'ListGroupCalculation' 
      | 'RecordAlert' 
      | 'AutomatedClaimsProcessingValidation' 
      | 'EvaluateQualification' 
      | 'SampleBusinessElementWithContext' 
      | 'EvaluateDisqualification' 
      | 'SampleDynamicCustomElement' 
      | 'AttributeDiscount' 
      | 'GroupingAndAggregatePricing' 
      | 'ManualDiscount' 
      | 'SubscriptionPricing' 
      | 'Proration' 
      | 'BundleDiscount' 
      | 'ListGroup' 
      | 'ListFee' 
      | 'StopPricing' 
      | 'PromotionsDiscount' 
      | 'RoundingValues' 
      | 'VolumeTierDiscount' 
      | 'SampleCustomElementWithExpressionAndListFilter' 
      | 'PricingSettings' 
      | 'ListRate' 
      | 'ApexAction' 
      | 'RateAdjustmentMatrix' 
      | 'DerivedPricing' 
      | 'RecordAction' 
      | 'IntegrationOrchestration';

export type CMSConnectResourcePayloadType = string;

export type CMSConnectionAssetType = 'Javascript' 
      | 'CSS';

export type CMSConnectionSourceType = 'AEM' 
      | 'Drupal' 
      | 'WordPress' 
      | 'SDL' 
      | 'Sitecore' 
      | 'Other';

export type CMSConnectionStatus = 'ACTIVE' 
      | 'INACTIVE';

export type CMSSourceConnectionType = 'Public' 
      | 'Authenticated';

export type CalculatedInsightCreationType = string;

export type CalculatedInsightDefinitionType = 'CALCULATED_METRIC' 
      | 'EXTERNAL_METRIC' 
      | 'STREAMING_METRIC' 
      | 'GRAPH_METRIC';

export type CalculatedInsightFieldRole = 'MEASURE' 
      | 'DIMENSION';

export type CalculationFrequency = 'Monthly' 
      | 'Quarterly';

export type CalloutStatus = 'Enabled' 
      | 'Disabled';

export type CanvasLocationOptions = 'None' 
      | 'Chatter' 
      | 'UserProfile' 
      | 'Visualforce' 
      | 'Aura' 
      | 'Publisher' 
      | 'ChatterFeed' 
      | 'ServiceDesk' 
      | 'OpenCTI' 
      | 'AppLauncher' 
      | 'MobileNav' 
      | 'PageLayout';

export type CanvasOptions = 'HideShare' 
      | 'HideHeader' 
      | 'PersonalEnabled';

export type CapacityType = 'INHERITED' 
      | 'INTERRUPTIBLE' 
      | 'NOT_INTERRUPTIBLE';

export type CareLimitTypeMetricType = 'Money' 
      | 'Percentage' 
      | 'Amount' 
      | 'Text';

export type CareProviderAfflType = string;

export type CaseSubjectOption = 'SocialPostSource' 
      | 'SocialPostContent' 
      | 'BuildCustom';

export type CaseSubjectParticleType = 'ProvidedString' 
      | 'Source' 
      | 'MessageType' 
      | 'SocialHandle' 
      | 'SocialNetwork' 
      | 'Sentiment' 
      | 'RealName' 
      | 'Content' 
      | 'PipeSeparator' 
      | 'ColonSeparator' 
      | 'HyphenSeparator';

export type CaseType = 'Nominative' 
      | 'Accusative' 
      | 'Genitive' 
      | 'Dative' 
      | 'Inessive' 
      | 'Elative' 
      | 'Illative' 
      | 'Adessive' 
      | 'Ablative' 
      | 'Allative' 
      | 'Essive' 
      | 'Translative' 
      | 'Partitive' 
      | 'Objective' 
      | 'Subjective' 
      | 'Instrumental' 
      | 'Prepositional' 
      | 'Locative' 
      | 'Vocative' 
      | 'Sublative' 
      | 'Superessive' 
      | 'Delative' 
      | 'Causalfinal' 
      | 'Essiveformal' 
      | 'Termanative' 
      | 'Distributive' 
      | 'Ergative' 
      | 'Adverbial' 
      | 'Abessive' 
      | 'Comitative';

export type CategoryGroupVisibility = 'ALL' 
      | 'NONE' 
      | 'CUSTOM';

export type CdnSecurityConfigType = 'Commerce' 
      | 'Basic' 
      | 'EC';

export type CdpEnablementStatus = 'Disabled' 
      | 'Disabling' 
      | 'Enabled' 
      | 'Enabling' 
      | 'Error';

export type Channel = 'AllChannels' 
      | 'App' 
      | 'Pkb' 
      | 'Csp' 
      | 'Prm';

export type ChannelPlatformType = 'Standard' 
      | 'Enhanced';

export type ChannelProviderStatus = 'Active' 
      | 'New' 
      | 'Blocked' 
      | 'Disabled';

export type ChannelSource = 'Other' 
      | 'Phone' 
      | 'Chat';

export type ChannelType = 'FacebookMessenger' 
      | 'Text' 
      | 'WeChat' 
      | 'WhatsApp' 
      | 'Phone';

export type ChannelUsageDeploymentStatus = 'New' 
      | 'Provisioning' 
      | 'Active' 
      | 'Disabled' 
      | 'Error' 
      | 'Deprovisioning';

export type ChannelUsageDeploymentType = 'MJ' 
      | 'Conversation';

export type ChannelUsageErrorReason = 'InternalError' 
      | 'InvalidSelection' 
      | 'ProvisioningError' 
      | 'DeprovisioningError';

export type ChannelUsageRoutingOverride = 'NonSessionMessages' 
      | 'MJKeywordsOnly';

export type ChartAxis = 'x' 
      | 'y' 
      | 'y2' 
      | 'r';

export type ChartBackgroundDirection = 'TopToBottom' 
      | 'LeftToRight' 
      | 'Diagonal';

export type ChartColorPalettes = 'Default' 
      | 'gray' 
      | 'colorSafe' 
      | 'unity' 
      | 'justice' 
      | 'nightfall' 
      | 'sunrise' 
      | 'bluegrass' 
      | 'tropic' 
      | 'heat' 
      | 'dusk' 
      | 'pond' 
      | 'watermelon' 
      | 'fire' 
      | 'water' 
      | 'earth' 
      | 'accessible';

export type ChartLegendPosition = 'Right' 
      | 'Bottom' 
      | 'OnChart';

export type ChartPosition = 'CHART_TOP' 
      | 'CHART_BOTTOM';

export type ChartRangeType = 'Auto' 
      | 'Manual';

export type ChartTheme = 'light' 
      | 'dark';

export type ChartType = 'None' 
      | 'Scatter' 
      | 'ScatterGrouped' 
      | 'Bubble' 
      | 'BubbleGrouped' 
      | 'HorizontalBar' 
      | 'HorizontalBarGrouped' 
      | 'HorizontalBarStacked' 
      | 'HorizontalBarStackedTo100' 
      | 'VerticalColumn' 
      | 'VerticalColumnGrouped' 
      | 'VerticalColumnStacked' 
      | 'VerticalColumnStackedTo100' 
      | 'Line' 
      | 'LineGrouped' 
      | 'LineCumulative' 
      | 'LineCumulativeGrouped' 
      | 'Pie' 
      | 'Donut' 
      | 'Funnel' 
      | 'VerticalColumnLine' 
      | 'VerticalColumnGroupedLine' 
      | 'VerticalColumnStackedLine' 
      | 'Plugin';

export type ChartUnits = 'Auto' 
      | 'Integer' 
      | 'Hundreds' 
      | 'Thousands' 
      | 'Millions' 
      | 'Billions' 
      | 'Trillions';

export type ChatterExtensionType = string;

export type ClassificationType = 'ComplianceCategory' 
      | 'FieldSet';

export type CleanEntityOption = 'Flag' 
      | 'AutoFill' 
      | 'Custom';

export type CleanRuleDataAssessmentStatus = 'HIDDEN' 
      | 'NOT_STARTED' 
      | 'IN_PROGRESS' 
      | 'PENDING_AGGREGATION' 
      | 'AGGREGATION_COMPLETE' 
      | 'FAILED_AGGREGATION' 
      | 'ABORTED';

export type CleanRuleStatus = 'Inactive' 
      | 'Active';

export type ClientAuthMode = 'SSO' 
      | 'Custom' 
      | 'Mixed';

export type ClmCategoryUsageType = 'DisclosureCategory' 
      | 'ContractClauseCategory';

export type CloudServiceProviderApiType = 'Licenses' 
      | 'Tenants' 
      | 'Management' 
      | 'Snapshots' 
      | 'LicenseDefinitions' 
      | 'TenantTrusts' 
      | 'Usage' 
      | 'DigitalWalletProvisioning' 
      | 'DigitalWalletConsumption';

export type CommunityBaseTemplate = string;

export type CommunityTemplateBundleInfoType = 'Highlight' 
      | 'PreviewImage';

export type CommunityTemplateCategory = 'IT' 
      | 'Marketing' 
      | 'Sales' 
      | 'Service' 
      | 'Commerce';

export type CommunityThemeLayoutType = 'Login' 
      | 'Home' 
      | 'Inner' 
      | 'ServiceNotAvailable';

export type ComponentInstancePropertyTypeEnum = string;

export type ComponentInstanceType = 'Component' 
      | 'Card';

export type ComponentName = 'ActionsAndRecommendations' 
      | 'ActionLauncher' 
      | 'BulkActionPanel';

export type CondType = 'ApiType' 
      | 'ApiVersion' 
      | 'ActionName' 
      | 'Application' 
      | 'Body' 
      | 'Browser' 
      | 'ChallengeCode' 
      | 'ClientId' 
      | 'ClientVersion' 
      | 'CommentBody' 
      | 'CommentType' 
      | 'CommunityId' 
      | 'ConnectedApplication' 
      | 'ConnectedAppId' 
      | 'ConsumerKey' 
      | 'ConsumerSecret' 
      | 'ConversationId' 
      | 'CountryIso' 
      | 'DefaultScopes' 
      | 'DeveloperName' 
      | 'EntityId' 
      | 'EntityName' 
      | 'ErrorUrl' 
      | 'EventTimeStamp' 
      | 'ExecutionTime' 
      | 'FeedCommentId' 
      | 'FeedItemId' 
      | 'FeedItemType' 
      | 'FriendlyName' 
      | 'FullUserAgent' 
      | 'IdTokenIssuer' 
      | 'IsApi' 
      | 'IsScheduled' 
      | 'LoginHistoryId' 
      | 'LoginUrl' 
      | 'NetworkId' 
      | 'NumberOfRecords' 
      | 'NumComments' 
      | 'NumReplies' 
      | 'NumReportAbuses' 
      | 'NumSubscriptions' 
      | 'ParentId' 
      | 'ParentIdeaId' 
      | 'Platform' 
      | 'ProxyInfo' 
      | 'Query' 
      | 'RelatedRecordId' 
      | 'ResourceName' 
      | 'SenderId' 
      | 'SenderNetworkId' 
      | 'SessionLevel' 
      | 'SourceIp' 
      | 'Status' 
      | 'Title' 
      | 'TokenUrl' 
      | 'TransactionSecurityPolicyId' 
      | 'URI' 
      | 'UserAgent' 
      | 'UserId' 
      | 'UserInfoUrl' 
      | 'UserName' 
      | 'VoteScore' 
      | 'VoteTotal';

export type ConditionAggregationFunction = 'Sum' 
      | 'Average' 
      | 'Minimum' 
      | 'Maximum' 
      | 'Count';

export type ConditionFilterInputValueType = 'Variable' 
      | 'String' 
      | 'Expression';

export type ConditionFilterOperator = 'Equals' 
      | 'NotEquals' 
      | 'LessThan' 
      | 'LessOrEqual' 
      | 'GreaterThan' 
      | 'GreaterOrEqual' 
      | 'IsNull' 
      | 'NotNull';

export type ConditionLogic = string;

export type ConditionType = 'SingleCriterion' 
      | 'Aggregation';

export type ConfidenceThresholdType = 'ShowRecommendations' 
      | 'PreselectBestRecommendation' 
      | 'AutoTriage';

export type ConfigGroup = 'AnchorTabSetting' 
      | 'EnvelopeObjectLimits' 
      | 'CalloutConfigurationSetup' 
      | 'Envelope' 
      | 'eSignVendorAccount' 
      | 'CustomClassSetting';

export type ConfigStatus = 'Enabled' 
      | 'Disabled';

export type ConfigType = 'AnchorString' 
      | 'SignerRoles' 
      | 'SyncFileSizeLimit' 
      | 'CalloutTimeout' 
      | 'EnvelopesLastPollDate' 
      | 'CalloutNamedCredential' 
      | 'eSignVendorAccountId' 
      | 'RecipientsCustomClass' 
      | 'DocumentsCustomClass';

export type ConfiguratorDataType = 'CheckBox' 
      | 'Date' 
      | 'Datetime' 
      | 'Number' 
      | 'Text' 
      | 'Currency' 
      | 'Picklist' 
      | 'Percentage' 
      | 'Multipicklist';

export type ConfiguratorStatus = 'Draft' 
      | 'Active' 
      | 'Inactive';

export type ConsentOwner = 'Salesforce' 
      | 'Partner';

export type ContactPointType = 'Email' 
      | 'Phone' 
      | 'Web' 
      | 'Social' 
      | 'MailingAddress' 
      | 'InPerson' 
      | 'Video';

export type ContainerAsyncOperation = 'Deploy' 
      | 'DeploySource' 
      | 'RetrieveSource';

export type ContainerAsyncRequestState = 'Queued' 
      | 'Invalidated' 
      | 'Completed' 
      | 'Failed' 
      | 'Error' 
      | 'Aborted';

export type ContentAssetAccess = 'VIEWER' 
      | 'COLLABORATOR' 
      | 'INFERRED';

export type ContentAssetFormat = 'Original' 
      | 'ZippedVersions';

export type ContextAggregateFunctionType = 'sum' 
      | 'count' 
      | 'average' 
      | 'min' 
      | 'max';

export type ContextAttributeDataType = 'string' 
      | 'number' 
      | 'boolean' 
      | 'date' 
      | 'datetime' 
      | 'percent' 
      | 'picklist' 
      | 'currency' 
      | 'reference';

export type ContextAttributeFieldType = 'input' 
      | 'output' 
      | 'inputoutput' 
      | 'aggregate';

export type ContextAttributeHydrationSrc = 'Input' 
      | 'SObject';

export type ContextRuleStatus = 'Draft' 
      | 'Inactive' 
      | 'Active' 
      | 'ActivationInProgress' 
      | 'ActivationFailed';

export type ContextRuleUsageSubtype = 'OrderLevelPromotions' 
      | 'CategoryLevelPromotions' 
      | 'ProductLevelPromotions' 
      | 'Product' 
      | 'ProductClassification' 
      | 'BundleProduct' 
      | 'BundleProductClassification';

export type ContextRuleUsageType = 'UnifiedPromotions' 
      | 'Default' 
      | 'Configurator';

export type ContractConfigType = 'ContractDocumentDownloadOption' 
      | 'WordTrackChangesDisplayColor' 
      | 'InclWordTrackChgReconciliation' 
      | 'InclWordTrackChgSectionContent' 
      | 'CreateDocSectionsDocxTemplates' 
      | 'AutoGenDocOnContractCreation' 
      | 'AutoGenerateDocFileType' 
      | 'ContractSignedStatus' 
      | 'ContractSignatureDeclinedSts' 
      | 'NotifyDocTemplateVerChgStatus' 
      | 'DocuSignUseAccountDefaultNtfcn' 
      | 'DocuSignReminderEnabled' 
      | 'DocuSignReminderDelayinDays' 
      | 'DocuSignReminderFrequency' 
      | 'DocuSignExpireEnabled' 
      | 'DocuSignExpiresAfter' 
      | 'DocuSignExpireWarning' 
      | 'DocuSignAccountBrand' 
      | 'Append0ToAutoNbrEmbeddedSect' 
      | 'DocumentFileNameFormat' 
      | 'DefaultTemplateName' 
      | 'AutoGenDocOnContractUpdate' 
      | 'ContractSignatureVoidedStatus' 
      | 'ContractSignatureExpiredStatus' 
      | 'TrackContractRedlines' 
      | 'DocumentTemplateFilterClass' 
      | 'EmailNotificationOnDocumentGeneration' 
      | 'ImportTargetContractStatus' 
      | 'ActivateObligationsBasedOnContractStatus' 
      | 'ExternalReviewRequired' 
      | 'InternalReviewRequired';

export type ContractUsageType = 'DocumentSetting' 
      | 'Reconciliation' 
      | 'SignatureSetting' 
      | 'Redlining' 
      | 'ObligationSetting';

export type ConvDefBlockVersionStatus = string;

export type ConvMsgExternalTemplateVersionStatus = 'Pending' 
      | 'Rejected' 
      | 'Approved' 
      | 'Paused' 
      | 'Disabled' 
      | 'InAppeal';

export type ConversationDataType = 'Text' 
      | 'Number' 
      | 'Boolean' 
      | 'Object' 
      | 'Date' 
      | 'DateTime' 
      | 'Currency' 
      | 'Id';

export type ConversationDefinitionEventLogLevel = 'Debug' 
      | 'Info' 
      | 'Error';

export type ConversationDefinitionEventLogStepType = 'Redirect' 
      | 'Call' 
      | 'Invocation' 
      | 'CollectVariable' 
      | 'SetVariable' 
      | 'UnsetVariable' 
      | 'Message' 
      | 'Wait' 
      | 'RecordLookup' 
      | 'Transfer' 
      | 'EndChat' 
      | 'Condition' 
      | 'RichMessage' 
      | 'CancelDialog' 
      | 'CompleteDialog';

export type ConversationDefinitionEventLogTargetType = 'StandardConversationVariable' 
      | 'ConversationVariable' 
      | 'ContextVariable' 
      | 'Apex' 
      | 'Flow' 
      | 'StandardInvocableAction' 
      | 'ConversationDefinitionDialog' 
      | 'RecordLookup' 
      | 'MlIntent' 
      | 'BotDefinition' 
      | 'Queue' 
      | 'ExternalService' 
      | 'QuickAction';

export type ConversationDefinitionEventLogType = 'System' 
      | 'StartSession' 
      | 'EndSession' 
      | 'InputMessage' 
      | 'IntentPrediction' 
      | 'StartDialog' 
      | 'EndDialog' 
      | 'Step' 
      | 'Error' 
      | 'ContextSetup' 
      | 'SkipStep' 
      | 'EntityExtraction' 
      | 'KnowledgeFeedback' 
      | 'VariationChanged' 
      | 'StaticChoiceSelected' 
      | 'GoalAchieved' 
      | 'ELUEntityDetection' 
      | 'ELUIntentDetection' 
      | 'EngagedSession' 
      | 'RichMessage' 
      | 'ELUBooleanExtraction' 
      | 'CancelDialog' 
      | 'InboundFile' 
      | 'Disambiguation' 
      | 'DisambiguationFeedback' 
      | 'AllELUEvent' 
      | 'PlannerActionOutput';

export type ConversationDefinitionEventPredictionType = 'Model' 
      | 'DirectMatch' 
      | 'External';

export type ConversationDefinitionLogicalOperatorType = 'And' 
      | 'Or';

export type ConversationDefinitionNlpProviderType = 'EinsteinAi' 
      | 'Apex';

export type ConversationDefinitionSessionEndType = 'EndedByEndUser' 
      | 'Transferred' 
      | 'SessionTimedOut' 
      | 'Error' 
      | 'Other' 
      | 'Action';

export type ConversationDefinitionSessionIntegrationType = 'API' 
      | 'Slack' 
      | 'SCRT_V1' 
      | 'SCRT_V2';

export type ConversationDefinitionSessionMode = 'Normal' 
      | 'Preview';

export type ConversationDefinitionSessionStatus = 'InProgress' 
      | 'Ended';

export type ConversationDefinitionSessionTransferResult = 'NoTransferRequested' 
      | 'TransferSuccessful' 
      | 'TransferFailed' 
      | 'NoAgentsAvailable';

export type ConversationDefinitionSessionTransferTargetType = 'Bot' 
      | 'Agent';

export type ConversationDefinitionSessionTransferType = 'BotRequest' 
      | 'ImplementationError' 
      | 'InvocationTimeout' 
      | 'InsufficientPrivileges';

export type ConversationInvocableTargetType = 'apex' 
      | 'flow' 
      | 'standardInvocableAction' 
      | 'logFeedback' 
      | 'externalService' 
      | 'logGoalAchieved' 
      | 'logDisambiguation' 
      | 'quickAction';

export type ConversationMappingType = 'Input' 
      | 'Output';

export type ConversationMessageCollectionType = 'None' 
      | 'StaticList' 
      | 'DynamicList';

export type ConversationMessageConstantType = 'Title' 
      | 'Url' 
      | 'Image' 
      | 'Options' 
      | 'SubTitle';

export type ConversationMessageConstantValueType = 'Text' 
      | 'Url' 
      | 'ImageAsset';

export type ConversationMessageDefinitionType = 'RecordView' 
      | 'RecordPicker' 
      | 'Picklist' 
      | 'TimePicker' 
      | 'Link' 
      | 'CustomMessage' 
      | 'CustomPicker' 
      | 'LegacyPicker' 
      | 'AuthenticationRequest' 
      | 'Action' 
      | 'AutoResponse' 
      | 'PaymentRequest' 
      | 'Notification';

export type ConversationMessageExecutionType = 'Sync' 
      | 'Async';

export type ConversationMessageFormatType = 'Text' 
      | 'Attachments' 
      | 'RichLink' 
      | 'Media' 
      | 'Buttons' 
      | 'Carousel' 
      | 'QuickReplies' 
      | 'ListPicker' 
      | 'TimePicker' 
      | 'EncryptedOAuthToken' 
      | 'Application' 
      | 'Inputs' 
      | 'WebView' 
      | 'Payment' 
      | 'ExternalTemplate';

export type ConversationMessageGroupType = 'Retry' 
      | 'Success';

export type ConversationMessageHandlerType = 'QuickAction' 
      | 'AuthProvider' 
      | 'PaymentProvider' 
      | 'Attachment';

export type ConversationMessageLayoutValueType = 'Literal' 
      | 'MediaAsset' 
      | 'CompositeType' 
      | 'SourceSobjectFieldValue' 
      | 'SourceSobjectFormula' 
      | 'SourcePrimitiveValue' 
      | 'SourceCompositeType' 
      | 'FormulaTemplate' 
      | 'SourceSobjectField';

export type ConversationMessageMergeFieldType = string;

export type ConversationMessageOptionsParameterType = 'RecordIdOptions' 
      | 'TimeSlotOptions' 
      | 'CustomPrimitiveOptions' 
      | 'CustomCompositeOptions';

export type ConversationMessageParameterType = 'RecordIds' 
      | 'CustomPrimitive' 
      | 'CustomComposite';

export type ConversationMessageType = 'StaticContent' 
      | 'Choices' 
      | 'Form' 
      | 'AuthenticationRequest' 
      | 'PaymentRequest';

export type ConversationMessageValueType = 'Text' 
      | 'Boolean' 
      | 'Integer' 
      | 'Double' 
      | 'Date' 
      | 'DateTime' 
      | 'Url' 
      | 'RecordId' 
      | 'ImageId' 
      | 'Composite';

export type ConversationRecordLookupType = 'Search' 
      | 'Query';

export type ConversationSystemDialogType = 'TransferFailed' 
      | 'ErrorHandling' 
      | 'KnowledgeFallback' 
      | 'Disambiguation' 
      | 'DisambiguationFailed';

export type ConversationSystemMessageParamType = string;

export type ConversationSystemMessageType = 'Transfer' 
      | 'EndChat';

export type ConversationVariableCollectionType = string;

export type ConversationVariableOperandSourceType = 'StandardConversationVariable' 
      | 'ConversationVariable' 
      | 'ContextVariable' 
      | 'MlSlotClass' 
      | 'StandardMlSlotClass' 
      | 'Value' 
      | 'BotDefinition' 
      | 'Queue' 
      | 'FlowDefinition';

export type ConversationVariableType = 'ConversationVariable' 
      | 'ContextVariable' 
      | 'PageContextVariable';

export type ConversationVendorType = 'ServiceCloudVoicePartner' 
      | 'Amazon_Connect' 
      | 'BringYourOwnChannelPartner' 
      | 'BringYourOwnContactCenter';

export type CountryIsoCode = 'AD' 
      | 'AE' 
      | 'AF' 
      | 'AG' 
      | 'AI' 
      | 'AL' 
      | 'AM' 
      | 'AO' 
      | 'AQ' 
      | 'AR' 
      | 'AT' 
      | 'AU' 
      | 'AW' 
      | 'AX' 
      | 'AZ' 
      | 'BA' 
      | 'BB' 
      | 'BD' 
      | 'BE' 
      | 'BF' 
      | 'BG' 
      | 'BH' 
      | 'BI' 
      | 'BJ' 
      | 'BL' 
      | 'BM' 
      | 'BN' 
      | 'BO' 
      | 'BQ' 
      | 'BR' 
      | 'BS' 
      | 'BT' 
      | 'BV' 
      | 'BW' 
      | 'BY' 
      | 'BZ' 
      | 'CA' 
      | 'CC' 
      | 'CD' 
      | 'CF' 
      | 'CG' 
      | 'CH' 
      | 'CI' 
      | 'CK' 
      | 'CL' 
      | 'CM' 
      | 'CN' 
      | 'CO' 
      | 'CR' 
      | 'CV' 
      | 'CW' 
      | 'CX' 
      | 'CY' 
      | 'CZ' 
      | 'DE' 
      | 'DJ' 
      | 'DK' 
      | 'DM' 
      | 'DO' 
      | 'DZ' 
      | 'EC' 
      | 'EE' 
      | 'EG' 
      | 'EH' 
      | 'ER' 
      | 'ES' 
      | 'ET' 
      | 'FI' 
      | 'FJ' 
      | 'FK' 
      | 'FO' 
      | 'FR' 
      | 'GA' 
      | 'GB' 
      | 'GD' 
      | 'GE' 
      | 'GF' 
      | 'GG' 
      | 'GH' 
      | 'GI' 
      | 'GL' 
      | 'GM' 
      | 'GN' 
      | 'GP' 
      | 'GQ' 
      | 'GR' 
      | 'GS' 
      | 'GT' 
      | 'GW' 
      | 'GY' 
      | 'HM' 
      | 'HN' 
      | 'HR' 
      | 'HT' 
      | 'HU' 
      | 'ID' 
      | 'IE' 
      | 'IL' 
      | 'IM' 
      | 'IN' 
      | 'IO' 
      | 'IQ' 
      | 'IS' 
      | 'IT' 
      | 'JE' 
      | 'JM' 
      | 'JO' 
      | 'JP' 
      | 'KE' 
      | 'KG' 
      | 'KH' 
      | 'KI' 
      | 'KM' 
      | 'KN' 
      | 'KR' 
      | 'KW' 
      | 'KY' 
      | 'KZ' 
      | 'LA' 
      | 'LB' 
      | 'LC' 
      | 'LI' 
      | 'LK' 
      | 'LR' 
      | 'LS' 
      | 'LT' 
      | 'LU' 
      | 'LV' 
      | 'LY' 
      | 'MA' 
      | 'MC' 
      | 'MD' 
      | 'ME' 
      | 'MF' 
      | 'MG' 
      | 'MK' 
      | 'ML' 
      | 'MM' 
      | 'MN' 
      | 'MO' 
      | 'MQ' 
      | 'MR' 
      | 'MS' 
      | 'MT' 
      | 'MU' 
      | 'MV' 
      | 'MW' 
      | 'MX' 
      | 'MY' 
      | 'MZ' 
      | 'NA' 
      | 'NC' 
      | 'NE' 
      | 'NF' 
      | 'NG' 
      | 'NI' 
      | 'NL' 
      | 'NO' 
      | 'NP' 
      | 'NR' 
      | 'NU' 
      | 'NZ' 
      | 'OM' 
      | 'PA' 
      | 'PE' 
      | 'PF' 
      | 'PG' 
      | 'PH' 
      | 'PK' 
      | 'PL' 
      | 'PM' 
      | 'PN' 
      | 'PS' 
      | 'PT' 
      | 'PY' 
      | 'QA' 
      | 'RE' 
      | 'RO' 
      | 'RS' 
      | 'RU' 
      | 'RW' 
      | 'SA' 
      | 'SB' 
      | 'SC' 
      | 'SE' 
      | 'SG' 
      | 'SH' 
      | 'SI' 
      | 'SJ' 
      | 'SK' 
      | 'SL' 
      | 'SM' 
      | 'SN' 
      | 'SO' 
      | 'SR' 
      | 'SS' 
      | 'ST' 
      | 'SV' 
      | 'SX' 
      | 'SZ' 
      | 'TC' 
      | 'TD' 
      | 'TF' 
      | 'TG' 
      | 'TH' 
      | 'TJ' 
      | 'TK' 
      | 'TL' 
      | 'TM' 
      | 'TN' 
      | 'TO' 
      | 'TR' 
      | 'TT' 
      | 'TV' 
      | 'TW' 
      | 'TZ' 
      | 'UA' 
      | 'UG' 
      | 'US' 
      | 'UY' 
      | 'UZ' 
      | 'VA' 
      | 'VC' 
      | 'VE' 
      | 'VG' 
      | 'VN' 
      | 'VU' 
      | 'WF' 
      | 'WS' 
      | 'XK' 
      | 'YE' 
      | 'YT' 
      | 'ZA' 
      | 'ZM' 
      | 'ZW';

export type CreationSetting = 'FullAccess' 
      | 'EditAccess' 
      | 'ViewAccess' 
      | 'None';

export type CreatorType = 'INTERNAL_USER' 
      | 'SALESFORCE_ADMIN';

export type CriteriaJoinType = 'all' 
      | 'any' 
      | 'custom' 
      | 'none';

export type CriteriaRelationshipType = 'AllConditionsAreMet' 
      | 'AnyConditionIsMet';

export type CriterionOperator = 'Equal' 
      | 'NotEqual' 
      | 'GreaterThan' 
      | 'GreaterThanOrEqual' 
      | 'LessThan' 
      | 'LessThanOrEqual' 
      | 'Contains' 
      | 'StartsWith' 
      | 'Includes' 
      | 'NotIncludes';

export type CspTrustedSiteContext = 'All' 
      | 'LEX' 
      | 'Communities' 
      | 'FieldServiceMobileExtension' 
      | 'VisualForce';

export type CurrencyIsoCode = 'ADP' 
      | 'AED' 
      | 'AFA' 
      | 'AFN' 
      | 'ALL' 
      | 'AMD' 
      | 'ANG' 
      | 'AOA' 
      | 'ARS' 
      | 'ATS' 
      | 'AUD' 
      | 'XAV' 
      | 'AWG' 
      | 'AZM' 
      | 'AZN' 
      | 'BAM' 
      | 'BBD' 
      | 'BDT' 
      | 'BEF' 
      | 'BGL' 
      | 'BGN' 
      | 'BHD' 
      | 'BIF' 
      | 'BMD' 
      | 'BND' 
      | 'BOB' 
      | 'BOV' 
      | 'BRB' 
      | 'BRL' 
      | 'BSD' 
      | 'BTN' 
      | 'BWP' 
      | 'BYB' 
      | 'BYN' 
      | 'BYR' 
      | 'BZD' 
      | 'CAD' 
      | 'CDF' 
      | 'CHF' 
      | 'CLF' 
      | 'CLP' 
      | 'CNH' 
      | 'CNY' 
      | 'COP' 
      | 'CRC' 
      | 'CSD' 
      | 'CUC' 
      | 'CUP' 
      | 'CVE' 
      | 'CYP' 
      | 'CZK' 
      | 'DEM' 
      | 'DJF' 
      | 'DKK' 
      | 'DOP' 
      | 'DZD' 
      | 'ECS' 
      | 'EEK' 
      | 'EGP' 
      | 'ERN' 
      | 'ESP' 
      | 'ETB' 
      | 'EUR' 
      | 'FIM' 
      | 'FJD' 
      | 'FKP' 
      | 'XFL' 
      | 'FRF' 
      | 'GBP' 
      | 'GEL' 
      | 'GHC' 
      | 'GHS' 
      | 'GIP' 
      | 'GMD' 
      | 'GNF' 
      | 'GRD' 
      | 'GTQ' 
      | 'GWP' 
      | 'GYD' 
      | 'HKD' 
      | 'HNL' 
      | 'HRD' 
      | 'HRK' 
      | 'HTG' 
      | 'HUF' 
      | 'IDR' 
      | 'IEP' 
      | 'ILS' 
      | 'INR' 
      | 'IQD' 
      | 'IRR' 
      | 'ISK' 
      | 'ITL' 
      | 'JMD' 
      | 'JOD' 
      | 'JPY' 
      | 'KES' 
      | 'KGS' 
      | 'KHR' 
      | 'KMF' 
      | 'KPW' 
      | 'KRW' 
      | 'KWD' 
      | 'KYD' 
      | 'KZT' 
      | 'LAK' 
      | 'LBP' 
      | 'LKR' 
      | 'LRD' 
      | 'LSL' 
      | 'LTL' 
      | 'LUF' 
      | 'LVL' 
      | 'LYD' 
      | 'MAD' 
      | 'XMA' 
      | 'MDL' 
      | 'MGA' 
      | 'MGF' 
      | 'MKD' 
      | 'MMK' 
      | 'MNT' 
      | 'MOP' 
      | 'MRO' 
      | 'MRU' 
      | 'MTL' 
      | 'MUR' 
      | 'MVR' 
      | 'MWK' 
      | 'MXN' 
      | 'MXV' 
      | 'MYR' 
      | 'MZM' 
      | 'MZN' 
      | 'NAD' 
      | 'NGN' 
      | 'NIO' 
      | 'NLG' 
      | 'NOK' 
      | 'NPR' 
      | 'NZD' 
      | 'OMR' 
      | 'PAB' 
      | 'XPA' 
      | 'PEN' 
      | 'PGK' 
      | 'PHP' 
      | 'PKR' 
      | 'PLN' 
      | 'PTE' 
      | 'PYG' 
      | 'QAR' 
      | 'RMB' 
      | 'ROL' 
      | 'RON' 
      | 'RSD' 
      | 'RUB' 
      | 'RUR' 
      | 'RWF' 
      | 'SAR' 
      | 'SBD' 
      | 'SCR' 
      | 'SDD' 
      | 'SDG' 
      | 'SEK' 
      | 'SGD' 
      | 'SHP' 
      | 'SIT' 
      | 'SKK' 
      | 'SLE' 
      | 'SLL' 
      | 'XSO' 
      | 'SOS' 
      | 'SRD' 
      | 'SRG' 
      | 'SSP' 
      | 'STD' 
      | 'STN' 
      | 'SUR' 
      | 'SVC' 
      | 'SYP' 
      | 'SZL' 
      | 'THB' 
      | 'TJR' 
      | 'TJS' 
      | 'TMM' 
      | 'TMT' 
      | 'TND' 
      | 'TOP' 
      | 'TPE' 
      | 'TRL' 
      | 'TRY' 
      | 'TTD' 
      | 'TWD' 
      | 'TZS' 
      | 'UAH' 
      | 'UGX' 
      | 'USD' 
      | 'UYU' 
      | 'UZS' 
      | 'VEB' 
      | 'VEF' 
      | 'VES' 
      | 'VND' 
      | 'VUV' 
      | 'WST' 
      | 'XAF' 
      | 'XCD' 
      | 'XOF' 
      | 'XPF' 
      | 'YER' 
      | 'YUM' 
      | 'ZAR' 
      | 'ZMK' 
      | 'ZMW' 
      | 'ZWD' 
      | 'ZWL';

export type CustomSettingsType = 'List' 
      | 'Hierarchy';

export type CustomSettingsVisibility = 'Protected' 
      | 'Public';

export type CustomTabDefinitionType = 'customObject' 
      | 'url' 
      | 'sControl' 
      | 'apexPage' 
      | 'flexiPage' 
      | 'aura';

export type DTParameterDataType = 'String' 
      | 'Number' 
      | 'Date' 
      | 'Boolean' 
      | 'Percent' 
      | 'Currency';

export type DTSourceCriteriaOperator = 'Equals' 
      | 'NotEquals' 
      | 'GreaterThan' 
      | 'GreaterOrEqual' 
      | 'LessThan' 
      | 'LessOrEqual' 
      | 'Matches' 
      | 'ExistsIn' 
      | 'DoesNotExistIn';

export type DTSourceCriteriaValueType = 'Literal' 
      | 'Parameter' 
      | 'Picklist' 
      | 'Formula' 
      | 'Lookup';

export type DashboardComponentColumnType = 'aggregate' 
      | 'detail' 
      | 'grouping';

export type DashboardComponentFilter = 'RowLabelAscending' 
      | 'RowLabelDescending' 
      | 'RowValueAscending' 
      | 'RowValueDescending';

export type DashboardComponentSize = 'Narrow' 
      | 'Medium' 
      | 'Wide';

export type DashboardComponentType = 'Bar' 
      | 'BarGrouped' 
      | 'BarStacked' 
      | 'BarStacked100' 
      | 'Column' 
      | 'ColumnGrouped' 
      | 'ColumnStacked' 
      | 'ColumnStacked100' 
      | 'Line' 
      | 'LineGrouped' 
      | 'Pie' 
      | 'Table' 
      | 'Metric' 
      | 'Gauge' 
      | 'LineCumulative' 
      | 'LineGroupedCumulative' 
      | 'Scontrol' 
      | 'VisualforcePage' 
      | 'Donut' 
      | 'Funnel' 
      | 'ColumnLine' 
      | 'ColumnLineGrouped' 
      | 'ColumnLineStacked' 
      | 'ColumnLineStacked100' 
      | 'Scatter' 
      | 'ScatterGrouped' 
      | 'FlexTable' 
      | 'Image' 
      | 'RichText';

export type DashboardFilterOperation = 'equals' 
      | 'notEqual' 
      | 'lessThan' 
      | 'greaterThan' 
      | 'lessOrEqual' 
      | 'greaterOrEqual' 
      | 'contains' 
      | 'notContain' 
      | 'startsWith' 
      | 'includes' 
      | 'excludes' 
      | 'between';

export type DashboardType = 'SpecifiedUser' 
      | 'LoggedInUser' 
      | 'MyTeamUser';

export type DataCategoryFilterOperation = 'above' 
      | 'below' 
      | 'at' 
      | 'aboveOrBelow';

export type DataConnectionStatus = 'Connected' 
      | 'Failed' 
      | 'Disconnected';

export type DataConnectorType = 'SalesforceMarketingCloud' 
      | 'SalesforceCommerceCloud' 
      | 'StreamingApp' 
      | 'SalesforceDotCom' 
      | 'AmazonS3' 
      | 'SFTP' 
      | 'UPLOAD' 
      | 'IngestApi' 
      | 'SalesforceInteractionStudio' 
      | 'CuratedEntity' 
      | 'GoogleCloudStorage' 
      | 'AzureBlob' 
      | 'ExternalPlatform' 
      | 'ConversationStorage' 
      | 'Snowflake' 
      | 'BIGQUERY' 
      | 'REDSHIFT' 
      | 'S3Arn' 
      | 'ACCOUNTENGAGEMENT';

export type DataImportDataExtractMethods = 'FULL_REFRESH' 
      | 'NUMERIC_CDC' 
      | 'DATETIME_CDC';

export type DataImportRefreshFrequency = 'NONE' 
      | 'MINUTES_15' 
      | 'HOURLY' 
      | 'DAILY' 
      | 'WEEKLY' 
      | 'MONTHLY' 
      | 'NOT_APPLICABLE' 
      | 'BATCH';

export type DataImportRefreshMode = 'FULL_REFRESH' 
      | 'UPSERT' 
      | 'INCREMENTAL' 
      | 'REPLACE' 
      | 'NEAR_REAL_TIME_INCREMENTAL' 
      | 'NOT_APPLICABLE';

export type DataModelType = 'Source' 
      | 'Transport' 
      | 'Landing' 
      | 'View' 
      | 'Reference';

export type DataObjectType = 'Object' 
      | 'Table' 
      | 'Api';

export type DataPipelineJobStatus = 'Scheduled' 
      | 'Running' 
      | 'Success' 
      | 'Failed' 
      | 'Killed' 
      | 'Load' 
      | 'Process' 
      | 'Store';

export type DataPipelineType = string;

export type DataSourceFilterOperator = 'equals' 
      | 'notEquals' 
      | 'lessThan' 
      | 'lessThanOrEqualTo' 
      | 'greaterThan' 
      | 'greaterThanOrEqualTo' 
      | 'like' 
      | 'in' 
      | 'notIn' 
      | 'includes' 
      | 'excludes';

export type DataSrcDynamicFilterType = 'integer' 
      | 'date' 
      | 'datetime' 
      | 'string' 
      | 'picklist' 
      | 'currency' 
      | 'boolean' 
      | 'reference';

export type DatasetColumnDataType = 'Dimensions' 
      | 'Dates' 
      | 'Measures';

export type DatatableDataType = 'Boolean' 
      | 'Currency' 
      | 'Date' 
      | 'DateTime' 
      | 'Email' 
      | 'Location' 
      | 'Number' 
      | 'Percent' 
      | 'Phone' 
      | 'Text' 
      | 'Url';

export type DaysOfWeek = 'Sunday' 
      | 'Monday' 
      | 'Tuesday' 
      | 'Wednesday' 
      | 'Thursday' 
      | 'Friday' 
      | 'Saturday';

export type DecisionMatrixColumnType = 'Input' 
      | 'Output';

export type DecisionMatrixDataType = 'Text' 
      | 'Number' 
      | 'NumberRange' 
      | 'TextRange' 
      | 'Currency' 
      | 'Percent' 
      | 'Boolean';

export type DecisionMatrixDefStatus = 'Draft' 
      | 'Active' 
      | 'Inactive' 
      | 'InvalidDraft' 
      | 'Obsolete';

export type DecisionMatrixType = 'Standard' 
      | 'Grouped';

export type DecisionTableCollectOperator = 'None' 
      | 'Sum' 
      | 'Minimum' 
      | 'Maximum' 
      | 'Count';

export type DecisionTableConditionType = 'All' 
      | 'Any' 
      | 'Custom';

export type DecisionTableDataSourceType = 'SingleSobject' 
      | 'MultipleSobjects' 
      | 'CsvUpload';

export type DecisionTableHitPolicy = 'UniqueValues' 
      | 'AnyValue' 
      | 'Priority' 
      | 'FirstMatch' 
      | 'CollectOperator' 
      | 'OutputOrder' 
      | 'RuleOrder';

export type DecisionTableOperator = 'Equals' 
      | 'NotEquals' 
      | 'LessThan' 
      | 'LessOrEqual' 
      | 'GreaterThan' 
      | 'GreaterOrEqual' 
      | 'Matches' 
      | 'ExistsIn' 
      | 'DoesNotExistIn';

export type DecisionTableParameterType = 'INPUT' 
      | 'OUTPUT';

export type DecisionTableRefreshStatus = 'Initiated' 
      | 'Failed' 
      | 'Completed' 
      | 'InProgress';

export type DecisionTableSortType = 'None' 
      | 'AscNullFirst' 
      | 'AscNullLast' 
      | 'DescNullFirst' 
      | 'DescNullLast';

export type DecisionTableStatus = 'Draft' 
      | 'Inactive' 
      | 'Active' 
      | 'ActivationInProgress';

export type DecisionTableType = 'LowVolume' 
      | 'HighVolume' 
      | 'Advanced' 
      | 'MediumVolume';

export type DecisionTableUsageType = 'Bre' 
      | 'TransactionJournal' 
      | 'TierProcessing' 
      | 'CustomLoyalty' 
      | 'TestProcess' 
      | 'AiAcceleratorSubscriberChurnPrediction' 
      | 'DefaultPricing' 
      | 'RecordAlert' 
      | 'ShipAndDebit' 
      | 'WarrantyClaim' 
      | 'ProductQualification' 
      | 'ProductCategoryQualification' 
      | 'EventOrchestration' 
      | 'FinancialServicesCloud';

export type DefaultLicenseStatus = 'Active' 
      | 'Trial' 
      | 'Free';

export type DefinitionCreationType = 'Standard' 
      | 'Custom' 
      | 'System' 
      | 'Derived' 
      | 'Bridge' 
      | 'Curated' 
      | 'Segment_Membership' 
      | 'Calculated_Insight' 
      | 'Ml_Prediction' 
      | 'Activation_Audience' 
      | 'Transform' 
      | 'ADG' 
      | 'External' 
      | 'Vector_Embedding' 
      | 'Chunk' 
      | 'Directory_Table' 
      | 'Semantic';

export type DefinitionType = 'Apex' 
      | 'LowCode' 
      | 'Java';

export type DeleteConstraint = 'Cascade' 
      | 'Restrict' 
      | 'SetNull';

export type DeployOperation = 'Add' 
      | 'Delete' 
      | 'Update';

export type DeployProblemType = 'Warning' 
      | 'Error' 
      | 'Info';

export type DeployStatus = 'Pending' 
      | 'InProgress' 
      | 'Succeeded' 
      | 'SucceededPartial' 
      | 'Failed' 
      | 'Canceling' 
      | 'Canceled';

export type DeploymentStatus = 'InDevelopment' 
      | 'Deployed';

export type DevicePlatformType = 'ios' 
      | 'android';

export type DeviceType = 'phone' 
      | 'tablet' 
      | 'minitablet';

export type DiscoveryAIModelStatus = 'Disabled' 
      | 'Uploading' 
      | 'UploadFailed' 
      | 'UploadCompleted' 
      | 'Validating' 
      | 'ValidationFailed' 
      | 'ValidationCompleted' 
      | 'Enabled';

export type DiscoveryAIModelTransformationType = 'TypographicClustering' 
      | 'SentimentAnalysis' 
      | 'FreeTextClustering' 
      | 'NumericalImputation' 
      | 'CategoricalImputation' 
      | 'TimeSeriesForecast' 
      | 'ExtractMonthOfYear' 
      | 'ExtractDayOfWeek';

export type DiscoveryAlgorithmType = 'Glm' 
      | 'Gbm' 
      | 'Xgboost' 
      | 'Drf' 
      | 'Best';

export type DiscoveryFieldMapSourceType = 'SalesforceField' 
      | 'AnalyticsDatasetField';

export type DiscoveryFilterFieldType = 'Text' 
      | 'Number' 
      | 'Date' 
      | 'DateTime' 
      | 'Boolean';

export type DiscoveryFilterOperator = 'Equal' 
      | 'NotEqual' 
      | 'GreaterThan' 
      | 'GreaterThanOrEqual' 
      | 'LessThan' 
      | 'LessThanOrEqual' 
      | 'Between' 
      | 'NotBetween' 
      | 'InSet' 
      | 'NotIn' 
      | 'Contains' 
      | 'StartsWith' 
      | 'EndsWith' 
      | 'IsNull' 
      | 'IsNotNull';

export type DiscoveryFilterValueType = 'Constant' 
      | 'PlaceHolder';

export type DiscoveryModelFieldType = 'Text' 
      | 'Number' 
      | 'Date';

export type DiscoveryModelRuntimeType = 'Discovery' 
      | 'H2O' 
      | 'Py36Tensorflow244' 
      | 'Py37Tensorflow270' 
      | 'Py37Scikitlearn102';

export type DiscoveryModelSourceType = 'Discovery' 
      | 'UserUpload';

export type DiscoveryOutcomeGoal = 'Minimize' 
      | 'Maximize' 
      | 'None';

export type DiscoveryPredictionType = 'Unknown' 
      | 'Regression' 
      | 'Classification' 
      | 'MulticlassClassification';

export type DiscoveryPushbackType = 'AiRecordInsight' 
      | 'Direct';

export type DiscoveryStoryAutopilotStatus = 'Enabled' 
      | 'Disabled';

export type DiscoveryStoryOutcomeGoal = 'Minimize' 
      | 'Maximize' 
      | 'None';

export type DiscoveryStoryOutcomeType = 'Count' 
      | 'Text' 
      | 'Categorical' 
      | 'Number';

export type DiscoveryStorySourceType = 'AnalyticsDataset' 
      | 'Report' 
      | 'LiveDataset';

export type DisplayCurrency = 'CORPORATE' 
      | 'PERSONAL';

export type DocumentGenerationMechanism = 'ClientSide' 
      | 'ServerSide';

export type DocumentTemplateStatus = 'Draft' 
      | 'Active' 
      | 'Archived';

export type DocumentTemplateType = 'Web' 
      | 'MicrosoftWord' 
      | 'MicrosoftPowerpoint' 
      | 'Microsoft365Word';

export type DocumentTemplateUsageType = 'Contract_Lifecycle_Management' 
      | 'Tearsheets';

export type DomainDeprovisionType = 'Failed' 
      | 'DnsCheckFailed' 
      | 'Cancelled' 
      | 'OrgExpired' 
      | 'DomainRenamed' 
      | 'HttpsOptionModified' 
      | 'DomainDeleted' 
      | 'ForcedDeprovision';

export type DomainHttpsOption = 'CdnPartner' 
      | 'SitesRuntime' 
      | 'ExternalHttps' 
      | 'NoHttps' 
      | 'Community' 
      | 'CommunityAlt' 
      | 'SitesAlt' 
      | 'Sites' 
      | 'OrgDomain';

export type DomainProvisionStatus = 'Provisioning' 
      | 'NoDomainSite' 
      | 'Provisioned' 
      | 'Deployed' 
      | 'Completed' 
      | 'Cancelled' 
      | 'Failed';

export type DomainProvisionType = 'Provision' 
      | 'Deprovision' 
      | 'Maintenance';

export type DomainType = 'FTest' 
      | 'FTest2';

export type DonorMatchingMethod = 'Duplicate_Management_Rules' 
      | 'No_Matching';

export type DupeActionType = 'Allow' 
      | 'Block';

export type DupeSecurityOptionType = 'EnforceSharingRules' 
      | 'BypassSharingRules';

export type EASAppType = 'PublicSector' 
      | 'Loyalty' 
      | 'HealthCloud' 
      | 'IndustryServiceExcellence' 
      | 'IndustriesPricing' 
      | 'OmniAnalytics' 
      | 'ActionableEventOrch';

export type ERIRelationshipType = 'ACTIVE_RECORD' 
      | 'PERSON_RECORD' 
      | 'COMPANY_RECORD';

export type ElasticComputeStatus = 'NotApplicable' 
      | 'NotStarted' 
      | 'InProgress' 
      | 'Success' 
      | 'Failure';

export type FlowElementSubtype = 'SortCollectionProcessor' 
      | 'RecommendationMapCollectionProcessor' 
      | 'FilterCollectionProcessor' 
      | 'WaitDate' 
      | 'WaitUntilEvent' 
      | 'WaitAttribute' 
      | 'WaitDuration' 
      | 'InteractiveStep' 
      | 'BackgroundStep' 
      | 'MuleSoftStep' 
      | 'ManagedContentRoleInteractiveStep' 
      | 'ManagedContentVariantSetLockBackgroundStep' 
      | 'ManagedContentVariantSetReadyBackgroundStep' 
      | 'ManagedContentVariantAutoPublishBackgroundStep' 
      | 'ManagedContentVariantAutoUnpublishBackgroundStep' 
      | 'AddPromptInstructions';

export type ElementType = string;

export type EmailPurposeType = string;

export type EmailServicesAttOptions = 'None' 
      | 'TextOnly' 
      | 'BinaryOnly' 
      | 'All' 
      | 'NoContent';

export type EmailServicesErrorAction = 'UseSystemDefault' 
      | 'Bounce' 
      | 'Discard' 
      | 'Requeue';

export type EmailTemplateStyle = 'none' 
      | 'freeForm' 
      | 'formalLetter' 
      | 'promotionRight' 
      | 'promotionLeft' 
      | 'newsletter' 
      | 'products';

export type EmailTemplateType = 'text' 
      | 'html' 
      | 'custom' 
      | 'visualforce';

export type EmailTemplateUiType = 'Aloha' 
      | 'SFX' 
      | 'SFX_Sample';

export type EmailToCaseOnFailureActionType = 'Bounce' 
      | 'Discard' 
      | 'Requeue';

export type EmbeddedServiceAuthMethod = 'CommunitiesLogin' 
      | 'CustomLogin';

export type EmbeddedServiceAuthModeType = 'Auth' 
      | 'UnAuth';

export type EmbeddedServiceChannelType = 'EmbeddedServiceConfig' 
      | 'MessagingChannel' 
      | 'Phone' 
      | 'CustomURL' 
      | 'EmbeddedMessaging';

export type EmbeddedServiceComponentBundleType = 'AuraDefinitionBundle' 
      | 'LightningComponentBundle';

export type EmbeddedServiceCustomComponentType = 'LA_Prechat' 
      | 'LA_Minimized' 
      | 'LA_PlainTextChatMessage' 
      | 'LA_ChatHeader' 
      | 'MIAW_Prechat' 
      | 'MIAW_Header';

export type EmbeddedServiceDeploymentFeature = 'None' 
      | 'EmbeddedMessaging' 
      | 'LiveAgent' 
      | 'Flows' 
      | 'FieldService';

export type EmbeddedServiceDeploymentType = 'Web' 
      | 'Mobile';

export type EmbeddedServiceFeature = 'NotInUse' 
      | 'Base' 
      | 'LiveAgent' 
      | 'FieldService' 
      | 'Flows' 
      | 'ChannelMenu' 
      | 'EmbeddedMessaging';

export type EmbeddedServiceFlowType = 'FL_Flow' 
      | 'FS_NewAppointment' 
      | 'FS_ModifyAppointment' 
      | 'FS_CancelAppointment' 
      | 'LA_Survey';

export type EmbeddedServiceFontSize = 'Small' 
      | 'Medium' 
      | 'Large';

export type EmbeddedServiceFormDisplayContext = 'None' 
      | 'Conversation' 
      | 'Session';

export type EmbeddedServiceFormFieldType = 'Text' 
      | 'Email' 
      | 'Phone' 
      | 'Number' 
      | 'Checkbox' 
      | 'ChoiceList';

export type EmbeddedServiceLabelKey = 'LA_Container_Base_Close' 
      | 'LA_Container_Base_Minimize' 
      | 'LA_Container_Base_EndOfDialog' 
      | 'LA_Container_Base_MinimizedContainerAssistiveText' 
      | 'LA_Chat_Body_ChatWindowAgent' 
      | 'LA_Chat_Body_InputTextPlaceholder' 
      | 'LA_Chat_Body_AgentTypingUpdate' 
      | 'LA_Chat_Body_Send' 
      | 'LA_Chat_Body_ChatStartTime' 
      | 'LA_Chat_Body_MessageAreaTransferred' 
      | 'LA_Chat_Body_FileTransferCanceled' 
      | 'LA_Chat_Body_FileTransferSuccess' 
      | 'LA_Chat_Body_FileTransferFailure' 
      | 'LA_Chat_Body_FileTransferRequested' 
      | 'LA_Chat_Body_TransferFailed' 
      | 'LA_Chat_ExtendedHeader_ShowExtendedHeader' 
      | 'LA_Chat_ExtendedHeader_HideExtendedHeader' 
      | 'LA_Chat_ExtendedHeader_ChatStateHeaderGreeting' 
      | 'LA_Chat_ExtendedHeader_SaveTranscript' 
      | 'LA_Chat_ExtendedHeader_EndChatAction' 
      | 'LA_Chat_FileTransfer_FileUpload' 
      | 'LA_Chat_FileTransfer_UploadFile' 
      | 'LA_Chat_FileTransfer_SelectNewFile' 
      | 'LA_Chat_FileTransfer_UsePreviousElementToUploadFile' 
      | 'LA_Chat_FileTransfer_RemoveFile' 
      | 'LA_Chat_Minimized_MessageNotification' 
      | 'LA_Chat_Minimized_SingleMessageNotification' 
      | 'LA_Chat_Minimized_AgentSaysNotification' 
      | 'LA_Chat_Minimized_IdleTimeoutMinimizedWarning' 
      | 'LA_Chat_Minimized_IdleTimeoutMinimizedEndChat' 
      | 'LA_Chat_Ended_ChatEnd' 
      | 'LA_Chat_Ended_ChatEndAgent' 
      | 'LA_Chat_Ended_ChatEndConnection' 
      | 'LA_Chat_Ended_ChatButtonClose' 
      | 'LA_Chat_Ended_PostChatButton' 
      | 'LA_Chat_Ended_IdleTimeoutEndChatMessage' 
      | 'LA_Chat_Reconnecting_ReconnectingChasitorIssue' 
      | 'LA_Chat_Reconnecting_ReconnectingMinimizedMessage' 
      | 'LA_Chat_Timeout_IdleTimeoutWarningQuestion' 
      | 'LA_Chat_AgentTransfer_BannerInProgressTransfer' 
      | 'LA_Chat_AgentTransfer_MinimizedInProgressTransfer' 
      | 'LA_Chat_AgentTransfer_BannerTransferred' 
      | 'LA_Chat_AgentTransfer_BannerReconnected' 
      | 'LA_Chat_CloseConfirmation_ChatStateHeader' 
      | 'LA_Chat_CloseConfirmation_ChatStateBody' 
      | 'LA_Chat_CloseConfirmation_ChatStateResume' 
      | 'LA_Chat_CloseConfirmation_ChatStateEnd' 
      | 'LA_Chat_UnseenMessage_UnseenMessage' 
      | 'LA_Chat_UnseenMessage_SingleUnseenMessage' 
      | 'LA_OfflineSupport_SupportForm_HeaderText' 
      | 'LA_OfflineSupport_Error_ErrorDialogTitle' 
      | 'LA_OfflineSupport_Error_ErrorDialogBody' 
      | 'LA_OfflineSupport_Error_ErrorDialogButton' 
      | 'LA_OfflineSupport_SupportForm_SupportFormTitle' 
      | 'LA_OfflineSupport_SupportForm_SupportFormSubtitle' 
      | 'LA_OfflineSupport_SupportForm_SupportFormButton' 
      | 'LA_OfflineSupport_SupportForm_BannerAltText' 
      | 'LA_OfflineSupport_CloseConfirmation_ConfirmationDialogTitle' 
      | 'LA_OfflineSupport_CloseConfirmation_ConfirmationDialogBody' 
      | 'LA_OfflineSupport_CloseConfirmation_ConfirmationDialogButton' 
      | 'LA_OfflineSupport_Minimized_ConfirmationMinimizedText' 
      | 'LA_OfflineSupport_Minimized_ErrorMinimizedText' 
      | 'LA_PostChat_Base_PostChat' 
      | 'LA_PreChat_Base_LiveChat' 
      | 'LA_PreChat_Base_Instructions' 
      | 'LA_PreChat_Base_BannerAltText' 
      | 'LA_PreChat_Base_PrechatAssistiveText' 
      | 'LA_PreChat_Base_StartChat' 
      | 'LA_PreChat_Base_FieldError' 
      | 'LA_Waiting_WithoutQueuePos_WaitingGreeting' 
      | 'LA_Waiting_WithoutQueuePos_WaitingDefaultName' 
      | 'LA_Waiting_WithoutQueuePos_WaitingMessage' 
      | 'LA_Waiting_WithoutQueuePos_WaitingCancelChatRequest' 
      | 'LA_Waiting_WithQueuePos_WaitingQueuePosMessageFirstLine' 
      | 'LA_Waiting_WithQueuePos_WaitingQueuePosMessageSecondLine' 
      | 'LA_Waiting_WithQueuePos_WaitingQueuePosZeroMessage' 
      | 'LA_Waiting_WithQueuePos_WaitingQueuePosConnectingMessage' 
      | 'LA_Waiting_WithQueuePos_WaitingQueuePosMaxNumber' 
      | 'LA_Waiting_WithQueuePos_WaitingQueuePosMaxMessageFirstLine' 
      | 'LA_Waiting_WithQueuePos_WaitingQueuePosMaxMessageSecondLine' 
      | 'LA_Waiting_Minimized_MinimizedWaitingMessage' 
      | 'LA_Waiting_Minimized_MinimizedQueuePosMessage' 
      | 'LA_Waiting_Minimized_MinimizedQueuePosZeroMessage' 
      | 'LA_Waiting_Minimized_MinimizedQueuePosAssistiveMessage' 
      | 'LA_Waiting_Minimized_MinimizedQueuePosZeroAssistiveMessage' 
      | 'LA_Waiting_Error_ErrorNoAgentTitle' 
      | 'LA_Waiting_Error_ErrorNoAgentHeader' 
      | 'LA_Waiting_Error_ErrorNoAgentBodyApology' 
      | 'LA_Waiting_Error_ErrorBlockedTitleAndHeader' 
      | 'LA_Waiting_Error_ErrorBlockedBody' 
      | 'LA_Waiting_Error_ErrorBlockedCloseButton' 
      | 'LA_Waiting_Error_ErrorNoConnectionTitle' 
      | 'LA_Waiting_Error_ErrorNoConnectionHeader' 
      | 'LA_Waiting_Error_ErrorNoConnectionBodyApology' 
      | 'LA_Waiting_Error_ErrorTryAgainButton' 
      | 'LA_Waiting_Error_ErrorExitChatButton' 
      | 'LA_Waiting_CloseConfirmation_WaitingStateHeader' 
      | 'LA_Waiting_CloseConfirmation_WaitingStateBodyApology' 
      | 'LA_Waiting_CloseConfirmation_WaitingStateLeave' 
      | 'LA_Waiting_CloseConfirmation_WaitingStateContinue' 
      | 'LA_Chat_Timeout_IdleTimeoutWarningRequest' 
      | 'LA_Waiting_Error_ErrorNoAgentBodyRequest' 
      | 'LA_Waiting_Error_ErrorNoConnectionBodyRequest' 
      | 'LA_Waiting_CloseConfirmation_WaitingStateBodyWarning' 
      | 'LA_General_CloseSessionWarningTitle' 
      | 'LA_General_CloseSessionWarningBody' 
      | 'LA_General_CloseSessionWarningButton' 
      | 'LA_Chat_Body_ChooseOption' 
      | 'LA_Waiting_Base_BannerAssistiveText' 
      | 'LA_Chat_Group_Chat_HeaderTitle' 
      | 'LA_Chat_Group_Chat_ExtendedHeaderGreeting' 
      | 'LA_Chat_Group_Chat_AgentJoinedChat' 
      | 'LA_Chat_Group_Chat_AgentLeftChat' 
      | 'LA_Chat_Group_Chat_MinimizedStateMessage' 
      | 'LA_Chat_WithQueuePos_QueuePosTransferringMessage' 
      | 'LA_Chat_Ended_ChatEndChatbot' 
      | 'LA_Chat_Body_InputTextAssistiveText' 
      | 'LA_Waiting_Header_Text' 
      | 'LA_PreChat_Terms_And_Conditions' 
      | 'LA_PreChat_Base_Terms_And_Conditions_Acknowledgement' 
      | 'FS_Container_Base_Back' 
      | 'FS_Container_AuthenticationFailure_Title' 
      | 'FS_Container_AuthenticationFailure_Body' 
      | 'FS_Container_AuthenticationFailure_Button' 
      | 'FS_AppointmentDetail_Error_AccessDenied' 
      | 'FS_AppointmentDetail_Error_NoAppointmentFound' 
      | 'FS_AppointmentDetail_Error_ButtonOK' 
      | 'FS_AppointmentList_Base_ActiveAppointmentTab' 
      | 'FS_AppointmentList_Base_ClosedAppointmentTab' 
      | 'FS_AppointmentList_Base_Header' 
      | 'FS_AppointmentList_Base_NewAppointmentButtonLabel' 
      | 'FS_AppointmentList_Error_GenericErrorStatement' 
      | 'FS_AppointmentList_Empty_NoAppointmentsTitleUpcomingTab' 
      | 'FS_AppointmentList_Empty_NoAppointmentsDescriptionUpcomingTab' 
      | 'FS_AppointmentList_Empty_NoAppointmentsTitlePastTab' 
      | 'FS_AppointmentList_Empty_NoAppointmentsDescriptionPastTab' 
      | 'FS_Confirmation_Base_Scheduled' 
      | 'FS_Confirmation_Base_Assigned' 
      | 'FS_Confirmation_Base_Arriving' 
      | 'FS_Confirmation_Base_InProgress' 
      | 'FS_Confirmation_Base_Dispatched' 
      | 'FS_Confirmation_Base_Completed' 
      | 'FS_Confirmation_Base_HeaderText' 
      | 'FS_Confirmation_Base_AddCalendar' 
      | 'FS_Confirmation_Base_ViewAppointment' 
      | 'FS_Flows_Error_Title' 
      | 'FS_Flows_Error_Body' 
      | 'FS_Flows_Error_ConfirmButton' 
      | 'FS_Flows_Error_CancelOrModifyError' 
      | 'FS_Flows_NewAppointmentCloseConfirmation_Title' 
      | 'FS_Flows_NewAppointmentCloseConfirmation_Body' 
      | 'FS_Flows_NewAppointmentCloseConfirmation_ButtonClose' 
      | 'FS_Flows_NewAppointmentCloseConfirmation_ButtonCancel' 
      | 'FS_Flows_CancelAppointmentCloseConfirmation_Title' 
      | 'FS_Flows_CancelAppointmentCloseConfirmation_Body' 
      | 'FS_Flows_CancelAppointmentCloseConfirmation_ButtonClose' 
      | 'FS_Flows_CancelAppointmentCloseConfirmation_ButtonCancel' 
      | 'FS_Flows_CancelAppointmentCloseConfirmation_Footer' 
      | 'FS_Flows_ModifyAppointmentCloseConfirmation_Title' 
      | 'FS_Flows_ModifyAppointmentCloseConfirmation_Body' 
      | 'FS_Flows_ModifyAppointmentCloseConfirmation_ButtonClose' 
      | 'FS_Flows_ModifyAppointmentCloseConfirmation_ButtonCancel' 
      | 'FS_Flows_ModifyAppointmentCloseConfirmation_Footer' 
      | 'FS_Scheduling_Base_HeaderText' 
      | 'FS_Scheduling_Base_RecommendedTab' 
      | 'FS_Scheduling_Base_ByDateTab' 
      | 'FS_Scheduling_Base_PreviousWeekAssistiveText' 
      | 'FS_Scheduling_Base_NextWeekAssistiveText' 
      | 'FS_Scheduling_Base_DatePickerAssistiveText' 
      | 'FS_Scheduling_Error_UnexpectedError' 
      | 'FS_Scheduling_Error_NoAvailableTimeslotsError' 
      | 'FS_Scheduling_Error_NoAvailableTimeslotsByDateError' 
      | 'FS_Welcome_Base_GreetingTitle' 
      | 'FS_Welcome_Base_NewAppointmentButton' 
      | 'FS_Welcome_Base_ExistingAppointmentsButton' 
      | 'FS_Confirmation_Base_DoneButton' 
      | 'FS_AppointmentList_Error_GenericErrorRequest' 
      | 'FS_AppointmentHome_Base_CancelAppointmentButton' 
      | 'FS_AppointmentHome_Base_ModifyAppointmentButton' 
      | 'FS_AppointmentHome_Base_ErrorTitle' 
      | 'FS_Scheduling_Base_TimePickerAssistiveText' 
      | 'FS_ResourceDetail_Base_Header' 
      | 'FS_AppointmentHome_Base_DefaultCardHeaderText' 
      | 'FS_Error_Dialog_Title' 
      | 'FS_Error_Dialog_Body' 
      | 'FS_Error_Dialog_Confirm_Button' 
      | 'CM_Container_Header_Primary_Greeting' 
      | 'CM_Container_Header_Secondary_Greeting' 
      | 'CM_Container_MenuItems_WebChatAvailable' 
      | 'CM_Container_MenuItems_WebChatUnavailable' 
      | 'CM_Container_MenuItems_WebChatLoading' 
      | 'CM_Container_MenuItems_ChannelLabel' 
      | 'CM_Container_Button_AssistiveText' 
      | 'CM_Container_MenuItems_AssistiveText' 
      | 'CM_Container_MenuItems_WebLinkNewTabAssistiveText' 
      | 'CM_Container_MenuItems_EmbeddedMessagingChatLoading' 
      | 'EM_Container_Base_DefaultHeaderText' 
      | 'EM_Container_Base_Minimize' 
      | 'EM_Container_Base_Close' 
      | 'EM_Container_Base_CloseConversation' 
      | 'EM_Container_Base_DefaultMinimizedText' 
      | 'EM_Container_Base_MinimizedButtonAssistiveText' 
      | 'EM_Container_Base_MinimizedNotifDismissButtonAssistiveText' 
      | 'EM_Container_Base_HeaderGreetingAnnouncement' 
      | 'EM_Container_Base_NinePlusUnseenMessageCount' 
      | 'EM_Container_Base_ZeroUnseenMessagesAssistiveText' 
      | 'EM_Container_Base_UnseenMessagesAssistiveText' 
      | 'EM_Container_Base_NinePlusUnseenMessagesAssistiveText' 
      | 'EM_Container_Base_InputFooterTextAreaPlaceHolder' 
      | 'EM_Container_Base_PrechatFirstName' 
      | 'EM_Container_Base_PrechatLastName' 
      | 'EM_Container_Base_PrechatSubject' 
      | 'EM_Container_Base_PrechatEmail' 
      | 'EM_Container_Base_BeforeUnloadWarningMessage' 
      | 'EM_Container_Base_StartBookendText' 
      | 'EM_Container_Base_EndBookendText' 
      | 'EM_Container_Base_ChatMessageMetadataAssistiveText' 
      | 'EM_Container_Base_ParticipantJoinText' 
      | 'EM_Container_Base_ParticipantLeaveText' 
      | 'EM_Container_Base_InputFooterTextAreaAssistiveText' 
      | 'EM_Container_Base_InputFooterSendButtonAssistiveText' 
      | 'EM_Container_Base_PrechatStateSubmitButton' 
      | 'EM_Container_Base_InvalidEmailFormFieldError' 
      | 'EM_Container_Base_RequiredFormFieldError' 
      | 'EM_Container_Base_NotificationDismissButtonText' 
      | 'EM_Container_Base_ConversationEndedMinimizedText' 
      | 'EM_Container_Base_ExpiredJWT' 
      | 'EM_Chat_FileTransfer_SelectNewFileText' 
      | 'EM_PreChat_Base_PrechatCustomFieldLabel' 
      | 'EM_Chat_FileTransfer_FileSendingText' 
      | 'EM_Chat_FileTransfer_DownloadFileButtonTitle' 
      | 'EM_Chat_FileTransfer_SelectFileAttachmentButtonTitle' 
      | 'EM_Chat_FileTransfer_CancelFileAttachmentButtonTitle' 
      | 'EM_Chat_FileTransfer_DownloadFileButtonAssistiveText' 
      | 'EM_Chat_FileTransfer_SelectFileAttachmentButtonAssistiveText' 
      | 'EM_Chat_FileTransfer_CancelFileAttachmentButtonAssistiveText' 
      | 'EM_Chat_ChatBody_Sent' 
      | 'EM_Chat_ChatBody_Delivered' 
      | 'EM_Chat_ChatBody_Read' 
      | 'EM_Chat_ChoicesMessage_MenuAssistiveText' 
      | 'EM_Chat_ChoicesSelectionResponse_PlaceholderText' 
      | 'EM_Chat_ChoicesMessage_ButtonsAssistiveText' 
      | 'EM_Container_Base_HeaderAnnouncementTransferRequestSuccess' 
      | 'EM_Container_Base_HeaderAnnouncementTransferRequestFailure' 
      | 'EM_Container_Base_SystemMessageTransferRequestSuccess' 
      | 'EM_Container_Base_SystemMessageTransferRequestFailure' 
      | 'EM_Container_Base_SystemMessageTransferRequestTryAgain' 
      | 'EM_Chat_ChatBody_AgentTypingIndicatorAssistiveText' 
      | 'EM_Chat_ChatBody_ChatbotTypingIndicatorAssistiveText' 
      | 'EM_Container_Base_InputFooterTextAreaPlaceholderOnlyParticipant' 
      | 'EM_Container_Base_AgentJoinAnnouncement' 
      | 'EM_Container_Base_AgentLeaveAnnouncement' 
      | 'EM_Container_Base_JWTExpiredAnnouncement' 
      | 'EM_Container_Base_ParticipantJoinedText' 
      | 'EM_Container_Base_ParticipantLeftText' 
      | 'EM_Container_Base_NewMessageText' 
      | 'EM_Container_Base_MultipleNewMessagesText' 
      | 'EM_Container_Base_JwtExpiredText' 
      | 'EM_Container_Base_TransferInitiatedText' 
      | 'EM_Container_Base_TransferFailedText' 
      | 'EM_Chat_ChatBody_NotSent' 
      | 'EM_Chat_ChatBody_SpinnerDefaultAssistiveText' 
      | 'EM_Chat_ChatBody_FetchMoreEntriesSpinnerAssistiveText' 
      | 'EM_Container_Base_MinimizeButtonAssistiveText' 
      | 'EM_Container_Base_CloseButtonAssistiveText' 
      | 'EM_Container_Base_ConfirmationDialogMenuItemAssistiveText' 
      | 'EM_Container_Base_MinimizedNotificationAssistiveText' 
      | 'EM_Container_Base_MinimizedStateAssistiveText' 
      | 'EM_Chat_ChatBody_NotRoutedToAgentRoutingResult' 
      | 'EM_Container_Base_TitleNotificationSenderDisplayName' 
      | 'EM_Container_Base_MessagingIframeTitle' 
      | 'EM_Container_Base_FilePreviewIframeTitle' 
      | 'EM_Container_Base_FilePreviewIframeCloseButtonTitle' 
      | 'EM_Chat_ChatBody_MessageResendButtonText' 
      | 'EM_Chat_ChatBody_EstimatedWaitTimeInMinute' 
      | 'EM_Chat_ChatBody_EstimatedWaitTimeInMinutes' 
      | 'EM_Container_Base_InputFooterEmojiButtonAssistiveText' 
      | 'EM_Container_Base_InputFooterEmojiKeyboardAssistiveText' 
      | 'EM_Container_Base_PostchatFrameTitle' 
      | 'EM_Container_Base_PostchatHeaderText' 
      | 'EM_Container_Base_PostchatHeaderBackButtonTitle' 
      | 'EM_Container_Base_PostchatHeaderBackButtonAssistiveText' 
      | 'EM_Container_Base_PostchatConfirmationDialogTitleText' 
      | 'EM_Container_Base_PostchatConfirmationDialogBodyText' 
      | 'EM_Container_Base_PostchatConfirmationDialogConfirmButton' 
      | 'EM_Container_Base_PostchatConfirmationDialogCancelButton' 
      | 'EM_Container_Base_JWTRetrievalFailureText' 
      | 'EM_Chat_FileTransfer_MaximumNumberOfFilesAllowedErrorText' 
      | 'EM_Chat_FileTransfer_UnsupportedFileTypeErrorText' 
      | 'EM_Chat_FileTransfer_FileExceededSizeLimitErrorText' 
      | 'EM_PreChat_ChoiceList_PrechatCustomFieldLabel' 
      | 'EM_Container_Base_PrechatChoiceListValueNone' 
      | 'EM_Container_Base_MenuButtonAssistiveText' 
      | 'EM_Container_Base_CloseMenuButtonAssistiveText' 
      | 'EM_Chat_ChatBody_Yesterday' 
      | 'EM_PreChat_TermsAndConditions' 
      | 'EM_Container_Base_ReconnectInProgress' 
      | 'EM_Container_Base_ReconnectInProgressAssistiveText' 
      | 'EM_Container_Base_MinimizedReconnectInProgress' 
      | 'EM_Container_Base_PrechatTermsAndConditionsAcknowledgement' 
      | 'EM_Container_Base_ChatWindowAssistiveText' 
      | 'EM_Chat_SecureForms_FormButtonInitialStateAssistiveText' 
      | 'EM_Chat_SecureForms_FormButtonInactiveStateAssistiveText' 
      | 'EM_Chat_SecureForms_FormButtonPendingStateTitle' 
      | 'EM_Chat_SecureForms_FormButtonErrorResponseStateTitle' 
      | 'EM_Chat_SecureForms_FormButtonSuccessResponseStateTitle' 
      | 'EM_Chat_SecureForms_OptionSelectInputSingleSelectInstruction' 
      | 'EM_Chat_SecureForms_OptionSelectInputMultipleSelectInstruction' 
      | 'EM_Chat_SecureForms_DatePickerInputSelectInstruction' 
      | 'EM_Chat_SecureForms_TextInputSelectInstruction' 
      | 'EM_Chat_SecureForms_RequiredInputMissing' 
      | 'EM_Chat_SecureForms_RegexPatternMismatch' 
      | 'EM_Chat_SecureForms_NextButtonLabel' 
      | 'EM_Chat_SecureForms_BackButtonLabel' 
      | 'EM_Chat_SecureForms_SubmitButtonLabel' 
      | 'EM_Chat_SecureForms_ProgressBarAssistiveText' 
      | 'EM_Chat_SecureForms_NextButtonDisabledAssistiveText' 
      | 'EM_Chat_SecureForms_BackButtonDisabledAssistiveText' 
      | 'EM_Chat_SecureForms_SubmitButtonDisabledAssistiveText' 
      | 'EM_Chat_SecureForms_CloseConfirmationDialogTitleText' 
      | 'EM_Chat_SecureForms_CloseConfirmationDialogBodyText' 
      | 'EM_Chat_SecureForms_CloseConfirmationConfirmButtonLabel' 
      | 'EM_Chat_SecureForms_CloseConfirmationCancelButtonLabel' 
      | 'EM_Chat_SecureForms_RequiredSelectInputMissing' 
      | 'EM_Chat_ChatBody_UnsupportedMessageTypeText' 
      | 'EM_Container_Base_PrechatLoading' 
      | 'EM_Container_Base_RequestTranscriptMenuOption' 
      | 'EM_Container_Base_DownloadInProgressNotification' 
      | 'EM_Container_Base_DownloadSuccessNotification' 
      | 'EM_Container_Base_DownloadErrorNotification' 
      | 'EM_Container_Base_CloseNotification' 
      | 'EM_Chat_Carousels_PreviousCardButtonAssistiveText' 
      | 'EM_Chat_Carousels_NextCardButtonAssistiveText' 
      | 'EM_Chat_Carousels_CarouselDescriptionAssistiveText';

export type EmbeddedServiceLayoutType = string;

export type EmbeddedServiceQuickActionType = 'Prechat' 
      | 'OfflineCase';

export type EmbeddedServiceResourceType = 'SettingsFile' 
      | 'ChatInvitation';

export type EmbeddedServiceScenario = 'Sales' 
      | 'Service' 
      | 'Basic';

export type EmtUsageType = 'Bre' 
      | 'TransactionJournal' 
      | 'TierProcessing' 
      | 'CustomLoyalty' 
      | 'TestProcess' 
      | 'AiAcceleratorSubscriberChurnPrediction' 
      | 'DefaultPricing' 
      | 'RecordAlert' 
      | 'ShipAndDebit' 
      | 'WarrantyClaim' 
      | 'ProductQualification' 
      | 'ProductCategoryQualification' 
      | 'FinancialServicesCloud';

export type Encoding = 'UTF-8' 
      | 'ISO-8859-1' 
      | 'Shift_JIS' 
      | 'ISO-2022-JP' 
      | 'EUC-JP' 
      | 'ks_c_5601-1987' 
      | 'Big5' 
      | 'GB2312' 
      | 'Big5-HKSCS' 
      | 'x-SJIS_0213';

export type EncryptedFieldMaskChar = 'asterisk' 
      | 'X';

export type EncryptedFieldMaskType = 'all' 
      | 'creditCard' 
      | 'ssn' 
      | 'lastFour' 
      | 'sin' 
      | 'nino';

export type EncryptionScheme = 'None' 
      | 'ProbabilisticEncryption' 
      | 'CaseSensitiveDeterministicEncryption' 
      | 'CaseInsensitiveDeterministicEncryption';

export type EncryptionState = 'ENCRYPTION_DISABLED' 
      | 'PROBABILISTIC_ENCRYPTION_PENDING' 
      | 'PROBABILISTIC_ENCRYPTION_ENABLED' 
      | 'CASE_SENSITIVE_DETERMINISTIC_ENCRYPTION_PENDING' 
      | 'CASE_SENSITIVE_DETERMINISTIC_ENCRYPTION_ENABLED' 
      | 'CASE_INSENSITIVE_DETERMINISTIC_ENCRYPTION_PENDING' 
      | 'CASE_INSENSITIVE_DETERMINISTIC_ENCRYPTION_ENABLED';

export type EnforcementType = 'Scoping' 
      | 'Restrict' 
      | 'FieldRestrict' 
      | 'D360_Restrict';

export type EntityLimitType = 'CustomFields' 
      | 'RollupSummary' 
      | 'CustomRelationship' 
      | 'ActiveRules' 
      | 'TotalRules' 
      | 'ApprovalProcesses' 
      | 'ActiveLookupFilters' 
      | 'ActiveValidationRules' 
      | 'VLookup' 
      | 'CbsSharingRules' 
      | 'SharingRules' 
      | 'ExtraFormulaFields';

export type EntityLockType = 'Total' 
      | 'Admin' 
      | 'Owner' 
      | 'Workitem' 
      | 'Node' 
      | 'none';

export type EscalationStartTimeType = 'CaseCreation' 
      | 'CaseLastModified';

export type EvaluationResult = 'Passed' 
      | 'Failed' 
      | 'NoResult';

export type EventDeliveryType = 'StartFlow' 
      | 'ResumeFlow';

export type EventRelayAdminState = 'RUN' 
      | 'STOP' 
      | 'PAUSE';

export type EventRelayUsageType = 'AMAZON_EVENTBRIDGE' 
      | 'INTERNAL_MANAGED_SUBSCRIPTIONS' 
      | 'INTERNAL_REPLICATION';

export type EventSubscriptionAdminState = 'RUN' 
      | 'STOP' 
      | 'PAUSE';

export type EventSubscriptionReplayPreset = 'EARLIEST' 
      | 'LATEST';

export type EventSubscriptionType = 'Setup' 
      | 'ManagedSetup' 
      | 'Runtime';

export type EventSubscriptionUsageType = string;

export type EventType = 'AlarmEvent' 
      | 'DateRefAlarmEvent' 
      | 'ApprovalEvent' 
      | 'CustomEvent' 
      | 'EventObject' 
      | 'StandardPlatformEvent';

export type ExecutionPlatformType = 'CRMA' 
      | 'CDP' 
      | 'CORE';

export type ExecutionStageOfPriceRule = 'PreCalculate' 
      | 'Completion';

export type ExecutionType = 'Sequence' 
      | 'Priority';

export type ExpFeedbackCollType = 'SURVEY' 
      | 'PHONE_CALL';

export type ExpectedCashFlowGrouping = 'GroupByFundAccount' 
      | 'GroupByFundAndDueDate';

export type ExperienceContainerType = 'SFS' 
      | 'SAPP' 
      | 'TEST';

export type ExpressionSetElementType = string;

export type ExpressionSetStepType = 'Calculation' 
      | 'Aggregation' 
      | 'MatrixLookup' 
      | 'ReferenceProcedure' 
      | 'Condition' 
      | 'DecisionTableLookup' 
      | 'Branch' 
      | 'BusinessElement' 
      | 'ListEnabledGroup' 
      | 'ListFilter';

export type ExpsSetAggregationFunction = 'Sum' 
      | 'Avg' 
      | 'Min' 
      | 'Max' 
      | 'ListSum' 
      | 'ListAvg' 
      | 'ListSize';

export type ExpsSetAssignmentOperator = string;

export type ExpsSetConditionOperator = 'Equals' 
      | 'NotEquals' 
      | 'GreaterThan' 
      | 'GreaterThanOrEquals' 
      | 'LessThan' 
      | 'LessThanOrEquals' 
      | 'Contains' 
      | 'DoesNotContain' 
      | 'IsNull' 
      | 'IsNotNull';

export type ExpsSetDataType = 'Text' 
      | 'Numeric' 
      | 'Date' 
      | 'DateTime' 
      | 'Sobject' 
      | 'Boolean' 
      | 'Percent' 
      | 'Currency' 
      | 'ActionOutput' 
      | 'SubExpression' 
      | 'DecisionMatrix' 
      | 'DecisionTable' 
      | 'Context' 
      | 'ContextNode' 
      | 'Picklist';

export type ExpsSetInterfaceSourceType = 'PricingProcedure' 
      | 'QualificationProcedure' 
      | 'Sample' 
      | 'EventOrchestration';

export type ExpsSetObjectDataType = 'sObject' 
      | 'JSON';

export type ExpsSetProcessType = 'Bre' 
      | 'TransactionJournal' 
      | 'TierProcessing' 
      | 'CustomLoyalty' 
      | 'TestProcess' 
      | 'AiAcceleratorSubscriberChurnPrediction' 
      | 'DefaultPricing' 
      | 'RecordAlert' 
      | 'ShipAndDebit' 
      | 'WarrantyClaim' 
      | 'ProductQualification' 
      | 'ProductCategoryQualification' 
      | 'EventOrchestration' 
      | 'ComplianceControl' 
      | 'FinancialServicesCloud';

export type ExpsSetStatus = 'Draft' 
      | 'Active' 
      | 'Inactive' 
      | 'InvalidDraft' 
      | 'Obsolete';

export type ExpsSetStepType = 'Condition' 
      | 'AdvancedCondition' 
      | 'Branch' 
      | 'DefaultPath' 
      | 'SubExpression' 
      | 'BusinessKnowledgeModel' 
      | 'ListGroup' 
      | 'ListFilter' 
      | 'AdvancedListFilter';

export type ExpsSetValueType = 'Literal' 
      | 'Parameter' 
      | 'PickList' 
      | 'Formula' 
      | 'Lookup';

export type ExpsSetVariableLookupType = 'SubExpression' 
      | 'DecisionMatrix' 
      | 'DecisionTable';

export type ExpsSetVariableType = 'Variable' 
      | 'Constant' 
      | 'Formula' 
      | 'ExecutableContextDefinitionTag';

export type ExtensionPointName = 'Commerce_Domain_Cart_Calculate' 
      | 'Commerce_Domain_Tax_CartCalculator' 
      | 'Commerce_Domain_Inventory_CartCalculator' 
      | 'Commerce_Domain_Promotions_CartCalculator' 
      | 'Commerce_Domain_Pricing_CartCalculator' 
      | 'Commerce_Domain_Shipping_CartCalculator' 
      | 'Commerce_Domain_Inventory_Service' 
      | 'Commerce_Domain_Pricing_Service' 
      | 'Commerce_Domain_Tax_Service' 
      | 'Commerce_Domain_Checkout_CreateOrder' 
      | 'Commerce_Domain_Shipping_SplitShipment' 
      | 'Product_Inventory_CheckInventory' 
      | 'CommerceDx_Pricing' 
      | 'CommerceDx_Inventory' 
      | 'CommerceDx_TicketProcessing' 
      | 'Commerce_Integration_B2CEOrderImport' 
      | 'Cart_Prices_Extension' 
      | 'Checkout_CartSummary_ComputePromotions' 
      | 'Checkout_CartSummary_PriceCart' 
      | 'Checkout_Update_CalcCartSummary' 
      | 'Checkout_CartSummary_Inventory' 
      | 'Commerce_Domain_OrderManagement_Product' 
      | 'CommerceDx_Endpoint_PricingSample_Service' 
      | 'CommerceDx_Endpoint_InventorySample_Service' 
      | 'Commerce_Endpoint_Account_Addresses' 
      | 'Commerce_Endpoint_Account_Address' 
      | 'Commerce_Endpoint_Catalog_Products' 
      | 'Commerce_Endpoint_Catalog_Product' 
      | 'Commerce_Endpoint_Search_Products' 
      | 'Commerce_Endpoint_Search_ProductSearch' 
      | 'Commerce_Endpoint_Search_ProductsByCategory';

export type ExternalActionParameterType = 'HEADER' 
      | 'PAYLOAD' 
      | 'URL' 
      | 'RETURN' 
      | 'QUERY';

export type ExternalAiMetricType = 'SENTENCE_COUNT' 
      | 'EAR_METRICS';

export type ExternalConnectionStatus = 'Unprovisioned' 
      | 'Allocating' 
      | 'PendingAcceptance' 
      | 'PendingActivation' 
      | 'RejectedRemotely' 
      | 'DeletedRemotely' 
      | 'TeardownInProgress' 
      | 'Ready';

export type ExternalConnectionType = string;

export type ExternalCredentialParamType = 'ParameterGroup' 
      | 'AuthProvider' 
      | 'AuthProviderUrl' 
      | 'AuthProviderUrlQueryParameter' 
      | 'AuthProviderHttpHeader' 
      | 'AuthProviderHttpCookie' 
      | 'AuthProviderClientCertificate' 
      | 'AuthProviderServerCertificate' 
      | 'SigningCertificate' 
      | 'FormulaVariable' 
      | 'AuthProviderAuthParameter' 
      | 'AuthParameter' 
      | 'NamedPrincipal' 
      | 'PerUserPrincipal' 
      | 'AwsStsPrincipal' 
      | 'AuthContext' 
      | 'AuthQueryParameter' 
      | 'AuthHeader' 
      | 'AuthProtocolVariant' 
      | 'JwtBodyClaim' 
      | 'JwtHeaderClaim' 
      | 'CreatedByNamespace';

export type ExternalDataSourceType = 'Alert' 
      | 'AmazonAthena' 
      | 'AmazonDynamoDb' 
      | 'ASPAttribute' 
      | 'AssetAttribute' 
      | 'bcpApp' 
      | 'bcpAppMember' 
      | 'bcpEntity' 
      | 'bcpEntityPermission' 
      | 'bcpEntityPermSet' 
      | 'bcpField' 
      | 'bcpFieldPermission' 
      | 'bcpMember' 
      | 'bcpParticipant' 
      | 'bcpParticipantAccess' 
      | 'bcpPermissionSet' 
      | 'bcpRecAccApproval' 
      | 'bcpRecordAccess' 
      | 'bcpRelParticipant' 
      | 'ContentHubBox' 
      | 'ContentHubGDrive' 
      | 'contentHubItem' 
      | 'ContentHubMock' 
      | 'ContentHubOneDriveGraph' 
      | 'ContentHubPerf' 
      | 'ContentHubQuip' 
      | 'ContentHubSharepointOffice365' 
      | 'ContentHubSharepointOneDrive' 
      | 'CryptoTrEnvChgLogSnp' 
      | 'Datacloud' 
      | 'Datajourney' 
      | 'Engagement' 
      | 'ExternalEvent' 
      | 'ExternalKnowledge' 
      | 'FAAttribute' 
      | 'FLAttribute' 
      | 'Ftest' 
      | 'GraphQl' 
      | 'IAItemProdtAttr' 
      | 'Identity' 
      | 'InsPolicyAttribute' 
      | 'IPAAttribute' 
      | 'IPCAttribute' 
      | 'IPPAttribute' 
      | 'Jigsaw' 
      | 'MbrPromotionsViewDS' 
      | 'OData' 
      | 'OData4' 
      | 'OData401' 
      | 'OIAttribute' 
      | 'OpenSearch' 
      | 'outgoingemail' 
      | 'PromoRuleTempDS' 
      | 'QLIAttribute' 
      | 'Salesforce' 
      | 'SAPAttribute' 
      | 'SciApi' 
      | 'SelectableEmailAddressView' 
      | 'SfdcOrg' 
      | 'SimpleURL' 
      | 'Snowflake' 
      | 'TrailheadEditWithId' 
      | 'Trino' 
      | 'usermobileconfig' 
      | 'usrconnectionstatus' 
      | 'Wrapper';

export type ExternalDataSrcDescSubtype = 'SchemaTableQualifiers' 
      | 'SchemaTableMetadata';

export type ExternalDataSrcDescType = string;

export type ExternalEnvConnectionType = 'UserCredentials' 
      | 'ConnectedAppCredentials';

export type ExternalIntegrationType = 'Integration' 
      | 'DependentApp';

export type ExternalModelStatus = 'ENABLED' 
      | 'DISABLED' 
      | 'PAUSED';

export type ExternalPrincipalType = 'Anonymous' 
      | 'PerUser' 
      | 'NamedUser' 
      | 'UserWithImpersonation';

export type ExternalSDataType = 'NumberType' 
      | 'DoubleType' 
      | 'StringType' 
      | 'BooleanType' 
      | 'DatetimeType' 
      | 'ComplexType';

export type ExternalServiceObjectVariant = string;

export type ExternalServiceOperationKind = 'Synchronous' 
      | 'Asynchronous' 
      | 'Callback';

export type ExternalServiceParameterKind = 'In' 
      | 'Out' 
      | 'InOut' 
      | 'Exception' 
      | 'Callback';

export type ExternalServiceRegistrationProviderType = 'MuleSoft' 
      | 'Custom' 
      | 'SchemaInferred' 
      | 'Standard';

export type ExternalServiceSchemaType = 'OpenApi' 
      | 'OpenApi3';

export type ExternalServiceSimpleType = 'Any' 
      | 'Blob' 
      | 'Boolean' 
      | 'Date' 
      | 'Datetime' 
      | 'Decimal' 
      | 'Float' 
      | 'Double' 
      | 'Integer' 
      | 'Long' 
      | 'String' 
      | 'Time';

export type ExternalServiceStatus = 'Incomplete' 
      | 'Complete';

export type ExternalTrackingVendor = 'Google' 
      | 'Mixpanel';

export type ExtlClntAppDistState = 'Local' 
      | 'Packaged' 
      | 'Managed';

export type ExtlClntAppManagedType = 'Local' 
      | 'Global';

export type ExtractorType = 'APEX' 
      | 'JAVA' 
      | 'HYBRID';

export type FTestOnOffSelection = 'On' 
      | 'Off';

export type FTestSeasonSelection = 'Spring' 
      | 'Summer' 
      | 'Autumn' 
      | 'Winter';

export type FTestTopLevelSelection = 'SelOne' 
      | 'SelTwo' 
      | 'SelThree';

export type FeatureInputType = 'Realtime_Input' 
      | 'Sample_Input' 
      | 'Batch_Input' 
      | 'Batch_And_Realtime_Input';

export type FeatureParameterDataflowDirection = 'LmoToSubscriber' 
      | 'SubscriberToLmo' 
      | 'Provisioned';

export type FeedItemDisplayFormat = 'Default' 
      | 'HideBlankLines';

export type FeedItemType = 'TrackedChange' 
      | 'UserStatus' 
      | 'TextPost' 
      | 'AdvancedTextPost' 
      | 'LinkPost' 
      | 'ContentPost' 
      | 'DashboardComponentAlert' 
      | 'PollPost' 
      | 'RypplePost' 
      | 'ProfileSkillPost' 
      | 'DashboardComponentSnapshot' 
      | 'TestItem' 
      | 'ApprovalPost' 
      | 'CaseCommentPost' 
      | 'ReplyPost' 
      | 'EmailMessageEvent' 
      | 'CallLogPost' 
      | 'ChangeStatusPost' 
      | 'AttachArticleEvent' 
      | 'MilestoneEvent' 
      | 'ActivityEvent' 
      | 'ChatTranscriptPost' 
      | 'CollaborationGroupCreated' 
      | 'AttachExternalDocumentEvent' 
      | 'CollaborationGroupUnarchived' 
      | 'SocialPost' 
      | 'QuestionPost' 
      | 'Undefined' 
      | 'FacebookPost' 
      | 'BasicTemplateFeedItem' 
      | 'CreateRecordEvent' 
      | 'CanvasPost' 
      | 'AnnouncementPost';

export type FeedItemVisibility = 'AllUsers' 
      | 'InternalUsers';

export type FeedLayoutComponentType = 'HelpAndToolLinks' 
      | 'CustomButtons' 
      | 'Following' 
      | 'Followers' 
      | 'CustomLinks' 
      | 'Milestones' 
      | 'SimilarCases' 
      | 'CaseExperts' 
      | 'Topics' 
      | 'CaseUnifiedFiles' 
      | 'Visualforce';

export type FeedLayoutFilterPosition = 'CenterDropDown' 
      | 'LeftFixed' 
      | 'LeftFloat';

export type FeedLayoutFilterType = 'AllUpdates' 
      | 'FeedItemType' 
      | 'Custom';

export type FfxCopyStrategy = 'V' 
      | 'R' 
      | 'V2';

export type FieldClassificationConfigType = 'VisibleToAgents' 
      | 'PreselectBestRecommendation' 
      | 'AutoTriage';

export type FieldInputCategory = 'AttributeWait' 
      | 'BackgroundStep' 
      | 'AddPromptInstructions' 
      | 'DateWait' 
      | 'DurationWait' 
      | 'Filter' 
      | 'InteractiveStep' 
      | 'ManagedContentRoleInteractiveStep' 
      | 'ManagedContentVariantAutoPublishBackgroundStep' 
      | 'ManagedContentVariantAutoUnpublishBackgroundStep' 
      | 'ManagedContentVariantSetLockBackgroundStep' 
      | 'ManagedContentVariantSetReadyBackgroundStep' 
      | 'Map' 
      | 'MulesoftStep' 
      | 'Sort' 
      | 'WaitUntilEvent';

export type FieldManageability = 'DeveloperControlled' 
      | 'SubscriberControlled' 
      | 'Locked';

export type FieldMappingClient = 'PriceSheetPricing' 
      | 'CustomFieldMappingPricing';

export type FieldType = 'AutoNumber' 
      | 'Lookup' 
      | 'MasterDetail' 
      | 'Checkbox' 
      | 'Currency' 
      | 'Date' 
      | 'DateTime' 
      | 'Email' 
      | 'Number' 
      | 'Percent' 
      | 'Phone' 
      | 'Picklist' 
      | 'MultiselectPicklist' 
      | 'Text' 
      | 'TextArea' 
      | 'LongTextArea' 
      | 'Html' 
      | 'Url' 
      | 'EncryptedText' 
      | 'Summary' 
      | 'Hierarchy' 
      | 'File' 
      | 'MetadataRelationship' 
      | 'Location' 
      | 'ExternalLookup' 
      | 'IndirectLookup' 
      | 'CustomDataType' 
      | 'Time' 
      | 'Address' 
      | 'Array';

export type FieldTypes = 'Feature' 
      | 'Label';

export type FieldUpdateOperation = 'Formula' 
      | 'Literal' 
      | 'Null' 
      | 'NextValue' 
      | 'PreviousValue' 
      | 'LookupValue';

export type FileDownloadBehavior = 'DOWNLOAD' 
      | 'EXECUTE_IN_BROWSER' 
      | 'HYBRID';

export type FileType = 'UNKNOWN' 
      | 'PDF' 
      | 'POWER_POINT' 
      | 'POWER_POINT_X' 
      | 'POWER_POINT_M' 
      | 'POWER_POINT_T' 
      | 'WORD' 
      | 'WORD_X' 
      | 'WORD_M' 
      | 'WORD_T' 
      | 'PPS' 
      | 'PPSX' 
      | 'EXCEL' 
      | 'EXCEL_X' 
      | 'EXCEL_M' 
      | 'EXCEL_T' 
      | 'GOOGLE_DOCUMENT' 
      | 'GOOGLE_PRESENTATION' 
      | 'GOOGLE_SPREADSHEET' 
      | 'GOOGLE_DRAWING' 
      | 'GOOGLE_FORM' 
      | 'GOOGLE_SCRIPT' 
      | 'LINK' 
      | 'SLIDE' 
      | 'AAC' 
      | 'ACGI' 
      | 'AI' 
      | 'AVI' 
      | 'BMP' 
      | 'BOXNOTE' 
      | 'CSV' 
      | 'EPS' 
      | 'EXE' 
      | 'FLASH' 
      | 'GIF' 
      | 'GZIP' 
      | 'HTM' 
      | 'HTML' 
      | 'HTX' 
      | 'JPEG' 
      | 'JPE' 
      | 'PJP' 
      | 'PJPEG' 
      | 'JFIF' 
      | 'JPG' 
      | 'JS' 
      | 'JSON' 
      | 'MHTM' 
      | 'MHTML' 
      | 'MP3' 
      | 'M4A' 
      | 'M4V' 
      | 'MP4' 
      | 'MPEG' 
      | 'MPG' 
      | 'MOV' 
      | 'MSG' 
      | 'ODP' 
      | 'ODS' 
      | 'ODT' 
      | 'OGG' 
      | 'OGV' 
      | 'PNG' 
      | 'PSD' 
      | 'RTF' 
      | 'QUIPDOC' 
      | 'QUIPSHEET' 
      | 'QUIPCHAT' 
      | 'QUIPSLIDES' 
      | 'QUIPTEMPLATE' 
      | 'SHTM' 
      | 'SHTML' 
      | 'SNOTE' 
      | 'MCONTENT' 
      | 'STYPI' 
      | 'SVG' 
      | 'SVGZ' 
      | 'JPGZ' 
      | 'TEXT' 
      | 'THTML' 
      | 'USDZ' 
      | 'VISIO' 
      | 'VTT' 
      | 'WMV' 
      | 'WRF' 
      | 'XML' 
      | 'ZIP' 
      | 'XZIP' 
      | 'WMA' 
      | 'XSN' 
      | 'INSIGHT' 
      | 'TRTF' 
      | 'TXML' 
      | 'WEBVIEW' 
      | 'RFC822' 
      | 'ASF' 
      | 'DWG' 
      | 'JAR' 
      | 'XJS' 
      | 'OPX' 
      | 'XPSD' 
      | 'TIF' 
      | 'TIFF' 
      | 'WAV' 
      | 'CSS' 
      | 'THUMB720BY480' 
      | 'THUMB240BY180' 
      | 'THUMB120BY90' 
      | 'ALLTHUMBS' 
      | 'PAGED_FLASH' 
      | 'XMOB' 
      | 'PACK' 
      | 'C' 
      | 'CPP' 
      | 'WORDT' 
      | 'INI' 
      | 'JAVA' 
      | 'LOG' 
      | 'POWER_POINTT' 
      | 'SQL' 
      | 'XHTML' 
      | 'EXCELT' 
      | 'WEBP' 
      | 'AVIF' 
      | 'ICS' 
      | 'CAF' 
      | 'V3GP' 
      | 'V3G2';

export type FilterOperation = 'equals' 
      | 'notEqual' 
      | 'lessThan' 
      | 'greaterThan' 
      | 'lessOrEqual' 
      | 'greaterOrEqual' 
      | 'contains' 
      | 'notContain' 
      | 'startsWith' 
      | 'includes' 
      | 'excludes' 
      | 'within';

export type FilterScope = 'Everything' 
      | 'Mine' 
      | 'Queue' 
      | 'Delegated' 
      | 'MyTerritory' 
      | 'MyTeamTerritory' 
      | 'Team' 
      | 'SalesTeam' 
      | 'AssignedToMe' 
      | 'MineAndMyGroups' 
      | 'ScopingRule';

export type Fit = 'tile' 
      | 'stretch' 
      | 'original' 
      | 'fitwidth' 
      | 'fitheight';

export type FlexiPageRegionMode = 'Append' 
      | 'Prepend' 
      | 'Replace';

export type FlexiPageRegionType = 'Region' 
      | 'Facet' 
      | 'Background';

export type FlexiPageType = 'AppPage' 
      | 'ObjectPage' 
      | 'RecordPage' 
      | 'HomePage' 
      | 'ForecastingPage' 
      | 'MailAppAppPage' 
      | 'CommAppPage' 
      | 'CommForgotPasswordPage' 
      | 'CommLoginPage' 
      | 'CommObjectPage' 
      | 'CommQuickActionCreatePage' 
      | 'CommRecordPage' 
      | 'CommRelatedListPage' 
      | 'CommSearchResultPage' 
      | 'CommGlobalSearchResultPage' 
      | 'CommSelfRegisterPage' 
      | 'CommThemeLayoutPage' 
      | 'UtilityBar' 
      | 'RecordPreview' 
      | 'EmbeddedServicePage' 
      | 'CommCheckoutPage' 
      | 'CommOrderConfirmationPage' 
      | 'CommFlowPage' 
      | 'EmailTemplatePage' 
      | 'ApplicationLayout' 
      | 'CommNoSearchResultsPage' 
      | 'CommElectronicSignaturePage' 
      | 'CommContractDocumentsPage' 
      | 'EmailContentPage' 
      | 'ServiceDocument' 
      | 'LandingPage' 
      | 'CdpRecordPage' 
      | 'SlackAppHome' 
      | 'SlackMessage' 
      | 'SlackModal' 
      | 'SlackNotification' 
      | 'EasyHomePage' 
      | 'CardPage' 
      | 'VoiceExtension' 
      | 'ConfiguratorAppPage' 
      | 'OmniSupervisorPage';

export type FlexipageDataSourceModeEnum = 'Create' 
      | 'Edit' 
      | 'View';

export type FlexipageDataSourceTypeEnum = 'Record' 
      | 'Apex';

export type FlexipageEventSourceTypeEnum = string;

export type FlexipageEventTargetTypeEnum = 'FlexipageServices' 
      | 'LwcServices' 
      | 'InvocableApexServices' 
      | 'InvocableExternalServices' 
      | 'ActionServices' 
      | 'ViewServices';

export type FlexipageSchemaPropType = 'boolean' 
      | 'integer' 
      | 'string';

export type FlowAssignmentOperator = 'None' 
      | 'Assign' 
      | 'Add' 
      | 'Subtract' 
      | 'AddItem' 
      | 'RemoveFirst' 
      | 'RemoveBeforeFirst' 
      | 'RemoveAfterFirst' 
      | 'RemoveAll' 
      | 'AddAtStart' 
      | 'RemoveUncommon' 
      | 'AssignCount' 
      | 'RemovePosition';

export type FlowCollectionProcessorType = 'SortCollectionProcessor' 
      | 'RecommendationMapCollectionProcessor' 
      | 'FilterCollectionProcessor';

export type FlowComparisonOperator = 'None' 
      | 'EqualTo' 
      | 'NotEqualTo' 
      | 'GreaterThan' 
      | 'LessThan' 
      | 'GreaterThanOrEqualTo' 
      | 'LessThanOrEqualTo' 
      | 'StartsWith' 
      | 'EndsWith' 
      | 'Contains' 
      | 'IsNull' 
      | 'IsChanged' 
      | 'WasSet' 
      | 'WasSelected' 
      | 'WasVisited' 
      | 'In' 
      | 'NotIn';

export type FlowDataType = 'Currency' 
      | 'Date' 
      | 'Number' 
      | 'String' 
      | 'Boolean' 
      | 'SObject' 
      | 'DateTime' 
      | 'Picklist' 
      | 'Multipicklist' 
      | 'Apex';

export type FlowElementType = 'Assignment' 
      | 'ApexCall' 
      | 'Constant' 
      | 'Decision' 
      | 'RecordCreate' 
      | 'RecordQuery' 
      | 'RecordUpdate' 
      | 'RecordDelete' 
      | 'Rule' 
      | 'Formula' 
      | 'TextTemplate' 
      | 'Subflow' 
      | 'Variable' 
      | 'Step' 
      | 'ScreenField' 
      | 'Screen' 
      | 'Choice' 
      | 'ChoiceLookup' 
      | 'Loop' 
      | 'ActionCall' 
      | 'Wait' 
      | 'WaitEvent' 
      | 'Stage' 
      | 'Start' 
      | 'CollectionProcessor' 
      | 'OrchestratedStage' 
      | 'ScheduledPath' 
      | 'StageStep' 
      | 'RecordRollback' 
      | 'Transform' 
      | 'ScreenAction' 
      | 'CustomError' 
      | 'Capability' 
      | 'CapabilityInput';

export type FlowEntryType = 'Always' 
      | 'AfterCompletion';

export type FlowEnvironment = 'Default' 
      | 'Slack';

export type FlowProgressStatus = 'Draft' 
      | 'Scheduled' 
      | 'PreparingData' 
      | 'InProgress' 
      | 'Finishing' 
      | 'Completed' 
      | 'Canceled' 
      | 'Error';

export type FlowRecordFilterOperator = 'EqualTo' 
      | 'NotEqualTo' 
      | 'GreaterThan' 
      | 'LessThan' 
      | 'GreaterThanOrEqualTo' 
      | 'LessThanOrEqualTo' 
      | 'StartsWith' 
      | 'EndsWith' 
      | 'Contains' 
      | 'IsNull' 
      | 'IsChanged' 
      | 'In' 
      | 'NotIn';

export type FlowRegionContainerType = 'SectionWithHeader' 
      | 'SectionWithoutHeader';

export type FlowRunAsUser = 'TriggeringUser' 
      | 'DefaultWorkflowUser';

export type FlowRunInMode = 'DefaultMode' 
      | 'SystemModeWithSharing' 
      | 'SystemModeWithoutSharing';

export type FlowScheduledPathOffsetUnit = 'Hours' 
      | 'Days' 
      | 'Minutes' 
      | 'Months' 
      | 'Weeks';

export type FlowScheduledPathTimeSource = 'RecordTriggerEvent' 
      | 'RecordField';

export type FlowScheduledPathType = string;

export type FlowScreenFieldInputsRevisited = 'UseStoredValues' 
      | 'ResetValues';

export type FlowScreenFieldType = 'DisplayText' 
      | 'InputField' 
      | 'LargeTextArea' 
      | 'PasswordField' 
      | 'RadioButtons' 
      | 'DropdownBox' 
      | 'MultiSelectCheckboxes' 
      | 'MultiSelectPicklist' 
      | 'ComponentInstance' 
      | 'ComponentInput' 
      | 'ComponentChoice' 
      | 'ComponentMultiChoice' 
      | 'ComponentDisplay' 
      | 'Repeater' 
      | 'RegionContainer' 
      | 'Region' 
      | 'ObjectProvided';

export type FlowStageStepAssigneeType = 'User' 
      | 'Group' 
      | 'Queue';

export type FlowStartFrequency = 'OnActivate' 
      | 'Once' 
      | 'Daily' 
      | 'Weekly';

export type FlowSystemVariable = 'CURRENT_DATE' 
      | 'CURRENT_DATE_TIME' 
      | 'FAULT_MESSAGE' 
      | 'CURRENT_STAGE' 
      | 'INTERVIEW_START_TIME' 
      | 'ACTIVE_STAGES' 
      | 'INTERVIEW_GUID' 
      | 'CURRENT_RECORD' 
      | 'INTERVIEW_ID' 
      | 'FLOW_NAME' 
      | 'FORM_FACTOR' 
      | 'CONTEXT_RECORD' 
      | 'ORCHESTRATION_INSTANCE' 
      | 'FORM' 
      | 'PROMPT' 
      | 'INPUT' 
      | 'OUTPUT';

export type FlowTestParameterType = 'InputTriggeringRecordInitial' 
      | 'InputTriggeringRecordUpdated' 
      | 'ScheduledPath';

export type FlowTransactionModel = 'Automatic' 
      | 'NewTransaction' 
      | 'CurrentTransaction';

export type FlowTransformValueActionType = 'Map' 
      | 'Count' 
      | 'Sum';

export type FlowTriggerType = 'None' 
      | 'Scheduled' 
      | 'RecordBeforeSave' 
      | 'RecordBeforeDelete' 
      | 'RecordAfterSave' 
      | 'PlatformEvent' 
      | 'EventDrivenJourney' 
      | 'Segment' 
      | 'DataCloudDataChange' 
      | 'FormSubmissionEvent' 
      | 'Capability';

export type FlowVersionStatus = 'Active' 
      | 'Draft' 
      | 'Obsolete' 
      | 'InvalidDraft';

export type FolderAccessTypes = 'Shared' 
      | 'Public' 
      | 'Hidden' 
      | 'PublicInternal';

export type FolderShareAccessLevel = 'View' 
      | 'EditAllContents' 
      | 'Manage';

export type FolderSharedToType = 'Group' 
      | 'Role' 
      | 'RoleAndSubordinates' 
      | 'RoleAndSubordinatesInternal' 
      | 'Manager' 
      | 'ManagerAndSubordinatesInternal' 
      | 'Organization' 
      | 'Territory' 
      | 'TerritoryAndSubordinates' 
      | 'AllPrmUsers' 
      | 'User' 
      | 'PartnerUser' 
      | 'AllCspUsers' 
      | 'CustomerPortalUser' 
      | 'PortalRole' 
      | 'PortalRoleAndSubordinates' 
      | 'ChannelProgramGroup';

export type ForecastCategories = 'Omitted' 
      | 'Pipeline' 
      | 'BestCase' 
      | 'MostLikely' 
      | 'Forecast' 
      | 'Closed';

export type ForecastFrequency = 'Monthly' 
      | 'Quarterly';

export type ForecastPeriodGroupStatus = 'Active' 
      | 'Inactive';

export type ForecastingDateType = 'OpportunityCloseDate' 
      | 'ProductDate' 
      | 'ScheduleDate' 
      | 'OLIMeasureCloseDateOnly' 
      | 'ProductDateOnly' 
      | 'ScheduleDateOnly' 
      | 'OpportunityCustomDate' 
      | 'OLIMeasureOppCustomDateOnly';

export type FormFactor = 'Small' 
      | 'Medium' 
      | 'Large';

export type FormulaFilterType = 'AllCriteriaMatch' 
      | 'AnyCriterionMatches' 
      | 'CustomLogicMatches';

export type FormulaType = 'QUANTITY' 
      | 'REVENUE';

export type Frequency = 'Daily' 
      | 'Weekly' 
      | 'Fortnightly' 
      | 'Monthly' 
      | 'Once' 
      | 'Quarterly' 
      | 'Yearly';

export type FunctionReferenceUserAccessMode = 'Default' 
      | 'User';

export type GatewayType = 'Stripe' 
      | 'Paypal' 
      | 'Adyen' 
      | 'Braintree' 
      | 'Cybersource';

export type GenAiBotToneType = 'Casual' 
      | 'Neutral' 
      | 'Formal';

export type GenAiPromptOutputParameterType = 'Policy' 
      | 'Language' 
      | 'Style' 
      | 'Length' 
      | 'Task';

export type GenAiPromptTemplateActvAccessLevel = 'Allowed' 
      | 'Blocked';

export type GenAiPromptTemplateStatus = 'Published' 
      | 'Draft';

export type GenAiPromptTemplateVisibilityType = 'Locked' 
      | 'Internal' 
      | 'API' 
      | 'Global';

export type Gender = 'Neuter' 
      | 'Masculine' 
      | 'Feminine' 
      | 'AnimateMasculine' 
      | 'ClassI' 
      | 'ClassIII' 
      | 'ClassV' 
      | 'ClassVII' 
      | 'ClassIX' 
      | 'ClassXI' 
      | 'ClassXIV' 
      | 'ClassXV' 
      | 'ClassXVI' 
      | 'ClassXVII' 
      | 'ClassXVIII';

export type GenerationMechanism = 'ClientSide' 
      | 'ServerSide';

export type GeocodePrecision = 'Address' 
      | 'NearAddress' 
      | 'Block' 
      | 'Street' 
      | 'ExtendedZip' 
      | 'Zip' 
      | 'Neighborhood' 
      | 'City' 
      | 'County' 
      | 'State' 
      | 'Unknown';

export type GeographicRegionType = 'State' 
      | 'Country';

export type GlobalVariableContext = 'Visualforce' 
      | 'Flow' 
      | 'Validation';

export type GroupType = 'Regular' 
      | 'Personal' 
      | 'Role' 
      | 'RoleAndSubordinates' 
      | 'RoleAndSubordinatesInternal' 
      | 'Manager' 
      | 'ManagerAndSubordinatesInternal' 
      | 'Organization' 
      | 'Queue' 
      | 'Territory' 
      | 'TerritoryAndSubordinates' 
      | 'PRMOrganization' 
      | 'User' 
      | 'PartnerUser' 
      | 'AllCustomerPortal' 
      | 'CustomerPortalUser' 
      | 'PortalRoleAt' 
      | 'PortalRoleDown' 
      | 'LicenseManagerUser' 
      | 'PartnerNetworkConnection' 
      | 'MLMyTeam' 
      | 'SharingRuleGroup' 
      | 'LitePortalUserAccessGroup' 
      | 'Sites' 
      | 'CollaborationGroup' 
      | 'ChannelProgramGroup' 
      | 'SharingRecordCollGroup' 
      | 'Participant' 
      | 'AccountRelationshipGroup' 
      | 'GuestUserGroup' 
      | 'PardotUserGroup' 
      | 'PardotUserRestrictedGroup' 
      | 'ContactCenterGroup' 
      | 'ManagedContentSpaceRole';

export type HorizontalAlignment = 'left' 
      | 'center' 
      | 'right';

export type IFrameWhitelistContext = 'VisualforcePages' 
      | 'Surveys';

export type IPAddressFeature = string;

export type IPAddressUsageScope = 'Exclusion' 
      | 'Inclusion';

export type IconUsageType = 'PersonLifeEvent' 
      | 'InsurancePolicy' 
      | 'BusinessMilestone' 
      | 'Interaction' 
      | 'AssetMilestone' 
      | 'FinancialAccountMilestone';

export type IdempotencySupportStatus = 'No' 
      | 'Yes';

export type IdentityVerificationDataSourceType = 'Salesforce' 
      | 'External';

export type IdentityVerificationProcFldDataSourceType = 'Salesforce' 
      | 'External';

export type IdentityVerificationProcFldFieldDataType = 'address' 
      | 'checkbox' 
      | 'currency' 
      | 'dateonly' 
      | 'datetime' 
      | 'email' 
      | 'number' 
      | 'percent' 
      | 'phone' 
      | 'picklist' 
      | 'reference' 
      | 'text' 
      | 'timeonly' 
      | 'url' 
      | 'other';

export type IdentityVerificationProcFldFieldType = 'requiredVerifier' 
      | 'optionalVerifier' 
      | 'searchField' 
      | 'resultField' 
      | 'additionalResultField' 
      | 'searchFilter';

export type IdentityVerificationSearchLayoutType = 'Tab' 
      | 'Stack';

export type IdentityVerificationSearchType = 'Text-Based' 
      | 'Object-Based';

export type InboundConnPropertyName = 'LinkId' 
      | 'Region' 
      | 'AwsVpcEndpointId' 
      | 'SourceIpRanges';

export type IndexSortDirection = 'ASC' 
      | 'DESC';

export type IndexType = 'PRIMARY' 
      | 'SECONDARY';

export type InfluenceRecordPreferenceType = 'AllRecords' 
      | 'RecordsWithAttribution';

export type InputValueType = 'Variable' 
      | 'Expression' 
      | 'String';

export type InsightParentType = 'Opportunity' 
      | 'Account';

export type InsightTrendType = 'Positive' 
      | 'Negative' 
      | 'Informational' 
      | 'Suggestion';

export type InstallValidationStatus = 'NoErrorsDetected' 
      | 'BetaInstallIntoProductionOrg' 
      | 'CannotInstallEarlierVersion' 
      | 'CannotUpgradeBeta' 
      | 'CannotUpgradeUnmanaged' 
      | 'DeprecatedInstallPackage' 
      | 'ExtensionsOnLocalPackages' 
      | 'PackageNotInstalled' 
      | 'PackageHasInDevExtensions' 
      | 'UnauthorizedConvertedPackageInstallation' 
      | 'InstallIntoDevOrg' 
      | 'NoAccess' 
      | 'PackagingDisabled' 
      | 'PackagingNoAccess' 
      | 'PackageUnavailable' 
      | 'UninstallInProgress' 
      | 'UnknownError' 
      | 'NamespaceCollision' 
      | 'DisabledPackage' 
      | 'PackageMigrationMismatchVersion' 
      | 'PackageBlocked' 
      | 'DataCloudPackageApiVersion' 
      | 'DataCloudPackageInstall';

export type IntegrationApplicationType = 'RestAPI' 
      | 'Example' 
      | 'App';

export type IntegrationAuthenticationType = 'Basic' 
      | 'OAuth' 
      | 'JWT' 
      | 'NoAuth';

export type IntegrationCategory = 'FSC' 
      | 'Retail' 
      | 'Health' 
      | 'Energy' 
      | 'Communications' 
      | 'Media' 
      | 'Consumer_Goods' 
      | 'Manufacturing' 
      | 'Automotive' 
      | 'Loyalty_Management';

export type IntegrationDeploymentStatus = 'Notdeployed' 
      | 'Inprogress' 
      | 'Deployed' 
      | 'DeployedNotConfigured' 
      | 'DeployedAndUseCaseInProgress' 
      | 'DeployedAndUseCaseFailed' 
      | 'Deploying';

export type IntegrationEnvironmentRegion = 'US' 
      | 'EU' 
      | 'CA';

export type IntegrationEnvironmentType = 'Production' 
      | 'Sandbox' 
      | 'Design';

export type IntegrationEnvironmentZone = 'USEast1' 
      | 'USEast2' 
      | 'USWest1' 
      | 'USWest2' 
      | 'EUCentral1' 
      | 'EUWest1' 
      | 'EUWest2' 
      | 'APSouthEast1' 
      | 'APSouthEast2' 
      | 'APNorthEast1' 
      | 'CACentral1' 
      | 'SAEast1';

export type IntegrationResourceType = 'Exchange' 
      | 'Queue' 
      | 'FifoQueue';

export type IntegrationVerUpdateStatus = 'Deploy_Failed' 
      | 'Deploying';

export type InvalidMergeActionType = 'Drop' 
      | 'Keep' 
      | 'Override';

export type InvocableActionType = 'apex' 
      | 'chatterPost' 
      | 'contentWorkspaceEnableFolders' 
      | 'emailAlert' 
      | 'emailSimple' 
      | 'emailSObject' 
      | 'externalService' 
      | 'salesforceAPIPlatform' 
      | 'flow' 
      | 'metricRefresh' 
      | 'processCreateWorkitem' 
      | 'processStartStep' 
      | 'processStopInstance' 
      | 'processStopStep' 
      | 'quickAction' 
      | 'submit' 
      | 'thanks' 
      | 'thunderResponse' 
      | 'createServiceReport' 
      | 'deployOrchestration' 
      | 'createResponseEventAction' 
      | 'sfdcOutputAction' 
      | 'invokeOrchOutputFlow' 
      | 'generateWorkOrders' 
      | 'deactivateSessionPermSet' 
      | 'activateSessionPermSet' 
      | 'aggregateValue' 
      | 'orchestrationTimer' 
      | 'orchestrationDebugLog' 
      | 'choosePricebook' 
      | 'component' 
      | 'liveMessageNotification' 
      | 'scaleCacheAsyncRefresh' 
      | 'skillsBasedRouting' 
      | 'addSkillRequirements' 
      | 'addScreenPop' 
      | 'findMatchingIndividuals' 
      | 'routeWork' 
      | 'scvOutboundCall' 
      | 'checkAvailabilityForRouting' 
      | 'createCustomField' 
      | 'assignTrailheadBadge' 
      | 'insightFeedback' 
      | 'publishKnowledgeArticles' 
      | 'routingAddressVerification' 
      | 'assignTargetToSalesCadence' 
      | 'removeTargetFromSalesCadence' 
      | 'modifyCadenceTrackerAttributes' 
      | 'invocableApplyLeadAssignmentRules' 
      | 'salesCadenceListenerBranchStepTranslator' 
      | 'pauseSalesCadenceTracker' 
      | 'resumeSalesCadenceTracker' 
      | 'changeSalesCadenceTargetAssignee' 
      | 'sendSalesCadenceEvent' 
      | 'selectTemplateForSalesCadenceStepTracker' 
      | 'assignKnowledgeArticles' 
      | 'createDraftFromOnlineKnowledgeArticle' 
      | 'archiveKnowledgeArticles' 
      | 'restoreKnowledgeArticleVersion' 
      | 'customNotificationAction' 
      | 'broadcastRenderSlackMsgPreview' 
      | 'submitDigitalFormResponse' 
      | 'contactRequestAction' 
      | 'saveAppointment' 
      | 'saveAppointmentInvitationDetails' 
      | 'createWaitlist' 
      | 'deleteKnowledgeArticles' 
      | 'submitKnowledgeArticleForTranslation' 
      | 'einsteinEPLitePredictionAction' 
      | 'cartToOrderAction' 
      | 'orderToCartAction' 
      | 'activateOrderAction' 
      | 'refreshActualsCalculation' 
      | 'cancelAppointment' 
      | 'recalculateForecast' 
      | 'getBenefitAndCalculateRebateAmount' 
      | 'upsertCustomRebatePayout' 
      | 'calculateRebateAmountAndUpsertPayout' 
      | 'processRebatesBatchCalculationJob' 
      | 'generateRebatePayoutPeriods' 
      | 'calculateAdvancedAccountForecast' 
      | 'processAccountForecasts' 
      | 'managedContentReleasePublish' 
      | 'editQuipDocument' 
      | 'attachQuipDocumentToRecord' 
      | 'createQuipDocument' 
      | 'createQuipFolder' 
      | 'addUsersToQuipDocument' 
      | 'removeUsersFromQuipDocument' 
      | 'copyQuipDocument' 
      | 'addMessageToQuipDocument' 
      | 'addQuipDocumentToFolder' 
      | 'removeQuipDocumentFromFolder' 
      | 'createQuipChat' 
      | 'addMessageToQuipChat' 
      | 'addUsersToQuipChat' 
      | 'removeUsersFromQuipChat' 
      | 'copyQuipContent' 
      | 'lockQuipDocument' 
      | 'lockQuipSection' 
      | 'quipLivePaste' 
      | 'exportQuipDocumentToPdf' 
      | 'priceCart' 
      | 'cartInitiateAsyncStep' 
      | 'cartCompleteAsyncStep' 
      | 'cancelCartAsyncOperation' 
      | 'createCart' 
      | 'addCartItem' 
      | 'getCartItems' 
      | 'getCartPromotions' 
      | 'deleteCart' 
      | 'cancelFulfillmentOrderItem' 
      | 'createFulfillmentOrder' 
      | 'createInvoiceFromFulfillmentOrder' 
      | 'createFulfillmentOrders' 
      | 'captureFunds' 
      | 'createOrderPaymentSummary' 
      | 'cancelOrderItemSummariesPreview' 
      | 'cancelOrderItemSummariesSubmit' 
      | 'createCreditMemoOrderSummary' 
      | 'ensureFundsOrderSummaryAsync' 
      | 'ensureRefundsOrderSummaryAsync' 
      | 'returnOrderItemSummariesPreview' 
      | 'returnOrderItemSummariesSubmit' 
      | 'createReturnOrder' 
      | 'createOrderSummary' 
      | 'adjustOrderItemSummariesPreview' 
      | 'adjustOrderItemSummariesSubmit' 
      | 'addOrderItemSummarySubmit' 
      | 'distributePickedQuantities' 
      | 'createOrderFromQuote' 
      | 'createOrUpdateAssetFromOrder' 
      | 'createBillingScheduleFromOrderItem' 
      | 'changeFinancePeriodStatus' 
      | 'applyPayment' 
      | 'paymentSale' 
      | 'automateRefund' 
      | 'createInvoiceFromOrder' 
      | 'createOrUpdateAssetFromOrderItem' 
      | 'createContract' 
      | 'ociTransferReservation' 
      | 'ociReleaseReservation' 
      | 'ociGetAvailability' 
      | 'ociFulfillReservation' 
      | 'ociCreateReservation' 
      | 'orderRoutingRankByAverageDistance' 
      | 'orderRoutingFindRoutesWithFewestSplits' 
      | 'orderRoutingFindRoutesWithFewestSplitsUsingOCI' 
      | 'holdFulfillmentOrderCapacity' 
      | 'releaseHeldFulfillmentOrderCapacity' 
      | 'confirmHeldFulfillmentOrderCapacity' 
      | 'getFulfillmentOrderCapacityValues' 
      | 'print' 
      | 'exportSurveyResponses' 
      | 'checkoutSessionAction' 
      | 'checkCartInventoryAction' 
      | 'calcCartTaxesAction' 
      | 'calcCartShipmentAction' 
      | 'calcCartPromotionsAction' 
      | 'sendSurveyInvitation' 
      | 'publishPardotContent' 
      | 'storeReplyRecommendationsFeedback' 
      | 'marketingEmail' 
      | 'updateCheckoutSessionStateAction' 
      | 'massUpdateAccountForecast' 
      | 'massUpdateSalesAgreement' 
      | 'buildWarrantyClaimContext' 
      | 'decisionTableAction' 
      | 'runDecisionMatrix' 
      | 'createFinancialRecords' 
      | 'addWorkPlans' 
      | 'addWorkSteps' 
      | 'generateWorkPlans' 
      | 'deleteWorkPlans' 
      | 'pardotGetListx' 
      | 'pardotAddToListMembership' 
      | 'getTier' 
      | 'changeTier' 
      | 'changeAllTierOrNone' 
      | 'getPointsBalance' 
      | 'updateAcctMgrTarget' 
      | 'creditPoints' 
      | 'debitPoints' 
      | 'batchJobAction' 
      | 'dataProcessingEngineAction' 
      | 'adjustPointsAction' 
      | 'cancelRedemption' 
      | 'cancelAccrual' 
      | 'addRebateMemberList' 
      | 'saveRecommendationDecision' 
      | 'outboundMessage' 
      | 'internalTestAction' 
      | 'internalTestConnectApiAction' 
      | 'getDialerSoftphonePathSuffix' 
      | 'performMultiLevelRollups' 
      | 'rebatesProcessCSV' 
      | 'processMemberBenefitAction' 
      | 'assignMemberTierBenefits' 
      | 'dynamicSendSurveyInvitation' 
      | 'getIntelligentAccountSettingsToken' 
      | 'issueVoucher' 
      | 'setCheckoutDeliveryMethod' 
      | 'refreshDecisionTable' 
      | 'evaluationFlow' 
      | 'stepInteractive' 
      | 'stepBackground' 
      | 'stepMuleSoft' 
      | 'managedContentRoleStepInteractive' 
      | 'managedContentVariantSetLockStepBackground' 
      | 'managedContentVariantSetReadyStepBackground' 
      | 'managedContentVariantAutoPublishStepBackground' 
      | 'managedContentVariantAutoUnpublishStepBackground' 
      | 'generateKnowledgeLogData' 
      | 'submitFailedRecordsBatchJob' 
      | 'getEligibleProgramRebateTypes' 
      | 'returnReturnOrderItems' 
      | 'slackPostMessage' 
      | 'slackUpdateMessage' 
      | 'slackPinMessage' 
      | 'slackCreateChannel' 
      | 'slackInviteUsersToChannel' 
      | 'slackUserInChannel' 
      | 'slackUserInWorkspace' 
      | 'slackCheckUsersAreConnectedToSlack' 
      | 'slackArchiveChannel' 
      | 'slackInviteUserToWorkspace' 
      | 'slackGetConversationInfo' 
      | 'getLoyaltyPromotionBasedOnSalesforceCDP' 
      | 'transferMemberPointsToGroups' 
      | 'getLoyaltyPromotion' 
      | 'createServiceDocument' 
      | 'createArticleRecommendations' 
      | 'discoveryPredict' 
      | 'processProgramRebateTypeProducts' 
      | 'fetchCaseClassificationRecommendations' 
      | 'applyCaseClassificationRecommendations' 
      | 'updateProgressForCumulativePromotionUsage' 
      | 'updateAdvancedAccountForecastSetPartner' 
      | 'swarmingCollaborationToolSettings' 
      | 'getArticleSmartLinkUrl' 
      | 'performSurveySentimentAnalysis' 
      | 'pardotSlackCompletionActionNotification' 
      | 'calculateProjectedRebateAmount' 
      | 'runProgramProcessForTransactionJournal' 
      | 'goalAchievedAction' 
      | 'buildIdentityVerification' 
      | 'getVerificationData' 
      | 'createEinsteinDocReaderLogic' 
      | 'sendNotification' 
      | 'uploadBlockchainData' 
      | 'saveMemberVerificationSteps' 
      | 'limitRepetitions' 
      | 'slackSendMessageToLaunchFlow' 
      | 'manageRecurringSchedules' 
      | 'importRecordsFromCsvFile' 
      | 'authorizePayment' 
      | 'getMemberActiveSegments' 
      | 'getAvailableSwarmObject' 
      | 'runExpressionSet' 
      | 'mergeLoyaltyProgramMembership' 
      | 'unmergeLoyaltyProgramMembership' 
      | 'massUpdateAdvAccountForecast' 
      | 'runProgramProcess' 
      | 'getAssessmentResponseSummary' 
      | 'industriesSendApexAsyncRequest' 
      | 'slackJoinChannel' 
      | 'createInvoiceFromChangeOrders' 
      | 'generateInboxSchedulingLink' 
      | 'generateInboxMeetingTimes' 
      | 'confirmInboxMeetingTime' 
      | 'sendEmailMessage' 
      | 'goToCadenceStep' 
      | 'createBenefitDisbursement' 
      | 'createCareProgramEnrolleeWorkOrderStep' 
      | 'generateTransactionJournals' 
      | 'cdpRefreshDataStream' 
      | 'generateMemberReferralCode' 
      | 'cdpPublishSegment' 
      | 'industriesSendExtAsyncRequest' 
      | 'getDataCategoryDetails' 
      | 'getDataCategoryGroups' 
      | 'searchKnowledgeArticles' 
      | 'knowledgeSearch' 
      | 'cdpPublishCalculatedInsight' 
      | 'cdpGetMlPrediction' 
      | 'cdpTriggerModelPredJob' 
      | 'scheduleHomeVisit' 
      | 'scheduleRecurringHomeVisit' 
      | 'rescheduleRecurringHomeVisits' 
      | 'generateAssessmentEnvelopeSignature' 
      | 'sendChannelMessage' 
      | 'createInvRsvForCart' 
      | 'deleteInvRsvForCart' 
      | 'initiateTextExtraction' 
      | 'fetchActiveOcrTemplates' 
      | 'fetchExtractedText' 
      | 'createMaterialLineForSalesItem' 
      | 'generateDisambiguationLogData' 
      | 'cdpRunIdentityResolution' 
      | 'handleResourceAbsence' 
      | 'fetchRebateClaimDetails' 
      | 'processGiftEntries' 
      | 'processGiftCommitment' 
      | 'pauseGiftCommitmentSchedule' 
      | 'resumeGiftCommitmentSchedule' 
      | 'closeGiftCommitment' 
      | 'manageCustomGiftCmtSchds' 
      | 'manageGiftDefaultDesignations' 
      | 'manageRcrGiftCmtSchd' 
      | 'updateProcessedGiftEntries' 
      | 'createEnrichedPrompt' 
      | 'assignEnablementProgram' 
      | 'inviteToReorderPortal' 
      | 'runRecordAggrBatchProcDef' 
      | 'sendSmsMessage' 
      | 'creaContactsFromGrpCensMembers' 
      | 'creaPersAccountsFromGrpCensMbr' 
      | 'creaUsersFromGrpCensusMembers' 
      | 'enrollMembers' 
      | 'initiateAmendQuantity' 
      | 'initiateAmendment' 
      | 'initiateRenewal' 
      | 'initiateCancellation' 
      | 'manageGiftTrxnDesignations' 
      | 'processReceivedDocument' 
      | 'getEffAccountsForStoreUser' 
      | 'getProductRecommendations' 
      | 'b2bD2cGetOrderSummaries' 
      | 'getB2cProductRecommendations' 
      | 'addEcomProductToCart' 
      | 'generateOrderSummaryUrl' 
      | 'createBenefitDisbursementForServiceAppointment' 
      | 'buildContext' 
      | 'createContractDocGen' 
      | 'checkinContract' 
      | 'contractAction' 
      | 'sendEsignContract' 
      | 'persistContextData' 
      | 'createReferral' 
      | 'createChatSession' 
      | 'addOrderToCart' 
      | 'generateUserInputs' 
      | 'rateProducts' 
      | 'updateCareGapStatus' 
      | 'sendConversationMessages' 
      | 'initiateNaturalLangProcessing' 
      | 'getRecordDetails' 
      | 'fetchBoostBuryRuleRecommendation' 
      | 'createSearchBoostBuryRule' 
      | 'captureUserFeedback' 
      | 'previewCartToExchangeOrder' 
      | 'submitCartToExchangeOrder' 
      | 'dispatchReminders' 
      | 'computeCleanEnergyApplnBen' 
      | 'identifyRecordByName' 
      | 'processReferralEvent' 
      | 'submitOrder' 
      | 'dataCloudIngestionApi' 
      | 'getPaynowWebstoreId' 
      | 'queryRecords' 
      | 'queryRecordsWithAggregate' 
      | 'registerGuestBuyer' 
      | 'identifyObject' 
      | 'scheduleGroupVisits' 
      | 'createSubscriptionRecords' 
      | 'generatePromptResponse' 
      | 'einsteinCopilotNewsService' 
      | 'einsteinGenerateMessages' 
      | 'draftOrReviseEmail' 
      | 'summarizeRecord' 
      | 'einsteinCopilotUpdateRecord' 
      | 'einsteinCopilotCreateRecord' 
      | 'runSalesforcePricing' 
      | 'processFirstPaymentBilling' 
      | 'runSalesforceHeadlessPricing' 
      | 'dstrEnergyAttrCertCredits' 
      | 'getRecordFieldsAndValues' 
      | 'createIntegrationPlan' 
      | 'runIntegrationPlan' 
      | 'getRelatedList' 
      | 'fetchConversationTranscripts';

export type ItemActionType = string;

export type ItemCategory = 'dbBased' 
      | 'fileBased';

export type ItemInstanceTypeEnum = 'component' 
      | 'field';

export type ItemType = string;

export type IterationOrder = 'Asc' 
      | 'Desc';

export type JournalProcessType = 'Loyalty' 
      | 'AccountingSubledger' 
      | 'Automotive' 
      | 'Analytics' 
      | 'ShipAndDebit' 
      | 'Referral' 
      | 'UnifiedPromotions';

export type KnowledgeWorkflowAction = 'PublishAsNew' 
      | 'Publish';

export type LCResourceFormat = 'html' 
      | 'js' 
      | 'css' 
      | 'json' 
      | 'xml' 
      | 'svg';

export type Language = 'en_US' 
      | 'de' 
      | 'es' 
      | 'fr' 
      | 'it' 
      | 'ja' 
      | 'sv' 
      | 'ko' 
      | 'zh_TW' 
      | 'zh_CN' 
      | 'pt_BR' 
      | 'nl_NL' 
      | 'da' 
      | 'th' 
      | 'fi' 
      | 'ru' 
      | 'es_MX' 
      | 'no' 
      | 'hu' 
      | 'pl' 
      | 'cs' 
      | 'tr' 
      | 'in' 
      | 'ro' 
      | 'vi' 
      | 'uk' 
      | 'iw' 
      | 'el' 
      | 'bg' 
      | 'en_GB' 
      | 'ar' 
      | 'sk' 
      | 'pt_PT' 
      | 'hr' 
      | 'sl' 
      | 'fr_CA' 
      | 'ka' 
      | 'sr' 
      | 'sh' 
      | 'en_AU' 
      | 'en_MY' 
      | 'en_IN' 
      | 'en_PH' 
      | 'en_CA' 
      | 'ro_MD' 
      | 'bs' 
      | 'mk' 
      | 'lv' 
      | 'lt' 
      | 'et' 
      | 'sq' 
      | 'sh_ME' 
      | 'mt' 
      | 'ga' 
      | 'eu' 
      | 'cy' 
      | 'is' 
      | 'cac' 
      | 'quc' 
      | 'cak' 
      | 'ms' 
      | 'tl' 
      | 'lb' 
      | 'rm' 
      | 'hy' 
      | 'hi' 
      | 'ur' 
      | 'bn' 
      | 'de_AT' 
      | 'de_CH' 
      | 'ta' 
      | 'ar_DZ' 
      | 'ar_BH' 
      | 'ar_EG' 
      | 'ar_IQ' 
      | 'ar_JO' 
      | 'ar_KW' 
      | 'ar_LB' 
      | 'ar_LY' 
      | 'ar_MA' 
      | 'ar_OM' 
      | 'ar_QA' 
      | 'ar_SA' 
      | 'ar_SD' 
      | 'ar_SY' 
      | 'ar_TN' 
      | 'ar_AE' 
      | 'ar_YE' 
      | 'zh_SG' 
      | 'zh_HK' 
      | 'en_HK' 
      | 'en_IE' 
      | 'en_SG' 
      | 'en_ZA' 
      | 'fr_BE' 
      | 'fr_LU' 
      | 'fr_CH' 
      | 'de_BE' 
      | 'de_LU' 
      | 'it_CH' 
      | 'nl_BE' 
      | 'es_AR' 
      | 'es_BO' 
      | 'es_CL' 
      | 'es_CO' 
      | 'es_CR' 
      | 'es_DO' 
      | 'es_EC' 
      | 'es_SV' 
      | 'es_GT' 
      | 'es_HN' 
      | 'es_NI' 
      | 'es_PA' 
      | 'es_PY' 
      | 'es_PE' 
      | 'es_PR' 
      | 'es_US' 
      | 'es_UY' 
      | 'es_VE' 
      | 'ca' 
      | 'af' 
      | 'sw' 
      | 'zu' 
      | 'xh' 
      | 'te' 
      | 'ml' 
      | 'kn' 
      | 'mr' 
      | 'gu' 
      | 'pa' 
      | 'en_NZ' 
      | 'mi' 
      | 'my' 
      | 'fa' 
      | 'km' 
      | 'am' 
      | 'kk' 
      | 'ht' 
      | 'sm' 
      | 'haw' 
      | 'zh_MY' 
      | 'ru_LT' 
      | 'ru_PL' 
      | 'ru_AM' 
      | 'ru_KZ' 
      | 'ru_KG' 
      | 'ru_BY' 
      | 'ru_MD' 
      | 'ru_UA' 
      | 'en_AE' 
      | 'en_BE' 
      | 'en_CY' 
      | 'en_DE' 
      | 'en_IL' 
      | 'en_IT' 
      | 'en_NL' 
      | 'en_MT' 
      | 'el_CY' 
      | 'fr_MA' 
      | 'kl' 
      | 'ji' 
      | 'hmn' 
      | 'eo' 
      | 'iw_EO';

export type LastLoadStatusEnum = 'InProgress' 
      | 'Completed' 
      | 'Failed' 
      | 'NotLoaded';

export type LayoutHeader = 'PersonalTagging' 
      | 'PublicTagging';

export type LayoutSectionStyle = 'TwoColumnsTopToBottom' 
      | 'TwoColumnsLeftToRight' 
      | 'OneColumn' 
      | 'CustomLinks';

export type LayoutType = 'Standard' 
      | 'ProcessDefinition' 
      | 'GlobalQuickActionList';

export type LearningAchievementType = 'LearningCourse' 
      | 'LearningProgram' 
      | 'AchievementGroup' 
      | 'Skill' 
      | 'Custom';

export type LensType = 'lens' 
      | 'dashboard' 
      | 'mDashboard' 
      | 'lensTemplate' 
      | 'dashboardTemplate' 
      | 'lensSnapshot' 
      | 'dashboardSnapshot' 
      | 'component' 
      | 'componentTemplate';

export type LetterheadHorizontalAlignment = 'None' 
      | 'Left' 
      | 'Center' 
      | 'Right';

export type LetterheadVerticalAlignment = 'None' 
      | 'Top' 
      | 'Middle' 
      | 'Bottom';

export type LicenseExpirationPolicy = 'AllowNamespaceAccess' 
      | 'BlockNamespaceAccess';

export type LightningBoltCategory = 'Communications' 
      | 'Education' 
      | 'FinancialServices' 
      | 'Government' 
      | 'HealthcareLifeSciences' 
      | 'Manufacturing' 
      | 'Media' 
      | 'Nonprofits' 
      | 'ProfessionalServices' 
      | 'RealEstate' 
      | 'Retail' 
      | 'TravelTransportationHospitality' 
      | 'HighTech' 
      | 'GeneralBusiness';

export type ListLayoutTypes = 'SearchResult' 
      | 'Lookup' 
      | 'LookupPhone' 
      | 'KeyList' 
      | 'ListButtons' 
      | 'SearchFilter' 
      | 'LookupFilter';

export type LiveChatButtonInviteEndPosition = 'TopLeft' 
      | 'Top' 
      | 'TopRight' 
      | 'Left' 
      | 'Center' 
      | 'Right' 
      | 'BottomLeft' 
      | 'Bottom' 
      | 'BottomRight';

export type LiveChatButtonInviteStartPosition = 'TopLeft' 
      | 'TopLeftTop' 
      | 'Top' 
      | 'TopRightTop' 
      | 'TopRight' 
      | 'TopRightRight' 
      | 'Right' 
      | 'BottomRightRight' 
      | 'BottomRight' 
      | 'BottomRightBottom' 
      | 'Bottom' 
      | 'BottomLeftBottom' 
      | 'BottomLeft' 
      | 'BottomLeftLeft' 
      | 'Left' 
      | 'TopLeftLeft';

export type LiveChatButtonPresentation = 'Slide' 
      | 'Fade' 
      | 'Appear' 
      | 'Custom';

export type LiveChatButtonRoutingType = 'Choice' 
      | 'LeastActive' 
      | 'MostAvailable';

export type LiveChatButtonType = 'Standard' 
      | 'Invite';

export type LmaApiSessionType = 'Debugger' 
      | 'Profiler' 
      | 'Logging' 
      | 'Real';

export type LoginFlowType = string;

export type LookupValueType = 'User' 
      | 'Queue' 
      | 'RecordType';

export type LoyaltyPgmProcActParamOper = string;

export type LoyaltyPgmProcActParamType = 'Literal' 
      | 'Parameter';

export type LoyaltyPgmProcActionType = 'CreditPoints' 
      | 'DebitPoints' 
      | 'IssueVoucher' 
      | 'IncreaseUsageForCumulativePromotion' 
      | 'UpdateUsageForCumulativePromotion' 
      | 'AssignParameterValues' 
      | 'RunFlow' 
      | 'GetOutputsFromDecisionTable' 
      | 'UpdatePointBalance' 
      | 'GetMemberPointBalance' 
      | 'GetMemberTier' 
      | 'GetMemberAttributesValues' 
      | 'UpdateCurrentValueForMemberAttribute' 
      | 'RunProgramProcess' 
      | 'Crud' 
      | 'AssignBadgeToMember' 
      | 'CheckMemberBadgeAssignment' 
      | 'ChangeMemberTier' 
      | 'GetMemberPromotions' 
      | 'RedeemVoucher' 
      | 'SendMail';

export type LoyaltyPgmProcCondOperator = 'Equals' 
      | 'NotEquals' 
      | 'GreaterThan' 
      | 'GreaterThanOrEquals' 
      | 'LessThan' 
      | 'LessThanOrEquals' 
      | 'Contains' 
      | 'DoesNotContain' 
      | 'IsNull' 
      | 'IsNotNull';

export type LoyaltyPgmProcCondType = 'Literal' 
      | 'Parameter' 
      | 'Formula' 
      | 'Lookup';

export type LoyaltyPgmProcCrudActType = 'create' 
      | 'update';

export type LoyaltyPgmProcExecutionType = 'RealTime' 
      | 'Batch' 
      | 'BatchAndRealTime';

export type LoyaltyPgmProcParmDataType = 'Text' 
      | 'Numeric' 
      | 'Date' 
      | 'DateTime' 
      | 'Sobject' 
      | 'Boolean';

export type LoyaltyPgmProcParmType = 'Variable' 
      | 'Constant' 
      | 'Formula';

export type LoyaltyPgmProcRuleStatus = 'Draft' 
      | 'Active' 
      | 'Inactive';

export type LoyaltyPgmProcRuleType = 'Condition' 
      | 'Action' 
      | 'ConditionGroup' 
      | 'DefaultPath';

export type LoyaltyPgmProcStatus = 'Draft' 
      | 'Active' 
      | 'Inactive';

export type MCNodeType = 'TEXT' 
      | 'MTEXT' 
      | 'RTE' 
      | 'IMG' 
      | 'NAMEFIELD' 
      | 'MEDIA' 
      | 'REFERENCE' 
      | 'URL' 
      | 'DATETIME' 
      | 'DATE' 
      | 'PHONE' 
      | 'EMAIL' 
      | 'ENCRYPTEDSTRING' 
      | 'BOOLEAN' 
      | 'CURRENCY' 
      | 'INT' 
      | 'DOUBLE' 
      | 'PERCENT' 
      | 'TIME' 
      | 'ADDRESS' 
      | 'LOCATION';

export type MLDataDefinitionType = 'Recipient' 
      | 'Candidate' 
      | 'Interaction' 
      | 'Prediction' 
      | 'Generative';

export type MLFieldType = 'Prediction' 
      | 'Pushback' 
      | 'Included' 
      | 'Excluded' 
      | 'Join' 
      | 'Related' 
      | 'Expression' 
      | 'SegmentExpression' 
      | 'TrainingExpression' 
      | 'ScoringExpression' 
      | 'PositiveExpression' 
      | 'NegativeExpression' 
      | 'SourceDate' 
      | 'Retriever';

export type MLGenerativeDefinitionStatus = 'Enabled' 
      | 'Disabled' 
      | 'Draft';

export type MLGenerativeType = 'Standard' 
      | 'Grounded';

export type MLPredictionDefinitionStatus = 'Enabled' 
      | 'Disabled' 
      | 'Draft';

export type MLRecommendationDefinitionStatus = 'Enabled' 
      | 'Disabled' 
      | 'Draft';

export type MLRelationType = 'Inner' 
      | 'Leftouter' 
      | 'Leftinner' 
      | 'Full';

export type ManageableState = 'released' 
      | 'deleted' 
      | 'deprecated' 
      | 'installed' 
      | 'beta' 
      | 'unmanaged' 
      | 'installedEditable' 
      | 'deprecatedEditable';

export type MappedFieldType = 'FEATURE' 
      | 'PREDICTION_SCORE' 
      | 'INSIGHT' 
      | 'SUGGESTION' 
      | 'SECONDARY_RESPONSE_RECORD_ID' 
      | 'RECOMMENDATION_RESPONSE_RECORD_ID' 
      | 'RECOMMENDATION' 
      | 'PREDICTION_SCORE_INPUT';

export type MappingAlertType = 'None' 
      | 'Warning' 
      | 'Error';

export type MappingBehaviorType = 'PointInTime' 
      | 'CurrentValue';

export type MappingOperation = 'Autofill' 
      | 'Overwrite';

export type MappingType = 'WorkPlans_WorkPlanTemplate_WorkPlan' 
      | 'WorkPlans_WorkStepTemplate_WorkStep' 
      | 'WorkPlans_WorkPlanTemplateEntry_WorkStep';

export type MappingUsageType = 'ConvertToSalesAgreement' 
      | 'EligibleProgramRebateType' 
      | 'MapJournalToMemberAggregate' 
      | 'TransformationMapping' 
      | 'CLMFieldMapping';

export type MarketAudienceStatus = 'New' 
      | 'Counting' 
      | 'Activating' 
      | 'Activated' 
      | 'Disabled' 
      | 'Error';

export type MatchingMethod = 'Exact' 
      | 'FirstName' 
      | 'LastName' 
      | 'CompanyName' 
      | 'Phone' 
      | 'City' 
      | 'Street' 
      | 'Zip' 
      | 'Title';

export type MatchingRuleSobjectSubtype = 'None' 
      | 'PersonAccount';

export type MatchingRuleStatus = 'Inactive' 
      | 'DeactivationFailed' 
      | 'Activating' 
      | 'Deactivating' 
      | 'Active' 
      | 'ActivationFailed';

export type MessageType = 'Text' 
      | 'Facebook' 
      | 'Line' 
      | 'GoogleHome' 
      | 'Alexa' 
      | 'Omega' 
      | 'AppleBusinessChat' 
      | 'WeChat' 
      | 'WebChat' 
      | 'WhatsApp' 
      | 'Phone' 
      | 'EmbeddedMessaging' 
      | 'Voice' 
      | 'Custom';

export type MessagingAutoResponseType = 'InitialResponse' 
      | 'AgentEngagedResponse' 
      | 'AgentEndEngagementResponse';

export type MessagingChannelAutoResponseType = 'InitialResponse' 
      | 'AgentEngagedResponse' 
      | 'AgentEndEngagementResponse' 
      | 'OptInPrompt' 
      | 'DoubleOptInPrompt' 
      | 'OptInConfirmation' 
      | 'OptOutConfirmation' 
      | 'HelpResponse' 
      | 'CustomResponse' 
      | 'ServerErrorResponse' 
      | 'EndUserIdleResponse' 
      | 'EndUserInactiveResponse';

export type MessagingChannelConsentType = 'ImplicitOptIn' 
      | 'ExplicitOptIn' 
      | 'DoubleOptIn';

export type MessagingChannelProcurementRequestStatus = 'New' 
      | 'InProgress' 
      | 'Completed' 
      | 'Error' 
      | 'Canceled';

export type MessagingChannelProvisioningRequestStatus = 'New' 
      | 'InProgress' 
      | 'AwaitingFinalization' 
      | 'Finalized' 
      | 'Completed' 
      | 'Error';

export type MessagingChannelRoutingType = 'OmniQueue' 
      | 'OmniSkills';

export type MessagingChannelStandardParameterType = 'FirstName' 
      | 'LastName' 
      | 'Email' 
      | 'Subject';

export type MessagingChannelTargetLookupValueType = 'Queue' 
      | 'Intent';

export type MessagingChannelType = 'EmbeddedMessaging' 
      | 'Voice' 
      | 'Custom';

export type MessagingPaymentSystemType = string;

export type MessagingSessionHandlerType = 'Queue' 
      | 'Flow';

export type MessagingTemplateApprovalStatus = 'NeedsApproval' 
      | 'Pending' 
      | 'Approved' 
      | 'Rejected' 
      | 'NotApplicable';

export type MessagingTemplateIntent = 'AccountUpdate' 
      | 'ConfirmedEventUpdate' 
      | 'PostPurchaseUpdate' 
      | 'PaymentUpdate' 
      | 'PersonalFinanceUpdate' 
      | 'ShippingUpdate' 
      | 'ReservationUpdate' 
      | 'IssueResolution' 
      | 'AppointmentUpdate' 
      | 'TransportationUpdate' 
      | 'TicketUpdate' 
      | 'AlertUpdate';

export type MfgProgramTemplateStatus = 'Active' 
      | 'Inactive' 
      | 'Draft';

export type MfgProgramTransformationType = 'BusinessTransformation' 
      | 'ForecastSetRelation';

export type MilestoneTimeUnits = 'Minutes' 
      | 'Hours' 
      | 'Days';

export type MilestoneTypeRecurrenceType = 'none' 
      | 'recursIndependently' 
      | 'recursChained';

export type MktDataConnectionMethod = 'Ingress' 
      | 'Egress';

export type MktDataConnectionStatus = 'PROCESSING' 
      | 'INACTIVE' 
      | 'TESTING' 
      | 'ACTIVE' 
      | 'ERROR' 
      | 'DELETING' 
      | 'SCHEMA_REQUIRED';

export type MktDataModelFieldUsageTag = 'None' 
      | 'KeyQualifier';

export type MlAIModelAlgorithmType = 'Unknown' 
      | 'Glm' 
      | 'Gbm' 
      | 'Xgboost' 
      | 'RandomForest';

export type MlActivatedModelStatus = 'Disabled' 
      | 'Enabled';

export type MlDomainType = 'Local' 
      | 'Global';

export type MlGenerativeModelCapability = 'Completion' 
      | 'ChatCompletion' 
      | 'Embedding';

export type MlGenerativeModelType = string;

export type MlIntentModelConfusionType = 'None' 
      | 'Scattered' 
      | 'Contains' 
      | 'Contained' 
      | 'Overlap';

export type MlModelArtifactStatus = 'Enabled' 
      | 'Disabled';

export type MlModelKitStatus = 'Disabled' 
      | 'Enabled' 
      | 'Draft';

export type MlModelPredictionType = 'Regression' 
      | 'BinaryClassification' 
      | 'MulticlassClassification' 
      | 'Generic';

export type MlModelSourceType = 'ModelConnector' 
      | 'EdcNoCode' 
      | 'OutOfTheBox';

export type MlModelStatus = 'NEW' 
      | 'QUEUED' 
      | 'RUNNING' 
      | 'SUCCEEDED' 
      | 'FAILED';

export type MlModelType = 'Predictive' 
      | 'Generative';

export type MlObjectiveType = 'Predictive' 
      | 'Generative' 
      | 'Mixed';

export type MlOutcomeGoalType = 'None' 
      | 'Minimize' 
      | 'Maximize';

export type MlParameterSubtype = 'Integer' 
      | 'Double' 
      | 'Picklist';

export type MlParameterType = 'Discrete' 
      | 'Continuous';

export type MlRuntimeType = 'External' 
      | 'Internal';

export type MlSlotClassDataType = 'Text' 
      | 'Number' 
      | 'Boolean' 
      | 'Date' 
      | 'DateTime' 
      | 'Currency';

export type MlSlotClassExtractionType = 'Pattern' 
      | 'Value';

export type MlStandardSlotClass = '_Text' 
      | '_Boolean' 
      | '_DateTime' 
      | '_Date' 
      | '_Money' 
      | '_Number' 
      | '_Object' 
      | '_Person' 
      | '_Location' 
      | '_Organization' 
      | '_Percent' 
      | '_Email' 
      | '_PhoneNumber';

export type MobileCredentialType = 'Development' 
      | 'Production';

export type MobilePlatformType = 'Apple' 
      | 'Android';

export type MobileSecurityCertPinType = 'AuthServer' 
      | 'Resource';

export type MobileSecurityMobilePlatform = 'Android' 
      | 'iOS';

export type MobileSecurityPolicyRuleValueType = 'Boolean' 
      | 'Text' 
      | 'TextList';

export type MobileSecurityPolicySeverityLevel = 'Warn' 
      | 'Error' 
      | 'Critical' 
      | 'Info';

export type MobileSecurityPolicyType = 'JailbrokenDevice' 
      | 'MinimumOsVersion' 
      | 'MaximumOsVersion' 
      | 'MinimumSecurityPatchVersion' 
      | 'ManInMiddle' 
      | 'MinimumAppVersion' 
      | 'MininumAppVersion' 
      | 'MaximumAppVersion' 
      | 'DevicePasscode' 
      | 'BlockedDeviceList' 
      | 'BlockCustomKeyboard' 
      | 'BlockFileBackup' 
      | 'Block3dTouch' 
      | 'Screenshot' 
      | 'LogScreenshot' 
      | 'LogEmail' 
      | 'LogPhonecall' 
      | 'LogTextmessage' 
      | 'LogPolicyResult' 
      | 'BlockMicrophone' 
      | 'BlockCamera' 
      | 'MalwareDetection' 
      | 'DisableUrlCaching' 
      | 'MaxOffline' 
      | 'LogoutAfterRestart' 
      | 'LogoutOnBiometricChange' 
      | 'BlockOsSharing' 
      | 'BrowserUriScheme' 
      | 'CheckBiometric' 
      | 'BlockContacts' 
      | 'BlockCalendar' 
      | 'PhonecallUriScheme' 
      | 'AllowedDeviceList' 
      | 'LogCertPin';

export type MobileSessionTimeout = 'Never' 
      | 'OneMinute' 
      | 'FiveMinutes' 
      | 'TenMinutes' 
      | 'ThirtyMinutes' 
      | 'SixtyMinutes' 
      | 'OneTwentyMinutes' 
      | 'OneEightyMinutes' 
      | 'TwoFortyMinutes';

export type ModelEntityType = 'QA' 
      | 'ARTICLE' 
      | 'CASE';

export type ModelStatus = 'PUBLISHED' 
      | 'DARK_LAUNCHED' 
      | 'REJECTED' 
      | 'PHASED_OUT' 
      | 'VERIFIED' 
      | 'NO_MODEL';

export type ModerationRuleAction = 'Block' 
      | 'FreezeAndNotify' 
      | 'Review' 
      | 'Replace' 
      | 'Flag';

export type ModerationRuleType = 'Content' 
      | 'Rate';

export type Modifier = 'TESTMETHOD' 
      | 'GLOBAL' 
      | 'WEBSERVICE' 
      | 'PUBLIC' 
      | 'PRIVATE' 
      | 'PROTECTED' 
      | 'WITHSHARING' 
      | 'WITHOUTSHARING' 
      | 'INHERITEDSHARING' 
      | 'STATIC' 
      | 'TRANSIENT' 
      | 'ABSTRACT' 
      | 'FINAL' 
      | 'OVERRIDE' 
      | 'VIRTUAL';

export type MonitoredEvents = 'AuditTrail' 
      | 'Login' 
      | 'Entity' 
      | 'DataExport' 
      | 'AccessResource';

export type MuleSoftControlPlane = 'None' 
      | 'US' 
      | 'EU';

export type NamedCredentialParamType = 'Url' 
      | 'UrlQueryParameter' 
      | 'HttpHeader' 
      | 'HttpCookie' 
      | 'ClientCertificate' 
      | 'ServerCertificate' 
      | 'FormulaVariable' 
      | 'Authentication' 
      | 'OutboundNetworkConnection' 
      | 'AllowedManagedPackageNamespaces' 
      | 'CreatedByNamespace' 
      | 'CustomParameter' 
      | 'StandardNamedCredentialType';

export type NamedCredentialType = 'Legacy' 
      | 'AnonymousEndpoint' 
      | 'SecuredEndpoint' 
      | 'PrivateEndpoint' 
      | 'Credentials' 
      | 'Standard';

export type NavType = 'Standard' 
      | 'Console';

export type NetworkPageOverrideSetting = 'Designer' 
      | 'VisualForce' 
      | 'Standard' 
      | 'Configurable';

export type NetworkStatus = 'UnderConstruction' 
      | 'Live' 
      | 'DownForMaintenance';

export type NetworkUserType = 'Internal' 
      | 'Customer' 
      | 'Partner';

export type NextOwnerType = 'adhoc' 
      | 'user' 
      | 'userHierarchyField' 
      | 'relatedUserField' 
      | 'queue' 
      | 'apexMethod' 
      | 'PreviousApprover' 
      | 'none';

export type NodeType = 'Setup' 
      | 'PersonalSettings' 
      | 'ServiceSetup' 
      | 'EssentialsSetup' 
      | 'MarketingSetup' 
      | 'Audience360Setup' 
      | 'OslSetup';

export type OAuthProviderType = 'GOOGLE' 
      | 'FACEBOOK' 
      | 'AMAZON';

export type ODTItemFilterDataType = 'ADDRESS' 
      | 'ANYTYPE' 
      | 'BASE64' 
      | 'BOOLEAN' 
      | 'COMBOBOX' 
      | 'CURRENCY' 
      | 'DATACATEGORY' 
      | 'GROUPREFERENCE' 
      | 'DATE' 
      | 'DATETIME' 
      | 'DOUBLE' 
      | 'EMAIL' 
      | 'ENCRYPTEDSTRING' 
      | 'ID' 
      | 'INTEGER' 
      | 'LONG' 
      | 'MULTIPICKLIST' 
      | 'PERCENT' 
      | 'PHONE' 
      | 'PICKLIST' 
      | 'REFERENCE' 
      | 'STRING' 
      | 'TEXTAREA' 
      | 'TIME' 
      | 'URL';

export type Oauth2CannedScopes = 'id' 
      | 'api' 
      | 'web' 
      | 'full' 
      | 'chatter_api' 
      | 'visualforce' 
      | 'refresh_token' 
      | 'openid' 
      | 'profile' 
      | 'email' 
      | 'address' 
      | 'phone' 
      | 'offline_access' 
      | 'custom_permissions' 
      | 'wave_api' 
      | 'eclair_api' 
      | 'hub_api' 
      | 'pardot_api' 
      | 'lightning' 
      | 'content' 
      | 'cdp_ingest_api' 
      | 'cdp_profile_api' 
      | 'cdp_query_api' 
      | 'chatbot_api' 
      | 'cdp_segment_api' 
      | 'cdp_identityresolution_api' 
      | 'forgot_password' 
      | 'cdp_calculated_insight_api' 
      | 'user_registration_api' 
      | 'sfap_api' 
      | 'interaction_api' 
      | 'cdp_api' 
      | 'einstein_gpt_api' 
      | 'pwdless_login_api';

export type ObjHierarchyMappingType = 'ParentToParent' 
      | 'ParentToChild' 
      | 'ChildToChild' 
      | 'Support';

export type ObjectFilterOperator = 'with' 
      | 'without';

export type ObjectRelationshipType = 'Direct' 
      | 'Indirect' 
      | 'Self' 
      | 'InverseDirect';

export type ObjectToLink = string;

export type ObjectiveParameterKey = 'DaysBack' 
      | 'DaysAhead';

export type OcrApplicationType = 'Industries' 
      | 'EinsteinDocumentReader';

export type OcrMappingType = 'FormField' 
      | 'TableColumn';

export type OmniAnalyticsComponentType = 'Omniscript' 
      | 'Flexcard';

export type OmniDataTransformInputType = 'JSON' 
      | 'XML' 
      | 'SObject' 
      | 'Custom';

export type OmniProcessType = string;

export type OmniSuperSkillVisibilityType = 'AllSkills' 
      | 'AnySkill';

export type OmniSupervisorActionName = 'ChangeQueues' 
      | 'ChangeSkills' 
      | 'AssignLearning' 
      | 'AWSDashboard' 
      | 'ManageQueues' 
      | 'CustomAction';

export type OmniSupervisorActionTab = 'AllAgents' 
      | 'AgentDetails' 
      | 'QueuesBacklog' 
      | 'QueueDetails' 
      | 'AssignedWork' 
      | 'AssignedWorkDetails' 
      | 'SkillsBacklog' 
      | 'SkillDetails';

export type OmniTrackingGroupType = 'Internal' 
      | 'External';

export type OmniUiCardType = 'Parent' 
      | 'Child';

export type OperationStatus = 'NEW' 
      | 'RUNNING' 
      | 'COMPLETED' 
      | 'FAILED' 
      | 'ABORTED';

export type OperationType = 'Ftest' 
      | 'FtestNoOp' 
      | 'FtestNoListener' 
      | 'FtestDupListener' 
      | 'FtestPartiallyDefinedListener' 
      | 'RunTerritoryRules' 
      | 'RunOppTerrAssignmentApex';

export type OrderLifeCycleType = 'MANAGED' 
      | 'UNMANAGED';

export type OrgCopyStrategy = 'legacyTICopy' 
      | 'unknown' 
      | 'sandstormCopy';

export type OrgDomainProdSuffix = 'MySalesforceLimited' 
      | 'DatabaseLimited' 
      | 'CloudforceLimited' 
      | 'OrgLevelCertificateLimited' 
      | 'Restricted1' 
      | 'MySalesforce' 
      | 'Restricted2';

export type OrgDomainRedirectOption = 'Undeployed' 
      | 'Redirect' 
      | 'WarnOnRedirect' 
      | 'NoRedirect';

export type OrgDomainShard = 'none' 
      | 'sandbox' 
      | 'develop' 
      | 'patch' 
      | 'trailblaze' 
      | 'scratch' 
      | 'demo' 
      | 'free' 
      | 'bt' 
      | 'sfdctest' 
      | 'sfdcdot';

export type OrgWideEmailAddressPurpose = 'UserSelection' 
      | 'DefaultNoreply' 
      | 'UserSelectionAndDefaultNoReply';

export type OutboundConnPropertyName = 'LinkId' 
      | 'Region' 
      | 'AwsVpcEndpointId' 
      | 'AwsVpcEndpointServiceName' 
      | 'ProxyUrl';

export type OutputType = 'UnitPrice' 
      | 'AdjustmentType' 
      | 'AdjustmentValue' 
      | 'CustomOutput' 
      | 'HashOutput';

export type Package2ContainerOptions = 'Managed' 
      | 'Unlocked' 
      | 'Locked';

export type Package2TransferStage = 'Queued' 
      | 'GatheringPackage2Entities' 
      | 'WaitingOnDestinationDevHub' 
      | 'InsertingPackage2Entities' 
      | 'UpdatingGlobalTables' 
      | 'DeletingPackage2Entities' 
      | 'Success' 
      | 'Error';

export type Package2VersionBuildStatus = 'Queued' 
      | 'RetrievingReleasedEntityState' 
      | 'RetrievingVersionInfo' 
      | 'DeployingSettings' 
      | 'WaitingForSettingsDeploy' 
      | 'DeployingUnpackagedSeedMetadata' 
      | 'WaitingForDeployUnpackagedSeedMetadata' 
      | 'InstallingDependencies' 
      | 'DeployingAncestorMetadata' 
      | 'WaitingForAncestorMetadataDeploy' 
      | 'DeployingMetadata' 
      | 'WaitingForMetadataDeploy' 
      | 'MetadataDeployComplete' 
      | 'GeneratingReleasedEntityState' 
      | 'RetrievingMetadata' 
      | 'WaitingForMetadataRetrieve' 
      | 'DeployingUnpackagedMetadata' 
      | 'WaitingForDeployUnpackagedMetadata' 
      | 'RunningTests' 
      | 'WaitingForTestRuns' 
      | 'Success' 
      | 'Error';

export type Package2VersionCreateRequestStatus = 'Queued' 
      | 'Initializing' 
      | 'VerifyingFeaturesAndSettings' 
      | 'VerifyingDependencies' 
      | 'VerifyingMetadata' 
      | 'FinalizingPackageVersion' 
      | 'Success' 
      | 'Error';

export type PackageCategory = 'Package' 
      | 'Application' 
      | 'Module' 
      | 'Package2';

export type PackageInstallRequestStatus = 'InProgress' 
      | 'Success' 
      | 'Error' 
      | 'Unknown';

export type PackageInstallSecurityType = 'Full' 
      | 'None' 
      | 'Custom' 
      | 'Push';

export type PackageInstallSource = 'U' 
      | 'R' 
      | 'D' 
      | 'S' 
      | 'A';

export type PackageNameConflictResolution = 'RenameAllForTest' 
      | 'RenameMetadata' 
      | 'Block';

export type PackageReleaseState = 'Development' 
      | 'Beta' 
      | 'Released' 
      | 'BranchOrg';

export type PackageUploadRequestStatus = 'InProgress' 
      | 'Success' 
      | 'Error' 
      | 'Unknown' 
      | 'Queued';

export type PageComponentType = 'links' 
      | 'htmlArea' 
      | 'imageOrNote' 
      | 'visualforcePage';

export type PageComponentWidth = 'narrow' 
      | 'wide';

export type PaidCashFlowGrouping = 'GroupBySummary' 
      | 'GroupByFundAccount';

export type PardotTenantAccountType = 'Production' 
      | 'Sandbox' 
      | 'Demo';

export type PardotTenantEnvironment = 'PI0' 
      | 'PI3' 
      | 'PIPerf' 
      | 'PIDev' 
      | 'PILocal';

export type PardotTenantStatus = 'Creating' 
      | 'Created' 
      | 'Updating' 
      | 'Updated' 
      | 'Deleting' 
      | 'Deleted' 
      | 'Backfilled' 
      | 'Deprovisioning' 
      | 'Deprovisioned' 
      | 'Error';

export type PardotTenantStatusCode = 'UnknownError' 
      | 'UsernameCollision' 
      | 'InvalidRequest' 
      | 'PardotAccountNotFound' 
      | 'InsufficientLicenseLimits';

export type ParticipantRoleAccessLevel = 'None' 
      | 'Read' 
      | 'Edit';

export type ParticipantRoleSharingUpdateStatus = 'Failure' 
      | 'Success' 
      | 'InProgress';

export type PathAssistantStepItemType = 'Layout' 
      | 'Information';

export type PeriodTypes = 'Month' 
      | 'Quarter' 
      | 'Week' 
      | 'Year';

export type PermissionSetGroupStatus = 'Updated' 
      | 'Outdated' 
      | 'Updating' 
      | 'Failed';

export type PermissionSetTabVisibility = 'None' 
      | 'Available' 
      | 'Visible';

export type PermissionSetType = 'Regular' 
      | 'Profile' 
      | 'Group' 
      | 'Session' 
      | 'Integration' 
      | 'Standard';

export type PermittedUsersPolicyType = 'AllSelfAuthorized' 
      | 'AdminApprovedPreAuthorized';

export type PinnedAction = 'None' 
      | 'Top' 
      | 'Bottom';

export type PipelineInspectionMetric = 'TotalPipeline' 
      | 'ClosedWon' 
      | 'Commit' 
      | 'MostLikely' 
      | 'BestCase' 
      | 'OpenPipeline' 
      | 'ClosedLost' 
      | 'MovedIn' 
      | 'MovedOut';

export type PlannerAttrDataType = string;

export type PlannerAttrMappingType = 'input' 
      | 'output';

export type PlannerFunctionInvocableTargetType = 'apex' 
      | 'flow' 
      | 'standardInvocableAction' 
      | 'generatePromptResponse' 
      | 'externalService' 
      | 'quickAction';

export type PlannerType = 'action' 
      | 'sequence' 
      | 'conversation' 
      | 'AiCopilot__SequentialPlannerIntentClassifier' 
      | 'AiCopilot__ReAct';

export type PlatformActionDeviceFormat = 'Phone' 
      | 'Tablet' 
      | 'Desktop' 
      | 'Aloha';

export type PlatformActionGroupCategory = 'Primary' 
      | 'Overflow';

export type PlatformActionListContext = 'ListView' 
      | 'RelatedList' 
      | 'ListViewRecord' 
      | 'RelatedListRecord' 
      | 'Record' 
      | 'FeedElement' 
      | 'Chatter' 
      | 'Global' 
      | 'Flexipage' 
      | 'MruList' 
      | 'MruRow' 
      | 'RecordEdit' 
      | 'Photo' 
      | 'BannerPhoto' 
      | 'ObjectHomeChart' 
      | 'ListViewDefinition' 
      | 'Dockable' 
      | 'Lookup' 
      | 'Assistant' 
      | 'ActionDefinition';

export type PlatformActionSection = 'Page' 
      | 'ActivityComposer' 
      | 'CollaborateComposer' 
      | 'SingleActionLinks';

export type PlatformActionTargetType = 'Describe' 
      | 'Invoke' 
      | 'Visualforce' 
      | 'LightningComponent';

export type PlatformActionType = 'QuickAction' 
      | 'StandardButton' 
      | 'CustomButton' 
      | 'ProductivityAction' 
      | 'ActionLink' 
      | 'InvocableAction';

export type PlatformCacheType = 'Session' 
      | 'Organization';

export type PlatformEventChannelType = 'event' 
      | 'data';

export type PlatformEventPublishBehavior = 'PublishAfterCommit' 
      | 'PublishImmediately';

export type PlatformEventType = 'HighVolume' 
      | 'StandardVolume' 
      | 'ExternalEvent';

export type PlatformSchemaContentType = string;

export type PolicyAction = 'Block' 
      | 'RaiseSessionLevel';

export type PolicyApplicableDuration = 'ParameterBased' 
      | 'Monthly' 
      | 'Weekly';

export type PolicyOutcome = 'Block' 
      | 'FreezeUser' 
      | 'EndSession' 
      | 'Notified' 
      | 'NoAction' 
      | 'TwoFAInitiated' 
      | 'TwoFASucceeded' 
      | 'TwoFADenied' 
      | 'Error' 
      | 'TwoFAInProgress' 
      | 'TwoFARecoverableError' 
      | 'TwoFAFailedGeneralError' 
      | 'TwoFAFailedInvalidCode' 
      | 'TwoFAFailedTooManyAttempts' 
      | 'TwoFAAutomatedSuccess' 
      | 'TwoFAReportedDenied' 
      | 'TwoFANoAction' 
      | 'FailedPasswordLockout' 
      | 'FailedInvalidPassword' 
      | 'ExemptNoAction' 
      | 'MeteringNoAction' 
      | 'MeteringBlock';

export type PortalRoles = 'Executive' 
      | 'Manager' 
      | 'Worker' 
      | 'PersonAccount';

export type PortalType = 'CustomerSuccess' 
      | 'Partner' 
      | 'Network';

export type PortalTypes = 'None' 
      | 'CustomerPortal' 
      | 'Partner' 
      | 'Networks';

export type Possessive = 'None' 
      | 'First' 
      | 'Second';

export type PredictionDefinitionFieldType = 'Source' 
      | 'Target';

export type PredictionDefinitionMode = string;

export type PredictionDefinitionStatus = 'Building' 
      | 'Active' 
      | 'Inactive' 
      | 'ReadyToActivate' 
      | 'Failed' 
      | 'Transitioning';

export type PredictionPlatform = 'Einstein_Discovery' 
      | 'Default' 
      | 'Data_Cloud';

export type PreviewType = 'PDF' 
      | 'Thumbnail';

export type PriceSheetColumnName = string;

export type PriceSheetColumnType = 'Input' 
      | 'Output';

export type PriceSheetDefinitionStatus = 'ReadyToActivate' 
      | 'InActivationQueue' 
      | 'ActivationInProgress' 
      | 'ActivationFailed' 
      | 'Active' 
      | 'Inactive';

export type PriceSheetEntity = string;

export type PricingActionEntities = 'Quote' 
      | 'Order' 
      | 'Contract' 
      | 'SalesAgreement' 
      | 'Case' 
      | 'Opportunity' 
      | 'WorkOrder';

export type PricingElementType = 'ListPrice' 
      | 'AttributeDiscount' 
      | 'VolumeDiscount' 
      | 'BundleDiscount' 
      | 'PriceAdjustmentMatrix' 
      | 'PromotionsDiscount' 
      | 'ListFee' 
      | 'VolumeTierDiscount' 
      | 'ListRate' 
      | 'DerivedPricing';

export type PricingStrategy = 'LowestPrice' 
      | 'Priority';

export type PrivateDomainDefinitionValidationStatus = 'Pending' 
      | 'Validated';

export type ProcessDefinitionState = 'Active' 
      | 'Inactive' 
      | 'Obsolete';

export type ProcessDefinitionType = 'Approval' 
      | 'State' 
      | 'Flow';

export type ProcessSubmitterType = 'group' 
      | 'role' 
      | 'user' 
      | 'roleSubordinates' 
      | 'roleSubordinatesInternal' 
      | 'owner' 
      | 'creator' 
      | 'accountOwner' 
      | 'ownerDelegate' 
      | 'creatorDelegate' 
      | 'accountOwnerDelegate' 
      | 'partnerUser' 
      | 'customerPortalUser' 
      | 'portalRole' 
      | 'portalRoleSubordinates' 
      | 'allInternalUsers';

export type ProcessTriggerType = 'Normal' 
      | 'Automatic' 
      | 'Timed' 
      | 'Pre' 
      | 'Post';

export type ProductFamilyUsageType = string;

export type ProductGrouping = 'VariationParent' 
      | 'NoGrouping';

export type ProductName = 'ServiceCatalog' 
      | 'FinancialServices';

export type PromptDisplayPosition = 'TopLeft' 
      | 'TopCenter' 
      | 'TopRight' 
      | 'BottomLeft' 
      | 'BottomCenter' 
      | 'BottomRight' 
      | 'MiddleLeft' 
      | 'MiddleCenter' 
      | 'MiddleRight';

export type PromptDisplayType = 'DockedComposer' 
      | 'FloatingPanel' 
      | 'Walkthrough' 
      | 'Targeted';

export type PromptElementRelativePosition = 'TopLeft' 
      | 'TopCenter' 
      | 'TopRight' 
      | 'LeftTop' 
      | 'LeftCenter' 
      | 'LeftBottom' 
      | 'RightTop' 
      | 'RightCenter' 
      | 'RightBottom' 
      | 'BottomLeft' 
      | 'BottomCenter' 
      | 'BottomRight';

export type PromptExperience = 'Lightning' 
      | 'Site';

export type PromptImageLocation = 'Top' 
      | 'Bottom' 
      | 'Left' 
      | 'Right';

export type PromptThemeColor = 'Theme1' 
      | 'Theme2' 
      | 'Theme3' 
      | 'Theme4';

export type PromptThemeSaturation = 'Dark' 
      | 'Light';

export type PromptUserAccess = 'Everyone' 
      | 'SpecificPermissions';

export type PromptUserProfileAccess = 'Everyone' 
      | 'SpecificProfiles';

export type PropertyDisplayType = 'Lookup' 
      | 'Picklist' 
      | 'Text' 
      | 'Checkbox' 
      | 'Number' 
      | 'Queue' 
      | 'Date' 
      | 'DateTime';

export type PropertyObjectScope = 'All' 
      | 'Product2' 
      | 'ProductAttribute';

export type ProvInvocationType = 'Flow' 
      | 'ApexHandler';

export type ProviderSearchObjectMapping = 'HealthcareProvider' 
      | 'HealthcarePractitionerFacility';

export type ProvisioningAutomationType = 'Manual' 
      | 'EntitlementOnly' 
      | 'Auto';

export type PublicFolderAccess = 'ReadOnly' 
      | 'ReadWrite';

export type PublicKeyCertificateSetType = 'JWKS' 
      | 'JWKS_URL';

export type PublishStatusType = 'Draft' 
      | 'Published' 
      | 'PendingChanges' 
      | 'Deprecated';

export type QuickActionLabel = 'Custom' 
      | 'LogACall' 
      | 'LogANote' 
      | 'New' 
      | 'NewRecordType' 
      | 'Update' 
      | 'UpdateRecordType' 
      | 'NewChild' 
      | 'NewChildRecordType' 
      | 'CreateNew' 
      | 'CreateNewRecordType' 
      | 'SendEmail' 
      | 'QuickRecordType' 
      | 'Quick' 
      | 'EditDescription' 
      | 'Defer' 
      | 'ChangeDueDate' 
      | 'ChangePriority' 
      | 'ChangeStatus' 
      | 'SocialPost' 
      | 'Escalate' 
      | 'EscalateToRecord' 
      | 'OfferFeedback' 
      | 'RequestFeedback' 
      | 'AddRecord' 
      | 'AddMember' 
      | 'Reply' 
      | 'ReplyAll' 
      | 'Forward' 
      | 'ScheduleAppointment' 
      | 'EnrollInProgram' 
      | 'ModifyAppointment' 
      | 'PatientDetails' 
      | 'AcceptBroadcast' 
      | 'SelectCoverage' 
      | 'ViewCoverage' 
      | 'Quip' 
      | 'SendConversationMessage';

export type QuickActionType = 'Create' 
      | 'VisualforcePage' 
      | 'Post' 
      | 'SendEmail' 
      | 'Email' 
      | 'LogACall' 
      | 'CaseComment' 
      | 'ChangeStatus' 
      | 'SocialPost' 
      | 'Canvas' 
      | 'Update' 
      | 'MobileSmartActions' 
      | 'MobileCreateFull' 
      | 'ChangePriority' 
      | 'ChangeDueDate' 
      | 'LightningComponent' 
      | 'LightningWebComponent' 
      | 'Flow' 
      | 'MobileExtension' 
      | 'Quip' 
      | 'SendConversationMessage';

export type RateLimitTimePeriod = 'Short' 
      | 'Medium';

export type RcmdSourceType = 'Next_Best_Action_Flow' 
      | 'None';

export type RecommendationChannel = 'DefaultChannel' 
      | 'CustomChannel1' 
      | 'CustomChannel2' 
      | 'CustomChannel3' 
      | 'CustomChannel4' 
      | 'CustomChannel5';

export type RecommendationConditionOperator = 'EQUALS' 
      | 'GREATER_THAN' 
      | 'GREATER_THAN_OR_EQUAL_TO' 
      | 'LESS_THAN' 
      | 'LESS_THAN_OR_EQUAL_TO' 
      | 'NOT_EQUALS' 
      | 'LIKE' 
      | 'STARTS_WITH' 
      | 'ENDS_WITH' 
      | 'CONTAINS';

export type RecommendationConditionValueType = 'TEXT' 
      | 'NUMBER' 
      | 'BOOLEAN' 
      | 'DATE' 
      | 'DATE_TIME' 
      | 'TIME';

export type RecordActionType = 'Flow' 
      | 'QuickAction' 
      | 'Omniscript' 
      | 'LWC' 
      | 'WebLink';

export type RecordAggregationDefinitionAggregationType = string;

export type RecordAggregationDefinitionStatus = 'Draft' 
      | 'Active' 
      | 'Inactive';

export type RecordAggregationJoinConditionType = 'AggregateTo' 
      | 'Intermediate' 
      | 'AggregateFrom';

export type RecordAggregationObjectFilterOperator = 'Equals' 
      | 'NotEquals' 
      | 'LessThan' 
      | 'LessThanOrEquals' 
      | 'GreaterThan' 
      | 'GreaterThanOrEquals' 
      | 'Contains' 
      | 'In' 
      | 'NotIn';

export type RecordAlertDataSourceType = 'APEX' 
      | 'BusinessRulesEngine';

export type RecordEditabilityType = 'AdminOnly' 
      | 'AdminOrCurrentApprover';

export type RecordRecommendationType = 'Action' 
      | 'Insight';

export type RecordTriggerType = 'Update' 
      | 'Create' 
      | 'CreateAndUpdate' 
      | 'Delete' 
      | 'None';

export type RecordViewPreference = 'ObjectTypeOnly' 
      | 'RecordName';

export type RecsOutputFieldName = 'Summary' 
      | 'Issue' 
      | 'Resolution';

export type RefDataSourceTypeEnum = 'CommercialBuildingsEnergyConsumptionSurvey' 
      | 'ElectricityMap' 
      | 'InternationalEnergyAgencyData' 
      | 'EnvironmentalProtectionAgencyElectricityData' 
      | 'DepartmentForEnvironmentFoodAndRuralAffairs' 
      | 'DEFRAStationaryFuelConversionFactors' 
      | 'DEFRAMobileFuelConversionFactors' 
      | 'USEnvironmentalProtectionAgency' 
      | 'IntergovernmentalPanelOnClimateChange' 
      | 'USEnvironmentallyExtendedInputOutput' 
      | 'USBureauOfLaborStatistics';

export type ReferenceDataNameEnum = 'BuildingEnergyIntensity' 
      | 'ElectricityEmissionFactor' 
      | 'OtherEFSetRentalCarFreightEF' 
      | 'AirTravelEmissionFactor' 
      | 'HotelStayEmissionFactor' 
      | 'GroundTravelEmissionFactor' 
      | 'RefrigerantEmissionFactor' 
      | 'ProcurementEmissionFactor' 
      | 'InflationRates' 
      | 'WasteDisposalEmissionFactor';

export type RefreshFrequency = 'NO_REFRESH' 
      | 'MONTHLY';

export type RefreshTokenPolicyType = 'Infinite' 
      | 'Zero' 
      | 'SpecificLifetime' 
      | 'SpecificInactivity';

export type RegionFlagStatus = 'disabled' 
      | 'enabled';

export type RegistryProviderType = 'Price' 
      | 'Promotions' 
      | 'Inventory' 
      | 'Shipment' 
      | 'Tax' 
      | 'Extension';

export type RelationshipCardinality = 'OneToOne' 
      | 'ManyToOne';

export type RelationshipType = 'REQUIRES' 
      | 'REQUIRED_BY';

export type ReleaseUpdateStatus = 'Info' 
      | 'Nascent' 
      | 'Pending' 
      | 'Invocable' 
      | 'Revocable' 
      | 'Invoked' 
      | 'Complete';

export type ReleaseUpdateStepStatus = 'Complete' 
      | 'Incomplete' 
      | 'Viewed' 
      | 'Started' 
      | 'New';

export type ReportAggrType = 'Sum' 
      | 'Average' 
      | 'Maximum' 
      | 'Minimum' 
      | 'Unique' 
      | 'RowCount' 
      | 'Median' 
      | 'Noop';

export type ReportAggregateDatatype = 'currency' 
      | 'percent' 
      | 'number';

export type ReportBucketFieldType = 'text' 
      | 'number' 
      | 'picklist';

export type ReportChartSize = 'Tiny' 
      | 'Small' 
      | 'Medium' 
      | 'Large' 
      | 'Huge';

export type ReportFormat = 'MultiBlock' 
      | 'Matrix' 
      | 'Summary' 
      | 'Tabular';

export type ReportFormulaNullTreatment = 'n' 
      | 'z';

export type ReportJobSourceTypes = 'tabular' 
      | 'summary' 
      | 'snapshot';

export type ReportSortType = 'Column' 
      | 'Aggregate' 
      | 'CustomSummaryFormula';

export type ReportStatus = 'NEW' 
      | 'TRAINING' 
      | 'COMPLETED' 
      | 'ERROR' 
      | 'NOT_ENOUGH_DATA_AFTER_PARSING' 
      | 'NOT_ENOUGH_DATA_WITH_CONTACT_REASON' 
      | 'LOW_CLUSTER_QUALITY';

export type ReportSummaryType = 'Sum' 
      | 'Average' 
      | 'Maximum' 
      | 'Minimum' 
      | 'Unique' 
      | 'Median' 
      | 'Noop' 
      | 'None';

export type ReportTypeCategory = 'accounts' 
      | 'opportunities' 
      | 'forecasts' 
      | 'cases' 
      | 'leads' 
      | 'campaigns' 
      | 'activities' 
      | 'busop' 
      | 'products' 
      | 'admin' 
      | 'territory' 
      | 'other' 
      | 'content' 
      | 'usage_entitlement' 
      | 'wdc' 
      | 'calibration' 
      | 'territory2' 
      | 'quotes' 
      | 'individual' 
      | 'employee' 
      | 'data_cloud';

export type ResourceDeploymentStatus = 'Inprogress' 
      | 'Failed' 
      | 'Success' 
      | 'UpdateFailed';

export type RetentionJobStatus = 'CopyScheduled' 
      | 'CopyRunning' 
      | 'CopySucceeded' 
      | 'CopyFailed' 
      | 'CopyKilled' 
      | 'NothingToArchive' 
      | 'NothingToDelete' 
      | 'DeleteNew' 
      | 'DeleteScheduled' 
      | 'DeleteRunning' 
      | 'DeleteSucceeded' 
      | 'DeleteFailed' 
      | 'DeleteKilled';

export type RiskType = 'HIGH_RISK' 
      | 'MEDIUM_RISK' 
      | 'MEETS_STANDARD';

export type RoutingModel = 'LEAST_ACTIVE' 
      | 'MOST_AVAILABLE' 
      | 'EXTERNAL_ROUTING';

export type RoutingOwner = 'Salesforce' 
      | 'Partner';

export type RoutingType = 'Unanimous' 
      | 'FirstResponse';

export type RuleActionType = string;

export type RuleCategory = 'Rewards' 
      | 'CustomerLimit' 
      | 'PromotionLimit' 
      | 'Default';

export type RuleConditionOperator = 'Equals' 
      | 'NotEquals' 
      | 'LessThan' 
      | 'LessThanOrEquals' 
      | 'GreaterThan' 
      | 'GreaterThanOrEquals' 
      | 'Between' 
      | 'IsNotNull' 
      | 'IsNull' 
      | 'Contains' 
      | 'DoesNotContain' 
      | 'In' 
      | 'NotIn';

export type RuleFilterCriteriaType = 'Aggregate' 
      | 'Branch' 
      | 'List' 
      | 'Eligibility' 
      | 'Boolean' 
      | 'Exists' 
      | 'NotExists' 
      | 'Loop';

export type RuleRefVariableDataType = 'Text' 
      | 'Numeric' 
      | 'Date' 
      | 'DateTime' 
      | 'Currency' 
      | 'Boolean' 
      | 'Percent' 
      | 'RecordId' 
      | 'Tuple';

export type RuleRefVariableType = 'Constant' 
      | 'Formula' 
      | 'Tag' 
      | 'Variable' 
      | 'Attribute' 
      | 'Accumulate';

export type RuleStatus = 'Draft' 
      | 'Activated' 
      | 'Deactivated' 
      | 'Verified' 
      | 'ActivationInProgress' 
      | 'DeactivationInProgress';

export type SControlContentSource = 'HTML' 
      | 'URL' 
      | 'Snippet';

export type SamlEncryptionType = 'AES_128' 
      | 'AES_256' 
      | 'Triple_Des';

export type SamlIdentityLocationType = 'SubjectNameId' 
      | 'Attribute';

export type SamlIdentityType = 'Username' 
      | 'FederationId' 
      | 'UserId';

export type SamlIdpSLOBinding = 'RedirectBinding' 
      | 'PostBinding';

export type SamlInitiationMethod = 'None' 
      | 'IdpInitiated' 
      | 'SpInitiated';

export type SamlNameIdFormatType = 'Unspecified' 
      | 'EmailAddress' 
      | 'Persistent' 
      | 'Transient';

export type SamlSigningAlgoType = 'SHA1' 
      | 'SHA256';

export type SamlSpSLOBinding = 'RedirectBinding' 
      | 'PostBinding';

export type SamlSubjectType = 'Username' 
      | 'FederationId' 
      | 'UserId' 
      | 'SpokeId' 
      | 'CustomAttribute' 
      | 'PersistentId';

export type SamlType = 'SAML1_1' 
      | 'SAML2_0';

export type SandboxLicenseType = 'FULL' 
      | 'PARTIAL' 
      | 'DEVELOPER_PRO' 
      | 'DEVELOPER' 
      | 'MIGRATION' 
      | 'ADVANCED_DEV' 
      | 'ADVANCED_FULL' 
      | 'FULL_PLUS';

export type SandboxRefreshAction = 'ACTIVATE' 
      | 'DISCARD';

export type ScheduledProcessStatus = 'PENDING' 
      | 'FINISHED' 
      | 'PROCESSING' 
      | 'FAILED' 
      | 'ACTIVATION_PENDING_CONFIRM' 
      | 'ACTIVATION_CONFIRMED' 
      | 'DEACTIVATION_CONFIRMED' 
      | 'DEACTIVATION_FINISHED' 
      | 'ACTIVATION_PROCESSING' 
      | 'SUSPENDED' 
      | 'OK' 
      | 'NOT_ENABLED' 
      | 'ALREADY_RUN' 
      | 'DELETED' 
      | 'PENDING_DELETE' 
      | 'PENDING_DISCARD' 
      | 'STOPPED' 
      | 'PENDING_ORG_STATUS_UPDATE' 
      | 'SET_TO_NULL' 
      | 'NO_CHANGE' 
      | 'PENDING_RESET' 
      | 'PENDING_DELETE_PARTIAL' 
      | 'SAMPLING' 
      | 'PENDING_SAMPLING' 
      | 'PENDING_REMOTE' 
      | 'REMOTE_CREATED';

export type SchedulingCategory = 'B' 
      | 'A';

export type SchedulingObjectiveType = 'AgentPreference' 
      | 'BalanceShifts' 
      | 'BalanceNonStandardShifts';

export type SchedulingParameterKey = 'L' 
      | 'R' 
      | 'W' 
      | 'T' 
      | 'C' 
      | 'ConsiderAbsence' 
      | 'ConsiderSTM';

export type SchedulingRuleType = 'M' 
      | 'B' 
      | 'W' 
      | 'A' 
      | 'RestTimeMinutes' 
      | 'Q' 
      | 'C' 
      | 'LimitNonstandardShifts';

export type ScoreCategoryRangeType = 'Numeric' 
      | 'Text';

export type ScoreCategoryRelatedObjectType = string;

export type SearchCriteriaConfigurationFilterType = 'GROUPING_AND_AGGREGATION' 
      | 'MULTIPLE_FIELDS';

export type SearchCriteriaConfigurationResultDisplayFormat = 'LIST' 
      | 'CARD';

export type SearchResultActionScope = string;

export type SearchResultActionType = 'FlowDefinition' 
      | 'OmniScript' 
      | 'LightningWebComponent';

export type SegmentationType = 'NO_FILTER' 
      | 'SINGLE_OBJECT_FILTER' 
      | 'CROSS_OBJECT_FILTER';

export type SemanticAggregationType = 'SUM' 
      | 'AVERAGE' 
      | 'MIN' 
      | 'MAX' 
      | 'MEDIAN' 
      | 'COUNT_DISTINCT' 
      | 'COUNT' 
      | 'STDDEV' 
      | 'STDDEVP' 
      | 'VAR' 
      | 'VARP' 
      | 'LAST' 
      | 'FIRST' 
      | 'USER_AGG' 
      | 'NONE';

export type SemanticCalculatedDimensionDataType = 'TEXT' 
      | 'DATE' 
      | 'DATETIME' 
      | 'IMAGE' 
      | 'BOOLEAN' 
      | 'GEO' 
      | 'NUMBER';

export type SemanticCalculatedMeasurementDataType = 'DURATION' 
      | 'NUMBER' 
      | 'PERCENTAGE';

export type SemanticDataObjectType = 'DMO' 
      | 'CIO';

export type SemanticDefinitionType = 'DATA_OBJECT' 
      | 'RELATIONSHIP' 
      | 'CALCULATED_DIMENSION' 
      | 'CALCULATED_MEASUREMENT';

export type SemanticDirectionalityType = 'UP' 
      | 'DOWN';

export type SemanticDisplayType = 'DISCRETE' 
      | 'CONTINUOUS';

export type SemanticGeoRoleType = 'AIRPORT' 
      | 'AREA_CODE' 
      | 'CBSA_MSA' 
      | 'CITY' 
      | 'CONGRESSIONAL' 
      | 'DISTRICT' 
      | 'REGION' 
      | 'COUNTRY' 
      | 'NUTS' 
      | 'LATITUDE' 
      | 'LONGITUDE' 
      | 'PROVINCE' 
      | 'STATE' 
      | 'ZIP_CODE';

export type SemanticModelQueryUnrelatedDataObjectsType = 'EXCEPTION' 
      | 'UNION';

export type SemanticRelationshipJoinType = 'AUTO' 
      | 'LEFT' 
      | 'RIGHT' 
      | 'INNER' 
      | 'FULL';

export type SemanticSortingType = 'ASCENDING' 
      | 'DESCENDING' 
      | 'NONE';

export type SendAction = string;

export type SenderFromDefinitionStatus = 'NotVerified' 
      | 'Verified';

export type SensitiveDataActionType = 'Remove' 
      | 'Replace';

export type SensitiveDataRuleProcessing = 'Persist' 
      | 'RealTime';

export type SensitiveDataRuleVersion = 'ONE' 
      | 'TWO';

export type ServerAuthMode = 'OAuth' 
      | 'None';

export type ServiceAISetupDefStatus = 'FIELDS_SELECTED' 
      | 'TRAINING' 
      | 'READY_TO_ACTIVATE' 
      | 'SERVING' 
      | 'RETIRED' 
      | 'ARCHIVED' 
      | 'READY_FOR_REVIEW' 
      | 'TRAINING_FAILURE';

export type ServiceAISetupFieldType = 'CASE_DESC' 
      | 'CASE_SUBJ' 
      | 'ARTICLE_TITLE' 
      | 'ARTICLE_CONTENT' 
      | 'ARTICLE_SUMMARY' 
      | 'ARTICLE_ANSWER' 
      | 'ARTICLE_QUESTION';

export type ServiceProcessAttributeType = 'Base' 
      | 'Extended';

export type ServiceProcessDataType = 'String' 
      | 'Integer' 
      | 'Boolean' 
      | 'Double' 
      | 'Datetime' 
      | 'Date' 
      | 'Currency' 
      | 'Percentage' 
      | 'ListOfMaps' 
      | 'ListOfInteger' 
      | 'ListOfString' 
      | 'ListOfBoolean' 
      | 'ListOfDouble' 
      | 'Map';

export type ServiceProcessStatus = 'Inactive' 
      | 'Active';

export type SessionSecurityLevel = 'LOW' 
      | 'STANDARD' 
      | 'HIGH_ASSURANCE';

export type SettingRiskCategory = 'HIGH_RISK' 
      | 'MEDIUM_RISK' 
      | 'LOW_RISK' 
      | 'INFORMATIONAL';

export type SetupObjectVisibility = 'PackageProtected' 
      | 'Protected' 
      | 'Public';

export type ShareInChannelPreference = 'DoNotShareData' 
      | 'PreviewButtonOnly' 
      | 'TypeAndPreviewButton' 
      | 'DetailsAsDefaultRenderUser' 
      | 'NameTypeAndPreviewButton' 
      | 'DetailsAsRealUser';

export type SharingModel = 'Private' 
      | 'Read' 
      | 'ReadSelect' 
      | 'ReadWrite' 
      | 'ReadWriteTransfer' 
      | 'FullAccess' 
      | 'ControlledByParent' 
      | 'ControlledByLeadOrContact' 
      | 'ControlledByCampaign';

export type ShiftSegmentTypeCategory = 'Work' 
      | 'Break' 
      | 'NonWork';

export type SiteClickjackProtectionLevel = 'AllowAllFraming' 
      | 'External' 
      | 'SameOriginOnly' 
      | 'NoFraming';

export type SiteRedirect = 'Permanent' 
      | 'Temporary';

export type SiteType = 'Siteforce' 
      | 'Visualforce' 
      | 'ChatterNetwork' 
      | 'ChatterNetworkPicasso';

export type SitesArchiveStatus = 'TemporarilyArchived' 
      | 'Archived' 
      | 'NotArchived';

export type SlackAssociationType = 'EnabledForSearch' 
      | 'EnabledForChannel';

export type SlackContextType = 'enterprise' 
      | 'team' 
      | 'all_workspaces';

export type SlackRecordLayoutViewMode = 'recordcrud' 
      | 'urlunfurling';

export type SortOrder = 'Asc' 
      | 'Desc';

export type SourceSystemFieldRole = 'NotApplicable' 
      | 'Patient' 
      | 'ServiceProvider' 
      | 'RemoteMonitoringPatient' 
      | 'RemoteMonitoringDevice';

export type SplitDataStatus = 'Ready' 
      | 'ToBeInserted' 
      | 'ToBeDeleted' 
      | 'InsertionFailed' 
      | 'DeletionFailed' 
      | 'ToBeInsertedAndActivated' 
      | 'InsertionAndActivationFailed';

export type StandardConversationVariable = '_LastCustomerInput' 
      | '_ReferrerBotId' 
      | '_AnswerInput' 
      | '_AnswerResults' 
      | '_CurrentConversationLanguage' 
      | '_AmbiguousTargets' 
      | '_AmbiguousInput';

export type StartsWith = 'Consonant' 
      | 'Vowel' 
      | 'Special';

export type StaticResourceCacheControl = 'Private' 
      | 'Public';

export type StationaryAssetType = 'CommercialBuilding' 
      | 'DataCenter';

export type Status = 'Completed' 
      | 'Error';

export type StatusCapacityType = 'TabBasedOnly' 
      | 'StatusBasedOnly' 
      | 'Mixed';

export type StepCriteriaNotMetType = 'ApproveRecord' 
      | 'RejectRecord' 
      | 'GotoNextStep';

export type StepRejectBehaviorType = 'RejectRequest' 
      | 'BackToPrevious';

export type StorageDriveType = string;

export type StrategyNodeMdType = 'UNION' 
      | 'FILTER' 
      | 'IF' 
      | 'RECOMMENDATION_LIMIT' 
      | 'MUTUALLY_EXCLUSIVE' 
      | 'SORT' 
      | 'PROPOSITION_LOAD' 
      | 'INVOCABLE_ACTION' 
      | 'MAP' 
      | 'AI_SORT' 
      | 'AI_LOAD';

export type StrategyReactionType = 'Accepted' 
      | 'Rejected';

export type SubscriberPackageVersionInstallRequestStatus = 'Queued' 
      | 'InProgress' 
      | 'Success' 
      | 'Error';

export type SubscriberPackageVersionUninstallRequestStatus = 'Queued' 
      | 'InProgress' 
      | 'Success' 
      | 'Error';

export type SummaryLayoutStyle = 'Default' 
      | 'QuoteTemplate' 
      | 'DefaultQuoteTemplate' 
      | 'ServiceReportTemplate' 
      | 'ChildServiceReportTemplateStyle' 
      | 'DefaultServiceReportTemplate' 
      | 'CaseInteraction' 
      | 'QuickActionLayoutLeftRight' 
      | 'QuickActionLayoutTopDown' 
      | 'PathAssistant';

export type SummaryOperations = 'count' 
      | 'sum' 
      | 'min' 
      | 'max';

export type SupervisorAgentStatusFilter = 'Online' 
      | 'Away' 
      | 'Offline';

export type SurveyQuestionType = 'MultiChoice' 
      | 'RadioButton' 
      | 'FreeText' 
      | 'Date' 
      | 'Rating' 
      | 'CSAT' 
      | 'Slider' 
      | 'Picklist' 
      | 'NPS' 
      | 'StackRank' 
      | 'Currency' 
      | 'Number' 
      | 'DateTime' 
      | 'Toggle' 
      | 'MultiSelectPicklist' 
      | 'Image' 
      | 'Boolean' 
      | 'ShortText' 
      | 'Attachment' 
      | 'Matrix';

export type SvcCatalogItemAttrDataType = 'Attachment' 
      | 'Checkbox' 
      | 'Currency' 
      | 'Date' 
      | 'Datetime' 
      | 'DisplayText' 
      | 'Email' 
      | 'IPAddress' 
      | 'Integer' 
      | 'Lookup' 
      | 'ListOfBoolean' 
      | 'ListOfDouble' 
      | 'ListOfInteger' 
      | 'ListOfMaps' 
      | 'ListOfString' 
      | 'MultilineText' 
      | 'Map' 
      | 'Number' 
      | 'NumericScale' 
      | 'Picklist' 
      | 'Percentage' 
      | 'Queue' 
      | 'SingleCheckbox' 
      | 'SinglelineText' 
      | 'Text' 
      | 'Toggle' 
      | 'URL';

export type SvcCatalogItemAttrType = 'FulfillmentInput' 
      | 'UserQuestion';

export type SvcCatalogItemDependencyType = 'PreprocessorApexClass' 
      | 'FlowDefinition' 
      | 'IntegrationProviderDef' 
      | 'OmniScriptConfig';

export type SvcCatalogItemUsageType = 'Employee' 
      | 'CustomerService' 
      | 'Industry' 
      | 'FinancialServices';

export type SvcCatalogItemVersionStatus = 'Draft' 
      | 'Active' 
      | 'Obsolete';

export type SvcCtlgItemAttrAttributeType = 'Base' 
      | 'Extended';

export type SymbolVisibility = 'Global' 
      | 'Public' 
      | 'Private' 
      | 'Protected';

export type TabSetType = 'AllTabSet' 
      | 'UserDefined' 
      | 'Salesforce' 
      | 'Supportforce' 
      | 'Marketing' 
      | 'AulDefault' 
      | 'Portal' 
      | 'Content' 
      | 'Ideas' 
      | 'Community' 
      | 'CustomerLpu' 
      | 'PlatformLpu' 
      | 'InternalLpu' 
      | 'Collaboration' 
      | 'UserDefinedServicedesk' 
      | 'SampleServiceCloudConsole' 
      | 'Sites' 
      | 'LicensingAndProvisioning' 
      | 'Network' 
      | 'ProfilePlatform' 
      | 'ProfilePlatformOthers' 
      | 'EnvironmentHub' 
      | 'ProfilePlatformNetworks' 
      | 'ProfilePlatformNetworksOthers' 
      | 'Work' 
      | 'AppLauncher' 
      | 'Insights' 
      | 'LightningSales' 
      | 'DataAssessment' 
      | 'LightningSalesConsole' 
      | 'LightningService' 
      | 'B2BMarketingAutomation' 
      | 'EinsteinDataDiscovery' 
      | 'LightningBolt' 
      | 'LightningInstrumentation' 
      | 'HVSConsole' 
      | 'PardotAppV1' 
      | 'Commerce' 
      | 'OMConsole' 
      | 'LightningScheduler' 
      | 'SalesforceCMS' 
      | 'Retail' 
      | 'SecurityHub' 
      | 'InsuranceConsole' 
      | 'MarketingCloud2' 
      | 'LightningEssentialsConsole' 
      | 'Audience360' 
      | 'Manufacturing' 
      | 'Optimizer' 
      | 'OSL' 
      | 'LightningEssentials' 
      | 'PublicSector' 
      | 'MedicalDevices' 
      | 'B2CCommerce' 
      | 'LoyaltyManagement' 
      | 'EmployeeExperience' 
      | 'EssentialsMobile' 
      | 'OnlineSales' 
      | 'ThreatDetection' 
      | 'Isotope' 
      | 'PreconfiguredLightningServiceConsole' 
      | 'BranchManagementConsole' 
      | 'TrustCard' 
      | 'QueueManagement' 
      | 'InventoryConsole' 
      | 'DataManager' 
      | 'PrivacyAnalytics' 
      | 'EssentialsApp' 
      | 'RetailOnBrowser' 
      | 'PrivacyPreferenceCenter' 
      | 'PublicSectorInspectionManagement' 
      | 'DataCloud' 
      | 'WorkforceEngagementConfiguration' 
      | 'IndustriesSustainability' 
      | 'EventMonitoring' 
      | 'RevenueCloudConsole' 
      | 'ProgramManagementConsole' 
      | 'PublicSectorChildWelfareConsole' 
      | 'MulesoftDataPath' 
      | 'ExpressionSetConsole' 
      | 'PaymentsManagement' 
      | 'ServiceExcellenceConsole' 
      | 'IndustriesEpc' 
      | 'AdvancedTherapyManagement' 
      | 'ManufacturingServiceConsole' 
      | 'UMPayersConsole' 
      | 'AutomotiveServiceConsole' 
      | 'UnifiedMarketing' 
      | 'Automotive' 
      | 'GenericVisits' 
      | 'PartnerVisits' 
      | 'IndustriesGdf' 
      | 'WarrantyLifecycleMgmt' 
      | 'CrisisCenter' 
      | 'SalesExcellenceConsole' 
      | 'ContactCenter' 
      | 'CommsMsmServiceConsole' 
      | 'RecruitmentAndAdmissions' 
      | 'Grantmaking' 
      | 'EasyConsole' 
      | 'HomeHealth' 
      | 'PriceManagement' 
      | 'SalesforceContracts' 
      | 'StudentSuccess' 
      | 'Onboarding' 
      | 'ReferralConsole' 
      | 'RuntimeIndustriesRecordAlert' 
      | 'PhilanthropyAndPartnerships' 
      | 'FundraisingOperationsConsole' 
      | 'SalesforceHub' 
      | 'FundraisingStrategy' 
      | 'DonorEngagement' 
      | 'Alumni' 
      | 'AcademicOperations' 
      | 'BehavioralHealth' 
      | 'AutomotiveFinanceConsole' 
      | 'OutcomeManagementConsole' 
      | 'PromotionStudio' 
      | 'Personalization' 
      | 'CommerceStarter' 
      | 'EasySales' 
      | 'EasyService' 
      | 'EasyHome' 
      | 'EasyOutreach' 
      | 'EasyMarketing' 
      | 'ICMConsole' 
      | 'DigitalLending' 
      | 'SfiAdsCalendarView' 
      | 'PrivacyCenterConsole' 
      | 'Mentoring' 
      | 'EUProgramManagerConsole' 
      | 'ChannelManagementConsole' 
      | 'EventOrchestrationConsole' 
      | 'RemoteDataCloud' 
      | 'ReferralManagement' 
      | 'FlowsApp' 
      | 'BenefitManagementApp';

export type TabVisibility = 'Hidden' 
      | 'DefaultOff' 
      | 'DefaultOn';

export type TargetEntityMatchType = string;

export type TargetObject = 'All' 
      | 'Contract' 
      | 'DocumentTemplate' 
      | 'Disclosure';

export type TargetTokenItemObject = 'OPPORTUNITY_LINE_ITEM' 
      | 'ORDER_LINE_ITEM' 
      | 'QUOTE_LINE_ITEM';

export type TargetTokenObject = 'CONTRACT' 
      | 'OPPORTUNITY' 
      | 'ORDER' 
      | 'QUOTE';

export type TaxLocaleType = 'Net' 
      | 'Gross';

export type TaxTypes = 'Actual' 
      | 'Estimated';

export type TeamMemberHierarchyType = 'ManagerHierarchy' 
      | 'ForecastsHierarchy';

export type Template = 'Page' 
      | 'Tab' 
      | 'Toc';

export type TemplateDeploymentAction = 'Created' 
      | 'Updated' 
      | 'Deleted' 
      | 'Unchanged';

export type TimeSheetFrequency = 'Daily' 
      | 'Weekly' 
      | 'EveryTwoWeeks' 
      | 'TwiceAMonth' 
      | 'Monthly';

export type TokenMappingMethodType = 'OmniDataTransform' 
      | 'CustomClass';

export type TokenMappingType = 'JSON' 
      | 'SalesforceObject';

export type TraceFlagType = 'USER_DEBUG' 
      | 'DEVELOPER_LOG' 
      | 'CLASS_TRACING' 
      | 'PROFILING';

export type TransactionSecurityEventName = 'ReportEvent' 
      | 'ApiEvent' 
      | 'AdminSetupEvent' 
      | 'LoginEvent' 
      | 'ListViewEvent' 
      | 'CredentialStuffingEventStore' 
      | 'ReportAnomalyEventStore' 
      | 'SessionHijackingEventStore' 
      | 'ApiAnomalyEventStore' 
      | 'BulkApiResultEventStore' 
      | 'PermissionSetEventStore' 
      | 'FileEventStore' 
      | 'GuestUserAnomalyEventStore';

export type TransactionSecurityOperator = 'Equal' 
      | 'NotEqual' 
      | 'LessThan' 
      | 'GreaterThan' 
      | 'LessThanOrEqualTo' 
      | 'GreaterThanOrEqualTo' 
      | 'Contain' 
      | 'NotContain' 
      | 'StartsWith' 
      | 'EndsWith' 
      | 'ChangesWithin';

export type TransactionSecurityRelation = 'MatchAll' 
      | 'MatchAny' 
      | 'MatchNone';

export type TransactionSecurityValueType = 'String' 
      | 'Integer' 
      | 'DateTime' 
      | 'Boolean' 
      | 'Double';

export type TranslationAspect = 'Master' 
      | 'RelationshipLabel' 
      | 'Description' 
      | 'Help' 
      | 'NameFieldLabel' 
      | 'ErrorMessage' 
      | 'InfoMessage' 
      | 'PausedText' 
      | 'InputLabel' 
      | 'NextOrFinishLabel' 
      | 'BackLabel' 
      | 'PauseLabel' 
      | 'FirstName' 
      | 'LastName' 
      | 'MiddleName' 
      | 'Salutation' 
      | 'Suffix' 
      | 'InformalName' 
      | 'Title' 
      | 'Phone' 
      | 'Email' 
      | 'Address' 
      | 'Street' 
      | 'City' 
      | 'State' 
      | 'StateCode' 
      | 'PostalCode' 
      | 'Country' 
      | 'CountryCode' 
      | 'Latitude' 
      | 'Longitude' 
      | 'Body' 
      | 'Summary' 
      | 'Url' 
      | 'ActionButtonLink' 
      | 'ActionButtonLabel' 
      | 'DismissButtonLabel' 
      | 'Header' 
      | 'VideoLink' 
      | 'ImageAltText' 
      | 'ImageLink' 
      | 'Custom' 
      | 'DefaultValue' 
      | 'Version' 
      | 'AttributeName' 
      | 'UsageType' 
      | 'ProcessName' 
      | 'GroupName' 
      | 'Label';

export type TreatBlanksAs = 'BlankAsBlank' 
      | 'BlankAsZero';

export type TxnSecurityPolicyState = 'Disabled' 
      | 'Enabled';

export type TxnSecurityPolicyType = 'CustomApexPolicy' 
      | 'CustomConditionBuilderPolicy';

export type TypeOfAction = 'Add' 
      | 'Edit' 
      | 'Delete';

export type UddFormulaType = 'VALIDATION' 
      | 'VISUALFORCE' 
      | 'FLOW' 
      | 'CONVERSATION_MESSAGE' 
      | 'LOYALTYFORMULA';

export type UiBehavior = 'Edit' 
      | 'Required' 
      | 'Readonly';

export type UiLoginFlowType = 'VisualWorkFlow' 
      | 'VisualForce';

export type UiType = 'Aloha' 
      | 'Lightning';

export type UnitType = 'Volume' 
      | 'Weight' 
      | 'Energy' 
      | 'Other';

export type UsageTag = 'NONE' 
      | 'KEY_QUALIFIER';

export type UserAccessPolicyActionTargetType = 'PermissionSet' 
      | 'PermissionSetGroup' 
      | 'PermissionSetLicense' 
      | 'PackageLicense' 
      | 'Group' 
      | 'Queue';

export type UserAccessPolicyActionType = 'Grant' 
      | 'Revoke';

export type UserAccessPolicyFilterOperation = 'equals' 
      | 'equalsIgnoreCase' 
      | 'notEquals' 
      | 'in' 
      | 'includes';

export type UserAccessPolicyFilterTargetType = 'Group' 
      | 'Queue' 
      | 'PermissionSet' 
      | 'PermissionSetGroup' 
      | 'PermissionSetLicense' 
      | 'Profile' 
      | 'UserRole' 
      | 'PackageLicense' 
      | 'User';

export type UserAccessPolicyStatus = 'Design' 
      | 'Testing' 
      | 'Migrate' 
      | 'Updating' 
      | 'Failed' 
      | 'Active' 
      | 'Completed';

export type UserAccessPolicyTriggerType = 'Create' 
      | 'Update' 
      | 'CreateAndUpdate';

export type UserDateGranularity = 'None' 
      | 'Day' 
      | 'Week' 
      | 'Month' 
      | 'Quarter' 
      | 'Year' 
      | 'FiscalQuarter' 
      | 'FiscalYear' 
      | 'MonthInYear' 
      | 'DayInMonth' 
      | 'FiscalPeriod' 
      | 'FiscalWeek';

export type UserDateInterval = 'INTERVAL_CURRENT' 
      | 'INTERVAL_CURNEXT1' 
      | 'INTERVAL_CURPREV1' 
      | 'INTERVAL_NEXT1' 
      | 'INTERVAL_PREV1' 
      | 'INTERVAL_CURNEXT3' 
      | 'INTERVAL_CURFY' 
      | 'INTERVAL_PREVFY' 
      | 'INTERVAL_PREV2FY' 
      | 'INTERVAL_AGO2FY' 
      | 'INTERVAL_NEXTFY' 
      | 'INTERVAL_PREVCURFY' 
      | 'INTERVAL_PREVCUR2FY' 
      | 'INTERVAL_CURNEXTFY' 
      | 'INTERVAL_CUSTOM' 
      | 'INTERVAL_YESTERDAY' 
      | 'INTERVAL_TODAY' 
      | 'INTERVAL_TOMORROW' 
      | 'INTERVAL_LASTWEEK' 
      | 'INTERVAL_THISWEEK' 
      | 'INTERVAL_NEXTWEEK' 
      | 'INTERVAL_LASTMONTH' 
      | 'INTERVAL_THISMONTH' 
      | 'INTERVAL_NEXTMONTH' 
      | 'INTERVAL_LASTTHISMONTH' 
      | 'INTERVAL_THISNEXTMONTH' 
      | 'INTERVAL_CURRENTQ' 
      | 'INTERVAL_CURNEXTQ' 
      | 'INTERVAL_CURPREVQ' 
      | 'INTERVAL_NEXTQ' 
      | 'INTERVAL_PREVQ' 
      | 'INTERVAL_CURNEXT3Q' 
      | 'INTERVAL_CURY' 
      | 'INTERVAL_PREVY' 
      | 'INTERVAL_PREV2Y' 
      | 'INTERVAL_AGO2Y' 
      | 'INTERVAL_NEXTY' 
      | 'INTERVAL_PREVCURY' 
      | 'INTERVAL_PREVCUR2Y' 
      | 'INTERVAL_CURNEXTY' 
      | 'INTERVAL_LAST7' 
      | 'INTERVAL_LAST30' 
      | 'INTERVAL_LAST60' 
      | 'INTERVAL_LAST90' 
      | 'INTERVAL_LAST120' 
      | 'INTERVAL_NEXT7' 
      | 'INTERVAL_NEXT30' 
      | 'INTERVAL_NEXT60' 
      | 'INTERVAL_NEXT90' 
      | 'INTERVAL_NEXT120' 
      | 'LAST_FISCALWEEK' 
      | 'THIS_FISCALWEEK' 
      | 'NEXT_FISCALWEEK' 
      | 'LAST_FISCALPERIOD' 
      | 'THIS_FISCALPERIOD' 
      | 'NEXT_FISCALPERIOD' 
      | 'LASTTHIS_FISCALPERIOD' 
      | 'THISNEXT_FISCALPERIOD' 
      | 'CURRENT_ENTITLEMENT_PERIOD' 
      | 'PREVIOUS_ENTITLEMENT_PERIOD' 
      | 'PREVIOUS_TWO_ENTITLEMENT_PERIODS' 
      | 'TWO_ENTITLEMENT_PERIODS_AGO' 
      | 'CURRENT_AND_PREVIOUS_ENTITLEMENT_PERIOD' 
      | 'CURRENT_AND_PREVIOUS_TWO_ENTITLEMENT_PERIODS';

export type UtilizationFactor = 'TotalAppointmentDuration' 
      | 'NumberOfAppointments';

export type VariableValueType = 'Literal' 
      | 'Expression' 
      | 'ReferenceRecord' 
      | 'RuleReferenceVariable' 
      | 'Path';

export type VehicleAssetType = 'FleetVehicle' 
      | 'PrivateJet';

export type Vendor = string;

export type VerticalAlignment = 'top' 
      | 'center' 
      | 'bottom';

export type ViewTargetType = string;

export type VirtualVisitComprehendServiceType = 'ComprehendService' 
      | 'ComprehendMedicalService';

export type VirtualVisitUsageType = 'CHIME' 
      | 'INTELLIGENT_FORM_READER' 
      | 'SENTIMENT_ANALYSIS' 
      | 'KEY_PHRASE_EXTRACTION' 
      | 'ENTITY_DETECTION';

export type VirtualVisitVisitRegion = 'us-east-1' 
      | 'us-east-2' 
      | 'us-west-1' 
      | 'us-west-2' 
      | 'af-south-1' 
      | 'ap-east-1' 
      | 'ap-south-1' 
      | 'ap-northeast-1' 
      | 'ap-northeast-2' 
      | 'ap-northeast-3' 
      | 'ap-southeast-1' 
      | 'ap-southeast-2' 
      | 'ca-central-1' 
      | 'eu-central-1' 
      | 'eu-west-1' 
      | 'eu-west-2' 
      | 'eu-west-3' 
      | 'eu-south-1' 
      | 'eu-north-1' 
      | 'me-south-1' 
      | 'sa-east-1';

export type VisibilityOperationStatus = 'New' 
      | 'Completed' 
      | 'InProgress' 
      | 'Deferred' 
      | 'Error' 
      | 'Recovering' 
      | 'Recovered';

export type VisibilityOperationType = 'ActivateTerritoryModel' 
      | 'AddGroupMember' 
      | 'AddTerritory' 
      | 'AddUser' 
      | 'AddUserRole' 
      | 'AddUserTerritory' 
      | 'ArchiveTerritoryModel' 
      | 'DeleteGroup' 
      | 'DeleteMemberFromGroup' 
      | 'DeleteTerritory' 
      | 'DeleteUserFromGroup' 
      | 'DeleteUserRole' 
      | 'DeleteUserTerritory' 
      | 'DisableCommunityUser' 
      | 'MergeAccounts' 
      | 'PopulateGroup' 
      | 'RecalculateGroupMembership' 
      | 'RecalculateSharingRules' 
      | 'ReenableTerritoryManagement' 
      | 'TransferAccountOwnership' 
      | 'TransferOpportunityOwnership' 
      | 'TransferUserTerritory' 
      | 'UpdateCommunityContact' 
      | 'UpdateGroup' 
      | 'UpdateGroupMembers' 
      | 'UpdateRoleForUser' 
      | 'UpdateTerritory' 
      | 'UpdateUser' 
      | 'UpdateUserRole';

export type VisibleOrRequired = 'VisibleOptional' 
      | 'VisibleRequired' 
      | 'NotVisible';

export type VisualizationResourceType = 'js' 
      | 'css';

export type VoiceProviderType = 'Twilio' 
      | 'Custom' 
      | 'TwilioTrial' 
      | 'ContactCenter' 
      | 'RingCentral' 
      | 'DialPad' 
      | 'AmazonConnect' 
      | 'AirCall';

export type WebLinkAvailability = 'online' 
      | 'offline';

export type WebLinkDisplayType = 'link' 
      | 'button' 
      | 'massActionButton';

export type WebStoreType = 'B2B' 
      | 'B2C' 
      | 'B2CE';

export type WorkOrderDurationSource = 'WorkType' 
      | 'TotalFromWorkPlan' 
      | 'Custom';

export type WorkflowActionType = 'FieldUpdate' 
      | 'KnowledgePublish' 
      | 'Task' 
      | 'Alert' 
      | 'Send' 
      | 'OutboundMessage' 
      | 'FlowAction';

export type WorkflowFilterType = 'RuleFilter' 
      | 'Formula';

export type WorkflowTimeTriggerTypes = 'RelativeTime' 
      | 'SpecificTime';

export type WorkflowTimeUnits = 'Hours' 
      | 'Days';

export type WorkflowTriggerTypes = 'onCreateOnly' 
      | 'onCreateOrTriggeringUpdate' 
      | 'onAllChanges' 
      | 'OnRecursiveUpdate';

export type ZeroDeploymentStatus = 'Created' 
      | 'Initialized' 
      | 'SigningUp' 
      | 'SignedUp' 
      | 'Deploying' 
      | 'Deployed' 
      | 'Failed' 
      | 'Terminated';

export type ExceptionCode = 'ACCOUNT_NOT_SUPPORTED' 
      | 'ADAPTER_ERROR' 
      | 'ADAPTER_VALIDATION_EXCEPTION' 
      | 'APEX_REST_SERVICES_DISABLED' 
      | 'APEX_TRIGGER_COUPLING_LIMIT' 
      | 'API_CURRENTLY_DISABLED' 
      | 'API_DISABLED_FOR_ORG' 
      | 'ARGUMENT_OBJECT_PARSE_ERROR' 
      | 'ASYNC_OPERATION_LOCATOR' 
      | 'ASYNC_QUERY_UNSUPPORTED_QUERY' 
      | 'BAD_REQUEST' 
      | 'BATCH_PROCESSING_HALTED' 
      | 'BIG_OBJECT_UNSUPPORTED_OPERATION' 
      | 'BILLING_ENTITIES_NO_ACCESS' 
      | 'BUYER_ACCOUNT_NOT_FOUND' 
      | 'CANNOT_DELETE_ENTITY' 
      | 'CANNOT_DELETE_OWNER' 
      | 'CANT_ADD_STANDADRD_PORTAL_USER_TO_TERRITORY' 
      | 'CANT_ADD_STANDARD_PORTAL_USER_TO_TERRITORY' 
      | 'CATEGORY_NOT_FOUND' 
      | 'CIRCULAR_OBJECT_GRAPH' 
      | 'CLIENT_NOT_ACCESSIBLE_FOR_USER' 
      | 'CLIENT_REQUIRE_UPDATE_FOR_USER' 
      | 'CLONE_FIELD_INTEGRITY_EXCEPTION' 
      | 'CLONE_NOT_SUPPORTED' 
      | 'COMMERCE_ADMIN_MISCONFIGURATION' 
      | 'CONFIG_PUBLISH_FAILED' 
      | 'CONTENT_ALREADY_AN_ASSET_EXCEPTION' 
      | 'CONTENT_CUSTOM_DOWNLOAD_EXCEPTION' 
      | 'CONTENT_HUB_AUTHENTICATION_EXCEPTION' 
      | 'CONTENT_HUB_FILE_DOWNLOAD_EXCEPTION' 
      | 'CONTENT_HUB_FILE_HAS_NO_URL_EXCEPTION' 
      | 'CONTENT_HUB_FILE_NOT_FOUND_EXCEPTION' 
      | 'CONTENT_HUB_INVALID_OBJECT_TYPE_EXCEPTION' 
      | 'CONTENT_HUB_INVALID_PAGE_NUMBER_EXCEPTION' 
      | 'CONTENT_HUB_INVALID_PAYLOAD' 
      | 'CONTENT_HUB_INVALID_RENDITION_PAGE_NUMBER_EXCEPTION' 
      | 'CONTENT_HUB_ITEM_TYPE_NOT_FOUND_EXCEPTION' 
      | 'CONTENT_HUB_OBJECT_NOT_FOUND_EXCEPTION' 
      | 'CONTENT_HUB_OPERATION_NOT_SUPPORTED_EXCEPTION' 
      | 'CONTENT_HUB_SECURITY_EXCEPTION' 
      | 'CONTENT_HUB_TIMEOUT_EXCEPTION' 
      | 'CONTENT_HUB_UNEXPECTED_EXCEPTION' 
      | 'CONTENT_IMAGE_SCALING_INVALID_ARGUMENTS_EXCEPTION' 
      | 'CONTENT_IMAGE_SCALING_INVALID_IMAGE_EXCEPTION' 
      | 'CONTENT_IMAGE_SCALING_MAX_RENDITIONS_EXCEPTION' 
      | 'CONTENT_IMAGE_SCALING_TIMEOUT_EXCEPTION' 
      | 'CONTENT_IMAGE_SCALING_UNKNOWN_EXCEPTION' 
      | 'CUSTOM_METADATA_LIMIT_EXCEEDED' 
      | 'CUSTOM_SETTINGS_LIMIT_EXCEEDED' 
      | 'DATACLOUD_API_CLIENT_EXCEPTION' 
      | 'DATACLOUD_API_DISABLED_EXCEPTION' 
      | 'DATACLOUD_API_INVALID_QUERY_EXCEPTION' 
      | 'DATACLOUD_API_SERVER_BUSY_EXCEPTION' 
      | 'DATACLOUD_API_SERVER_EXCEPTION' 
      | 'DATACLOUD_API_TIMEOUT_EXCEPTION' 
      | 'DATACLOUD_API_UNAVAILABLE' 
      | 'DATA_INTEGRATION_INPUT_ERROR' 
      | 'DATA_INTEGRATION_NOT_FOUND' 
      | 'DATA_INTEGRATION_NO_ACCESS' 
      | 'DATA_INTEGRATION_PACKAGE_ERROR' 
      | 'DATA_INTEGRATION_SERVER_ERROR' 
      | 'DATA_INTEGRATION_VENDOR_SETUP_ERROR' 
      | 'DEPENDENCY_API_UNSUPPORTED_EXCEPTION' 
      | 'DUPLICATE_ARGUMENT_VALUE' 
      | 'DUPLICATE_VALUE' 
      | 'EASY_ROUTING_CREATION_NOT_ALLOWED' 
      | 'EMAIL_BATCH_SIZE_LIMIT_EXCEEDED' 
      | 'EMAIL_TO_CASE_INVALID_ROUTING' 
      | 'EMAIL_TO_CASE_LIMIT_EXCEEDED' 
      | 'EMAIL_TO_CASE_NOT_ENABLED' 
      | 'ENTITY_NOT_QUERYABLE' 
      | 'ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT' 
      | 'ERROR_CREATING_BUYER_GROUP_MEMBER' 
      | 'ERROR_ENABLING_BUYER' 
      | 'EXCEEDED_ID_LIMIT' 
      | 'EXCEEDED_LEAD_CONVERT_LIMIT' 
      | 'EXCEEDED_MAX_FILTER_ENTITIES' 
      | 'EXCEEDED_MAX_SEMIJOIN_SUBSELECTS' 
      | 'EXCEEDED_MAX_SIZE_REQUEST' 
      | 'EXCEEDED_MAX_SOBJECTS' 
      | 'EXCEEDED_MAX_TYPES_LIMIT' 
      | 'EXCEEDED_QUOTA' 
      | 'EXTERNAL_OBJECT_AUTHENTICATION_EXCEPTION' 
      | 'EXTERNAL_OBJECT_CONNECTION_EXCEPTION' 
      | 'EXTERNAL_OBJECT_EXCEPTION' 
      | 'EXTERNAL_OBJECT_UNSUPPORTED_EXCEPTION' 
      | 'EXTERNAL_SERVICE_AUTHENTICATION_EXCEPTION' 
      | 'EXTERNAL_SERVICE_CONNECTION_EXCEPTION' 
      | 'EXTERNAL_SERVICE_DATA_EXCEPTION' 
      | 'EXTERNAL_SERVICE_EXCEPTION' 
      | 'EXTERNAL_SERVICE_INVALID_STATE_EXCEPTION' 
      | 'EXTERNAL_SERVICE_UNSUPPORTED_EXCEPTION' 
      | 'FEDERATED_SEARCH_ERROR' 
      | 'FEED_NOT_ENABLED_FOR_OBJECT' 
      | 'FUNCTIONALITY_NOT_ENABLED' 
      | 'FUNCTIONALITY_TEMPORARILY_UNAVAILABLE' 
      | 'GMAIL_ROUTING_CREATION_NOT_ALLOWED' 
      | 'GONE' 
      | 'GUEST_BUYER_PROFILE_NOT_SET' 
      | 'GUEST_CHECKOUT_NOT_SUPPORTED' 
      | 'IAS_NOT_FOUND' 
      | 'IAS_TIMEOUT_EXCEPTION' 
      | 'IDEMPOTENCY_AUTHENTICATION_FAILED' 
      | 'IDEMPOTENCY_BACKEND_CONNECTION_TIMEOUT' 
      | 'IDEMPOTENCY_BACKEND_OPERATION_ERROR' 
      | 'IDEMPOTENCY_CONCURRENT_REQUEST' 
      | 'IDEMPOTENCY_FEATURE_NOT_ENABLED' 
      | 'IDEMPOTENCY_KEY_ALREADY_USED' 
      | 'IDEMPOTENCY_KEY_USED_DIFFERENT_USER' 
      | 'IDEMPOTENCY_NOT_SUPPORTED' 
      | 'ID_REQUIRED' 
      | 'ILLEGAL_QUERY_PARAMETER_VALUE' 
      | 'INACTIVE_OWNER_OR_USER' 
      | 'INACTIVE_PORTAL' 
      | 'INDEX_NOT_FOUND' 
      | 'INSERT_UPDATE_DELETE_NOT_ALLOWED_DURING_MAINTENANCE' 
      | 'INSTALL_KEY_INVALID' 
      | 'INSTALL_KEY_REQUIRED' 
      | 'INSUFFICIENT_ACCESS' 
      | 'INSUFFICIENT_ACCESS_APEX_METADATA_DEPLOY' 
      | 'INTERNAL_CANVAS_ERROR' 
      | 'INTERNAL_ERROR' 
      | 'INTERNAL_SERVER_ERROR' 
      | 'INVALID_ACCOUNTING_SET' 
      | 'INVALID_ASSIGNMENT_RULE' 
      | 'INVALID_AUTH_HEADER' 
      | 'INVALID_BATCH_REQUEST' 
      | 'INVALID_BATCH_SIZE' 
      | 'INVALID_CLIENT' 
      | 'INVALID_CROSS_REFERENCE_KEY' 
      | 'INVALID_DATE_FORMAT' 
      | 'INVALID_DEFINITION' 
      | 'INVALID_FIELD' 
      | 'INVALID_FIELD_ACCESS_RULE' 
      | 'INVALID_FILTER_LANGUAGE' 
      | 'INVALID_FILTER_VALUE' 
      | 'INVALID_IDEMPOTENCY_KEY' 
      | 'INVALID_ID_FIELD' 
      | 'INVALID_INPUT_COMBINATION' 
      | 'INVALID_LOCALE_LANGUAGE' 
      | 'INVALID_LOCATOR' 
      | 'INVALID_LOGIN' 
      | 'INVALID_MULTIPART_REQUEST' 
      | 'INVALID_NEW_PASSWORD' 
      | 'INVALID_OLD_PASSWORD' 
      | 'INVALID_OPERATION' 
      | 'INVALID_OPERATION_WITH_EXPIRED_PASSWORD' 
      | 'INVALID_PACKAGE_VERSION' 
      | 'INVALID_PAGING_OPTION' 
      | 'INVALID_QUERY_FILTER_OPERATOR' 
      | 'INVALID_QUERY_KEY' 
      | 'INVALID_QUERY_LOCATOR' 
      | 'INVALID_QUERY_SCOPE' 
      | 'INVALID_QUERY_VALUE' 
      | 'INVALID_RECORD_ACCESS_RULE' 
      | 'INVALID_REPLICATION_DATE' 
      | 'INVALID_SEARCH' 
      | 'INVALID_SEARCH_SCOPE' 
      | 'INVALID_SESSION_ID' 
      | 'INVALID_SOAP_HEADER' 
      | 'INVALID_SORT_OPTION' 
      | 'INVALID_SSO_GATEWAY_URL' 
      | 'INVALID_TYPE' 
      | 'INVALID_TYPE_FOR_OPERATION' 
      | 'JIGSAW_ACTION_DISABLED' 
      | 'JIGSAW_IMPORT_LIMIT_EXCEEDED' 
      | 'JIGSAW_REQUEST_NOT_SUPPORTED' 
      | 'JSON_PARSER_ERROR' 
      | 'KEY_HAS_BEEN_DESTROYED' 
      | 'LANGUAGE_PARAM_CONFLICT' 
      | 'LICENSING_DATA_ERROR' 
      | 'LICENSING_UNKNOWN_ERROR' 
      | 'LIMIT_EXCEEDED' 
      | 'LOGIN_CHALLENGE_ISSUED' 
      | 'LOGIN_CHALLENGE_PENDING' 
      | 'LOGIN_DURING_RESTRICTED_DOMAIN' 
      | 'LOGIN_DURING_RESTRICTED_TIME' 
      | 'LOGIN_MUST_USE_SECURITY_TOKEN' 
      | 'MALFORMED_ID' 
      | 'MALFORMED_QUERY' 
      | 'MALFORMED_SEARCH' 
      | 'MISMATCHING_VERSIONS' 
      | 'MISSING_ARGUMENT' 
      | 'MISSING_RECORD' 
      | 'MODIFIED' 
      | 'MULTIPLE_RECORDS_FOUND' 
      | 'MUTUAL_AUTHENTICATION_FAILED' 
      | 'NOT_ACCEPTABLE' 
      | 'NOT_MODIFIED' 
      | 'NO_ACTIVE_DUPLICATE_RULE' 
      | 'NO_BUYER_GROUPS_FOUND' 
      | 'NO_DEFINITION_ASSOCIATED' 
      | 'NO_RECIPIENTS' 
      | 'NO_SOFTPHONE_LAYOUT' 
      | 'NUMBER_OUTSIDE_VALID_RANGE' 
      | 'OCR_INVALID_REQUEST' 
      | 'OPERATION_TOO_LARGE' 
      | 'ORDER_MANAGEMENT_ACTION_NOT_ALLOWED' 
      | 'ORG_ADMIN_LOCKED' 
      | 'ORG_IN_MAINTENANCE' 
      | 'ORG_IS_DOT_ORG' 
      | 'ORG_IS_SIGNING_UP' 
      | 'ORG_LOCKED' 
      | 'ORG_NOT_OWNED_BY_INSTANCE' 
      | 'PASSWORD_LOCKOUT' 
      | 'PAYLOAD_ITEM_MAP_ERROR' 
      | 'PENDING_COMMIT' 
      | 'PORTAL_NO_ACCESS' 
      | 'POST_BODY_PARSE_ERROR' 
      | 'POST_TAX_PROCESSING_ERROR' 
      | 'PRODUCT_NOT_FOUND' 
      | 'QAT_HETEROGENOUS_CONTEXT_IDS' 
      | 'QAT_INVALID_CONTEXT_ID' 
      | 'QAT_INVALID_QUICK_ACTION' 
      | 'QUERY_TIMEOUT' 
      | 'QUERY_TOO_COMPLICATED' 
      | 'REALTIME_PROCESSING_TIME_EXCEEDED_LIMIT' 
      | 'RECORD_NOT_FOUND' 
      | 'REPORT_EXPORT_LIMIT_EXCEEDED' 
      | 'REQUEST_LIMIT_EXCEEDED' 
      | 'REQUEST_RUNNING_TOO_LONG' 
      | 'SERVER_UNAVAILABLE' 
      | 'SERVICE_DESK_NOT_ENABLED' 
      | 'SITE_PUBLISH_FAILED' 
      | 'SLACK_SERVICE_ALREADY_REACTED' 
      | 'SLACK_SERVICE_INVALID_REACTION' 
      | 'SLACK_SERVICE_INVALID_REQUEST' 
      | 'SLACK_SERVICE_MISSING_DATA' 
      | 'SLACK_SERVICE_NO_REACTION' 
      | 'SLACK_SERVICE_REACTION_LIMIT_REACHED' 
      | 'SLACK_SERVICE_RESOURCE_NOT_FOUND' 
      | 'SLACK_SERVICE_SLACK_USER_SCOPES_NOT_FOUND' 
      | 'SLACK_SERVICE_SLACK_USER_TOKEN_NOT_FOUND' 
      | 'SLACK_SERVICE_UNKNOWN_ERROR' 
      | 'SLACK_USER_MAPPING_NOT_FOUND' 
      | 'SOCIALCRM_FEEDSERVICE_API_CLIENT_EXCEPTION' 
      | 'SOCIALCRM_FEEDSERVICE_API_SERVER_EXCEPTION' 
      | 'SOCIALCRM_FEEDSERVICE_API_UNAVAILABLE' 
      | 'SPECIFICATION_GENERATION_EXCEPTION' 
      | 'SSO_SERVICE_DOWN' 
      | 'SST_ADMIN_FILE_DOWNLOAD_EXCEPTION' 
      | 'STATE_TRANSITION_NOT_ALLOWED' 
      | 'TAX_INTERNAL_ERROR' 
      | 'TOO_MANY_APEX_REQUESTS' 
      | 'TOO_MANY_JOBS' 
      | 'TOO_MANY_RECIPIENTS' 
      | 'TOO_MANY_RECORDS' 
      | 'TRIAL_EXPIRED' 
      | 'TXN_SECURITY_APEX_ERROR' 
      | 'TXN_SECURITY_END_A_SESSION' 
      | 'TXN_SECURITY_FAIL_CLOSE' 
      | 'TXN_SECURITY_METERING_ERROR' 
      | 'TXN_SECURITY_NO_ACCESS' 
      | 'TXN_SECURITY_RUNTIME_ERROR' 
      | 'TXN_SECURITY_TWO_FA_REQUIRED' 
      | 'UNABLE_TO_LOCK_ROW' 
      | 'UNKNOWN_ATTACHMENT_EXCEPTION' 
      | 'UNKNOWN_EXCEPTION' 
      | 'UNKNOWN_ORG_SETTING' 
      | 'UNSUPPORTED_API_VERSION' 
      | 'UNSUPPORTED_ATTACHMENT_ENCODING' 
      | 'UNSUPPORTED_CLIENT' 
      | 'UNSUPPORTED_DML_OPERATION' 
      | 'UNSUPPORTED_MEDIA_TYPE' 
      | 'UNSUPPORTED_QUERY' 
      | 'USER_EMAIL_NOT_CONNECTED' 
      | 'VERSION_NOT_FOUND' 
      | 'WEBSTORE_NOT_FOUND' 
      | 'XML_PARSER_ERROR';

export type APIPerformanceInfo = {
    encodedIntervalTimerTree: string;
    handlerMetrics?: NameValuePair | NameValuePair[];
}

export type AllOrNoneHeader = {
    allOrNone: boolean;
}

export type AllowFieldTruncationHeader = {
    allowFieldTruncation: boolean;
}

export type CallOptions = {
    client: string;
    perfOption: PerfOption;
    uiRequestId: string;
}

export type DebuggingHeader = {
    categories?: LogInfo | LogInfo[];
    debugLevel: LogType;
}

export type DebuggingInfo = {
    debugLog: string;
}

export type DisableFeedTrackingHeader = {
    disableFeedTracking: boolean;
}

export type MetadataVersionCheck = {
    facts?: Fact | Fact[];
    operation: Operation;
}

export type MetadataWarningsHeader = {
    ignoreSaveWarnings: boolean;
}

export type PackageVersionHeader = {
    packageVersions?: PackageVersion | PackageVersion[];
}

export type SessionHeader = {
    sessionId: string;
}

export type changeOwnPassword = {
    oldPassword: string;
    newPassword: string;
}

export type changeOwnPasswordResponse = {
    result: ChangeOwnPasswordResult;
}

export type create = {
    sObjects?: sObject | sObject[];
}

export type createResponse = {
    result?: SaveResult | SaveResult[];
}

export type delete_ = {
    ids?: ID | ID[];
}

export type deleteResponse = {
    result?: DeleteResult | DeleteResult[];
}

export type describeGlobalResponse = {
    result: DescribeGlobalResult;
}

export type describeLayout = {
    type: string;
    layoutName: string;
    recordTypeIds?: string | string[];
}

export type describeLayoutResponse = {
    result: DescribeLayoutResult;
}

export type describeSObject = {
    type: string;
}

export type describeSObjectResponse = {
    result: DescribeSObjectResult;
}

export type describeSObjects = {
    types?: string | string[];
}

export type describeSObjectsResponse = {
    result?: DescribeSObjectResult | DescribeSObjectResult[];
}

export type describeSchema = {
    type: string;
}

export type describeSchemaResponse = {
    result: DescribeSchemaResult;
}

export type describeSoqlListViews = {
    request: DescribeSoqlListViewsRequest;
}

export type describeSoqlListViewsResponse = {
    result: DescribeSoqlListViewResult;
}

export type describeValueType = {
    type: string;
}

export type describeValueTypeResponse = {
    result: DescribeValueTypeResult;
}

export type describeWorkitemActions = {
    workitemIds?: ID | ID[];
}

export type describeWorkitemActionsResponse = {
    result?: DescribeWorkitemActionResult | DescribeWorkitemActionResult[];
}

export type executeAnonymous = {
    String: string;
}

export type executeAnonymousResponse = {
    result: ExecuteAnonymousResult;
}

export type getDeleted = {
    sObjectType: string;
    start: Date;
    end: Date;
}

export type getDeletedResponse = {
    result: GetDeletedResult;
}

export type getServerTimestampResponse = {
    result: GetServerTimestampResult;
}

export type getUpdated = {
    sObjectType: string;
    start: Date;
    end: Date;
}

export type getUpdatedResponse = {
    result: GetUpdatedResult;
}

export type getUserInfoResponse = {
    result: GetUserInfoResult;
}

export type invalidateSessions = {
    ArrayList?: string | string[];
}

export type invalidateSessionsResponse = {
    result?: InvalidateSessionsResult | InvalidateSessionsResult[];
}

export type login = {
    username: string;
    password: string;
}

export type loginResponse = {
    result: LoginResult;
}

export type query = {
    queryString: string;
}

export type queryResponse = {
    result: QueryResult;
}

export type queryAll = {
    queryString: string;
}

export type queryAllResponse = {
    result: QueryResult;
}

export type queryMore = {
    queryLocator: string;
}

export type queryMoreResponse = {
    result: QueryResult;
}

export type retrieve = {
    select: string;
    type: string;
    ids?: ID | ID[];
}

export type retrieveResponse = {
    result?: sObject | sObject[];
}

export type runTests = {
    RunTestsRequest: RunTestsRequest;
}

export type runTestsResponse = {
    result: RunTestsResult;
}

export type runTestsAsynchronous = {
    classids: string;
    suiteids: string;
    maxFailedTests: number;
    testLevel: TestLevel;
    classNames: string;
    suiteNames: string;
    tests?: TestsNode | TestsNode[];
    skipCodeCoverage: boolean;
}

export type runTestsAsynchronousResponse = {
    result: string;
}

export type search = {
    searchString: string;
}

export type searchResponse = {
    result: SearchResult;
}

export type setPassword = {
    userId: string;
    password: string;
}

export type setPasswordResponse = {
    result: SetPasswordResult;
}

export type update = {
    sObjects?: sObject | sObject[];
}

export type updateResponse = {
    result?: SaveResult | SaveResult[];
}

export type upsert = {
    fieldName: string;
    entities?: sObject | sObject[];
}

export type upsertResponse = {
    result?: UpsertResult | UpsertResult[];
}

export type AIApplication = Metadata & sObject &  {
    developerName: string;
    masterLabel?: string;
    predictionDefinitions?: AIPredictionDefinition | AIPredictionDefinition[];
    status: AIApplicationStatus;
    type: AIApplicationType;
}

export type Metadata = {
}

export type AIApplicationConfig = Metadata & sObject &  {
    aiApplicationDeveloperName: string;
    applicationId?: string;
    developerName: string;
    insightReasonEnabled?: boolean;
    masterLabel?: string;
    rank?: number;
    scoringMode?: AIScoringMode;
}

export type AIConvSummarizationConfig = Metadata & sObject &  {
    fieldName: string;
    lookUpRelatedRecordField?: string;
    name: string;
    objectName: string;
    recommendationOutputFieldName: RecsOutputFieldName;
    relatedEntity?: string;
    status: ConfigStatus;
}

export type AIModel = Metadata & sObject &  {
    approvalStatus: AIModelApproval;
    contentVersion?: string;
    dataset?: string;
    externalId?: string;
    failureReasonCode?: string;
    modelContent?: string;
    modelDef: string;
    modelFactors?: AIModelFactor | AIModelFactor[];
    modelGraphs?: AIModelGraph | AIModelGraph[];
    modelMetrics?: AIModelMetric | AIModelMetric[];
    priority?: number;
    scoringStatus: AIScoringStatus;
    trainingEndTime: Date;
    trainingStartTime: Date;
    type: AIModelType;
}

export type AIModelFactor = {
    externalId?: string;
    factorComponents?: AIFactorComponent | AIFactorComponent[];
    intensityType: AIIntensityType;
    intensityValue: number;
    lowerLimit: number;
    type: AIModelFactorType;
    upperLimit: number;
}

export type AIFactorComponent = {
    leftHandDerivedField?: string;
    leftHandField?: string;
    operator: AIModelMetricOperation;
    rightHandDerivedField?: string;
    rightHandField?: string;
    sortOrder?: number;
    value: string;
}

export type AIModelGraph = {
    dataSetType: AIDataSetType;
    graphPoints: string;
    graphType: AIModelGraphType;
    schemaVersion: string;
}

export type AIModelMetric = {
    classLabel1?: string;
    classLabel2?: string;
    iteration?: number;
    metricType: AIMetricType;
    metricValue: number;
}

export type AIScoringModelDefVersion = Metadata & sObject &  {
    aiScoringModelDefinition: string;
    aiScoringSteps?: AIScoringStep | AIScoringStep[];
    developerName: string;
    masterLabel: string;
    modelMode: AIScoringModelDefVersionMode;
}

export type AIScoringStep = {
    aiModelConfigStep: string;
    stepDetail?: string;
}

export type AIScoringModelDefinition = Metadata & sObject &  {
    aiModelConfig: string;
    description?: string;
    masterLabel: string;
}

export type AIUsecaseDefinition = Metadata & sObject &  {
    aiUsecaseFieldMappings?: AIUsecaseFieldMapping | AIUsecaseFieldMapping[];
    aiUsecaseModels?: AIUsecaseModel | AIUsecaseModel[];
    creatorType: CreatorType;
    masterLabel: string;
    maximumInsightCount?: number;
    maximumRecommendationCount?: number;
    maximumSuggestionCount?: number;
    primaryResponseObject?: string;
    recommendationResponseObject?: string;
    recommendationSource?: RcmdSourceType;
    secondaryResponseObject?: string;
    shouldSaveFeatures?: boolean;
    shouldSaveInsights?: boolean;
    shouldSaveRecommendation?: boolean;
    shouldSaveRequestResponse?: boolean;
    shouldSaveScore?: boolean;
    shouldSaveSuggestions?: boolean;
    suggestionImpactMinimumPct?: number;
    usecaseName: string;
}

export type AIUsecaseFieldMapping = {
    developerName: string;
    joinFieldInformation?: string;
    mappedFieldName: string;
    mappedFieldType: MappedFieldType;
    masterLabel: string;
    responseFieldName: string;
    responseObject: string;
    sequenceNumber?: number;
}

export type AIUsecaseModel = {
    aiFeatureExtractors?: AIFeatureExtractor | AIFeatureExtractor[];
    arePredctGenInRealTime: boolean;
    defaultFeatureExtractor?: AIFeatureExtractor;
    developerName: string;
    masterLabel: string;
    predictionDefinition: string;
    predictionPlatform: PredictionPlatform;
}

export type AIFeatureExtractor = {
    batchInputSourceIdentifier?: string;
    batchInputSourceType?: BatchInputSourceType;
    className?: string;
    developerName: string;
    extractorType: ExtractorType;
    featureInputType: FeatureInputType;
    inputContext?: string;
    masterLabel: string;
}

export type AbstractPlaceholderMetadata = Metadata &  {
}

export type CaseTeam = AbstractPlaceholderMetadata &  {
}

export type CaseTeamRole = AbstractPlaceholderMetadata &  {
}

export type Division = AbstractPlaceholderMetadata &  {
}

export type PermissionSetLicense = AbstractPlaceholderMetadata &  {
}

export type User = AbstractPlaceholderMetadata & sObject &  {
}

export type UserMapped = User &  {
}

export type UserLicense = AbstractPlaceholderMetadata &  {
}

export type AccessControlPolicy = Metadata &  {
    active: boolean;
    deploymentStatus: ACPStatus;
    description?: string;
    masterLabel: string;
    targetEntity: string;
    version: number;
}

export type AccountForecastSettings = Metadata & sObject &  {
    accountFilterId?: string;
    accountForecastFormulas?: AccountForecastFormula | AccountForecastFormula[];
    acctPrdctPrdFrcstVolCnt?: number;
    calculationFrequency: CalculationFrequency;
    displayDuration: number;
    displayedForecastMetrics: string;
    displayedRevenueMetrics: string;
    editableAtStartOfPeriod: boolean;
    editsAllowedFor: number;
    forecastFrequency: ForecastFrequency;
    objectMapping?: ObjectMapping;
    opportunityItemScheduleEnabled?: boolean;
    opportunityProbabilityEnabled?: boolean;
    primaryNotifEmailAddress?: string;
    productFilterId?: string;
    recalculateAllFrcstCnt?: number;
    regenerateForecastCnt?: number;
    salesAgreementFilterId?: string;
    secondaryNotifEmailAddress?: string;
    startingPeriod: number;
}

export type AccountForecastFormula = {
    endingPeriod: number;
    formula: string;
    formulaType: FormulaType;
    startingPeriod: number;
}

export type ObjectMapping = {
    inputObject: string;
    mappingFields?: ObjectMappingField | ObjectMappingField[];
    outputObject: string;
}

export type ObjectMappingField = {
    inputField: string;
    outputField: string;
}

export type AccountRelationshipShareRule = Metadata & sObject &  {
    accessLevel: string;
    accountToCriteriaField: string;
    description?: string;
    entityType: string;
    masterLabel: string;
    staticFormulaCriteria?: string;
    type: string;
}

export type AccountingModelConfig = Metadata &  {
    accountingType: AccountingType;
    defaultAccrualAccountCode?: string;
    defaultWriteOffAccountCode?: string;
    earliestCreatedDate: Date;
    expectedCashFlowGrouping?: ExpectedCashFlowGrouping;
    financeBook?: string;
    internalMappingDetails: string;
    isActive: boolean;
    isGroupedByFundAccount?: boolean;
    isUsed: boolean;
    jobFilterCriteria?: string;
    masterLabel: string;
    paidCashFlowGrouping?: PaidCashFlowGrouping;
    recordTypeFilter?: string;
    runOrder?: number;
}

export type AcctMgrTargetSettings = Metadata & sObject &  {
    acctMgrPeriodicTargetDstrCnt?: number;
    periodType: PeriodTypes;
    pricebookId?: string;
    teamMemberHierarchyType: TeamMemberHierarchyType;
}

export type ActionLauncherItemDef = Metadata & sObject &  {
    identifier: string;
    itemActionType: ItemActionType;
    itemCategory: ItemCategory;
    itemLanguage: string;
    masterLabel: string;
    subType: string;
    type: string;
    versionNumber?: string;
}

export type ActionLinkGroupTemplate = Metadata &  {
    actionLinkTemplates?: ActionLinkTemplate | ActionLinkTemplate[];
    category: PlatformActionGroupCategory;
    executionsAllowed: ActionLinkExecutionsAllowed;
    hoursUntilExpiration?: number;
    isPublished: boolean;
    name: string;
}

export type ActionLinkTemplate = {
    actionUrl: string;
    headers?: string;
    isConfirmationRequired: boolean;
    isGroupDefault: boolean;
    label?: string;
    labelKey: string;
    linkType: ActionLinkType;
    method: ActionLinkHttpMethod;
    position: number;
    requestBody?: string;
    userAlias?: string;
    userVisibility: ActionLinkUserVisibility;
}

export type ActionPlanTemplate = Metadata &  {
    actionPlanTemplateItem?: ActionPlanTemplateItem | ActionPlanTemplateItem[];
    actionPlanTemplateItemDependencies?: ActionPlanTemplateItemDependency | ActionPlanTemplateItemDependency[];
    description?: string;
    isAdHocItemCreationEnabled: boolean;
    name: string;
    targetEntityType: string;
    uniqueName: string;
}

export type ActionPlanTemplateItem = {
    actionPlanTemplateItemValue?: ActionPlanTemplateItemValue | ActionPlanTemplateItemValue[];
    displayOrder?: number;
    isRequired?: boolean;
    itemEntityType: string;
    name: string;
    uniqueName: string;
}

export type ActionPlanTemplateItemValue = {
    itemEntityType: string;
    name: string;
    valueFormula?: string;
    valueLiteral?: string;
}

export type ActionPlanTemplateItemDependency = {
    creationType: string;
    name: string;
    previousTemplateItem: ActionPlanTemplateItem;
    templateItem: ActionPlanTemplateItem;
}

export type ActionableEventOrchDef = Metadata & sObject &  {
    actionableEventUsageType?: string;
    apiName: string;
    contextDefinitionDeveloperName?: string;
    contextMappingTitle?: string;
    eventCategory?: string;
    eventSubtypeApiName?: string;
    eventTypeApiName: string;
    executionProcedureAPIName?: string;
    executionProcedureType?: string;
    isActive: boolean;
    label: string;
}

export type ActionableEventTypeDef = Metadata & sObject &  {
    apiName: string;
    label: string;
    listOfSubtypeApiNames?: string | string[];
    listOfSubtypeNames?: string | string[];
}

export type ActivationPlatform = Metadata & sObject &  {
    activationPlatformAdditionalMetadata?: string;
    activationPlatformConnectorType?: ActivationPlatformConnectorType;
    dataConnector?: string;
    description: string;
    enabled: boolean;
    includeSegmentNames?: boolean;
    logoUrl?: string;
    masterLabel: string;
    notes?: string;
    outputFormat: ActivationPlatformFileOutputFormat;
    outputGrouping: ActivationPlatformFileOutputGrouping;
    periodicRefreshFrequecy?: ActivationPlatformPeriodicFullRefresh;
    platformType: ActivationPlatformType;
    refreshFrequency: ActivationPlatformRefreshFrequency;
    refreshMode: ActivationPlatformRefreshMode;
}

export type ActivationPlatformActvAttr = Metadata & sObject &  {
    activationPlatform: string;
    fieldName?: string;
    isRequired: boolean;
    masterLabel: string;
    objectName?: string;
}

export type ActivationPlatformField = Metadata & sObject &  {
    activationPlatform: string;
    helpText?: string;
    isHidden: boolean;
    isRequired: boolean;
    masterLabel: string;
    type?: ActivationPlatformFieldDataType;
}

export type ActnblListKeyPrfmIndDef = Metadata & sObject &  {
    aggregateOperationName: ActionableListKPIAggType;
    description?: string;
    fieldName: string;
    filterExpression?: string;
    masterLabel: string;
    objectName: string;
    status: ActionableListKPIStType;
}

export type ActvPfrmDataConnectorS3 = Metadata & sObject &  {
    bucketName: string;
    exportDirectory: string;
    masterLabel: string;
}

export type ActvPlatformAdncIdentifier = Metadata & sObject &  {
    activationPlatform: string;
    identifierHashMethod?: ActivationPlatformIdentifierHashMethod;
    identifierType: ActivationPlatformIdentifierType;
    masterLabel: string;
}

export type ActvPlatformFieldValue = Metadata & sObject &  {
    activationPlatformField: string;
    isDefault: boolean;
    masterLabel: string;
    value?: string;
}

export type ActvPlatformOAuthConnector = Metadata & sObject &  {
    masterLabel: string;
    oauthProvider: OAuthProviderType;
    oauthUrl: string;
}

export type AddOnDefinition = Metadata &  {
    cloudServiceProvider?: string;
    defaultLicenseDuration?: number;
    defaultStatus?: DefaultLicenseStatus;
    description?: string;
    includedPlatformLicenseDefinitions?: IncludedPlatformLicenseDefinition | IncludedPlatformLicenseDefinition[];
    includedUserLicenseDefinitions?: IncludedUserLicenseDefinition | IncludedUserLicenseDefinition[];
    licenseOwner?: string;
    managementServiceProvider?: string;
    managementTenantId?: string;
    name: string;
}

export type IncludedPlatformLicenseDefinition = {
    fullName?: string;
    name: string;
    quantity?: number;
}

export type IncludedUserLicenseDefinition = {
    fullName?: string;
    name: string;
    quantity?: number;
}

export type AdvAccountForecastSet = Metadata & sObject &  {
    accountFieldName?: string;
    calculationFrequency?: AdvAcctFcstCalcFrequency;
    description?: string;
    dimensions?: AdvAcctForecastDimension | AdvAcctForecastDimension[];
    displayGroups?: AdvAcctFrcstDisplayGroup | AdvAcctFrcstDisplayGroup[];
    forecastAdjPeriods?: AdvAcctForecastAdjPeriod | AdvAcctForecastAdjPeriod[];
    forecastFactObjectName: string;
    forecastFormulas?: AdvAccountForecastFormula | AdvAccountForecastFormula[];
    forecastPeriodGroupName: string;
    forecastQuantityFieldName?: string;
    forecastRevenueFieldName?: string;
    forecastSetFieldName?: string;
    forecastSetName: string;
    forecastStatusFieldName?: string;
    generationDpeDefName?: string;
    measureDefinitions?: AdvAcctForecastMeasureDef | AdvAcctForecastMeasureDef[];
    periodFieldName?: string;
    recalculateDpeDefName?: string;
    regenerationDpeDefName?: string;
    rolloverDpeDefName?: string;
    rolloverFrequency?: AdvAcctFcstCalcFrequency;
    status: AdvAccForecastSetStatus;
}

export type AdvAcctForecastDimension = {
    advAcctForecastDimName: string;
    dimensionFieldName: string;
    dimensionSourceName?: string;
    hierarchySequenceNumber: number;
}

export type AdvAcctFrcstDisplayGroup = {
    advAcctFrcstDisplayGroupName: string;
    displayGroupItems?: AdvAcctFrcstDplyGroupItem | AdvAcctFrcstDplyGroupItem[];
    displayGroupType?: AdvAcctFrcstDisplayGroupType;
    isDefault?: boolean;
    userProfileName?: string;
}

export type AdvAcctFrcstDplyGroupItem = {
    advAcctFrcstDplyGroupItemName: string;
    displayOrder: number;
    measureReferenceName?: string;
}

export type AdvAcctForecastAdjPeriod = {
    adjustmentDayCount: number;
    frequency: PeriodTypes;
    profileName?: string;
    startDay: number;
}

export type AdvAccountForecastFormula = {
    endPeriod: number;
    formulaExpression: string;
    formulaType: AdvAcctFcstFormulaType;
    startPeriod: number;
}

export type AdvAcctForecastMeasureDef = {
    advAcctForecastMeasureDefName: string;
    aggregationType?: AdvAcctFcstAggregationType;
    computationMethod?: AdvAcctFcstComputationMethod;
    forecastDataMeasureName: string;
    forecastMeasureName: string;
    forecastMeasureType: AdvAcctFcstMeasureType;
    isAdjustmentTracked?: boolean;
}

export type AdvAcctForecastDimSource = Metadata & sObject &  {
    advAcctForecastDimSrcName: string;
    sourceObjectName: string;
}

export type AdvAcctForecastPeriodGroup = Metadata & sObject &  {
    forecastPeriodGroupName: string;
    forecastPeriods?: AdvAccountForecastPeriod | AdvAccountForecastPeriod[];
    startPeriod: number;
    status: ForecastPeriodGroupStatus;
}

export type AdvAccountForecastPeriod = {
    displayDuration: number;
    sequenceNumber: number;
    type: PeriodTypes;
}

export type AdvancedObjectMapping = Metadata & sObject &  {
    client: FieldMappingClient;
    description?: string;
    label: string;
    rows?: AdvancedFieldMapping | AdvancedFieldMapping[];
    sourceObject?: string;
    targetObject?: string;
}

export type AdvancedFieldMapping = {
    sourceField: string;
    sourceObject: string;
    targetField: string;
    targetObject: string;
}

export type AnalyticSnapshot = Metadata &  {
    description?: string;
    groupColumn?: string;
    mappings?: AnalyticSnapshotMapping | AnalyticSnapshotMapping[];
    name: string;
    runningUser?: string;
    sourceReport: string;
    targetObject: string;
}

export type AnalyticSnapshotMapping = {
    aggregateType?: ReportSummaryType;
    sourceField: string;
    sourceType: ReportJobSourceTypes;
    targetField: string;
}

export type AndroidPushApplicationSetup = Metadata &  {
    fcmProject?: string;
    serverKey?: string;
    serviceAccount?: string;
}

export type AnimationRule = Metadata & sObject &  {
    animationFrequency: string;
    developerName: string;
    isActive: boolean;
    masterLabel: string;
    recordTypeContext: string;
    recordTypeName?: string;
    sobjectType: string;
    targetField: string;
    targetFieldChangeToValues: string;
}

export type ApexClass = Metadata & sObject &  {
    apiVersion: number;
    packageVersions?: PackageVersion | PackageVersion[];
    status: ApexCodeUnitStatus;
}

export type PackageVersion = {
    majorNumber: number;
    minorNumber: number;
    namespace: string;
}

export type ApexComponent = Metadata & sObject &  {
    apiVersion?: number;
    description?: string;
    label: string;
    packageVersions?: PackageVersion | PackageVersion[];
}

export type ApexPage = Metadata & sObject &  {
    apiVersion: number;
    availableInTouch?: boolean;
    confirmationTokenRequired?: boolean;
    description?: string;
    label: string;
    packageVersions?: PackageVersion | PackageVersion[];
}

export type ApexTestSuite = Metadata & sObject &  {
    testClassName?: string | string[];
}

export type ApexTrigger = Metadata & sObject &  {
    apiVersion: number;
    packageVersions?: PackageVersion | PackageVersion[];
    status: ApexCodeUnitStatus;
}

export type AppNotificationType = Metadata &  {
    notificationType: string;
    pushByDefault: boolean;
    subscribed: boolean;
}

export type ApplePushApplicationSetup = Metadata &  {
    applicationBundle?: string;
    certificate?: string;
    environment: string;
    keyIdentifier?: string;
    password?: string;
    signingKey?: string;
    teamIdentifier?: string;
}

export type Application = Metadata &  {
    contactEmail?: string;
    contactPhone?: string;
    description?: string;
    developerName: string;
    iconUrl?: string;
    infoUrl?: string;
    label: string;
    logoUrl?: string;
    moduleRefs: ModuleRefs;
    version?: string;
}

export type ModuleRefs = {
    moduleRef?: ModuleRef | ModuleRef[];
}

export type ModuleRef = {
    name: string;
    namespacePrefix?: string;
    version?: string;
}

export type ApplicationRecordTypeConfig = Metadata & sObject &  {
    applicationObjectName: ApplicationObjectName;
    applicationUsageType: ApplicationUsageType;
    recordTypeName: string;
}

export type ApplicationSubtypeDefinition = Metadata & sObject &  {
    applicationUsageType: AppDomainUsageType;
    description?: string;
    masterLabel: string;
}

export type AppointmentAssignmentPolicy = Metadata & sObject &  {
    masterLabel: string;
    policyApplicableDuration: PolicyApplicableDuration;
    policyType: AssignmentPolicyType;
    utilizationFactor: UtilizationFactor;
}

export type AppointmentSchedulingPolicy = Metadata & sObject &  {
    appointmentAssignmentPolicy?: string;
    appointmentStartTimeInterval: string;
    extCalEventHandler?: string;
    isSvcTerrOpHoursWithShiftsUsed?: boolean;
    isSvcTerritoryMemberShiftUsed?: boolean;
    masterLabel: string;
    shouldCheckExternalCalendar: boolean;
    shouldConsiderCalendarEvents: boolean;
    shouldEnforceExcludedResource: boolean;
    shouldEnforceRequiredResource: boolean;
    shouldMatchSkill: boolean;
    shouldMatchSkillLevel: boolean;
    shouldRespectVisitingHours: boolean;
    shouldUsePrimaryMembers: boolean;
    shouldUseSecondaryMembers: boolean;
}

export type ApprovalProcess = Metadata &  {
    active: boolean;
    allowRecall?: boolean;
    allowedSubmitters?: ApprovalSubmitter | ApprovalSubmitter[];
    approvalPageFields?: ApprovalPageField;
    approvalStep?: ApprovalStep | ApprovalStep[];
    description?: string;
    emailTemplate?: string;
    enableMobileDeviceAccess?: boolean;
    entryCriteria?: ApprovalEntryCriteria;
    finalApprovalActions?: ApprovalAction;
    finalApprovalRecordLock?: boolean;
    finalRejectionActions?: ApprovalAction;
    finalRejectionRecordLock?: boolean;
    initialSubmissionActions?: ApprovalAction;
    label: string;
    nextAutomatedApprover?: NextAutomatedApprover;
    postTemplate?: string;
    processOrder?: number;
    recallActions?: ApprovalAction;
    recordEditability: RecordEditabilityType;
    showApprovalHistory?: boolean;
}

export type ApprovalSubmitter = {
    submitter?: string;
    type: ProcessSubmitterType;
}

export type ApprovalPageField = {
    field?: string | string[];
}

export type ApprovalStep = {
    allowDelegate?: boolean;
    approvalActions?: ApprovalAction;
    assignedApprover: ApprovalStepApprover;
    description?: string;
    entryCriteria?: ApprovalEntryCriteria;
    ifCriteriaNotMet?: StepCriteriaNotMetType;
    label: string;
    name: string;
    rejectBehavior?: ApprovalStepRejectBehavior;
    rejectionActions?: ApprovalAction;
}

export type ApprovalAction = {
    action?: WorkflowActionReference | WorkflowActionReference[];
}

export type WorkflowActionReference = {
    name: string;
    type: WorkflowActionType;
}

export type ApprovalStepApprover = {
    approver?: Approver | Approver[];
    whenMultipleApprovers?: RoutingType;
}

export type Approver = {
    name?: string;
    type: NextOwnerType;
}

export type ApprovalEntryCriteria = {
    booleanFilter?: string;
    criteriaItems?: FilterItem | FilterItem[];
    formula?: string;
}

export type FilterItem = {
    field: string;
    operation: FilterOperation;
    value?: string;
    valueField?: string;
}

export type DuplicateRuleFilterItem = FilterItem &  {
    sortOrder: number;
    table: string;
}

export type ApprovalStepRejectBehavior = {
    type: StepRejectBehaviorType;
}

export type NextAutomatedApprover = {
    useApproverFieldOfRecordOwner?: boolean;
    userHierarchyField: string;
}

export type AssessmentQuestion = Metadata &  {
    assessmentQuestionVersion?: AssessmentQuestionVersion;
    dataType: string;
    developerName: string;
    formulaResponseDataType?: string;
    name: string;
    questionCategory: string;
    relatedQuestion?: string;
}

export type AssessmentQuestionVersion = {
    additionalInformation?: string;
    description?: string;
    helpText?: string;
    isActive: boolean;
    name: string;
    optionSourceResponseValue?: boolean;
    questionText: string;
    responseValues?: string;
    status: string;
    versionNumber: number;
}

export type AssessmentQuestionSet = Metadata &  {
    assessmentQuestionDeveloperNames?: string | string[];
    developerName: string;
    name: string;
}

export type AssignmentRule = Metadata & sObject &  {
    active?: boolean;
    ruleEntry?: RuleEntry | RuleEntry[];
}

export type RuleEntry = {
    assignedTo?: string;
    assignedToType?: AssignToLookupValueType;
    booleanFilter?: string;
    businessHours?: string;
    businessHoursSource?: BusinessHoursSourceType;
    criteriaItems?: FilterItem | FilterItem[];
    disableEscalationWhenModified?: boolean;
    escalationAction?: EscalationAction | EscalationAction[];
    escalationStartTime?: EscalationStartTimeType;
    formula?: string;
    notifyCcRecipients?: boolean;
    overrideExistingTeams?: boolean;
    replyToEmail?: string;
    senderEmail?: string;
    senderName?: string;
    team?: string | string[];
    template?: string;
}

export type EscalationAction = {
    assignedTo?: string;
    assignedToTemplate?: string;
    assignedToType?: AssignToLookupValueType;
    minutesToEscalation?: number;
    notifyCaseOwner?: boolean;
    notifyEmail?: string | string[];
    notifyTo?: string;
    notifyToTemplate?: string;
}

export type AssignmentRules = Metadata &  {
}

export type AssistantContextItem = Metadata & sObject &  {
    assistantVersionId: string;
    description?: string;
    developerName: string;
    index?: number;
    masterLabel?: string;
    parentContextItem?: string;
    parentRelationField?: string;
    searchType?: string;
    slotClass?: string;
    sobjectType?: string;
    whereClause?: string;
}

export type AssistantDefinition = Metadata & sObject &  {
    appVersionNumber?: number;
    assistantDefinitionProfiles?: AssistantDefinitionProfile | AssistantDefinitionProfile[];
    description?: string;
    developerName: string;
    masterLabel?: string;
    status?: AssistantDefinitionStatus;
}

export type AssistantDefinitionProfile = {
    profile?: string;
}

export type AssistantSkillQuickAction = Metadata & sObject &  {
    assistantSkillQuickActionParams?: AssistantSkillQuickActionParam | AssistantSkillQuickActionParam[];
    description?: string;
    developerName: string;
    masterLabel?: string;
    prompt?: string;
    quickAction?: string;
}

export type AssistantSkillQuickActionParam = {
    description?: string;
    field?: string;
    index?: number;
    prompt?: string;
    referenceTarget?: string;
    slotClass?: string;
}

export type AssistantSkillSobjectAction = Metadata & sObject &  {
    assistantSkillSobjectParams?: AssistantSkillSobjectParam | AssistantSkillSobjectParam[];
    description?: string;
    developerName: string;
    masterLabel?: string;
    prompt?: string;
    recordType?: string;
    sobjectType?: string;
    target?: string;
    type: AssistantSkillSobjectActionType;
}

export type AssistantSkillSobjectParam = {
    description?: string;
    field?: string;
    index?: number;
    prompt?: string;
    referenceTarget?: string;
    slotClass?: string;
}

export type AssistantVersion = Metadata & sObject &  {
    assistantDefinitionId: string;
    assistantSkills?: AssistantSkill | AssistantSkill[];
    assistantVersionActions?: AssistantVersionAction | AssistantVersionAction[];
    description?: string;
    developerName: string;
    masterLabel?: string;
    versionNumber?: number;
}

export type AssistantSkill = {
    assistantSkillIntents?: AssistantSkillIntent | AssistantSkillIntent[];
    description?: string;
    externalModel?: string;
    index?: number;
    mlDomain?: string;
    skillType?: AssistantSkillType;
}

export type AssistantSkillIntent = {
    action?: string;
    description?: string;
    field?: string;
    index?: number;
    intentName?: string;
    isPromptRequired?: boolean;
    isRequired?: boolean;
    mlIntent?: string;
    sobjectType?: string;
}

export type AssistantVersionAction = {
    action?: string;
}

export type Audience = Metadata &  {
    audienceName: string;
    container: string;
    criteria: AudienceCriteria;
    description?: string;
    formula?: string;
    formulaFilterType?: FormulaFilterType;
    isDefaultAudience?: boolean;
    targets?: PersonalizationTargetInfos;
}

export type AudienceCriteria = {
    criterion?: AudienceCriterion | AudienceCriterion[];
}

export type AudienceCriterion = {
    criteriaNumber?: number;
    criterionValue?: AudienceCriteriaValue;
    operator?: AudienceCriterionOperator;
    type: AudienceCriterionType;
}

export type AudienceCriteriaValue = {
    audienceDeveloperName?: string;
    city?: string;
    country?: string;
    domain?: string;
    entityField?: string;
    entityType?: string;
    fieldValue?: string;
    isEnabled?: string;
    permissionName?: string;
    permissionType?: string;
    profile?: string;
    subdivision?: string;
}

export type PersonalizationTargetInfos = {
    target?: PersonalizationTargetInfo | PersonalizationTargetInfo[];
}

export type PersonalizationTargetInfo = {
    groupName: string;
    priority?: number;
    targetType: string;
    targetValue: string;
}

export type AuraDefinitionBundle = Metadata & sObject &  {
    SVGContent?: string;
    apiVersion?: number;
    auraDefinitions?: AuraDefinitions;
    controllerContent?: string;
    description?: string;
    designContent?: string;
    documentationContent?: string;
    helperContent?: string;
    markup?: string;
    modelContent?: string;
    packageVersions?: PackageVersion | PackageVersion[];
    rendererContent?: string;
    styleContent?: string;
    testsuiteContent?: string;
    type?: AuraBundleType;
}

export type AuraDefinitions = {
    auraDefinition?: AuraDefinition | AuraDefinition[];
}

export type AuraDefinition = {
    defType: string;
    source: string;
}

export type AuthProvider = Metadata &  {
    appleTeam?: string;
    authorizeUrl?: string;
    consumerKey?: string;
    consumerSecret?: string;
    controlPlane?: MuleSoftControlPlane;
    customMetadataTypeRecord?: string;
    defaultScopes?: string;
    ecKey?: string;
    errorUrl?: string;
    executionUser?: string;
    friendlyName: string;
    iconUrl?: string;
    idTokenIssuer?: string;
    includeOrgIdInIdentifier?: boolean;
    isPkceEnabled?: boolean;
    linkKickoffUrl?: string;
    logoutUrl?: string;
    oauthKickoffUrl?: string;
    plugin?: string;
    portal?: string;
    providerType: AuthProviderType;
    registrationHandler?: string;
    requireMfa?: boolean;
    sendAccessTokenInHeader?: boolean;
    sendClientCredentialsInHeader?: boolean;
    sendSecretInApis?: boolean;
    ssoKickoffUrl?: string;
    tokenUrl?: string;
    userInfoUrl?: string;
}

export type AutoResponseRule = Metadata & sObject &  {
    active?: boolean;
    ruleEntry?: RuleEntry | RuleEntry[];
}

export type AutoResponseRules = Metadata &  {
}

export type BatchCalcJobDefinition = Metadata & sObject &  {
    aggregates?: BatchCalcJobAggregate | BatchCalcJobAggregate[];
    appends?: BatchCalcJobUnion | BatchCalcJobUnion[];
    customNodes?: BatchCalcJobCustomNode | BatchCalcJobCustomNode[];
    dataSpaceApiName?: string;
    datasources?: BatchCalcJobDatasource | BatchCalcJobDatasource[];
    description?: string;
    executionPlatformType?: ExecutionPlatformType;
    filters?: BatchCalcJobFilter | BatchCalcJobFilter[];
    forecasts?: BatchCalcJobForecast | BatchCalcJobForecast[];
    hierarchyPaths?: BatchCalcJobHierarchyPath | BatchCalcJobHierarchyPath[];
    isTemplate?: boolean;
    joins?: BatchCalcJobSourceJoin | BatchCalcJobSourceJoin[];
    label?: string;
    parameters?: BatchCalcJobParameter | BatchCalcJobParameter[];
    processType?: BatchCalcProcessType;
    status: BatchJobDefinitionStatus;
    transforms?: BatchCalcJobTransform | BatchCalcJobTransform[];
    writebacks?: BatchCalcJobWritebackObject | BatchCalcJobWritebackObject[];
}

export type BatchCalcJobAggregate = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    fields?: BatchCalcJobAggregateField | BatchCalcJobAggregateField[];
    groupBy?: string | string[];
    label: string;
    name: string;
    sourceName: string;
}

export type BatchCalcJobAbstractMetadataValue = DpeToRecipeTranslateAbstractMetadataValue &  {
}

export type DpeToRecipeTranslateAbstractMetadataValue = {
}

export type BatchCalcJobCustomNode = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    extensionName: string;
    extensionNamespace: string;
    label: string;
    name: string;
    parameters?: BatchCalcJobCustomNodeParameter | BatchCalcJobCustomNodeParameter[];
    sources?: string | string[];
}

export type BatchCalcJobCustomNodeParameter = {
    dataType?: BatchCalcJobDataType;
    name: string;
    type?: string;
    value?: string;
}

export type BatchCalcJobDatasource = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    fields?: BatchCalcJobDatasourceField | BatchCalcJobDatasourceField[];
    label: string;
    name: string;
    sourceName: string;
    type: BatchCalcJobDatasourceType;
}

export type BatchCalcJobDatasourceField = {
    alias?: string;
    dataType?: BatchCalcJobDataType;
    displaySequence?: number;
    isPrimaryKey?: boolean;
    name: string;
}

export type BatchCalcJobFilter = BatchCalcJobAbstractMetadataValue &  {
    criteria?: BatchCalcJobFilterCriteria | BatchCalcJobFilterCriteria[];
    description?: string;
    filterCondition?: string;
    filterParameterName?: string;
    isDynamicFilter?: boolean;
    label: string;
    name: string;
    sourceName: string;
}

export type BatchCalcJobFilterCriteria = {
    inputVariable?: string;
    operator: BatchCalcJobFilterOperator;
    sequence: number;
    sourceFieldName: string;
    value?: string;
}

export type BatchCalcJobForecast = BatchCalcJobAbstractMetadataValue &  {
    accuracyPercent?: BatchCalcJobFrcstAccuracy;
    aggregationFields?: BtchCalcJobFrcstAggrFld | BtchCalcJobFrcstAggrFld[];
    dateFieldName: string;
    description?: string;
    forecastModelType?: BatchCalcJobFrcstModel;
    forecastPeriodCount?: number;
    forecastPeriodType: BatchCalcJobFrcstPeriodType;
    groupFields?: BatchCalcJobFrcstGrpFld | BatchCalcJobFrcstGrpFld[];
    label: string;
    name: string;
    periodStartDateName: string;
    seasonality?: BatchCalcJobFrcstSeasonality;
    shouldExcludeLastPeriod?: boolean;
    sourceName: string;
}

export type BtchCalcJobFrcstAggrFld = {
    aggregateFunction: BatchCalcJobAggregateFunction;
    aggregationResultLabel: string;
    fieldName: string;
}

export type BatchCalcJobFrcstGrpFld = {
    fieldName: string;
    groupBy?: string;
}

export type BatchCalcJobHierarchyPath = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    hierarchyFieldName: string;
    isSelfFieldValueIncluded?: boolean;
    label: string;
    name: string;
    parentFieldName: string;
    selfFieldName: string;
    sourceName: string;
}

export type BatchCalcJobParameter = BatchCalcJobAbstractMetadataValue &  {
    dataType: BatchCalcJobParameterDataType;
    defaultValue?: string;
    description?: string;
    isMultiValue: boolean;
    label: string;
    name: string;
}

export type BatchCalcJobSourceJoin = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    fields?: BatchCalcJobJoinResultField | BatchCalcJobJoinResultField[];
    joinKeys?: BatchCalcJobJoinKey | BatchCalcJobJoinKey[];
    label: string;
    name: string;
    primarySourceName: string;
    secondarySourceName: string;
    type: BatchCalcJobSourceJoinType;
}

export type BatchCalcJobJoinResultField = {
    alias: string;
    sourceFieldName: string;
    sourceName: string;
}

export type BatchCalcJobJoinKey = {
    primarySourceFieldName: string;
    secondarySourceFieldName: string;
}

export type BatchCalcJobTransform = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    droppedFields?: BatchCalcJobTransformDroppedField | BatchCalcJobTransformDroppedField[];
    expressionFields?: BatchCalcJobTransformAddedField | BatchCalcJobTransformAddedField[];
    label: string;
    name: string;
    orderBy?: BatchCalcJobOrderByField | BatchCalcJobOrderByField[];
    partitionBy?: string | string[];
    sourceName: string;
    transformationType: BatchCalcJobTransformType;
}

export type BatchCalcJobTransformDroppedField = {
    sourceFieldName: string;
}

export type BatchCalcJobTransformAddedField = {
    alias: string;
    dataType: BatchCalcJobDataType;
    decimalPlaces?: number;
    expression: string;
    length?: number;
}

export type BatchCalcJobOrderByField = {
    name: string;
    orderType: BatchCalcJobOrderType;
}

export type BatchCalcJobUnion = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    isDisjointedSchema?: boolean;
    label: string;
    name: string;
    sources?: string | string[];
}

export type BatchCalcJobWritebackObject = BatchCalcJobAbstractMetadataValue &  {
    description?: string;
    externalIdFieldName?: string;
    fields?: BatchCalcJobWritebackMapping | BatchCalcJobWritebackMapping[];
    filterCondition?: string;
    folderName?: string;
    isChangedRow?: boolean;
    label: string;
    name: string;
    operationType?: BatchCalcJobWritebackOpn;
    sharingInheritanceObjectName?: string;
    sourceName: string;
    storageType?: BatchCalcJobWritebackType;
    targetObjectName: string;
    writebackRecordMaxLimit?: number;
    writebackSequence?: number;
    writebackUser?: string;
}

export type BatchCalcJobWritebackMapping = {
    parentName?: string;
    relationshipName?: string;
    runtimeParameter?: boolean;
    sourceFieldName: string;
    targetFieldName?: string;
}

export type BatchCalcJobAggregateField = {
    aggregateFunction: BatchCalcJobAggregateFunction;
    alias: string;
    sourceFieldName: string;
}

export type BatchCalcJobProcessType = Metadata & sObject &  {
    customNodeConfigs?: CustomNodeConfig | CustomNodeConfig[];
    expressionFunctions?: TransformExpressionFunction | TransformExpressionFunction[];
    isInternal: boolean;
    isListViewVisible: boolean;
    label: string;
    name: string;
}

export type CustomNodeConfig = {
    configVersions?: CustomNodeConfigVersion | CustomNodeConfigVersion[];
    name: string;
    namespace: string;
}

export type CustomNodeConfigVersion = {
    configParameters?: CustomNodeConfigParameter | CustomNodeConfigParameter[];
    maximumRequiredSource: number;
    minimumRequiredSource: number;
    version: number;
}

export type CustomNodeConfigParameter = {
    dataType: BatchCalcJobDataType;
    hasSourceFieldValue: boolean;
    isInputParameter: boolean;
    isRequired: boolean;
    name: string;
}

export type TransformExpressionFunction = {
    category: string;
    categoryLabel: string;
    description: string;
    example: string;
    label: string;
    name: string;
}

export type BatchProcessJobDefinition = Metadata & sObject &  {
    batchSize: number;
    dataSource: BatchDataSource;
    description?: string;
    executionProcessApiName?: string;
    flowApiName?: string;
    flowInputVariable?: string;
    masterLabel: string;
    processGroup: string;
    retryCount: number;
    retryInterval: number;
    status?: string;
    type?: string;
}

export type BatchDataSource = {
    condition: string;
    criteria?: string;
    filters?: BatchDataSrcFilterCriteria | BatchDataSrcFilterCriteria[];
    sourceObject: string;
    sourceObjectField?: string;
}

export type BatchDataSrcFilterCriteria = {
    dynamicValue: boolean;
    dynamicValueType?: string;
    fieldName: string;
    fieldValue: string;
    operator: string;
    sequenceNo: number;
}

export type BenefitAction = Metadata & sObject &  {
    benefitActionParameters?: BenefitActionParameter | BenefitActionParameter[];
    description?: string;
    flowDefinition?: string;
    isActive: boolean;
    isBenefitExpirationAllowed?: boolean;
    isBenefitUpdateAllowed?: boolean;
    masterLabel: string;
    memberBenefitVariableName?: string;
    processType: string;
    type: string;
}

export type BenefitActionParameter = {
    dataType: BenefitActionDataType;
    masterLabel: string;
    name?: string;
    objectName?: string;
    parameterValues?: BenefitActionParameterValue | BenefitActionParameterValue[];
    picklistName?: string;
}

export type BenefitActionParameterValue = {
    parameterValue: string;
}

export type BlacklistedConsumer = Metadata &  {
    blockedByApiWhitelisting: boolean;
    consumerKey: string;
    consumerName: string;
    masterLabel: string;
}

export type BldgEnrgyIntensityCnfg = Metadata & sObject &  {
    buildingEnergyIntensityType: BuildingEnergyIntensityType;
    recordType: string;
}

export type Bot = Metadata &  {
    botMlDomain?: LocalMlDomain;
    botUser?: string;
    botVersions?: BotVersion | BotVersion[];
    contextVariables?: ConversationContextVariable | ConversationContextVariable[];
    conversationChannelProviders?: ConversationDefinitionChannelProvider | ConversationDefinitionChannelProvider[];
    defaultOutboundFlow?: string;
    description?: string;
    iconUrl?: string;
    label?: string;
    logPrivateConversationData?: boolean;
    pageContextVariables?: PageContextVariable | PageContextVariable[];
    richContentEnabled?: boolean;
    sessionTimeout?: number;
    type?: BotType;
}

export type LocalMlDomain = {
    label: string;
    mlIntents?: MlIntent | MlIntent[];
    mlSlotClasses?: MlSlotClass | MlSlotClass[];
    name: string;
}

export type MlIntent = {
    description?: string;
    developerName: string;
    label: string;
    mlIntentUtterances?: MlIntentUtterance | MlIntentUtterance[];
    relatedMlIntents?: MlRelatedIntent | MlRelatedIntent[];
}

export type MlIntentUtterance = {
    language?: Language;
    utterance: string;
}

export type MlRelatedIntent = {
    relatedMlIntent: string;
}

export type MlSlotClass = {
    dataType: MlSlotClassDataType;
    description?: string;
    developerName: string;
    extractionRegex?: string;
    extractionType?: MlSlotClassExtractionType;
    label: string;
    mlSlotClassValues?: MlSlotClassValue | MlSlotClassValue[];
}

export type MlSlotClassValue = {
    synonymGroup?: SynonymGroup;
    synonymGroups?: SynonymGroup | SynonymGroup[];
    value: string;
}

export type SynonymGroup = {
    languages?: Language | Language[];
    terms?: string | string[];
}

export type BotVersion = Metadata & sObject &  {
    articleAnswersGPTEnabled?: boolean;
    botDialogGroups?: BotDialogGroup | BotDialogGroup[];
    botDialogs?: BotDialog | BotDialog[];
    citationsEnabled?: boolean;
    conversationDefinitionPlanners?: ConversationDefinitionPlanner | ConversationDefinitionPlanner[];
    conversationGoals?: ConversationDefinitionGoal | ConversationDefinitionGoal[];
    conversationSystemDialogs?: ConversationSystemDialog | ConversationSystemDialog[];
    conversationVariables?: ConversationVariable | ConversationVariable[];
    copilotPrimaryLanguage?: Language;
    entryDialog: string;
    intentDisambiguationEnabled?: boolean;
    intentV3Enabled?: boolean;
    knowledgeFallbackEnabled?: boolean;
    mainMenuDialog: string;
    nlpProviders?: ConversationDefinitionNlpProvider | ConversationDefinitionNlpProvider[];
    responseDelayMilliseconds?: number;
    smallTalkEnabled?: boolean;
    status: BotStatusCode;
    toneType?: GenAiBotToneType;
    version: number;
}

export type BotDialogGroup = {
    description?: string;
    developerName: string;
    label: string;
}

export type BotDialog = {
    botDialogGroup?: string;
    botSteps?: BotStep | BotStep[];
    description?: string;
    developerName: string;
    isPlaceholderDialog?: boolean;
    label: string;
    mlIntent?: string;
    mlIntentTrainingEnabled?: boolean;
    showInFooterMenu?: boolean;
}

export type BotStep = {
    booleanFilter?: string;
    botInvocation?: BotInvocation;
    botMessages?: BotMessage | BotMessage[];
    botNavigation?: BotNavigation;
    botStepConditions?: BotStepCondition | BotStepCondition[];
    botSteps?: BotStep | BotStep[];
    botVariableOperation?: BotVariableOperation;
    conditionLogicType?: ConversationDefinitionLogicalOperatorType;
    conversationRecordLookup?: ConversationRecordLookup;
    conversationStepGoalMappings?: ConversationDefinitionStepGoalMapping | ConversationDefinitionStepGoalMapping[];
    conversationSystemMessage?: ConversationSystemMessage;
    messageDefinition?: ConversationDefinitionRichMessage;
    stepIdentifier?: string;
    type: BotStepType;
}

export type BotInvocation = {
    invocationActionName?: string;
    invocationActionType?: ConversationInvocableTargetType;
    invocationMappings?: BotInvocationMapping | BotInvocationMapping[];
}

export type BotInvocationMapping = {
    parameterName: string;
    recordName?: string;
    type: BotInvocationMappingType;
    value?: string;
    variableName?: string;
    variableType?: ConversationVariableType;
}

export type BotMessage = {
    message: string;
    messageIdentifier?: string;
}

export type BotNavigation = {
    botNavigationLinks?: BotNavigationLink | BotNavigationLink[];
    type: BotNavigationType;
}

export type BotNavigationLink = {
    label?: string;
    targetBotDialog?: string;
    targetVariable?: string;
    targetVariableType?: ConversationVariableType;
}

export type BotStepCondition = {
    leftOperandName: string;
    leftOperandType: ConversationVariableType;
    operatorType: BotStepConditionOperatorType;
    rightOperandValue?: string;
}

export type BotVariableOperation = {
    askCollectIfSet?: boolean;
    autoSelectIfSingleChoice?: boolean;
    botInvocation?: BotInvocation;
    botMessages?: BotMessage | BotMessage[];
    botQuickReplyOptions?: BotQuickReplyOption | BotQuickReplyOption[];
    botVariableOperands?: BotVariableOperand | BotVariableOperand[];
    invalidInputBotNavigation?: BotNavigation;
    messageDefinition?: ConversationDefinitionRichMessage;
    optionalCollect?: boolean;
    quickReplyOptionTemplate?: string;
    quickReplyType?: BotQuickReplyType;
    quickReplyWidgetType?: BotWidgetType;
    retryMessages?: BotMessage | BotMessage[];
    sourceVariableName?: string;
    sourceVariableType?: ConversationVariableType;
    successMessages?: BotMessage | BotMessage[];
    type: BotVariableOperationType;
    variableOperationIdentifier?: string;
}

export type BotQuickReplyOption = {
    literalValue: string;
    quickReplyOptionIdentifier?: string;
}

export type BotVariableOperand = {
    disableAutoFill?: boolean;
    sourceName?: string;
    sourceType?: ConversationVariableOperandSourceType;
    sourceValue?: string;
    targetName: string;
    targetType: ConversationVariableType;
}

export type ConversationDefinitionRichMessage = {
    executionType?: ConversationMessageExecutionType;
    messageDefinitionMappings?: BotInvocationMapping | BotInvocationMapping[];
    messageDefinitionName: string;
}

export type ConversationRecordLookup = {
    SObjectType: string;
    conditions?: ConversationRecordLookupCondition | ConversationRecordLookupCondition[];
    filterLogic?: string;
    lookupFields?: ConversationRecordLookupField | ConversationRecordLookupField[];
    maxLookupResults: number;
    sortFieldName?: string;
    sortOrder?: SortOrder;
    sourceVariableName?: string;
    sourceVariableType?: ConversationVariableType;
    targetVariableName: string;
}

export type ConversationRecordLookupCondition = {
    leftOperand: string;
    operatorType: string;
    rightOperandName?: string;
    rightOperandType?: ConversationVariableType;
    rightOperandValue?: string;
    sortOrder: number;
}

export type ConversationRecordLookupField = {
    fieldName: string;
}

export type ConversationDefinitionStepGoalMapping = {
    goalName: string;
}

export type ConversationSystemMessage = {
    systemMessageMappings?: ConversationSystemMessageMapping | ConversationSystemMessageMapping[];
    type: ConversationSystemMessageType;
}

export type ConversationSystemMessageMapping = {
    mappingType: ConversationMappingType;
    parameterType: ConversationSystemMessageParamType;
    variableName: string;
}

export type ConversationDefinitionPlanner = {
    genAiPlannerName: string;
}

export type ConversationDefinitionGoal = {
    developerName: string;
    label: string;
}

export type ConversationSystemDialog = {
    dialog: string;
    type: ConversationSystemDialogType;
}

export type ConversationVariable = {
    SObjectType?: string;
    collectionType?: ConversationVariableCollectionType;
    dataType: ConversationDataType;
    developerName: string;
    label: string;
}

export type ConversationDefinitionNlpProvider = {
    language?: Language;
    nlpProviderName?: string;
    nlpProviderType: ConversationDefinitionNlpProviderType;
}

export type ConversationContextVariable = {
    SObjectType?: string;
    contextVariableMappings?: ConversationContextVariableMapping | ConversationContextVariableMapping[];
    dataType: ConversationDataType;
    developerName: string;
    label: string;
}

export type ConversationContextVariableMapping = {
    SObjectType: string;
    fieldName: string;
    messageType: MessageType;
}

export type ConversationDefinitionChannelProvider = {
    agentRequired?: boolean;
    chatButtonName: string;
}

export type PageContextVariable = {
    SObjectType?: string;
    dataType: ConversationDataType;
    description?: string;
    developerName: string;
    label: string;
}

export type BotBlock = Metadata &  {
    botBlockVersions?: BotBlockVersion | BotBlockVersion[];
    description?: string;
    icon?: string;
    masterLabel: string;
    richContentEnabled?: boolean;
}

export type BotBlockVersion = Metadata &  {
    botDialogs?: BotDialog | BotDialog[];
    conversationGoals?: ConversationDefinitionGoal | ConversationDefinitionGoal[];
    conversationLanguages: string;
    conversationVariables?: ConversationVariable | ConversationVariable[];
    description?: string;
    mlDomain: LocalMlDomain;
    permissionSet?: string;
    status: ConvDefBlockVersionStatus;
}

export type BotTemplate = Metadata &  {
    botDialogGroups?: BotDialogGroup | BotDialogGroup[];
    botDialogs?: BotDialog | BotDialog[];
    contextVariables?: ConversationContextVariable | ConversationContextVariable[];
    conversationGoals?: ConversationDefinitionGoal | ConversationDefinitionGoal[];
    conversationLanguages: string;
    conversationSystemDialogs?: ConversationSystemDialog | ConversationSystemDialog[];
    conversationVariables?: ConversationVariable | ConversationVariable[];
    description?: string;
    entryDialog?: string;
    icon?: string;
    mainMenuDialog?: string;
    masterLabel: string;
    mlDomain?: LocalMlDomain;
    permissionSet?: string;
    richContentEnabled?: boolean;
    type?: BotType;
}

export type BrandingSet = Metadata & sObject &  {
    brandingSetProperty?: BrandingSetProperty | BrandingSetProperty[];
    description?: string;
    masterLabel: string;
    type?: string;
}

export type BrandingSetProperty = {
    propertyName: string;
    propertyValue?: string;
}

export type BriefcaseDefinition = Metadata & sObject &  {
    briefcaseRules?: BriefcaseRule | BriefcaseRule[];
    description?: string;
    isActive: boolean;
    masterLabel: string;
    type?: BriefcaseType;
}

export type BriefcaseRule = {
    briefcaseRuleFilters?: BriefcaseRuleFilter | BriefcaseRuleFilter[];
    filterLogic?: string;
    isAscendingOrder?: boolean;
    orderBy?: string;
    queryScope?: FilterScope;
    recordLimit?: number;
    relatedRules?: BriefcaseRule | BriefcaseRule[];
    relationshipField?: string;
    relationshipType?: BriefcaseRuleRelationshipType;
    targetEntity: string;
}

export type BriefcaseRuleFilter = {
    filterOperator: BriefcaseFilterOperator;
    filterSeqNumber: number;
    filterValue?: string;
    targetEntityField: string;
}

export type BusinessHoursEntry = Metadata & sObject &  {
    active?: boolean;
    default: boolean;
    fridayEndTime?: Date;
    fridayStartTime?: Date;
    mondayEndTime?: Date;
    mondayStartTime?: Date;
    name?: string;
    saturdayEndTime?: Date;
    saturdayStartTime?: Date;
    sundayEndTime?: Date;
    sundayStartTime?: Date;
    thursdayEndTime?: Date;
    thursdayStartTime?: Date;
    timeZoneId?: string;
    tuesdayEndTime?: Date;
    tuesdayStartTime?: Date;
    wednesdayEndTime?: Date;
    wednesdayStartTime?: Date;
}

export type BusinessProcess = Metadata & sObject &  {
    description?: string;
    isActive?: boolean;
    values?: PicklistValue | PicklistValue[];
}

export type PicklistValue = Metadata &  {
    color?: string;
    default: boolean;
    description?: string;
    isActive?: boolean;
    valueName: string;
    allowEmail?: boolean;
    closed?: boolean;
    controllingFieldValues?: string | string[];
    converted?: boolean;
    cssExposed?: boolean;
    forecastCategory?: ForecastCategories;
    highPriority?: boolean;
    probability?: number;
    reverseRole?: string;
    reviewed?: boolean;
    won?: boolean;
}

export type GlobalPicklistValue = Metadata &  {
    color?: string;
    default: boolean;
    description?: string;
    isActive?: boolean;
    valueName: string;
}

export type BusinessProcessGroup = Metadata & sObject &  {
    businessProcessDefinitions?: BusinessProcessDefinition | BusinessProcessDefinition[];
    customerSatisfactionMetric: SurveyQuestionType;
    description?: string;
    masterLabel: string;
}

export type BusinessProcessDefinition = {
    businessProcessFeedbacks?: BusinessProcessFeedback | BusinessProcessFeedback[];
    description?: string;
    developerName: string;
    masterLabel: string;
    sequenceNumber: number;
}

export type BusinessProcessFeedback = {
    actionName: string;
    actionParam: string;
    actionType: ExpFeedbackCollType;
}

export type BusinessProcessTypeDefinition = Metadata &  {
    applicationUsageType: AppDomainUsageType;
    description?: string;
    masterLabel: string;
}

export type CMSConnectSource = Metadata & sObject &  {
    cmsConnectAsset?: CMSConnectAsset | CMSConnectAsset[];
    cmsConnectLanguage?: CMSConnectLanguage | CMSConnectLanguage[];
    cmsConnectPersonalization?: CMSConnectPersonalization;
    cmsConnectResourceType?: CMSConnectResourceType | CMSConnectResourceType[];
    connectionType: CMSSourceConnectionType;
    cssScope?: string;
    developerName: string;
    languageEnabled?: string;
    masterLabel: string;
    namedCredential?: string;
    personalizationEnabled?: string;
    rootPath?: string;
    sortOrder: number;
    status: CMSConnectionStatus;
    type: CMSConnectionSourceType;
    websiteUrl?: string;
}

export type CMSConnectAsset = {
    assetPath: string;
    assetType: string;
    sortOrder: number;
}

export type CMSConnectLanguage = {
    cmsLanguage: string;
    language: string;
}

export type CMSConnectPersonalization = {
    connectorPage: string;
    connectorPageAsset: string;
}

export type CMSConnectResourceType = {
    cmsConnectResourceDefinition?: CMSConnectResourceDefinition | CMSConnectResourceDefinition[];
    developerName: string;
    masterLabel: string;
    resourceType: string;
}

export type CMSConnectResourceDefinition = {
    developerName: string;
    masterLabel: string;
    options: number;
    payloadType: string;
    resourceIdPath?: string;
    resourceNamePath?: string;
    resourcePath: string;
    rootNodePath?: string;
}

export type CallCenter = Metadata & sObject &  {
    adapterUrl?: string;
    contactCenterChannels?: ContactCenterChannel | ContactCenterChannel[];
    customSettings?: string;
    displayName: string;
    displayNameLabel: string;
    internalNameLabel: string;
    sections?: CallCenterSection | CallCenterSection[];
    vendorCallCenterStatusMaps?: VendorCallCenterStatusMap | VendorCallCenterStatusMap[];
    version?: string;
}

export type ContactCenterChannel = {
    channel: string;
    contactCenter: string;
    voiceMailFallbackQueue?: string;
    voiceMailHandler?: string;
}

export type CallCenterSection = {
    items?: CallCenterItem | CallCenterItem[];
    label: string;
    name: string;
}

export type CallCenterItem = {
    label: string;
    name: string;
    value: string;
}

export type VendorCallCenterStatusMap = {
    externalStatus: string;
    servicePresenceStatus: string;
}

export type CallCenterRoutingMap = Metadata &  {
    callCenter: string;
    developerName: string;
    externalId: string;
    masterLabel: string;
    quickConnect?: string;
    referenceRecord: string;
}

export type CallCoachingMediaProvider = Metadata &  {
    isActive: boolean;
    providerDescription: string;
    providerName: string;
}

export type CallCtrAgentFavTrfrDest = Metadata &  {
    agent: string;
    callCenter: string;
    name: string;
    transferDestination: string;
}

export type CampaignInfluenceModel = Metadata & sObject &  {
    isActive?: boolean;
    isDefaultModel: boolean;
    isModelLocked: boolean;
    modelDescription?: string;
    name: string;
    recordPreference?: string;
}

export type CampaignTemplateDefinition = Metadata &  {
    description: string;
    developerName: string;
    masterLabel: string;
}

export type CanvasMetadata = Metadata &  {
    accessMethod: string;
    canvasOptions?: string;
    canvasUrl: string;
    lifecycleClass?: string;
    locationOptions?: string;
    samlInitiationMethod?: string;
}

export type CareBenefitVerifySettings = Metadata & sObject &  {
    codeSetType?: string;
    defaultNpi?: string;
    generalPlanServiceTypeCode?: string;
    isDefault?: boolean;
    masterLabel: string;
    organizationName?: string;
    serviceApexClass?: string;
    serviceNamedCredential?: string;
    serviceTypeSourceSystem?: string;
    uriPath?: string;
}

export type CareRequestConfiguration = Metadata & sObject &  {
    careRequestRecordType: string;
    careRequestRecords?: CareRequestRecords | CareRequestRecords[];
    careRequestType: string;
    isActive?: boolean;
    isDefaultRecordType?: boolean;
    masterLabel: string;
}

export type CareRequestRecords = {
    careRequestRecord: string;
}

export type CaseSubjectParticle = Metadata & sObject &  {
    index: number;
    textField?: string;
    type: CaseSubjectParticleType;
}

export type Certificate = Metadata & sObject &  {
    caSigned: boolean;
    encryptedWithPlatformEncryption?: boolean;
    expirationDate?: Date;
    keySize?: number;
    masterLabel: string;
    privateKeyExportable?: boolean;
}

export type ChannelLayout = Metadata & sObject &  {
    doesExcludeFieldLabels?: boolean;
    doesExcludeFiles?: boolean;
    enabledChannels?: string | string[];
    label: string;
    layoutItems?: ChannelLayoutItem | ChannelLayoutItem[];
    recordType?: string;
}

export type ChannelLayoutItem = {
    field: string;
}

export type ChannelObjectLinkingRule = Metadata & sObject &  {
    actionForNoRecordFound: ActionForNoRecordFound;
    actionForSingleRecordFound: ActionForSingleRecordFound;
    channelType: ChannelType;
    description?: string;
    isLinkedRecordOpenedAsSubTab: boolean;
    isRuleActive: boolean;
    masterLabel: string;
    objectToLink: ObjectToLink;
    ruleName: string;
}

export type ChatterExtension = Metadata &  {
    compositionComponent: string;
    description: string;
    extensionName: string;
    headerText?: string;
    hoverText?: string;
    icon: string;
    isProtected?: boolean;
    masterLabel: string;
    renderComponent: string;
    type: ChatterExtensionType;
}

export type ClaimFinancialSettings = Metadata & sObject &  {
    claimCovPendingAuthStatus: string;
    claimPendingAuthorityStatus: string;
    clmCovPymtDtlPendAuthSts: string;
    masterLabel: string;
}

export type ClauseCatgConfiguration = Metadata & sObject &  {
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    usageType: ClmCategoryUsageType;
}

export type CleanDataService = Metadata & sObject &  {
    cleanRules?: CleanRule | CleanRule[];
    description: string;
    masterLabel: string;
    matchEngine: string;
}

export type CleanRule = {
    bulkEnabled: boolean;
    bypassTriggers: boolean;
    bypassWorkflow: boolean;
    description: string;
    developerName: string;
    fieldMappings?: FieldMapping | FieldMapping[];
    masterLabel: string;
    matchRule: string;
    sourceSobjectType: string;
    status: CleanRuleStatus;
    targetSobjectType: string;
}

export type FieldMapping = {
    SObjectType: string;
    developerName: string;
    fieldMappingRows?: FieldMappingRow | FieldMappingRow[];
    masterLabel: string;
}

export type FieldMappingRow = {
    SObjectType: string;
    fieldMappingFields?: FieldMappingField | FieldMappingField[];
    fieldName: string;
    mappingOperation: MappingOperation;
}

export type FieldMappingField = {
    dataServiceField: string;
    dataServiceObjectName: string;
    priority: number;
}

export type CloudServiceProvider = Metadata &  {
    authParams: string;
    authType: AuthType;
    baseApiUrl: string;
    cloudServiceProviderApis?: CloudServiceProviderApi | CloudServiceProviderApi[];
    externalId: string;
    name: string;
    provisioningAutomationType?: ProvisioningAutomationType;
    sendAggregatedLicenseInfo?: boolean;
    sendAggregatedLicenses?: boolean;
    sendLicenseInfo?: boolean;
    sendTenantChange?: boolean;
    sendTenantUsage?: boolean;
    shouldIncludeOrderItems?: boolean;
    usageAggregateServiceUser?: string;
}

export type CloudServiceProviderApi = {
    cloudServiceProviderApiType: CloudServiceProviderApiType;
    name: string;
    version: number;
}

export type CodeBundle = Metadata & sObject &  {
    apiVersion: number;
    description?: string;
}

export type CommandAction = Metadata &  {
    actionType: string;
    description?: string;
    intents?: CommandActionIntent | CommandActionIntent[];
    label: string;
    parameters?: CommandActionParam | CommandActionParam[];
    responseTemplates?: CommandActionResponse | CommandActionResponse[];
    target?: string;
}

export type CommandActionIntent = {
    phrase: string;
    responseTemplates?: CommandActionResponse | CommandActionResponse[];
}

export type CommandActionResponse = {
    template: string;
}

export type CommandActionParam = {
    defaultValue?: string;
    description?: string;
    name: string;
    required?: boolean;
    type: string;
}

export type Community = Metadata &  {
    active?: boolean;
    chatterAnswersFacebookSsoUrl?: string;
    communityFeedPage?: string;
    dataCategoryName?: string;
    description?: string;
    emailFooterDocument?: string;
    emailHeaderDocument?: string;
    emailNotificationUrl?: string;
    enableChatterAnswers?: boolean;
    enablePrivateQuestions?: boolean;
    expertsGroup?: string;
    portal?: string;
    reputationLevels?: ReputationLevels;
    showInPortal?: boolean;
    site?: string;
}

export type ReputationLevels = {
    chatterAnswersReputationLevels?: ChatterAnswersReputationLevel | ChatterAnswersReputationLevel[];
    ideaReputationLevels?: IdeaReputationLevel | IdeaReputationLevel[];
}

export type ChatterAnswersReputationLevel = {
    name: string;
    value: number;
}

export type IdeaReputationLevel = {
    name: string;
    value: number;
}

export type CommunityAIModelMapping = Metadata & sObject &  {
    modelContent: string;
    modelEntityType: ModelEntityType;
    modelStatus: ModelStatus;
    name: string;
    networkId?: string;
    setupDefinition?: string;
}

export type CommunityTemplateDefinition = Metadata & sObject &  {
    baseTemplate?: CommunityBaseTemplate;
    bundlesInfo?: CommunityTemplateBundleInfo | CommunityTemplateBundleInfo[];
    category: CommunityTemplateCategory;
    defaultBrandingSet?: string;
    defaultThemeDefinition: string;
    description?: string;
    enableExtendedCleanUpOnDelete?: boolean;
    masterLabel: string;
    navigationLinkSet?: NavigationLinkSet | NavigationLinkSet[];
    pageSetting?: CommunityTemplatePageSetting | CommunityTemplatePageSetting[];
    publisher?: string;
}

export type CommunityTemplateBundleInfo = {
    description?: string;
    image?: string;
    order: number;
    title: string;
    type: CommunityTemplateBundleInfoType;
}

export type CommunityThemeBundleInfo = CommunityTemplateBundleInfo &  {
}

export type NavigationLinkSet = {
    navigationMenuItem?: NavigationMenuItem | NavigationMenuItem[];
}

export type NavigationMenuItem = {
    defaultListViewId?: string;
    label: string;
    menuItemBranding?: NavigationMenuItemBranding;
    position: number;
    publiclyAvailable?: boolean;
    subMenu?: NavigationSubMenu;
    target?: string;
    targetPreference?: string;
    type: string;
}

export type NavigationMenuItemBranding = {
    tileImage?: string;
}

export type NavigationSubMenu = {
    navigationMenuItem?: NavigationMenuItem | NavigationMenuItem[];
}

export type CommunityTemplatePageSetting = {
    page: string;
    themeLayout: string;
}

export type CommunityThemeDefinition = Metadata & sObject &  {
    bundlesInfo?: CommunityThemeBundleInfo | CommunityThemeBundleInfo[];
    customThemeLayoutType?: CommunityCustomThemeLayoutType | CommunityCustomThemeLayoutType[];
    defaultBrandingSet?: string;
    description?: string;
    enableExtendedCleanUpOnDelete?: boolean;
    masterLabel: string;
    publisher?: string;
    themeRouteOverride?: CommunityThemeRouteOverride | CommunityThemeRouteOverride[];
    themeSetting?: CommunityThemeSetting | CommunityThemeSetting[];
}

export type CommunityCustomThemeLayoutType = {
    description?: string;
    label: string;
}

export type CommunityThemeRouteOverride = {
    customThemeLayoutType?: string;
    pageAttributes: string;
    pageType: string;
    themeLayoutType?: CommunityThemeLayoutType;
}

export type CommunityThemeSetting = {
    customThemeLayoutType?: string;
    themeLayout: string;
    themeLayoutType?: CommunityThemeLayoutType;
}

export type CompactLayout = Metadata & sObject &  {
    fields?: string | string[];
    label: string;
}

export type ConnectedApp = Metadata &  {
    attributes?: ConnectedAppAttribute | ConnectedAppAttribute[];
    canvasConfig?: ConnectedAppCanvasConfig;
    contactEmail: string;
    contactPhone?: string;
    description?: string;
    iconUrl?: string;
    infoUrl?: string;
    ipRanges?: ConnectedAppIpRange | ConnectedAppIpRange[];
    label: string;
    logoUrl?: string;
    mobileAppConfig?: ConnectedAppMobileDetailConfig;
    mobileStartUrl?: string;
    oauthConfig?: ConnectedAppOauthConfig;
    oauthPolicy?: ConnectedAppOauthPolicy;
    permissionSetName?: string | string[];
    plugin?: string;
    pluginExecutionUser?: string;
    profileName?: string | string[];
    samlConfig?: ConnectedAppSamlConfig;
    sessionPolicy?: ConnectedAppSessionPolicy;
    startUrl?: string;
}

export type ConnectedAppAttribute = {
    formula: string;
    key: string;
}

export type ConnectedAppCanvasConfig = {
    accessMethod: AccessMethod;
    canvasUrl: string;
    lifecycleClass?: string;
    locations?: CanvasLocationOptions | CanvasLocationOptions[];
    options?: CanvasOptions | CanvasOptions[];
    samlInitiationMethod?: SamlInitiationMethod;
}

export type ConnectedAppIpRange = {
    description?: string;
    end: string;
    start: string;
}

export type ConnectedAppMobileDetailConfig = {
    applicationBinaryFile?: string;
    applicationBinaryFileName?: string;
    applicationBundleIdentifier?: string;
    applicationFileLength?: number;
    applicationIconFile?: string;
    applicationIconFileName?: string;
    applicationInstallUrl?: string;
    devicePlatform: DevicePlatformType;
    deviceType?: DeviceType;
    minimumOsVersion?: string;
    privateApp?: boolean;
    version: string;
}

export type ConnectedAppOauthConfig = {
    assetTokenConfig?: ConnectedAppOauthAssetToken;
    callbackUrl: string;
    certificate?: string;
    consumerKey?: string;
    consumerSecret?: string;
    idTokenConfig?: ConnectedAppOauthIdToken;
    isAdminApproved?: boolean;
    isClientCredentialEnabled?: boolean;
    isCodeCredentialEnabled?: boolean;
    isCodeCredentialPostOnly?: boolean;
    isConsumerSecretOptional?: boolean;
    isIntrospectAllTokens?: boolean;
    isNamedUserJwtEnabled?: boolean;
    isPkceRequired?: boolean;
    isRefreshTokenRotationEnabled?: boolean;
    isSecretRequiredForRefreshToken?: boolean;
    isSecretRequiredForTokenExchange?: boolean;
    isTokenExchangeEnabled?: boolean;
    oauthClientCredentialUser?: string;
    singleLogoutUrl?: string;
}

export type ConnectedAppOauthAssetToken = {
    assetAudiences: string;
    assetIncludeAttributes: boolean;
    assetIncludeCustomPerms: boolean;
    assetSigningCertId: string;
    assetValidityPeriod: number;
}

export type ConnectedAppOauthIdToken = {
    idTokenAudience?: string;
    idTokenIncludeAttributes?: boolean;
    idTokenIncludeCustomPerms?: boolean;
    idTokenIncludeStandardClaims?: boolean;
    idTokenValidity?: number;
}

export type ConnectedAppOauthPolicy = {
    ipRelaxation: string;
    refreshTokenPolicy: string;
    singleLogoutUrl?: string;
    isTokenExchangeFlowEnabled?: boolean;
}

export type ConnectedAppSamlConfig = {
    acsUrl: string;
    certificate?: string;
    encryptionCertificate?: string;
    encryptionType?: SamlEncryptionType;
    entityUrl: string;
    issuer?: string;
    samlIdpSLOBindingEnum?: SamlIdpSLOBinding;
    samlNameIdFormat?: SamlNameIdFormatType;
    samlSigningAlgoType?: SamlSigningAlgoType;
    samlSloUrl?: string;
    samlSubjectCustomAttr?: string;
    samlSubjectType: SamlSubjectType;
}

export type ConnectedAppSessionPolicy = {
    policyAction?: string;
    sessionLevel?: string;
    sessionTimeout?: number;
}

export type ConnectivityDevConfigMetadata = Metadata &  {
    allowNonSubscribedNotifTypes?: boolean;
    isOauth?: boolean;
    issuer?: string;
    mobileStartUrl?: string;
    nameIdFormat?: string;
    samlAscUrl?: string;
    samlCertificate?: string;
    samlEncryptionCertificate?: string;
    samlEncryptionType?: string;
    samlEntityUrl?: string;
    samlIdpSLOBinding?: string;
    samlSigningAlgoType?: string;
    samlSubjectType?: string;
    singleLogoutUrl?: string;
    startUrl?: string;
    subjectCustomAttr?: string;
}

export type ContentAsset = Metadata &  {
    format?: ContentAssetFormat;
    isVisibleByExternalUsers?: boolean;
    language: string;
    masterLabel: string;
    originNetwork?: string;
    relationships?: ContentAssetRelationships;
    versions: ContentAssetVersions;
}

export type ContentAssetRelationships = {
    emailTemplate?: ContentAssetLink | ContentAssetLink[];
    insightsApplication?: ContentAssetLink | ContentAssetLink[];
    network?: ContentAssetLink | ContentAssetLink[];
    organization?: ContentAssetLink;
    workspace?: ContentAssetLink | ContentAssetLink[];
}

export type ContentAssetLink = {
    access: ContentAssetAccess;
    isManagingWorkspace?: boolean;
    name?: string;
}

export type ContentAssetVersions = {
    version?: ContentAssetVersion | ContentAssetVersion[];
}

export type ContentAssetVersion = {
    number: string;
    pathOnClient: string;
    zipEntry?: string;
}

export type ContextDefinition = Metadata & sObject &  {
    clonedFrom?: string;
    contextDefinitionVersions?: ContextDefinitionVersion | ContextDefinitionVersion[];
    contextTtl?: number;
    description?: string;
    inheritedFrom?: string;
    inheritedFromVersion?: string;
    isProtected?: boolean;
    masterLabel: string;
    title: string;
}

export type ContextDefinitionVersion = {
    contextMappings?: ContextMapping | ContextMapping[];
    contextNodes?: ContextNode | ContextNode[];
    endDate?: string;
    isActive?: boolean;
    startDate: string;
    versionNumber: number;
}

export type ContextMapping = {
    contextNodeMappings?: ContextNodeMapping | ContextNodeMapping[];
    default?: boolean;
    description?: string;
    inheritedFrom?: string;
    title: string;
}

export type ContextNodeMapping = {
    contextAttributeMappings?: ContextAttributeMapping | ContextAttributeMapping[];
    contextNode?: string;
    inheritedFrom?: string;
    object?: string;
}

export type ContextAttributeMapping = {
    contextAttrHydrationDetails?: ContextAttrHydrationDetail | ContextAttrHydrationDetail[];
    contextAttribute?: string;
    contextInputAttributeName: string;
    inheritedFrom?: string;
}

export type ContextAttrHydrationDetail = {
    contextAttrHydrationDetails?: ContextAttrHydrationDetail | ContextAttrHydrationDetail[];
    inheritedFrom?: string;
    objectName: string;
    queryAttribute: string;
}

export type ContextNode = {
    contextAttributes?: ContextAttribute | ContextAttribute[];
    contextTags?: ContextTag | ContextTag[];
    inheritedFrom?: string;
    title: string;
    transposable?: boolean;
}

export type ContextAttribute = {
    contextTags?: ContextTag | ContextTag[];
    dataType: ContextAttributeDataType;
    domainSet?: string;
    fieldType: ContextAttributeFieldType;
    inheritedFrom?: string;
    key?: boolean;
    title: string;
    value?: boolean;
}

export type ContextTag = {
    inheritedFrom?: string;
    title: string;
}

export type ContractType = Metadata & sObject &  {
    contractTypeConfigs?: ContractTypeConfig | ContractTypeConfig[];
    isDefault?: boolean;
    masterLabel: string;
    subTypes?: string;
}

export type ContractTypeConfig = {
    configType: ContractConfigType;
    configValue: string;
    usageType?: ContractUsageType;
}

export type ConvReasonReportDefinition = Metadata & sObject &  {
    endDate: Date;
    externalModelIdentifier?: string;
    name: string;
    pipelineRunIdentifier?: string;
    refreshFrequency: RefreshFrequency;
    startDate: Date;
    status: ReportStatus;
}

export type ConvReasonReportSegmentDef = Metadata & sObject &  {
    convReasonReportDefinition: string;
    filterCriteria?: string;
    filterCriteriaAsJson?: string;
    name: string;
    segmentObject?: string;
    segmentType: SegmentationType;
    targetObject: string;
}

export type ConversationChannelDefinition = Metadata & sObject &  {
    connectedAppOauthLink: string;
    consentOwner?: ConsentOwner;
    conversationVendorInfo?: string;
    customEventChnlAddrIdField?: string;
    customEventPayloadField: string;
    customEventRecipientField?: string;
    customEventTypeField?: string;
    customPlatformEvent: string;
    developerName: string;
    masterLabel: string;
    routingOwner?: RoutingOwner;
    supportsDoubleOptInConsent?: boolean;
    supportsExplicitConsent?: boolean;
    supportsImplicitConsent?: boolean;
    supportsIsoCountryCode?: boolean;
    supportsKeywords?: boolean;
}

export type ConversationMessageDefinition = Metadata & sObject &  {
    constants?: ConversationMessageConstant | ConversationMessageConstant[];
    description?: string;
    label: string;
    language?: string;
    messageHandlers?: ConversationMessageHandler | ConversationMessageHandler[];
    messageLayouts?: ConversationMessageLayout | ConversationMessageLayout[];
    optionsParameter?: ConversationMessageOptionsParameter;
    parameters?: ConversationMessageParameter | ConversationMessageParameter[];
    type: ConversationMessageDefinitionType;
}

export type ConversationMessageConstant = {
    compositeValues?: ConversationMessageConstantCompositeValue | ConversationMessageConstantCompositeValue[];
    constantType: ConversationMessageConstantType;
    primitiveValues?: ConversationMessageConstantPrimitiveValue | ConversationMessageConstantPrimitiveValue[];
}

export type ConversationMessageConstantCompositeValue = {
    constantItems?: ConversationMessageConstant | ConversationMessageConstant[];
    identifier: string;
}

export type ConversationMessageConstantPrimitiveValue = {
    contentAssetName?: string;
    textValue?: string;
    type: ConversationMessageConstantValueType;
    urlValue?: string;
}

export type ConversationMessageHandler = {
    activeRequestDurationMinutes: number;
    handlerName: string;
    handlerType: ConversationMessageHandlerType;
}

export type ConversationMessageLayout = {
    externalTemplates?: ConvMsgExternalTemplateVersion | ConvMsgExternalTemplateVersion[];
    formatType: ConversationMessageFormatType;
    layoutItems?: ConversationMessageLayoutItem | ConversationMessageLayoutItem[];
    messageType: ConversationMessageType;
}

export type ConvMsgExternalTemplateVersion = {
    accountIdentifier: string;
    accountName: string;
    language: string;
    status: ConvMsgExternalTemplateVersionStatus;
    templateName: string;
    templateVersionIdentifier: string;
}

export type ConversationMessageLayoutItem = {
    collectionType: ConversationMessageCollectionType;
    compositeValues?: ConversationMessageLayoutCompositeValue | ConversationMessageLayoutCompositeValue[];
    name: string;
    primitiveValues?: ConversationMessageLayoutPrimitiveValue | ConversationMessageLayoutPrimitiveValue[];
}

export type ConversationMessageLayoutCompositeValue = {
    compositeTypeName: string;
    layoutItems?: ConversationMessageLayoutItem | ConversationMessageLayoutItem[];
    valueSourceReference?: string;
}

export type ConversationMessageLayoutPrimitiveValue = {
    contentAssetName?: string;
    fieldName?: string;
    formulaTemplate?: string;
    literalValue?: string;
    mergeFields?: ConversationMessageMergeField | ConversationMessageMergeField[];
    type: ConversationMessageLayoutValueType;
    valueFormula?: string;
    valueSourceReference?: string;
}

export type ConversationMessageMergeField = {
    formulaTemplate: string;
    mergeFieldType: ConversationMessageMergeFieldType;
    name: string;
    valueSourceReference: string;
}

export type ConversationMessageOptionsParameter = {
    compositeTypeDetails?: ConversationMessageParameterCompositeDetails;
    optionsParameterType: ConversationMessageOptionsParameterType;
    primitiveTypeDetails?: ConversationMessageParameterPrimitiveDetails;
}

export type ConversationMessageParameterCompositeDetails = {
    compositeChildItems?: ConversationMessageParameterCompositeDetails | ConversationMessageParameterCompositeDetails[];
    isList?: boolean;
    isRequired?: boolean;
    label?: string;
    maxListItems?: number;
    name?: string;
    primitiveChildItems?: ConversationMessageParameterPrimitiveDetails | ConversationMessageParameterPrimitiveDetails[];
}

export type ConversationMessageParameterPrimitiveDetails = {
    isList?: boolean;
    isRequired?: boolean;
    label?: string;
    maxListItems?: number;
    name?: string;
    sobjectType?: string;
    valueType?: ConversationMessageValueType;
}

export type ConversationMessageParameter = {
    compositeTypeDetails?: ConversationMessageParameterCompositeDetails;
    parameterType: ConversationMessageParameterType;
    primitiveTypeDetails?: ConversationMessageParameterPrimitiveDetails;
}

export type ConversationVendorInfo = Metadata & sObject &  {
    agentSSOSupported?: boolean;
    awsAccountKey?: string;
    awsRootEmail?: string;
    awsTenantVersion?: number;
    bridgeComponent?: string;
    clientAuthMode?: ClientAuthMode;
    connectorUrl?: string;
    customConfig?: string;
    customLoginUrl?: string;
    developerName: string;
    einsteinConversationInsightsSupported?: boolean;
    integrationClass?: string;
    integrationClassName?: string;
    intelligenceSupported?: boolean;
    isTaxCompliant?: boolean;
    keyProvisioningSupported?: boolean;
    masterLabel: string;
    namedCredential?: string;
    namedCredentialSupported?: boolean;
    partnerContactCenterListSupported?: boolean;
    partnerPhoneNumbersSupported?: boolean;
    partnerTransferDestinationsSupported?: boolean;
    queueManagementSupported?: boolean;
    serverAuthMode?: ServerAuthMode;
    telephonySettingsComponent?: string;
    universalCallRecordingAccessSupported?: boolean;
    userSyncingSupported?: boolean;
    vendorType?: ConversationVendorType;
}

export type CorsWhitelistOrigin = Metadata &  {
    urlPattern: string;
}

export type CspTrustedSite = Metadata & sObject &  {
    canAccessCamera?: boolean;
    canAccessMicrophone?: boolean;
    context?: CspTrustedSiteContext;
    description?: string;
    endpointUrl: string;
    isActive: boolean;
    isApplicableToConnectSrc?: boolean;
    isApplicableToFontSrc?: boolean;
    isApplicableToFrameSrc?: boolean;
    isApplicableToImgSrc?: boolean;
    isApplicableToMediaSrc?: boolean;
    isApplicableToStyleSrc?: boolean;
    mobileExtension?: string;
}

export type CustomApplication = Metadata & sObject &  {
    actionOverrides?: AppActionOverride | AppActionOverride[];
    brand?: AppBrand;
    consoleConfig?: ServiceCloudConsoleConfig;
    defaultLandingTab?: string;
    description?: string;
    formFactors?: FormFactor | FormFactor[];
    isNavAutoTempTabsDisabled?: boolean;
    isNavPersonalizationDisabled?: boolean;
    isNavTabPersistenceDisabled?: boolean;
    isOmniPinnedViewEnabled?: boolean;
    isServiceCloudConsole?: boolean;
    label?: string;
    logo?: string;
    navType?: NavType;
    preferences?: AppPreferences;
    profileActionOverrides?: AppProfileActionOverride | AppProfileActionOverride[];
    setupExperience?: string;
    subscriberTabs?: string | string[];
    tabSetType?: string;
    tabs?: string | string[];
    uiType?: UiType;
    utilityBar?: string;
    workspaceConfig?: AppWorkspaceConfig;
}

export type AppActionOverride = ActionOverride &  {
    pageOrSobjectType: string;
}

export type ActionOverride = {
    actionName?: string;
    comment?: string;
    content?: string;
    formFactor?: FormFactor;
    skipRecordTypeSelect?: boolean;
    type?: ActionOverrideType;
}

export type AppBrand = {
    footerColor?: string;
    headerColor?: string;
    logo?: string;
    logoVersion?: number;
    shouldOverrideOrgTheme?: boolean;
}

export type ServiceCloudConsoleConfig = {
    componentList?: AppComponentList;
    detailPageRefreshMethod: string;
    footerColor?: string;
    headerColor?: string;
    keyboardShortcuts: KeyboardShortcuts;
    listPlacement: ListPlacement;
    listRefreshMethod: string;
    liveAgentConfig?: LiveAgentConfig;
    primaryTabColor?: string;
    pushNotifications?: PushNotification | PushNotification[];
    tabLimitConfig?: TabLimitConfig;
    whitelistedDomains?: string | string[];
}

export type AppComponentList = {
    alignment: string;
    components?: string | string[];
}

export type KeyboardShortcuts = {
    customShortcuts?: CustomShortcut | CustomShortcut[];
    defaultShortcuts?: DefaultShortcut | DefaultShortcut[];
}

export type CustomShortcut = DefaultShortcut &  {
    description?: string;
    eventName: string;
}

export type DefaultShortcut = {
    action: string;
    active: boolean;
    keyCommand: string;
}

export type ListPlacement = {
    height?: number;
    location: string;
    units?: string;
    width?: number;
}

export type LiveAgentConfig = {
    enableLiveChat?: boolean;
    openNewAccountSubtab?: boolean;
    openNewCaseSubtab?: boolean;
    openNewContactSubtab?: boolean;
    openNewLeadSubtab?: boolean;
    openNewVFPageSubtab?: boolean;
    pageNamesToOpen?: string | string[];
    showKnowledgeArticles?: boolean;
}

export type PushNotification = {
    fieldNames?: string | string[];
    objectName: string;
}

export type TabLimitConfig = {
    maxNumberOfPrimaryTabs?: string;
    maxNumberOfSubTabs?: string;
}

export type AppPreferences = {
    enableCustomizeMyTabs: boolean;
    enableKeyboardShortcuts: boolean;
    enableListViewHover: boolean;
    enableListViewReskin: boolean;
    enableMultiMonitorComponents: boolean;
    enablePinTabs: boolean;
    enableTabHover: boolean;
    enableTabLimits: boolean;
    saveUserSessions: boolean;
}

export type AppProfileActionOverride = ProfileActionOverride &  {
    profile: string;
}

export type ProfileActionOverride = {
    actionName: string;
    content?: string;
    formFactor: FormFactor;
    pageOrSobjectType: string;
    recordType?: string;
    type: ActionOverrideType;
}

export type AppWorkspaceConfig = {
    mappings?: WorkspaceMapping | WorkspaceMapping[];
}

export type WorkspaceMapping = {
    fieldName?: string;
    tab: string;
}

export type CustomApplicationComponent = Metadata &  {
    buttonIconUrl?: string;
    buttonStyle?: string;
    buttonText?: string;
    buttonWidth?: number;
    height?: number;
    isHeightFixed: boolean;
    isHidden: boolean;
    isWidthFixed: boolean;
    visualforcePage: string;
    width?: number;
}

export type CustomFeedFilter = Metadata &  {
    criteria?: FeedFilterCriterion | FeedFilterCriterion[];
    description?: string;
    isProtected?: boolean;
    label: string;
}

export type FeedFilterCriterion = {
    feedItemType: FeedItemType;
    feedItemVisibility?: FeedItemVisibility;
    relatedSObjectType?: string;
}

export type CustomField = Metadata & sObject &  {
    businessOwnerGroup?: string;
    businessOwnerUser?: string;
    businessStatus?: string;
    caseSensitive?: boolean;
    complianceGroup?: string;
    customDataType?: string;
    defaultValue?: string;
    deleteConstraint?: DeleteConstraint;
    deprecated?: boolean;
    description?: string;
    displayFormat?: string;
    displayLocationInDecimal?: boolean;
    elementType?: ElementType;
    encryptionScheme?: EncryptionScheme;
    escapeMarkup?: boolean;
    externalDeveloperName?: string;
    externalId?: boolean;
    formula?: string;
    formulaTreatBlanksAs?: TreatBlanksAs;
    inlineHelpText?: string;
    isAIPredictionField?: boolean;
    isConvertLeadDisabled?: boolean;
    isFilteringDisabled?: boolean;
    isNameField?: boolean;
    isSortingDisabled?: boolean;
    label?: string;
    length?: number;
    lookupFilter?: LookupFilter;
    maskChar?: EncryptedFieldMaskChar;
    maskType?: EncryptedFieldMaskType;
    metadataRelationshipControllingField?: string;
    mktDataLakeFieldAttributes?: MktDataLakeFieldAttributes;
    mktDataModelFieldAttributes?: MktDataModelFieldAttributes;
    populateExistingRows?: boolean;
    precision?: number;
    readOnlyProxy?: boolean;
    referenceTargetField?: string;
    referenceTo?: string;
    relationshipLabel?: string;
    relationshipName?: string;
    relationshipOrder?: number;
    reparentableMasterDetail?: boolean;
    required?: boolean;
    restrictedAdminField?: boolean;
    scale?: number;
    securityClassification?: string;
    startingNumber?: number;
    stripMarkup?: boolean;
    summarizedField?: string;
    summaryFilterItems?: FilterItem | FilterItem[];
    summaryForeignKey?: string;
    summaryOperation?: SummaryOperations;
    trackFeedHistory?: boolean;
    trackHistory?: boolean;
    trackTrending?: boolean;
    translateData?: boolean;
    type?: FieldType;
    unique?: boolean;
    valueSet?: ValueSet;
    visibleLines?: number;
    writeRequiresMasterRead?: boolean;
}

export type LookupFilter = {
    active: boolean;
    booleanFilter?: string;
    description?: string;
    errorMessage?: string;
    filterItems?: FilterItem | FilterItem[];
    infoMessage?: string;
    isOptional: boolean;
}

export type MktDataLakeFieldAttributes = {
    dateFormat?: string;
    definitionCreationType?: DefinitionCreationType;
    externalName?: string;
    isEventDate?: boolean;
    isInternalOrganization?: boolean;
    isRecordModified?: boolean;
    keyQualifierName?: string;
    mktDatalakeSrcKeyQualifier?: string;
    primaryIndexOrder?: number;
    usageTag?: UsageTag;
}

export type MktDataModelFieldAttributes = {
    definitionCreationType?: DefinitionCreationType;
    invalidMergeActionType?: InvalidMergeActionType;
    isDynamicLookup?: boolean;
    keyQualifierName?: string;
    mappingAlertType?: MappingAlertType;
    primaryIndexOrder?: number;
    refAttrDeveloperName?: string;
    usageTag?: MktDataModelFieldUsageTag;
}

export type ValueSet = {
    controllingField?: string;
    restricted?: boolean;
    valueSetDefinition?: ValueSetValuesDefinition;
    valueSetName?: string;
    valueSettings?: ValueSettings | ValueSettings[];
}

export type ValueSetValuesDefinition = {
    sorted: boolean;
    value?: CustomValue | CustomValue[];
}

export type CustomValue = Metadata &  {
    color?: string;
    default: boolean;
    description?: string;
    isActive?: boolean;
    label?: string;
    valueName: string;
}

export type StandardValue = CustomValue &  {
    allowEmail?: boolean;
    closed?: boolean;
    converted?: boolean;
    cssExposed?: boolean;
    forecastCategory?: ForecastCategories;
    groupingString?: string;
    highPriority?: boolean;
    probability?: number;
    reverseRole?: string;
    reviewed?: boolean;
    won?: boolean;
}

export type ValueSettings = {
    controllingFieldValue?: string | string[];
    valueName: string;
}

export type CustomHelpMenuSection = Metadata & sObject &  {
    customHelpMenuItems?: CustomHelpMenuItem | CustomHelpMenuItem[];
    masterLabel: string;
}

export type CustomHelpMenuItem = {
    linkUrl: string;
    masterLabel: string;
    sortOrder: number;
}

export type CustomIndex = Metadata &  {
    allowNullValues?: boolean;
}

export type CustomLabel = Metadata &  {
    categories?: string;
    language: string;
    protected: boolean;
    shortDescription: string;
    value: string;
}

export type CustomLabels = Metadata &  {
}

export type CustomMetadata = Metadata &  {
    description?: string;
    label?: string;
    protected?: boolean;
    values?: CustomMetadataValue | CustomMetadataValue[];
}

export type CustomMetadataValue = {
    field: string;
}

export type CustomNotificationType = Metadata & sObject &  {
    customNotifTypeName: string;
    description?: string;
    desktop: boolean;
    masterLabel: string;
    mobile: boolean;
    slack?: boolean;
}

export type CustomObject = Metadata & sObject &  {
    actionOverrides?: ActionOverride | ActionOverride[];
    allowInChatterGroups?: boolean;
    compactLayoutAssignment?: string;
    customHelp?: string;
    customHelpPage?: string;
    customSettingsType?: CustomSettingsType;
    deploymentStatus?: DeploymentStatus;
    deprecated?: boolean;
    description?: string;
    enableActivities?: boolean;
    enableBulkApi?: boolean;
    enableDataTranslation?: boolean;
    enableDivisions?: boolean;
    enableEnhancedLookup?: boolean;
    enableFeeds?: boolean;
    enableHistory?: boolean;
    enableLicensing?: boolean;
    enablePublishStatusTracking?: boolean;
    enableReports?: boolean;
    enableSearch?: boolean;
    enableSharing?: boolean;
    enableStreamingApi?: boolean;
    eventType?: PlatformEventType;
    externalDataSource?: string;
    externalIndexAvailable?: boolean;
    externalName?: string;
    externalRepository?: string;
    externalSharingModel?: SharingModel;
    gender?: Gender;
    household?: boolean;
    label?: string;
    mktDataLakeAttributes?: MktDataLakeAttributes;
    mktDataModelAttributes?: MktDataModelAttributes;
    nameField?: CustomField;
    pluralLabel?: string;
    profileSearchLayouts?: ProfileSearchLayouts | ProfileSearchLayouts[];
    publishBehavior?: PlatformEventPublishBehavior;
    recordTypeTrackHistory?: boolean;
    searchLayouts?: SearchLayouts;
    sharingModel?: SharingModel;
    startsWith?: StartsWith;
    visibility?: SetupObjectVisibility;
}

export type MktDataLakeAttributes = {
    creationType?: DefinitionCreationType;
    isEnabled?: boolean;
    objectCategory?: string;
}

export type MktDataModelAttributes = {
    creationType?: DefinitionCreationType;
    dataModelTaxonomy?: string;
    dataSpaceName?: string;
    dataSpacePrefix?: string;
    description?: string;
    isEnabled?: boolean;
    isSegmentable?: boolean;
    isUsedForMetrics?: boolean;
    objectCategory?: string;
    referenceEntityGroup?: string;
    referenceEntityName?: string;
    referenceEntitySubjectArea?: string;
}

export type ProfileSearchLayouts = {
    fields?: string | string[];
    profileName?: string;
}

export type SearchLayouts = {
    customTabListAdditionalFields?: string | string[];
    excludedStandardButtons?: string | string[];
    listViewButtons?: string | string[];
    lookupDialogsAdditionalFields?: string | string[];
    lookupFilterFields?: string | string[];
    lookupPhoneDialogsAdditionalFields?: string | string[];
    massQuickActions?: string | string[];
    searchFilterFields?: string | string[];
    searchResultsAdditionalFields?: string | string[];
    searchResultsCustomButtons?: string | string[];
}

export type CustomPageWebLink = Metadata &  {
    availability: WebLinkAvailability;
    description?: string;
    displayType: WebLinkDisplayType;
    encodingKey?: Encoding;
    hasMenubar?: boolean;
    hasScrollbars?: boolean;
    hasToolbar?: boolean;
    height?: number;
    isResizable?: boolean;
    linkType: WebLinkType;
    masterLabel?: string;
    openType: WebLinkWindowType;
    page?: string;
    position?: WebLinkPosition;
    protected: boolean;
    requireRowSelection?: boolean;
    scontrol?: string;
    showsLocation?: boolean;
    showsStatus?: boolean;
    url?: string;
    width?: number;
}

export type CustomPermission = Metadata &  {
    connectedApp?: string;
    description?: string;
    isLicensed: boolean;
    label: string;
    requiredPermission?: CustomPermissionDependencyRequired | CustomPermissionDependencyRequired[];
}

export type CustomPermissionDependencyRequired = {
    customPermission: string;
    dependency: boolean;
}

export type CustomSite = Metadata &  {
    active: boolean;
    allowGuestPaymentsApi?: boolean;
    allowHomePage: boolean;
    allowStandardAnswersPages?: boolean;
    allowStandardIdeasPages: boolean;
    allowStandardLookups: boolean;
    allowStandardPortalPages: boolean;
    allowStandardSearch: boolean;
    analyticsTrackingCode?: string;
    authorizationRequiredPage?: string;
    bandwidthExceededPage?: string;
    browserXssProtection: boolean;
    cachePublicVisualforcePagesInProxyServers?: boolean;
    changePasswordPage?: string;
    chatterAnswersForgotPasswordConfirmPage?: string;
    chatterAnswersForgotPasswordPage?: string;
    chatterAnswersHelpPage?: string;
    chatterAnswersLoginPage?: string;
    chatterAnswersRegistrationPage?: string;
    clickjackProtectionLevel: SiteClickjackProtectionLevel;
    contentSniffingProtection: boolean;
    customWebAddresses?: SiteWebAddress | SiteWebAddress[];
    description?: string;
    enableAuraRequests?: boolean;
    favoriteIcon?: string;
    fileNotFoundPage?: string;
    forgotPasswordPage?: string;
    genericErrorPage?: string;
    guestProfile?: string;
    inMaintenancePage?: string;
    inactiveIndexPage?: string;
    indexPage: string;
    masterLabel: string;
    myProfilePage?: string;
    portal?: string;
    redirectToCustomDomain?: boolean;
    referrerPolicyOriginWhenCrossOrigin: boolean;
    robotsTxtPage?: string;
    selfRegPage?: string;
    serverIsDown?: string;
    siteAdmin?: string;
    siteGuestRecordDefaultOwner?: string;
    siteIframeWhiteListUrls?: SiteIframeWhiteListUrl | SiteIframeWhiteListUrl[];
    siteRedirectMappings?: SiteRedirectMapping | SiteRedirectMapping[];
    siteTemplate?: string;
    siteType: SiteType;
    subdomain?: string;
    urlPathPrefix?: string;
}

export type SiteWebAddress = {
    certificate?: string;
    domainName: string;
    primary: boolean;
}

export type SiteIframeWhiteListUrl = {
    url: string;
}

export type SiteRedirectMapping = {
    action: SiteRedirect;
    isActive?: boolean;
    isDynamic?: boolean;
    source: string;
    target: string;
}

export type CustomTab = Metadata & sObject &  {
    auraComponent?: string;
    customObject?: boolean;
    description?: string;
    flexiPage?: string;
    frameHeight?: number;
    hasSidebar?: boolean;
    icon?: string;
    label?: string;
    lwcComponent?: string;
    motif?: string;
    page?: string;
    scontrol?: string;
    splashPageLink?: string;
    url?: string;
    urlEncodingKey?: Encoding;
}

export type Dashboard = Metadata &  {
    backgroundEndColor: string;
    backgroundFadeDirection: ChartBackgroundDirection;
    backgroundStartColor: string;
    chartTheme?: ChartTheme;
    colorPalette?: ChartColorPalettes;
    dashboardChartTheme?: ChartTheme;
    dashboardColorPalette?: ChartColorPalettes;
    dashboardFilters?: DashboardFilter | DashboardFilter[];
    dashboardGridLayout?: DashboardGridLayout;
    dashboardResultRefreshedDate?: string;
    dashboardResultRunningUser?: string;
    dashboardType?: DashboardType;
    description?: string;
    folderName?: string;
    isGridLayout?: boolean;
    leftSection?: DashboardComponentSection;
    middleSection?: DashboardComponentSection;
    numSubscriptions?: number;
    owner?: string;
    rightSection?: DashboardComponentSection;
    runningUser?: string;
    textColor: string;
    title: string;
    titleColor: string;
    titleSize: number;
}

export type DashboardFilter = {
    dashboardFilterOptions?: DashboardFilterOption | DashboardFilterOption[];
    name: string;
}

export type DashboardFilterOption = {
    operator: DashboardFilterOperation;
    values?: string | string[];
}

export type DashboardGridLayout = {
    dashboardGridComponents?: DashboardGridComponent | DashboardGridComponent[];
    numberOfColumns: number;
    rowHeight: number;
}

export type DashboardGridComponent = {
    colSpan: number;
    columnIndex: number;
    dashboardComponent: DashboardComponent;
    rowIndex: number;
    rowSpan: number;
}

export type DashboardComponent = {
    autoselectColumnsFromReport?: boolean;
    chartAxisRange?: ChartRangeType;
    chartAxisRangeMax?: number;
    chartAxisRangeMin?: number;
    chartSummary?: ChartSummary | ChartSummary[];
    componentChartTheme?: ChartTheme;
    componentType: DashboardComponentType;
    dashboardComponentContents?: DashboardComponentContent | DashboardComponentContent[];
    dashboardDynamicValues?: DashboardDynamicValue | DashboardDynamicValue[];
    dashboardFilterColumns?: DashboardFilterColumn | DashboardFilterColumn[];
    dashboardTableColumn?: DashboardTableColumn | DashboardTableColumn[];
    decimalPrecision?: number;
    displayUnits?: ChartUnits;
    drillDownUrl?: string;
    drillEnabled?: boolean;
    drillToDetailEnabled?: boolean;
    enableHover?: boolean;
    expandOthers?: boolean;
    flexComponentProperties?: DashboardFlexTableComponentProperties;
    footer?: string;
    gaugeMax?: number;
    gaugeMin?: number;
    groupingColumn?: string | string[];
    groupingSortProperties?: DashboardComponentGroupingSortProperties;
    header?: string;
    indicatorBreakpoint1?: number;
    indicatorBreakpoint2?: number;
    indicatorHighColor?: string;
    indicatorLowColor?: string;
    indicatorMiddleColor?: string;
    legendPosition?: ChartLegendPosition;
    maxValuesDisplayed?: number;
    metricLabel?: string;
    page?: string;
    pageHeightInPixels?: number;
    report?: string;
    scontrol?: string;
    scontrolHeightInPixels?: number;
    showPercentage?: boolean;
    showPicturesOnCharts?: boolean;
    showPicturesOnTables?: boolean;
    showRange?: boolean;
    showTotal?: boolean;
    showValues?: boolean;
    sortBy?: DashboardComponentFilter;
    title?: string;
    useReportChart?: boolean;
}

export type ChartSummary = {
    aggregate?: ReportSummaryType;
    axisBinding?: ChartAxis;
    column: string;
}

export type DashboardComponentContent = {
    additionalInfo?: string;
    altText?: string;
    fileName?: string;
    fit?: Fit;
    horizontalAlignment?: HorizontalAlignment;
    richTextContent?: string;
    tooltip?: string;
    verticalAlignment?: VerticalAlignment;
}

export type DashboardDynamicValue = {
    additionalInfo?: string;
    fieldName: string;
    isDynamicUser?: boolean;
}

export type DashboardFilterColumn = {
    column: string;
}

export type DashboardTableColumn = {
    aggregateType?: ReportSummaryType;
    calculatePercent?: boolean;
    column: string;
    decimalPlaces?: number;
    showSubTotal?: boolean;
    showTotal?: boolean;
    sortBy?: DashboardComponentFilter;
}

export type DashboardFlexTableComponentProperties = {
    decimalPrecision?: number;
    flexTableColumn?: DashboardComponentColumn | DashboardComponentColumn[];
    flexTableSortInfo?: DashboardComponentSortInfo;
    hideChatterPhotos?: boolean;
}

export type DashboardComponentColumn = {
    breakPoint1?: number;
    breakPoint2?: number;
    breakPointOrder?: number;
    highRangeColor?: number;
    lowRangeColor?: number;
    midRangeColor?: number;
    reportColumn: string;
    showSubTotal?: boolean;
    showTotal?: boolean;
    type: DashboardComponentColumnType;
}

export type DashboardComponentSortInfo = {
    sortColumn?: string;
    sortOrder?: string;
}

export type DashboardComponentGroupingSortProperties = {
    groupingSorts?: DashboardComponentGroupingSort | DashboardComponentGroupingSort[];
}

export type DashboardComponentGroupingSort = {
    groupingLevel: string;
    inheritedReportGroupingSort?: string;
    sortColumn?: string;
    sortOrder?: string;
}

export type DashboardComponentSection = {
    columnSize: DashboardComponentSize;
    components?: DashboardComponent | DashboardComponent[];
}

export type DataCalcInsightTemplate = Metadata & sObject &  {
    builderExpression: string;
    creationType?: CalculatedInsightCreationType;
    dataspaceName: string;
    dataspacePrefix: string;
    definitionType: CalculatedInsightDefinitionType;
    description: string;
    developerName: string;
    expression: string;
    masterLabel: string;
}

export type DataCategoryGroup = Metadata &  {
    active: boolean;
    dataCategory: DataCategory;
    description?: string;
    label: string;
    objectUsage?: ObjectUsage;
}

export type DataCategory = {
    dataCategory?: DataCategory | DataCategory[];
    label: string;
    name: string;
}

export type ObjectUsage = {
    object?: string | string[];
}

export type DataConnectionParamTmpl = Metadata &  {
    paramName: string;
    value: string;
}

export type DataConnectorIngestApi = Metadata &  {
    isProtected?: boolean;
    masterLabel: string;
    sourceName: string;
}

export type DataConnectorS3 = Metadata & sObject &  {
    delimiter?: string;
    fileNameWildcard?: string;
    fileType?: string;
    importFromDirectory?: string;
    masterLabel: string;
    s3AccessKey?: string;
    s3BucketName: string;
    s3SecretKey?: string;
}

export type DataModelTaxonomy = Metadata & sObject &  {
    creationType?: DefinitionCreationType;
    dataModelType: DataModelType;
    isProtected?: boolean;
    masterLabel: string;
    supplier: string;
    updateDate: Date;
    versionNbr: number;
}

export type DataObjectCategory = Metadata & sObject &  {
    definitionCreationType?: DefinitionCreationType;
    masterLabel: string;
}

export type DataPackageKitDefinition = Metadata & sObject &  {
    description?: string;
    developerName: string;
    isDeployed?: boolean;
    isEnabled?: boolean;
    masterLabel: string;
    versionNumber?: number;
}

export type DataPackageKitObject = Metadata & sObject &  {
    masterLabel: string;
    parentDataPackageKitDefinitionName: string;
    referenceObjectName: string;
    referenceObjectType: string;
}

export type DataPipeline = Metadata &  {
    apiVersion: number;
    label: string;
    scriptType: DataPipelineType;
}

export type DataPlatform = Metadata & sObject &  {
    dataConnectorType: string;
    dataPlatDataSetBundles?: DataPlatDataSetBundle | DataPlatDataSetBundle[];
    description?: string;
    forExportIntOrgName?: string;
    forImportIntOrgName?: string;
    isConfiguredByAdmin?: boolean;
    isProtected?: boolean;
    largeIconUri?: string;
    masterLabel: string;
    smallIconUri?: string;
}

export type DataPlatDataSetBundle = {
    bundleType?: string;
    dataPlatformDataSets?: DataPlatformDataSet | DataPlatformDataSet[];
    description?: string;
    iconUri?: string;
    sortOrder?: number;
}

export type DataPlatformDataSet = {
    dataSetType?: string;
    description?: string;
    iconUri?: string;
    sortOrder?: number;
}

export type DataSource = Metadata & sObject &  {
    masterLabel: string;
    prefix: string;
}

export type DataSourceBundleDefinition = Metadata & sObject &  {
    dataPlatform: string;
    description?: string;
    icon?: string;
    isMultiDeploymentSupported?: boolean;
    masterLabel: string;
}

export type DataSourceField = Metadata &  {
    datatype: string;
    dateFormat?: string;
    definitionCreationType?: DefinitionCreationType;
    externalName: string;
    fieldFormula?: string;
    isDataRequired?: boolean;
    isFormula?: boolean;
    keyQualifierName?: string;
    length?: number;
    masterLabel: string;
    precision?: number;
    primaryIndexOrder?: number;
    scale?: number;
    sequence: number;
    srcKeyQualifier?: string;
    usageTag?: UsageTag;
    versionNumber: number;
}

export type DataSourceObject = Metadata & sObject &  {
    dataSource: string;
    externalRecordIdentifier?: string;
    masterLabel: string;
    objectType?: DataObjectType;
}

export type DataSourceTenant = Metadata &  {
    externalRecordId: string;
    masterLabel: string;
}

export type DataSrcDataModelFieldMap = Metadata & sObject &  {
    masterLabel: string;
    sourceField: string;
    targetField: string;
    versionNumber: number;
}

export type DataStreamDefinition = Metadata & sObject &  {
    areHeadersIncludedInFile?: boolean;
    bulkIngest?: boolean;
    creationType: DefinitionCreationType;
    dataConnector: string;
    dataConnectorType?: string;
    dataExtensionIdentifier?: string;
    dataExtractField?: string;
    dataExtractMethods?: DataImportDataExtractMethods;
    dataPlatDataSetBundle?: string;
    dataPlatformDataSetItemName?: string;
    dataSource: string;
    description?: string;
    fileNameWildcard?: string;
    internalOrganization?: string;
    isLimitedToNewFiles?: boolean;
    isMissingFileFailure?: boolean;
    masterLabel: string;
    mktDataLakeObject: string;
    mktDataTranObject?: string;
}

export type DataStreamTemplate = Metadata & sObject &  {
    dataSourceBundleDefinition: string;
    dataSourceObject: string;
    masterLabel: string;
    objectCategory: string;
    refreshFrequency?: DataImportRefreshFrequency;
    refreshHours?: string;
    refreshMode?: DataImportRefreshMode;
}

export type DataWeaveResource = Metadata &  {
    apiVersion: number;
    isGlobal?: boolean;
    isProtected?: boolean;
}

export type DataspaceScope = Metadata &  {
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    metadataGroups?: DataspaceScopeSchemaAccess | DataspaceScopeSchemaAccess[];
}

export type DataspaceScopeSchemaAccess = {
    metadataGroup: string;
}

export type DecisionMatrixDefinition = Metadata & sObject &  {
    description?: string;
    groupKey?: string;
    label: string;
    processType?: ExpsSetProcessType;
    subGroupKey?: string;
    type?: DecisionMatrixType;
}

export type DecisionMatrixDefinitionVersion = Metadata & sObject &  {
    columns?: DecisionMatrixDefinitionVersionColumn | DecisionMatrixDefinitionVersionColumn[];
    decisionMatrixDefinition?: string;
    endDate?: Date;
    groupKeyValue?: string;
    label: string;
    startDate: Date;
    status: DecisionMatrixDefStatus;
    subGroupKeyValue?: string;
    versionNumber: number;
}

export type DecisionMatrixDefinitionVersionColumn = {
    columnType: DecisionMatrixColumnType;
    dataType: DecisionMatrixDataType;
    displaySequence: number;
    isWildcardColumn: boolean;
    name: string;
    rangeValue?: string;
    wildcardValue?: string;
}

export type DecisionTable = Metadata & sObject &  {
    collectOperator?: DecisionTableCollectOperator;
    conditionCriteria?: string;
    conditionType?: DecisionTableConditionType;
    dataSourceType?: DecisionTableDataSourceType;
    decisionTableParameters?: DecisionTableParameter | DecisionTableParameter[];
    decisionTableSourceCriterias?: DecisionTableSourceCriteria | DecisionTableSourceCriteria[];
    description?: string;
    doesConsiderNullValue?: boolean;
    filterResultBy?: DecisionTableHitPolicy;
    lastSyncDate?: string;
    refreshFailureReason?: string;
    refreshStatus?: DecisionTableRefreshStatus;
    setupName: string;
    sourceConditionLogic?: string;
    sourceObject: string;
    status: DecisionTableStatus;
    type?: DecisionTableType;
    usageType?: DecisionTableUsageType;
}

export type DecisionTableParameter = {
    dataType?: DTParameterDataType;
    decimalScale?: number;
    domainObject?: string;
    fieldName: string;
    fieldPath?: string;
    isGroupByField?: boolean;
    isPriorityField?: boolean;
    isRequired?: boolean;
    length?: number;
    operator?: DecisionTableOperator;
    sequence?: number;
    sortType?: DecisionTableSortType;
    usage: DecisionTableParameterType;
}

export type DecisionTableSourceCriteria = {
    operator: DTSourceCriteriaOperator;
    sequenceNumber: number;
    sourceFieldName: string;
    value?: string;
    valueType: DTSourceCriteriaValueType;
}

export type DecisionTableDatasetLink = Metadata & sObject &  {
    decisionTableName: string;
    decisionTblDatasetParameters?: DecisionTblDatasetParameter | DecisionTblDatasetParameter[];
    description?: string;
    isDefault?: boolean;
    setupName: string;
    sourceObject?: string;
}

export type DecisionTblDatasetParameter = {
    datasetFieldName: string;
    datasetSourceObject: string;
    fieldName: string;
}

export type PlatformEventSubscriberConfig = Metadata & sObject &  {
    batchSize?: number;
    isProtected?: boolean;
    masterLabel: string;
    numPartitions?: number;
    partitionKey?: string;
    platformEventConsumer: string;
    user?: string;
}

export type FtestTopLevelWithDeclMd1 = Metadata & sObject &  {
    bitVectorFieldRound?: boolean;
    bitVectorFieldSquare?: boolean;
    bitVectorFieldTriangle?: boolean;
    booleanField?: boolean;
    dateField?: Date;
    dateTimeField?: Date;
    doubleField?: number;
    emailField?: string;
    integerField: number;
    isProtected?: boolean;
    masterLabel: string;
    staticEnumField?: FTestTopLevelSelection;
    typeOneItems?: FtestDetailWithDeclMd1 | FtestDetailWithDeclMd1[];
    typeTwoItems?: FtestDetailWithDeclMd2 | FtestDetailWithDeclMd2[];
}

export type FtestDetailWithDeclMd1 = {
    bitVectorFieldBlooper?: boolean;
    bitVectorFieldRound?: boolean;
    bitVectorFieldSquare?: boolean;
    bitVectorFieldTriangle?: boolean;
    booleanField?: boolean;
    dateField?: Date;
    dateTimeField?: Date;
    doubleField?: number;
    emailField?: string;
    enumOrIdField?: string;
    integerField: number;
    staticEnumField?: FTestTopLevelSelection;
    subItems?: FtestSubDetailWithDeclMd | FtestSubDetailWithDeclMd[];
}

export type FtestSubDetailWithDeclMd = {
    booleanField?: boolean;
    dateField?: Date;
    dateTimeField?: Date;
    doubleField?: number;
    emailField?: string;
    integerField: number;
    staticEnumField?: FTestTopLevelSelection;
}

export type FtestDetailWithDeclMd2 = {
    booleanField?: boolean;
    dateField?: Date;
    dateTimeField?: Date;
    doubleField?: number;
    emailField?: string;
    integerField: number;
    staticEnumField?: FTestTopLevelSelection;
}

export type FtestTopLevelWithDeclMd3 = Metadata & sObject &  {
    isProtected?: boolean;
    lookupThatCameBefore?: string;
    masterLabel: string;
}

export type FtestTopLevelWithCrud = Metadata & sObject &  {
    isProtected?: boolean;
    masterLabel: string;
    textField?: string;
}

export type SchedulingObjective = Metadata & sObject &  {
    isProtected?: boolean;
    masterLabel: string;
    schedulingCategory: SchedulingCategory;
    schedulingObjectiveParameters?: SchedulingObjectiveParameter | SchedulingObjectiveParameter[];
    schedulingObjectiveType: SchedulingObjectiveType;
}

export type SchedulingObjectiveParameter = {
    parameterKey: ObjectiveParameterKey;
    value?: string;
}

export type FtestTopLevelWithDeclMd2 = Metadata & sObject &  {
    enumOrIdField?: string;
    isProtected?: boolean;
    lookupField?: string;
    masterLabel: string;
    onOrOffField: FTestOnOffSelection;
    season?: FTestSeasonSelection;
    someUser?: string;
    staticResourceLookup?: string;
    textField?: string;
    urlField?: string;
}

export type PipelineInspMetricConfig = Metadata & sObject &  {
    isCumulative: boolean;
    isProtected?: boolean;
    masterLabel: string;
    metric: PipelineInspectionMetric;
}

export type VirtualVisitConfig = Metadata & sObject &  {
    comprehendServiceType?: VirtualVisitComprehendServiceType;
    experienceCloudSiteUrl?: string;
    externalMsgServiceIdentifier?: string;
    externalRoleIdentifier?: string;
    externalUserIdentifier?: string;
    isProtected?: boolean;
    masterLabel: string;
    messagingRegion?: string;
    namedCredential?: string;
    storageBucketName?: string;
    usageType?: VirtualVisitUsageType;
    videoCallApptTypeValue?: string;
    videoControlRegion?: string;
    visitRegion?: VirtualVisitVisitRegion;
}

export type MobileSecurityAssignment = Metadata & sObject &  {
    connectedApplication?: string;
    isProtected?: boolean;
    masterLabel: string;
    profile?: string;
}

export type MobileSecurityPolicy = Metadata & sObject &  {
    effectiveDate?: Date;
    isEnabled: boolean;
    isProtected?: boolean;
    masterLabel: string;
    mobilePlatform?: MobileSecurityMobilePlatform;
    mobileSecurityAssignment?: string;
    ruleValue: string;
    ruleValueType: MobileSecurityPolicyRuleValueType;
    severityLevel: MobileSecurityPolicySeverityLevel;
    type: MobileSecurityPolicyType;
}

export type SlackFeatureExtlConfig = Metadata & sObject &  {
    isProtected?: boolean;
    masterLabel: string;
}

export type LearningAchievementConfig = Metadata & sObject &  {
    description?: string;
    iconName?: string;
    isProtected?: boolean;
    learningAchievementType: LearningAchievementType;
    learningAchvRecordType: string;
    masterLabel: string;
}

export type RecordAlertDataSource = Metadata & sObject &  {
    apexClass?: string;
    isActive?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    type: RecordAlertDataSourceType;
}

export type RecAlrtDataSrcExpSetDef = Metadata & sObject &  {
    expressionSetDefinition: string;
    expressionSetObject: string;
    isActive: boolean;
    isProtected?: boolean;
    masterLabel: string;
    recordAlertDataSource: string;
}

export type AppExplorationDataConsent = Metadata & sObject &  {
    applicationName?: string;
    availableObjects?: string;
    enabledObjects?: string;
    isProjectAccessEnabled?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    projectName?: string;
}

export type RegisteredExternalService = Metadata & sObject &  {
    configUrl?: string;
    description?: string;
    documentationUrl?: string;
    extensionPointName?: ExtensionPointName;
    externalServiceProvider: string;
    externalServiceProviderType: RegistryProviderType;
    iconUri?: string;
    isApplication?: boolean;
    isProtected?: boolean;
    masterLabel: string;
}

export type RecordAlertTemplate = Metadata & sObject &  {
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    recordAlertCategory?: string;
    subject?: string;
}

export type MobSecurityCertPinConfig = Metadata & sObject &  {
    certificateHash: string;
    domainName: string;
    isEnabled: boolean;
    isProtected?: boolean;
    isSubdomainIncluded: boolean;
    masterLabel: string;
    mobilePlatform?: MobileSecurityMobilePlatform;
    mobileSecurityAssignment?: string;
    severityLevel: MobileSecurityPolicySeverityLevel;
    type: MobileSecurityCertPinType;
}

export type SemanticModel = Metadata & sObject &  {
    app?: string;
    categories?: string;
    dataSpaceDefinition?: string;
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    semanticModelContent?: SemanticModelContent | SemanticModelContent[];
    unrelatedDataObjectsQueryBehavior?: SemanticModelQueryUnrelatedDataObjectsType;
}

export type SemanticModelContent = {
    semanticDefinition?: string;
}

export type SlackFeatureSettings = Metadata & sObject &  {
    isProtected?: boolean;
    masterLabel: string;
}

export type CareProviderSearchConfig = Metadata & sObject &  {
    isActive?: boolean;
    isProtected?: boolean;
    mappedObject: ProviderSearchObjectMapping;
    masterLabel: string;
    sourceField?: string;
    targetField?: string;
}

export type CareSystemFieldMapping = Metadata & sObject &  {
    externalIdField?: string;
    isActive?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    role: SourceSystemFieldRole;
    sourceSystem?: string;
    targetObject?: string;
}

export type CareLimitType = Metadata & sObject &  {
    isProtected?: boolean;
    limitType?: string;
    masterLabel: string;
    metricType?: CareLimitTypeMetricType;
}

export type AssessmentConfiguration = Metadata & sObject &  {
    configuration: AssessmentConfigurationOption;
    isProtected?: boolean;
    masterLabel: string;
    resolution: string;
    type: AssessmentType;
}

export type SchedulingRule = Metadata & sObject &  {
    isProtected?: boolean;
    masterLabel: string;
    schedulingCategory: SchedulingCategory;
    schedulingRuleParameters?: SchedulingRuleParameter | SchedulingRuleParameter[];
    schedulingRuleType: SchedulingRuleType;
}

export type SchedulingRuleParameter = {
    schedulingParameterKey: SchedulingParameterKey;
    value?: string;
}

export type CareProviderAfflRoleConfig = Metadata & sObject &  {
    affiliationType?: CareProviderAfflType;
    isProtected?: boolean;
    masterLabel: string;
    providerRole?: string;
}

export type PortalDelegablePermissionSet = Metadata & sObject &  {
    isProtected?: boolean;
    masterLabel: string;
    permissionSet: string;
    profile: string;
}

export type RelatedRecordAssocCriteria = Metadata & sObject &  {
    associationHandlerApexClass?: string;
    associationType: AssociationType;
    description?: string;
    eventType: AssociationEventType;
    isProtected?: boolean;
    masterLabel: string;
    preCondition: string;
    referenceObject: string;
    selectedOwnerField?: string;
    status: AssociationStatusType;
}

export type SemanticDefinition = Metadata & sObject &  {
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    semanticCalcDimension?: SemanticCalcDimension | SemanticCalcDimension[];
    semanticCalcMeasurement?: SemanticCalcMeasurement | SemanticCalcMeasurement[];
    semanticDataObject?: SemanticDataObject | SemanticDataObject[];
    semanticRelationship?: SemanticRelationship | SemanticRelationship[];
    type: SemanticDefinitionType;
}

export type SemanticCalcDimension = {
    dataType: SemanticCalculatedDimensionDataType;
    displayCategory: SemanticDisplayType;
    expression: string;
    geoRole: SemanticGeoRoleType;
    isVisible: boolean;
    sortOrder: SemanticSortingType;
}

export type SemanticCalcMeasurement = {
    aggregationType: SemanticAggregationType;
    dataType: SemanticCalculatedMeasurementDataType;
    decimalPlace: number;
    directionality: SemanticDirectionalityType;
    expression: string;
    filterLogic?: string;
    filters?: string;
    isVisible: boolean;
    shouldTreatNullsAsZeros: boolean;
    sortOrder: SemanticSortingType;
    total: SemanticAggregationType;
}

export type SemanticDataObject = {
    dataObjectDeveloperName: string;
    dataObjectType: SemanticDataObjectType;
    shouldIncludeAllFields: boolean;
}

export type SemanticRelationship = {
    criteria: string;
    joinType: SemanticRelationshipJoinType;
    leftSemanticDefinitionDeveloperName: string;
    rightSemanticDefinitionDeveloperName: string;
}

export type ShiftSegmentType = Metadata & sObject &  {
    adherenceThreshold: number;
    category: ShiftSegmentTypeCategory;
    color?: string;
    isActive?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    servicePresenceStatus?: string;
}

export type DelegateGroup = Metadata & sObject &  {
    customObjects?: string | string[];
    groups?: string | string[];
    label: string;
    loginAccess: boolean;
    permissionSetGroups?: string | string[];
    permissionSets?: string | string[];
    profiles?: string | string[];
    roles?: string | string[];
}

export type DigitalExperience = Metadata &  {
    fileName: string;
    filePath?: string;
    format: string;
}

export type DigitalExperienceBundle = Metadata &  {
    description?: string;
    label: string;
}

export type DigitalExperienceConfig = Metadata &  {
    label: string;
    site: Site;
    space: string;
}

export type Site = {
    urlPathPrefix?: string;
}

export type DisclosureDefinition = Metadata & sObject &  {
    description?: string;
    disclosureType: string;
    isProtected?: boolean;
    masterLabel: string;
}

export type DisclosureDefinitionVersion = Metadata & sObject &  {
    authoringMode?: AuthoringMode;
    description?: string;
    disclosureDefCurrVer?: string;
    disclosureDefinition: string;
    documentTemplateGlobalKey?: string;
    isActive?: boolean;
    isCurrentVersion?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    omniScriptCnfgApiName?: string;
    omniScriptConfiguration?: string;
    versionNumber: string;
}

export type DisclosureType = Metadata & sObject &  {
    description?: string;
    disclosureBodyLogo?: string;
    disclosureBodyUrl?: string;
    disclosureCategory: string;
    isProtected?: boolean;
    masterLabel: string;
}

export type Document = Metadata & sObject &  {
    description?: string;
    internalUseOnly: boolean;
    keywords?: string;
    name?: string;
    public: boolean;
}

export type DocumentGenerationSetting = Metadata & sObject &  {
    batchDocGnrnPctLimitPerHour?: number;
    documentTemplateLibraryName: string;
    generationMechanism?: GenerationMechanism;
    guestAccessNamedCredential?: string;
    isBatchDocGnrnEnabled?: boolean;
    isServerSideDocGenEnabled?: boolean;
    masterLabel: string;
    previewType?: PreviewType;
}

export type DocumentTemplate = Metadata &  {
    customClassName?: string;
    defaultFontStyle?: string;
    documentConversionResourceName?: string;
    documentGenerationMechanism?: DocumentGenerationMechanism;
    extractOmniDataTransformName?: string;
    fileExtension?: string;
    hasBatchableSection?: boolean;
    isActive?: boolean;
    isSectionProcessed?: boolean;
    lastEmbeddedTmplSectionKey?: string;
    mapperOmniDataTransformName?: string;
    masterLabel?: string;
    name?: string;
    namespace?: string;
    sectionHeaderFontStyle?: string;
    sectionHeaderFontStyleValue?: string;
    shouldDisplayUnmappedToken?: boolean;
    shouldExtractEmbeddedTmplToken?: boolean;
    status?: DocumentTemplateStatus;
    targetTokenItemObject?: TargetTokenItemObject;
    targetTokenObject?: TargetTokenObject;
    tokenList?: string;
    tokenMappingMethodType?: TokenMappingMethodType;
    tokenMappingType: TokenMappingType;
    type: DocumentTemplateType;
    uniqueName?: string;
    usageType?: DocumentTemplateUsageType;
    versionNumber?: string;
    xmlRelationshipMetadata?: string;
}

export type DuplicateRule = Metadata &  {
    actionOnInsert: DupeActionType;
    actionOnUpdate: DupeActionType;
    alertText?: string;
    description?: string;
    duplicateRuleFilter?: DuplicateRuleFilter;
    duplicateRuleMatchRules?: DuplicateRuleMatchRule | DuplicateRuleMatchRule[];
    isActive: boolean;
    masterLabel: string;
    operationsOnInsert?: string | string[];
    operationsOnUpdate?: string | string[];
    securityOption: DupeSecurityOptionType;
    sortOrder: number;
}

export type DuplicateRuleFilter = {
    booleanFilter?: string;
    duplicateRuleFilterItems?: DuplicateRuleFilterItem | DuplicateRuleFilterItem[];
}

export type DuplicateRuleMatchRule = {
    matchRuleSObjectType: string;
    matchingRule: string;
    objectMapping?: ObjectMapping;
}

export type ESignatureConfig = Metadata & sObject &  {
    configType?: ConfigType;
    configValue?: string;
    description?: string;
    groupType?: ConfigGroup;
    masterLabel: string;
    vendor: Vendor;
}

export type ESignatureEnvelopeConfig = Metadata & sObject &  {
    expirationPeriod?: number;
    expirationWarningPeriod?: number;
    firstReminderPeriod?: number;
    isExpirationEnabled?: boolean;
    isReminderEnabled?: boolean;
    isVendorDefaultNtfcnEnabled?: boolean;
    masterLabel: string;
    reminderIntervalPeriod?: number;
    targetObjectName: string;
    vendor: Vendor;
    vendorAccountIdentifier?: string;
}

export type EditionDefinition = Metadata &  {
    cloudServiceProvider?: string;
    defaultLicenseDuration?: number;
    defaultStatus?: DefaultLicenseStatus;
    description?: string;
    includedPlatformLicenseDefinitions?: IncludedPlatformLicenseDefinition | IncludedPlatformLicenseDefinition[];
    includedUserLicenseDefinitions?: IncludedUserLicenseDefinition | IncludedUserLicenseDefinition[];
    licenseOwner?: string;
    managementServiceProvider?: string;
    managementTenantId?: string;
    name: string;
}

export type EmailServicesFunction = Metadata &  {
    apexClass: string;
    attachmentOption: EmailServicesAttOptions;
    authenticationFailureAction: EmailServicesErrorAction;
    authorizationFailureAction: EmailServicesErrorAction;
    authorizedSenders?: string;
    emailServicesAddresses?: EmailServicesAddress | EmailServicesAddress[];
    errorRoutingAddress?: string;
    functionInactiveAction: EmailServicesErrorAction;
    functionName: string;
    isActive?: boolean;
    isAuthenticationRequired?: boolean;
    isErrorRoutingEnabled?: boolean;
    isTextAttachmentsAsBinary?: boolean;
    isTlsRequired?: boolean;
    overLimitAction: EmailServicesErrorAction;
}

export type EmailServicesAddress = {
    authorizedSenders?: string;
    developerName: string;
    isActive?: boolean;
    localPart: string;
    runAsUser: string;
}

export type EmailTemplate = Metadata & sObject &  {
    apiVersion?: number;
    attachedDocuments?: string | string[];
    attachments?: Attachment | Attachment[];
    available: boolean;
    description?: string;
    encodingKey: Encoding;
    letterhead?: string;
    name: string;
    packageVersions?: PackageVersion | PackageVersion[];
    pageDevName?: string;
    relatedEntityType?: string;
    style: EmailTemplateStyle;
    subject?: string;
    textOnly?: string;
    type: EmailTemplateType;
    uiType?: EmailTemplateUiType;
}

export type Attachment = {
    content: string;
    name: string;
}

export type EmbeddedServiceBranding = Metadata & sObject &  {
    contrastInvertedColor?: string;
    contrastPrimaryColor?: string;
    embeddedServiceConfig: string;
    font?: string;
    height?: number;
    masterLabel: string;
    navBarColor?: string;
    navBarTextColor?: string;
    primaryColor?: string;
    secondaryColor?: string;
    secondaryNavBarColor?: string;
    width?: number;
}

export type EmbeddedServiceConfig = Metadata & sObject &  {
    areGuestUsersAllowed?: boolean;
    authMethod?: EmbeddedServiceAuthMethod;
    branding?: string;
    deploymentFeature: EmbeddedServiceDeploymentFeature;
    deploymentType: EmbeddedServiceDeploymentType;
    isEnabled?: boolean;
    isTermsAndConditionsEnabled?: boolean;
    isTermsAndConditionsRequired?: boolean;
    masterLabel: string;
    shouldHideAuthDialog?: boolean;
    site?: string;
}

export type EmbeddedServiceFieldService = Metadata &  {
    embeddedServiceConfig: string;
    enabled: boolean;
    fieldServiceConfirmCardImg?: string;
    fieldServiceHomeImg?: string;
    fieldServiceLogoImg?: string;
    masterLabel: string;
    shouldShowExistingAppointment?: boolean;
    shouldShowNewAppointment?: boolean;
}

export type EmbeddedServiceFlowConfig = Metadata & sObject &  {
    enabled: boolean;
}

export type EmbeddedServiceLiveAgent = Metadata & sObject &  {
    avatarImg?: string;
    embeddedServiceConfig: string;
    embeddedServiceQuickActions?: EmbeddedServiceQuickAction | EmbeddedServiceQuickAction[];
    enabled: boolean;
    fontSize: EmbeddedServiceFontSize;
    isOfflineCaseEnabled?: boolean;
    isQueuePositionEnabled?: boolean;
    liveAgentChatUrl?: string;
    liveAgentContentUrl?: string;
    liveChatButton: string;
    liveChatDeployment: string;
    masterLabel: string;
    offlineCaseBackgroundImg?: string;
    prechatBackgroundImg?: string;
    prechatEnabled: boolean;
    prechatJson?: string;
    scenario: EmbeddedServiceScenario;
    smallCompanyLogoImg?: string;
    waitingStateBackgroundImg?: string;
}

export type EmbeddedServiceQuickAction = {
    embeddedServiceLiveAgent: string;
    order: number;
    quickActionDefinition: string;
    quickActionType?: EmbeddedServiceQuickActionType;
}

export type EmbeddedServiceMenuSettings = Metadata & sObject &  {
    branding?: string;
    isEnabled?: boolean;
    masterLabel?: string;
    site?: string;
}

export type EntitlementProcess = Metadata &  {
    SObjectType?: string;
    active?: boolean;
    businessHours?: string;
    description?: string;
    entryStartDateField?: string;
    exitCriteriaBooleanFilter?: string;
    exitCriteriaFilterItems?: FilterItem | FilterItem[];
    exitCriteriaFormula?: string;
    isRecordTypeApplied?: boolean;
    isVersionDefault?: boolean;
    milestones?: EntitlementProcessMilestoneItem | EntitlementProcessMilestoneItem[];
    name?: string;
    recordType?: string;
    versionMaster?: string;
    versionNotes?: string;
    versionNumber?: number;
}

export type EntitlementProcessMilestoneItem = {
    businessHours?: string;
    criteriaBooleanFilter?: string;
    milestoneCriteriaFilterItems?: FilterItem | FilterItem[];
    milestoneCriteriaFormula?: string;
    milestoneName?: string;
    minutesCustomClass?: string;
    minutesToComplete?: number;
    successActions?: WorkflowActionReference | WorkflowActionReference[];
    timeTriggers?: EntitlementProcessMilestoneTimeTrigger | EntitlementProcessMilestoneTimeTrigger[];
    useCriteriaStartTime?: boolean;
}

export type EntitlementProcessMilestoneTimeTrigger = {
    actions?: WorkflowActionReference | WorkflowActionReference[];
    timeLength?: number;
    workflowTimeTriggerUnit: MilestoneTimeUnits;
}

export type EntitlementTemplate = Metadata &  {
    businessHours?: string;
    casesPerEntitlement?: number;
    entitlementProcess?: string;
    isPerIncident?: boolean;
    term?: number;
    type?: string;
}

export type EntityImplements = Metadata & sObject &  {
    fieldImplements?: FieldImplements | FieldImplements[];
    isDefault?: boolean;
    isFullyMapped?: boolean;
}

export type FieldImplements = {
    field?: string;
    interfaceField?: string;
}

export type EscalationRule = Metadata &  {
    active?: boolean;
    ruleEntry?: RuleEntry | RuleEntry[];
}

export type EscalationRules = Metadata &  {
}

export type EventDelivery = Metadata &  {
    eventParameters?: EventParameterMap | EventParameterMap[];
    eventSubscription: string;
    referenceData?: string;
    type: EventDeliveryType;
}

export type EventParameterMap = {
    parameterName: string;
    parameterValue?: string;
}

export type EventRelayConfig = Metadata & sObject &  {
    destinationResourceName: string;
    eventChannel: string;
    label?: string;
    relayOption?: string;
    state?: EventRelayAdminState;
    usageType?: EventRelayUsageType;
}

export type EventSubscription = Metadata &  {
    active?: boolean;
    eventParameters?: EventParameterMap | EventParameterMap[];
    eventType: string;
    referenceData: string;
}

export type ExperienceBundle = Metadata &  {
    experienceResources?: ExperienceResources;
    label: string;
    type: SiteType;
    urlPathPrefix?: string;
}

export type ExperienceResources = {
    experienceResource?: ExperienceResource | ExperienceResource[];
}

export type ExperienceResource = {
    fileName: string;
    format: string;
    source?: string;
    type: string;
}

export type ExperienceContainer = Metadata &  {
    masterLabel: string;
    space: string;
    type: ExperienceContainerType;
}

export type ExperiencePropertyTypeBundle = Metadata &  {
    description?: string;
    masterLabel: string;
    resources?: ExperiencePropertyTypeBundleResource | ExperiencePropertyTypeBundleResource[];
}

export type ExperiencePropertyTypeBundleResource = {
    fileName: string;
    filePath: string;
    source: string;
}

export type ExplainabilityActionDefinition = Metadata &  {
    actionLogSchemaType: ActionLogSchemaType;
    applicationSubtype: string;
    applicationType: EASAppType;
    description?: string;
    internal: boolean;
    masterLabel: string;
    processType: string;
}

export type ExplainabilityActionVersion = Metadata & sObject &  {
    actionLogMessageTemplate?: string;
    actionSpecification: string;
    active: boolean;
    definitionVersion: number;
    description?: string;
    explainabilityActionDef: string;
    masterLabel: string;
}

export type ExplainabilityMsgTemplate = Metadata & sObject &  {
    emtUsageType: EmtUsageType;
    evaluationResult: EvaluationResult;
    expressionSetStepType: ExpressionSetStepType;
    isDefault?: boolean;
    masterLabel: string;
    message: string;
}

export type ExpressionSetDefinition = Metadata & sObject &  {
    contextDefinitions?: string | string[];
    description?: string;
    interfaceSourceType?: ExpsSetInterfaceSourceType;
    label: string;
    processType?: ExpsSetProcessType;
    template?: boolean;
}

export type ExpressionSetDefinitionVersion = Metadata & sObject &  {
    description?: string;
    endDate?: Date;
    expressionSetDefinition?: string;
    label: string;
    shouldShowExplExternally?: boolean;
    startDate: Date;
    status: ExpsSetStatus;
    steps?: ExpressionSetStep | ExpressionSetStep[];
    uiTier?: boolean;
    variables?: ExpressionSetVariable | ExpressionSetVariable[];
    versionNumber: number;
}

export type ExpressionSetStep = {
    actionType?: BusinessKnowledgeModel;
    advancedCondition?: ExpressionSetAdvancedCondition;
    aggregation?: ExpressionSetAggregation;
    assignment?: ExpressionSetAssignment;
    conditionExpression?: ExpressionSetConditionExpression;
    customElement?: ExpressionSetCustomElement;
    decisionTable?: ExpressionSetDecisionTable;
    description?: string;
    failedExplainerTemplate?: string;
    failedMessageTokenMappings?: ExplainabilityMessageTemplateTokenMapping | ExplainabilityMessageTemplateTokenMapping[];
    label: string;
    name: string;
    noResultExplainerTemplate?: string;
    noResultMessageTokenMappings?: ExplainabilityMessageTemplateTokenMapping | ExplainabilityMessageTemplateTokenMapping[];
    parentStep?: string;
    passedExplainerTemplate?: string;
    passedMessageTokenMappings?: ExplainabilityMessageTemplateTokenMapping | ExplainabilityMessageTemplateTokenMapping[];
    resultIncluded?: boolean;
    sequenceNumber: number;
    shouldExposExecPathMsgOnly?: boolean;
    shouldExposeConditionDetails?: boolean;
    shouldShowExplExternally?: boolean;
    stepType: ExpsSetStepType;
    subExpression?: ExpressionSetSubExpression;
}

export type ExpressionSetAdvancedCondition = {
    conditionLogic: string;
    criteria?: ExpressionSetConditionCriteria | ExpressionSetConditionCriteria[];
    errorMessage?: string;
    resultParameter?: string;
    successMessage?: string;
}

export type ExpressionSetConditionCriteria = {
    operator: ExpsSetConditionOperator;
    sequenceNumber: number;
    sourceFieldName: string;
    value?: string;
    valueType?: ExpsSetValueType;
}

export type ExpressionSetAggregation = {
    aggergatedParameter: string;
    aggregateFunction: ExpsSetAggregationFunction;
    expression: string;
}

export type ExpressionSetAssignment = {
    assignedParameter: string;
    expression: string;
}

export type ExpressionSetConditionExpression = {
    errorMessage?: string;
    expression: string;
    resultParameter?: string;
    successMessage?: string;
}

export type ExpressionSetCustomElement = {
    parameters?: ExpressionSetElementParameter | ExpressionSetElementParameter[];
}

export type ExpressionSetElementParameter = {
    input: boolean;
    name: string;
    output: boolean;
    type?: ExpsSetValueType;
    value: string;
}

export type ExpressionSetDecisionTable = {
    decisionTableName: string;
    mappings?: ExpressionSetElementParameter | ExpressionSetElementParameter[];
    type: string;
}

export type ExplainabilityMessageTemplateTokenMapping = {
    expressionSetMessageToken: string;
    resourceReference: string;
}

export type ExpressionSetSubExpression = {
    expressionSet: string;
}

export type ExpressionSetVariable = {
    collection?: boolean;
    dataType: ExpsSetDataType;
    decimalPlaces?: number;
    description?: string;
    fields?: ExpressionSetVariableField | ExpressionSetVariableField[];
    input?: boolean;
    lookupName?: string;
    lookupType?: ExpsSetVariableLookupType;
    name: string;
    objectName?: string;
    output?: boolean;
    resultStep?: string;
    type: ExpsSetVariableType;
    value?: string;
}

export type ExpressionSetVariableField = {
    dataType: ExpsSetDataType;
    decimalPlaces?: number;
    fields?: ExpressionSetVariableField | ExpressionSetVariableField[];
    lookupName?: string;
    lookupType?: ExpsSetVariableLookupType;
    name: string;
    objectName?: string;
}

export type ExpressionSetMessageToken = Metadata & sObject &  {
    description?: string;
    developerName: string;
    masterLabel: string;
}

export type ExpressionSetObjectAlias = Metadata & sObject &  {
    dataType: ExpsSetObjectDataType;
    mappings?: ExpressionSetObjectAliasField | ExpressionSetObjectAliasField[];
    objectApiName: string;
    usageType: ExpsSetProcessType;
}

export type ExpressionSetObjectAliasField = {
    dataType?: ExpsSetDataType;
    decimalScale?: number;
    fieldAlias: string;
    sourceFieldName: string;
}

export type ExtDataTranFieldTemplate = Metadata & sObject &  {
    dataSourceField: string;
    externalDataTranField?: string;
    externalName?: string;
    isDataRequired?: boolean;
    masterLabel: string;
}

export type ExtDataTranObjectTemplate = Metadata & sObject &  {
    dataSourceObject: string;
    externalDataTranObject?: string;
    externalName?: string;
    masterLabel: string;
}

export type ExternalAIModel = Metadata & sObject &  {
    applicationSourceType: ApplicationSourceType;
    externalModelKey: string;
    externalModelStatus: ExternalModelStatus;
    name: string;
    threshold?: number;
    trainingJobName?: string;
}

export type ExternalClientApplication = Metadata &  {
    contactEmail?: string;
    contactPhone?: string;
    description?: string;
    distributionState?: ExtlClntAppDistState;
    iconUrl?: string;
    infoUrl?: string;
    isProtected?: boolean;
    label?: string;
    logoUrl?: string;
    managedType?: ExtlClntAppManagedType;
    orgScopedExternalApp?: string;
}

export type ExternalCredential = Metadata & sObject &  {
    authenticationProtocol: AuthenticationProtocol;
    description?: string;
    externalCredentialParameters?: ExternalCredentialParameter | ExternalCredentialParameter[];
    label: string;
}

export type ExternalCredentialParameter = {
    authProvider?: string;
    certificate?: string;
    description?: string;
    parameterGroup?: string;
    parameterName: string;
    parameterType: ExternalCredentialParamType;
    parameterValue?: string;
    sequenceNumber?: number;
}

export type ExternalDataConnector = Metadata &  {
    dataConnectionStatus: DataConnectionStatus;
    dataConnectorConfiguration: string;
    dataConnectorType: DataConnectorType;
    dataPlatform: string;
    masterLabel: string;
}

export type ExternalDataSource = Metadata & sObject &  {
    authProvider?: string;
    certificate?: string;
    customConfiguration?: string;
    customHttpHeaders?: CustomHttpHeader | CustomHttpHeader[];
    endpoint?: string;
    isWritable?: boolean;
    label: string;
    namedCredential?: string;
    oauthRefreshToken?: string;
    oauthScope?: string;
    oauthToken?: string;
    password?: string;
    principalType: ExternalPrincipalType;
    protocol: AuthenticationProtocol;
    repository?: string;
    type: ExternalDataSourceType;
    username?: string;
    version?: string;
}

export type CustomHttpHeader = {
    description?: string;
    headerFieldName: string;
    headerFieldValue: string;
    isActive?: boolean;
}

export type ExternalDataSrcDescriptor = Metadata & sObject &  {
    customObject?: string;
    descriptor: string;
    descriptorVersion?: string;
    developerName: string;
    externalDataSource: string;
    subtype: ExternalDataSrcDescSubtype;
    systemVersion: number;
    type: ExternalDataSrcDescType;
}

export type ExternalDataTranField = Metadata & sObject &  {
    creationType?: DefinitionCreationType;
    datatype: string;
    dateFormat?: string;
    extDataTranFieldTemplate?: string;
    externalName?: string;
    isDataRequired?: boolean;
    length?: number;
    masterLabel: string;
    mktDataTranField?: string;
    precision?: number;
    primaryIndexOrder?: number;
    scale?: number;
    sequence?: number;
}

export type ExternalDataTranObject = Metadata & sObject &  {
    availabilityStatus: AvailabilityStatus;
    creationType: DefinitionCreationType;
    extDataTranObjectTemplate?: string;
    masterLabel: string;
    mktDataTranObject?: string;
    objectCategory: string;
}

export type ExternalDocStorageConfig = Metadata & sObject &  {
    documentPath: string;
    externalDocStorageIdentifier: string;
    masterLabel: string;
    namedCredential: string;
    recordType?: string;
    storageDriveType: StorageDriveType;
    targetObject: TargetObject;
}

export type ExternalServiceRegistration = Metadata & sObject &  {
    description?: string;
    label: string;
    namedCredential?: string;
    namedCredentialReference?: string;
    operations?: ExternalServiceOperation | ExternalServiceOperation[];
    providerAssetEndpoint?: string;
    registrationProviderType?: ExternalServiceRegistrationProviderType;
    schema?: string;
    schemaAbsoluteUrl?: string;
    schemaType?: string;
    schemaUploadFileExtension?: string;
    schemaUploadFileName?: string;
    schemaUrl?: string;
    serviceBinding?: string;
    serviceDescriptor?: string;
    status: string;
    systemVersion?: number;
}

export type ExternalServiceOperation = {
    active: boolean;
    name: string;
}

export type ExtlClntAppConfigurablePolicies = Metadata &  {
    externalClientApplication: string;
    isEnabled: boolean;
    isOauthPluginEnabled?: boolean;
    label?: string;
}

export type ExtlClntAppGlobalOauthSettings = Metadata &  {
    callbackUrl?: string;
    certificate?: string;
    consumerKey?: string;
    consumerSecret?: string;
    externalClientApplication: string;
    idTokenConfig?: ExternalAppIdTokenConfig;
    isClientCredentialsFlowEnabled?: boolean;
    isConsumerSecretOptional?: boolean;
    isDeviceFlowEnabled?: boolean;
    isIntrospectAllTokens?: boolean;
    isPkceRequired?: boolean;
    isRefreshTokenRotationEnabled?: boolean;
    isSecretRequiredForRefreshToken?: boolean;
    isSecretRequiredForTokenExchange?: boolean;
    isTokenExchangeEnabled?: boolean;
    label?: string;
    shouldRotateConsumerKey?: boolean;
    shouldRotateConsumerSecret?: boolean;
}

export type ExternalAppIdTokenConfig = {
    idTokenAudience?: string;
    idTokenIncludeAttributes?: boolean;
    idTokenIncludeStandardClaims?: boolean;
    idTokenValidityInMinutes?: number;
}

export type ExtlClntAppMobileSettings = Metadata &  {
    externalClientApplication: string;
    isScreenLockEnabled: boolean;
    label?: string;
}

export type ExtlClntAppOauthConfigurablePolicies = Metadata &  {
    clientCredentialsFlowUser?: string;
    commaSeparatedPermissionSet?: string;
    customAttributes?: ExtlClntAppOauthPoliciesAttribute | ExtlClntAppOauthPoliciesAttribute[];
    externalClientApplication: string;
    ipRelaxationPolicyType?: string;
    isClientCredentialsFlowEnabled?: boolean;
    isTokenExchangeFlowEnabled?: boolean;
    label?: string;
    permittedUsersPolicyType?: PermittedUsersPolicyType;
    policyAction?: PolicyAction;
    refreshTokenPolicyType?: RefreshTokenPolicyType;
    refreshTokenValidityPeriod?: number;
    refreshTokenValidityUnit?: string;
    requiredSessionLevel?: SessionSecurityLevel;
    sessionTimeoutInMinutes?: number;
    singleLogoutUrl?: string;
    startUrl?: string;
}

export type ExtlClntAppOauthPoliciesAttribute = {
    formula: string;
    key: string;
}

export type ExtlClntAppOauthSettings = Metadata &  {
    commaSeparatedOauthScopes?: string;
    customAttributes?: ExtlClntAppOauthSettingsAttribute | ExtlClntAppOauthSettingsAttribute[];
    externalClientApplication: string;
    label?: string;
    oauthLink?: string;
    singleLogoutUrl?: string;
    trustedIpRanges?: ExtlClntAppOauthIpRange | ExtlClntAppOauthIpRange[];
}

export type ExtlClntAppOauthSettingsAttribute = {
    formula: string;
    key: string;
}

export type ExtlClntAppOauthIpRange = {
    description?: string;
    endIpAddress: string;
    startIpAddress: string;
}

export type ExtlClntAppSampleConfigurablePolicies = Metadata &  {
    adminOnlyPolicy?: string;
    externalClientApplication: string;
    label: string;
    policy1?: string;
    policy2?: string;
}

export type ExtlClntAppSampleSettings = Metadata &  {
    devicePlatform: DevicePlatformType;
    deviceType: DeviceType;
    externalClientApplication: string;
    label: string;
    minimumOsVersion?: string;
    policy1?: string;
    policy1DevManaged?: boolean;
    policy2?: string;
    policy2DevManaged?: boolean;
    version?: string;
}

export type FTestFieldMappingMd = Metadata & sObject &  {
    label: string;
}

export type FTestToolingFLU = Metadata & sObject &  {
    int: number;
    stringWithDifferentName: string;
    text2?: string;
}

export type FeatureParameterBoolean = Metadata &  {
    dataflowDirection: FeatureParameterDataflowDirection;
    masterLabel: string;
    value: boolean;
}

export type FeatureParameterDate = Metadata &  {
    dataflowDirection: FeatureParameterDataflowDirection;
    masterLabel: string;
    value: Date;
}

export type FeatureParameterInteger = Metadata &  {
    dataflowDirection: FeatureParameterDataflowDirection;
    masterLabel: string;
    value: number;
}

export type FieldRestrictionRule = Metadata & sObject &  {
    active: boolean;
    classification?: string | string[];
    classificationType?: ClassificationType;
    description?: string;
    enforcementType: EnforcementType;
    masterLabel: string;
    recordFilter: string;
    targetEntity: string;
    userCriteria: string;
    version: number;
}

export type FieldServiceMobileExtension = Metadata &  {
    description?: string;
    developerName: string;
    fileName: string;
    masterLabel?: string;
    size?: number;
    version?: number;
}

export type FieldSet = Metadata & sObject &  {
    availableFields?: FieldSetItem | FieldSetItem[];
    description: string;
    displayedFields?: FieldSetItem | FieldSetItem[];
    label: string;
}

export type FieldSetItem = {
    alternativeDisplayFormat?: string;
    field?: string;
    isFieldManaged?: boolean;
    isRequired?: boolean;
}

export type FieldSrcTrgtRelationship = Metadata &  {
    definitionCreationType: DefinitionCreationType;
    lookupFieldName?: string;
    masterLabel: string;
    relationshipCardinality: RelationshipCardinality;
    sourceFieldName: string;
    targetFieldName: string;
}

export type FlexiPage = Metadata & sObject &  {
    description?: string;
    events?: FlexiPageEvent | FlexiPageEvent[];
    flexiPageRegions?: FlexiPageRegion | FlexiPageRegion[];
    masterLabel: string;
    parentFlexiPage?: string;
    platformActionlist?: PlatformActionList;
    quickActionList?: QuickActionList;
    sobjectType?: string;
    template: FlexiPageTemplateInstance;
    type: FlexiPageType;
}

export type FlexiPageEvent = {
    sourceName: string;
    sourceProperties?: FlexiPageEventSourceProperty | FlexiPageEventSourceProperty[];
    sourceType: FlexipageEventSourceTypeEnum;
    targets?: FlexiPageEventTarget | FlexiPageEventTarget[];
}

export type FlexiPageEventSourceProperty = {
    name: string;
    value: string;
}

export type FlexiPageEventTarget = {
    mappings?: FlexiPageEventPropertyMapping | FlexiPageEventPropertyMapping[];
    method: string;
    name: string;
    properties?: FlexiPageEventTargetProperty | FlexiPageEventTargetProperty[];
    type: FlexipageEventTargetTypeEnum;
}

export type FlexiPageEventPropertyMapping = {
    name: string;
    value?: string;
}

export type FlexiPageEventTargetProperty = {
    name: string;
    value: string;
}

export type FlexiPageRegion = {
    appendable?: RegionFlagStatus;
    itemInstances?: ItemInstance | ItemInstance[];
    mode?: FlexiPageRegionMode;
    name: string;
    prependable?: RegionFlagStatus;
    replaceable?: RegionFlagStatus;
    type: FlexiPageRegionType;
}

export type ItemInstance = {
    componentInstance?: ComponentInstance;
    fieldInstance?: FieldInstance;
}

export type ComponentInstance = {
    componentInstanceProperties?: ComponentInstanceProperty | ComponentInstanceProperty[];
    componentName: string;
    componentType?: ComponentInstanceType;
    flexipageDataSources?: FlexipageDataSource | FlexipageDataSource[];
    identifier?: string;
    visibilityRule?: UiFormulaRule;
}

export type ComponentInstanceProperty = {
    name?: string;
    type?: ComponentInstancePropertyTypeEnum;
    value?: string;
    valueList?: ComponentInstancePropertyList;
}

export type ComponentInstancePropertyList = {
    valueListItems?: ComponentInstancePropertyListItem | ComponentInstancePropertyListItem[];
}

export type ComponentInstancePropertyListItem = {
    value?: string;
    visibilityRule?: UiFormulaRule;
}

export type UiFormulaRule = {
    booleanFilter?: string;
    criteria?: UiFormulaCriterion | UiFormulaCriterion[];
}

export type UiFormulaCriterion = {
    leftValue: string;
    operator: string;
    rightValue?: string;
}

export type FlexipageDataSource = {
    definition?: string;
    flexipageDataSourceProperties?: FlexipageDataSourceProperty | FlexipageDataSourceProperty[];
    mode?: FlexipageDataSourceModeEnum;
    name: string;
    type: FlexipageDataSourceTypeEnum;
}

export type FlexipageDataSourceProperty = {
    name: string;
    value: string;
}

export type FieldInstance = {
    fieldInstanceProperties?: FieldInstanceProperty | FieldInstanceProperty[];
    fieldItem: string;
    identifier?: string;
    visibilityRule?: UiFormulaRule;
}

export type FieldInstanceProperty = {
    name?: string;
    value?: string;
}

export type PlatformActionList = {
    actionListContext: PlatformActionListContext;
    platformActionListItems?: PlatformActionListItem | PlatformActionListItem[];
    relatedSourceEntity?: string;
}

export type PlatformActionListItem = {
    actionName: string;
    actionType: PlatformActionType;
    sortOrder: number;
    subtype?: string;
}

export type QuickActionList = {
    quickActionListItems?: QuickActionListItem | QuickActionListItem[];
}

export type QuickActionListItem = {
    quickActionName: string;
}

export type FlexiPageTemplateInstance = {
    componentType?: ComponentInstanceType;
    flexipageDataSources?: FlexipageDataSource | FlexipageDataSource[];
    identifier?: string;
    name: string;
    properties?: ComponentInstanceProperty | ComponentInstanceProperty[];
    schemaProperties?: FlexiPageCompSchemaPropertyDef | FlexiPageCompSchemaPropertyDef[];
}

export type FlexiPageCompSchemaPropertyDef = {
    description?: string;
    isRequired?: boolean;
    label?: string;
    name: string;
    type: FlexipageSchemaPropType;
}

export type Flow = Metadata & sObject &  {
    actionCalls?: FlowActionCall | FlowActionCall[];
    apexPluginCalls?: FlowApexPluginCall | FlowApexPluginCall[];
    apiVersion?: number;
    assignments?: FlowAssignment | FlowAssignment[];
    choices?: FlowChoice | FlowChoice[];
    collectionProcessors?: FlowCollectionProcessor | FlowCollectionProcessor[];
    constants?: FlowConstant | FlowConstant[];
    customErrors?: FlowCustomError | FlowCustomError[];
    decisions?: FlowDecision | FlowDecision[];
    description?: string;
    dynamicChoiceSets?: FlowDynamicChoiceSet | FlowDynamicChoiceSet[];
    environments?: FlowEnvironment | FlowEnvironment[];
    formulas?: FlowFormula | FlowFormula[];
    interviewLabel?: string;
    isAdditionalPermissionRequiredToRun?: boolean;
    isOverridable?: boolean;
    isTemplate?: boolean;
    label: string;
    loops?: FlowLoop | FlowLoop[];
    migratedFromWorkflowRuleName?: string;
    orchestratedStages?: FlowOrchestratedStage | FlowOrchestratedStage[];
    overriddenFlow?: string;
    processMetadataValues?: FlowMetadataValue | FlowMetadataValue[];
    processType?: FlowProcessType;
    recordCreates?: FlowRecordCreate | FlowRecordCreate[];
    recordDeletes?: FlowRecordDelete | FlowRecordDelete[];
    recordLookups?: FlowRecordLookup | FlowRecordLookup[];
    recordRollbacks?: FlowRecordRollback | FlowRecordRollback[];
    recordUpdates?: FlowRecordUpdate | FlowRecordUpdate[];
    runInMode?: FlowRunInMode;
    screens?: FlowScreen | FlowScreen[];
    sourceTemplate?: string;
    stages?: FlowStage | FlowStage[];
    start?: FlowStart;
    startElementReference?: string;
    status?: FlowVersionStatus;
    steps?: FlowStep | FlowStep[];
    subflows?: FlowSubflow | FlowSubflow[];
    textTemplates?: FlowTextTemplate | FlowTextTemplate[];
    timeZoneSidKey?: string;
    transforms?: FlowTransform | FlowTransform[];
    triggerOrder?: number;
    variables?: FlowVariable | FlowVariable[];
    waits?: FlowWait | FlowWait[];
}

export type FlowActionCall = FlowNode &  {
    actionName?: string;
    actionType?: InvocableActionType;
    connector?: FlowConnector;
    dataTypeMappings?: FlowDataTypeMapping | FlowDataTypeMapping[];
    faultConnector?: FlowConnector;
    flowTransactionModel?: FlowTransactionModel;
    inputParameters?: FlowActionCallInputParameter | FlowActionCallInputParameter[];
    nameSegment?: string;
    outputParameters?: FlowActionCallOutputParameter | FlowActionCallOutputParameter[];
    storeOutputAutomatically?: boolean;
    versionSegment?: number;
}

export type FlowNode = FlowElement &  {
    elementSubtype?: FlowElementSubtype;
    label?: string;
    locationX: number;
    locationY: number;
}

export type FlowElement = FlowBaseElement &  {
    description?: string;
    name?: string;
}

export type FlowBaseElement = {
    processMetadataValues?: FlowMetadataValue | FlowMetadataValue[];
}

export type FlowMetadataValue = {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowElementReferenceOrValue = {
    apexValue?: string;
    booleanValue?: boolean;
    dateTimeValue?: Date;
    dateValue?: Date;
    elementReference?: string;
    formulaDataType?: FlowDataType;
    formulaExpression?: string;
    numberValue?: number;
    setupReference?: string;
    setupReferenceType?: string;
    sobjectValue?: string;
    stringValue?: string;
}

export type FlowActionCallInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowActionCallOutputParameter = FlowBaseElement &  {
    assignToReference: string;
    name: string;
}

export type FlowApexPluginCallInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowApexPluginCallOutputParameter = FlowBaseElement &  {
    assignToReference: string;
    name: string;
}

export type FlowAssignmentItem = FlowBaseElement &  {
    assignToReference?: string;
    operator?: FlowAssignmentOperator;
    value?: FlowElementReferenceOrValue;
}

export type FlowChoiceUserInput = FlowBaseElement &  {
    isRequired?: boolean;
    promptText?: string;
    validationRule?: FlowInputValidationRule;
}

export type FlowInputValidationRule = {
    errorMessage: string;
    formulaExpression: string;
}

export type FlowCollectionMapItem = FlowBaseElement &  {
    assignToFieldReference: string;
    operator: FlowAssignmentOperator;
    value: FlowElementReferenceOrValue;
}

export type FlowCollectionSortOption = FlowBaseElement &  {
    doesPutEmptyStringAndNullFirst: boolean;
    sortField?: string;
    sortOrder: SortOrder;
}

export type FlowCondition = FlowBaseElement &  {
    conditionType?: string;
    leftValueReference?: string;
    operator: FlowComparisonOperator;
    rightValue?: FlowElementReferenceOrValue;
}

export type FlowConnector = FlowBaseElement &  {
    isGoTo?: boolean;
    targetReference: string;
}

export type FlowCustomErrorMessage = FlowBaseElement &  {
    errorMessage: string;
    fieldSelection?: string;
    isFieldError: boolean;
}

export type FlowDataTypeMapping = FlowBaseElement &  {
    typeName: string;
    typeValue: string;
}

export type FlowInputFieldAssignment = FlowBaseElement &  {
    field?: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowOutputFieldAssignment = FlowBaseElement &  {
    assignToReference: string;
    field: string;
}

export type FlowRecordFilter = FlowBaseElement &  {
    field?: string;
    operator?: FlowRecordFilterOperator;
    value?: FlowElementReferenceOrValue;
}

export type FlowScreenActionInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowScreenFieldInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowScreenFieldOutputParameter = FlowBaseElement &  {
    assignToReference: string;
    name: string;
}

export type FlowScreenRule = FlowBaseElement &  {
    conditionLogic?: string;
    conditions?: FlowCondition | FlowCondition[];
    label: string;
    ruleActions?: FlowScreenRuleAction | FlowScreenRuleAction[];
}

export type FlowScreenRuleAction = FlowBaseElement &  {
    attribute: string;
    fieldReference: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowScreenTrigger = FlowBaseElement &  {
    eventName: string;
    eventSource: string;
    handlers?: FlowScreenTriggerHandler | FlowScreenTriggerHandler[];
}

export type FlowScreenTriggerHandler = FlowBaseElement &  {
    screenActionName: string;
}

export type FlowStageStepAssignee = FlowBaseElement &  {
    assignee: FlowElementReferenceOrValue;
    assigneeType: FlowStageStepAssigneeType;
}

export type FlowStageStepEntryActionInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowStageStepEntryActionOutputParameter = FlowBaseElement &  {
    assignToReference: string;
    name: string;
}

export type FlowStageStepExitActionInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowStageStepExitActionOutputParameter = FlowBaseElement &  {
    assignToReference: string;
    name: string;
}

export type FlowStageStepInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowStageStepOutputParameter = FlowBaseElement &  {
    assignToReference: string;
    name: string;
}

export type FlowSubflowInputAssignment = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowSubflowOutputAssignment = FlowBaseElement &  {
    assignToReference?: string;
    name: string;
}

export type FlowTransformValue = FlowBaseElement &  {
    transformValueActions?: FlowTransformValueAction | FlowTransformValueAction[];
}

export type FlowTransformValueAction = FlowBaseElement &  {
    inputParameters?: FlowTransformValueActionInputParameter | FlowTransformValueActionInputParameter[];
    name?: string;
    outputFieldApiName?: string;
    transformType: FlowTransformValueActionType;
    value?: FlowElementReferenceOrValue;
}

export type FlowTransformValueActionInputParameter = FlowBaseElement &  {
    name: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowVisibilityRule = FlowBaseElement &  {
    conditionLogic?: string;
    conditions?: FlowCondition | FlowCondition[];
}

export type FlowWaitEventInputParameter = FlowBaseElement &  {
    name?: string;
    value?: FlowElementReferenceOrValue;
}

export type FlowWaitEventOutputParameter = FlowBaseElement &  {
    assignToReference: string;
    name: string;
}

export type FlowCapability = FlowElement &  {
    capabilityName: string;
    inputs?: FlowCapabilityInput | FlowCapabilityInput[];
}

export type FlowCapabilityInput = FlowElement &  {
    capabilityInputName: string;
    dataType?: string;
    isCollection: boolean;
}

export type FlowChoice = FlowElement &  {
    choiceText: string;
    dataType: FlowDataType;
    userInput?: FlowChoiceUserInput;
    value?: FlowElementReferenceOrValue;
}

export type FlowConstant = FlowElement &  {
    dataType: FlowDataType;
    value?: FlowElementReferenceOrValue;
}

export type FlowDynamicChoiceSet = FlowElement &  {
    collectionReference?: string;
    dataType: FlowDataType;
    displayField: string;
    filterLogic?: string;
    filters?: FlowRecordFilter | FlowRecordFilter[];
    limit?: number;
    object: string;
    outputAssignments?: FlowOutputFieldAssignment | FlowOutputFieldAssignment[];
    picklistField?: string;
    picklistObject?: string;
    sortField?: string;
    sortOrder?: SortOrder;
    valueField?: string;
}

export type FlowFormula = FlowElement &  {
    dataType?: FlowDataType;
    expression: string;
    scale?: number;
}

export type FlowRule = FlowElement &  {
    conditionLogic: string;
    conditions?: FlowCondition | FlowCondition[];
    connector?: FlowConnector;
    doesRequireRecordChangedToMeetCriteria?: boolean;
    label: string;
}

export type FlowScheduledPath = FlowElement &  {
    connector?: FlowConnector;
    label?: string;
    maxBatchSize?: number;
    offsetNumber?: number;
    offsetUnit?: FlowScheduledPathOffsetUnit;
    pathType?: FlowScheduledPathType;
    recordField?: string;
    timeSource?: FlowScheduledPathTimeSource;
}

export type FlowScreenAction = FlowElement &  {
    actionName?: string;
    actionType?: InvocableActionType;
    inputParameters?: FlowScreenActionInputParameter | FlowScreenActionInputParameter[];
    label: string;
    nameSegment?: string;
    versionSegment?: number;
}

export type FlowScreenField = FlowElement &  {
    choiceReferences?: string | string[];
    dataType?: FlowDataType;
    dataTypeMappings?: FlowDataTypeMapping | FlowDataTypeMapping[];
    defaultSelectedChoiceReference?: string;
    defaultValue?: FlowElementReferenceOrValue;
    extensionName?: string;
    fieldText?: string;
    fieldType: FlowScreenFieldType;
    fields?: FlowScreenField | FlowScreenField[];
    helpText?: string;
    inputParameters?: FlowScreenFieldInputParameter | FlowScreenFieldInputParameter[];
    inputsOnNextNavToAssocScrn?: FlowScreenFieldInputsRevisited;
    isRequired?: boolean;
    isVisible?: boolean;
    objectFieldReference?: string;
    outputParameters?: FlowScreenFieldOutputParameter | FlowScreenFieldOutputParameter[];
    regionContainerType?: FlowRegionContainerType;
    scale?: number;
    storeOutputAutomatically?: boolean;
    validationRule?: FlowInputValidationRule;
    visibilityRule?: FlowVisibilityRule;
}

export type FlowStage = FlowElement &  {
    isActive: boolean;
    label: string;
    stageOrder: number;
}

export type FlowStageStep = FlowElement &  {
    actionName?: string;
    actionType?: InvocableActionType;
    assignees?: FlowStageStepAssignee | FlowStageStepAssignee[];
    entryActionInputParameters?: FlowStageStepEntryActionInputParameter | FlowStageStepEntryActionInputParameter[];
    entryActionName?: string;
    entryActionOutputParameters?: FlowStageStepEntryActionOutputParameter | FlowStageStepEntryActionOutputParameter[];
    entryActionType?: InvocableActionType;
    entryConditionLogic: string;
    entryConditions?: FlowCondition | FlowCondition[];
    exitActionInputParameters?: FlowStageStepExitActionInputParameter | FlowStageStepExitActionInputParameter[];
    exitActionName?: string;
    exitActionOutputParameters?: FlowStageStepExitActionOutputParameter | FlowStageStepExitActionOutputParameter[];
    exitActionType?: InvocableActionType;
    exitConditionLogic?: string;
    exitConditions?: FlowCondition | FlowCondition[];
    inputParameters?: FlowStageStepInputParameter | FlowStageStepInputParameter[];
    label: string;
    outputParameters?: FlowStageStepOutputParameter | FlowStageStepOutputParameter[];
    requiresAsyncProcessing?: boolean;
    runAsUser?: boolean;
    stepSubtype?: FlowElementSubtype;
}

export type FlowTextTemplate = FlowElement &  {
    isViewedAsPlainText?: boolean;
    text: string;
}

export type FlowVariable = FlowElement &  {
    apexClass?: string;
    dataType: FlowDataType;
    isCollection?: boolean;
    isInput?: boolean;
    isOutput?: boolean;
    objectType?: string;
    scale?: number;
    value?: FlowElementReferenceOrValue;
}

export type FlowWaitEvent = FlowElement &  {
    associatedElement?: string;
    conditionLogic?: string;
    conditions?: FlowCondition | FlowCondition[];
    connector?: FlowConnector;
    eventType?: string;
    filterLogic?: string;
    filters?: FlowRecordFilter | FlowRecordFilter[];
    inputParameters?: FlowWaitEventInputParameter | FlowWaitEventInputParameter[];
    label: string;
    maxBatchSize?: number;
    object?: string;
    offset?: number;
    offsetUnit?: FlowScheduledPathOffsetUnit;
    outputParameters?: FlowWaitEventOutputParameter | FlowWaitEventOutputParameter[];
    recordTriggerType?: RecordTriggerType;
    resumeDate?: Date;
    resumeDateReference?: string;
    resumeTime?: Date;
}

export type FlowApexPluginCall = FlowNode &  {
    apexClass: string;
    connector?: FlowConnector;
    faultConnector?: FlowConnector;
    inputParameters?: FlowApexPluginCallInputParameter | FlowApexPluginCallInputParameter[];
    outputParameters?: FlowApexPluginCallOutputParameter | FlowApexPluginCallOutputParameter[];
}

export type FlowAssignment = FlowNode &  {
    assignmentItems?: FlowAssignmentItem | FlowAssignmentItem[];
    connector?: FlowConnector;
}

export type FlowCollectionProcessor = FlowNode &  {
    assignNextValueToReference?: string;
    collectionProcessorType: FlowCollectionProcessorType;
    collectionReference: string;
    conditionLogic?: string;
    conditions?: FlowCondition | FlowCondition[];
    connector?: FlowConnector;
    formula?: string;
    limit?: number;
    mapItems?: FlowCollectionMapItem | FlowCollectionMapItem[];
    outputSObjectType?: string;
    sortOptions?: FlowCollectionSortOption | FlowCollectionSortOption[];
}

export type FlowCustomError = FlowNode &  {
    description?: string;
    connector?: FlowConnector;
    customErrorMessages?: FlowCustomErrorMessage | FlowCustomErrorMessage[];
}

export type FlowDecision = FlowNode &  {
    defaultConnector?: FlowConnector;
    defaultConnectorLabel?: string;
    rules?: FlowRule | FlowRule[];
}

export type FlowLoop = FlowNode &  {
    assignNextValueToReference?: string;
    collectionReference?: string;
    iterationOrder?: IterationOrder;
    nextValueConnector?: FlowConnector;
    noMoreValuesConnector?: FlowConnector;
}

export type FlowOrchestratedStage = FlowNode &  {
    connector?: FlowConnector;
    exitActionInputParameters?: FlowStageStepExitActionInputParameter | FlowStageStepExitActionInputParameter[];
    exitActionName?: string;
    exitActionOutputParameters?: FlowStageStepExitActionOutputParameter | FlowStageStepExitActionOutputParameter[];
    exitActionType?: InvocableActionType;
    exitConditionLogic?: string;
    exitConditions?: FlowCondition | FlowCondition[];
    faultConnector?: FlowConnector;
    stageSteps?: FlowStageStep | FlowStageStep[];
}

export type FlowRecordCreate = FlowNode &  {
    assignRecordIdToReference?: string;
    connector?: FlowConnector;
    faultConnector?: FlowConnector;
    inputAssignments?: FlowInputFieldAssignment | FlowInputFieldAssignment[];
    inputReference?: string;
    object?: string;
    storeOutputAutomatically?: boolean;
}

export type FlowRecordDelete = FlowNode &  {
    connector?: FlowConnector;
    faultConnector?: FlowConnector;
    filterLogic?: string;
    filters?: FlowRecordFilter | FlowRecordFilter[];
    inputReference?: string;
    object?: string;
}

export type FlowRecordLookup = FlowNode &  {
    assignNullValuesIfNoRecordsFound?: boolean;
    connector?: FlowConnector;
    faultConnector?: FlowConnector;
    filterLogic?: string;
    filters?: FlowRecordFilter | FlowRecordFilter[];
    getFirstRecordOnly?: boolean;
    object?: string;
    outputAssignments?: FlowOutputFieldAssignment | FlowOutputFieldAssignment[];
    outputReference?: string;
    queriedFields?: string | string[];
    sortField?: string;
    sortOrder?: SortOrder;
    storeOutputAutomatically?: boolean;
}

export type FlowRecordRollback = FlowNode &  {
    connector?: FlowConnector;
}

export type FlowRecordUpdate = FlowNode &  {
    connector?: FlowConnector;
    faultConnector?: FlowConnector;
    filterLogic?: string;
    filters?: FlowRecordFilter | FlowRecordFilter[];
    inputAssignments?: FlowInputFieldAssignment | FlowInputFieldAssignment[];
    inputReference?: string;
    object?: string;
}

export type FlowScreen = FlowNode &  {
    actions?: FlowScreenAction | FlowScreenAction[];
    allowBack?: boolean;
    allowFinish?: boolean;
    allowPause?: boolean;
    backButtonLabel?: string;
    connector?: FlowConnector;
    fields?: FlowScreenField | FlowScreenField[];
    helpText?: string;
    nextOrFinishButtonLabel?: string;
    pauseButtonLabel?: string;
    pausedText?: string;
    rules?: FlowScreenRule | FlowScreenRule[];
    showFooter?: boolean;
    showHeader?: boolean;
    triggers?: FlowScreenTrigger | FlowScreenTrigger[];
}

export type FlowStart = FlowNode &  {
    capabilityTypes?: FlowCapability | FlowCapability[];
    connector?: FlowConnector;
    doesRequireRecordChangedToMeetCriteria?: boolean;
    entryType?: FlowEntryType;
    filterFormula?: string;
    filterLogic?: string;
    filters?: FlowRecordFilter | FlowRecordFilter[];
    flowRunAsUser?: FlowRunAsUser;
    form?: string;
    object?: string;
    objectContainer?: string;
    publishSegment?: boolean;
    recordTriggerType?: RecordTriggerType;
    schedule?: FlowSchedule;
    scheduledPaths?: FlowScheduledPath | FlowScheduledPath[];
    segment?: string;
    triggerType?: FlowTriggerType;
}

export type FlowSchedule = {
    frequency?: FlowStartFrequency;
    startDate?: Date;
    startTime?: Date;
}

export type FlowStep = FlowNode &  {
    connectors?: FlowConnector | FlowConnector[];
}

export type FlowSubflow = FlowNode &  {
    connector?: FlowConnector;
    flowName?: string;
    inputAssignments?: FlowSubflowInputAssignment | FlowSubflowInputAssignment[];
    outputAssignments?: FlowSubflowOutputAssignment | FlowSubflowOutputAssignment[];
    storeOutputAutomatically?: boolean;
}

export type FlowTransform = FlowNode &  {
    apexClass?: string;
    connector?: FlowConnector;
    dataType?: FlowDataType;
    isCollection?: boolean;
    objectType?: string;
    scale?: number;
    transformValues?: FlowTransformValue | FlowTransformValue[];
}

export type FlowWait = FlowNode &  {
    defaultConnector?: FlowConnector;
    defaultConnectorLabel: string;
    faultConnector?: FlowConnector;
    timeZoneId?: string;
    waitEvents?: FlowWaitEvent | FlowWaitEvent[];
}

export type FlowCategory = Metadata & sObject &  {
    description?: string;
    flowCategoryItems?: FlowCategoryItems | FlowCategoryItems[];
    masterLabel: string;
}

export type FlowCategoryItems = {
    flow: string;
}

export type FlowDefinition = Metadata & sObject &  {
    activeVersionNumber?: number;
    description?: string;
    masterLabel?: string;
}

export type FlowElementSubtypeDefinition = Metadata &  {
    descriptionArguments?: string | string[];
    elementType: FlowElementType;
    label: string;
    labelArguments?: string | string[];
    labelPluralArguments?: string | string[];
    name: string;
}

export type FlowEnvironmentDefinition = Metadata & sObject &  {
    label: string;
    name: string;
    screenFieldTypeBlockList?: FlowScreenFieldType | FlowScreenFieldType[];
}

export type FlowTest = Metadata & sObject &  {
    description?: string;
    flowApiName: string;
    label: string;
    testPoints?: FlowTestPoint | FlowTestPoint[];
}

export type FlowTestPoint = {
    assertions?: FlowTestAssertion | FlowTestAssertion[];
    elementApiName: string;
    parameters?: FlowTestParameter | FlowTestParameter[];
}

export type FlowTestAssertion = {
    conditions?: FlowTestCondition | FlowTestCondition[];
    errorMessage?: string;
}

export type FlowTestCondition = {
    leftValueReference: string;
    operator: FlowComparisonOperator;
    rightValue?: FlowTestReferenceOrValue;
}

export type FlowTestReferenceOrValue = {
    booleanValue?: boolean;
    dateTimeValue?: Date;
    dateValue?: Date;
    numberValue?: number;
    sobjectValue?: string;
    stringValue?: string;
}

export type FlowTestParameter = {
    leftValueReference: string;
    type: FlowTestParameterType;
    value: FlowTestReferenceOrValue;
}

export type FlowTriggerTypeDefinition = Metadata & sObject &  {
    actionTypes?: InvocableActionType | InvocableActionType[];
    elementSubtypeAllowList?: string | string[];
    elementTypes?: FlowElementType | FlowElementType[];
    flowStartNodeConfig: string;
    isRecordContextSupported: boolean;
    label: string;
    name: string;
    subflowAllowList?: FlowProcessType | FlowProcessType[];
    supportedAssignmentOperators?: FlowAssignmentOperator | FlowAssignmentOperator[];
    supportedComparisonOperators?: FlowComparisonOperator | FlowComparisonOperator[];
    supportedFeatures?: string | string[];
    supportedFormulaFunctions?: string | string[];
}

export type Folder = Metadata &  {
    accessType?: FolderAccessTypes;
    folderShares?: FolderShare | FolderShare[];
    name: string;
    publicFolderAccess?: PublicFolderAccess;
    sharedTo?: SharedTo;
}

export type FolderShare = {
    accessLevel: FolderShareAccessLevel;
    sharedTo: string;
    sharedToType: FolderSharedToType;
}

export type SharedTo = {
    allCustomerPortalUsers?: string;
    allInternalUsers?: string;
    allPartnerUsers?: string;
    channelProgramGroup?: string | string[];
    channelProgramGroups?: string | string[];
    group?: string | string[];
    groups?: string | string[];
    guestUser?: string | string[];
    managerSubordinates?: string | string[];
    managers?: string | string[];
    portalRole?: string | string[];
    portalRoleAndSubordinates?: string | string[];
    queue?: string | string[];
    role?: string | string[];
    roleAndSubordinates?: string | string[];
    roleAndSubordinatesInternal?: string | string[];
    roles?: string | string[];
    rolesAndSubordinates?: string | string[];
    territories?: string | string[];
    territoriesAndSubordinates?: string | string[];
    territory?: string | string[];
    territoryAndSubordinates?: string | string[];
}

export type DashboardFolder = Folder &  {
}

export type DocumentFolder = Folder &  {
}

export type EmailFolder = Folder &  {
}

export type EmailTemplateFolder = Folder &  {
}

export type ReportFolder = Folder &  {
}

export type ForecastingFilter = Metadata & sObject &  {
    filterLogic?: string;
    forecastingType: string;
    forecastingTypeSource: string;
    isProtected?: boolean;
    masterLabel: string;
}

export type ForecastingFilterCondition = Metadata & sObject &  {
    colName?: string;
    fieldName: string;
    forecastingFilter: string;
    forecastingSourceDefinition?: string;
    isProtected?: boolean;
    masterLabel: string;
    operation: FilterOperation;
    sortOrder: number;
    value?: string;
}

export type ForecastingSourceDefinition = Metadata & sObject &  {
    categoryField?: string;
    dateField?: string;
    familyField?: string;
    isProtected?: boolean;
    masterLabel: string;
    measureField?: string;
    sourceObject: string;
    territory2Field?: string;
    userField?: string;
}

export type ForecastingType = Metadata & sObject &  {
    active: boolean;
    amount: boolean;
    dateType: string;
    developerName: string;
    hasProductFamily: boolean;
    masterLabel: string;
    opportunitySplitType?: string;
    opptyLineItemSplitType?: string;
    quantity: boolean;
    roleType: string;
    territory2Model?: string;
}

export type ForecastingTypeSource = Metadata & sObject &  {
    forecastingSourceDefinition: string;
    forecastingType: string;
    isProtected?: boolean;
    masterLabel: string;
    parentSourceDefinition?: string;
    relationField?: string;
    sourceGroup: number;
}

export type FtestFirstTopLevel = Metadata &  {
    content: number;
    isProtected?: boolean;
    longUrl?: string;
    longUrlNewSlot?: string;
    masterLabel: string;
}

export type FtestSecondTopLevel = Metadata &  {
    content: number;
    isProtected?: boolean;
    masterLabel: string;
    user?: string;
}

export type FuelType = Metadata & sObject &  {
    description?: string;
    isActive?: boolean;
    isProtected?: boolean;
    isStationaryAssetFuel?: boolean;
    isVehicleAssetFuel?: boolean;
    masterLabel: string;
}

export type FuelTypeSustnUom = Metadata & sObject &  {
    fuelType: string;
    isProtected?: boolean;
    masterLabel?: string;
    unitOfMeasure: string;
}

export type FulfillmentStepType = Metadata & sObject &  {
    developerName: string;
    handler: string;
    isActive: boolean;
    masterLabel: string;
}

export type FunctionReference = Metadata &  {
    access?: string;
    description?: string;
    imageReference?: string;
    label?: string;
    permissionSet?: string;
    userAccessMode?: FunctionReferenceUserAccessMode;
}

export type FundraisingConfig = Metadata & sObject &  {
    donorMatchingMethod?: DonorMatchingMethod;
    failedTransactionCount?: number;
    householdSoftCreditRole?: string;
    installmentExtDayCount?: number;
    isHshldSoftCrAutoCrea?: boolean;
    lapsedUnpaidTrxnCount?: number;
    masterLabel?: string;
    shouldClosePaidRcrCmt?: boolean;
    shouldCreateRcrSchdTrxn?: boolean;
    utmCampaignSrcObj?: string;
    utmCampaignSrcObjField?: string;
    utmMediumSrcObj?: string;
    utmMediumSrcObjField?: string;
    utmSourceSrcObj?: string;
    utmSourceSrcObjField?: string;
}

export type GatewayProviderPaymentMethodType = Metadata &  {
    comments?: string;
    gtwyProviderPaymentMethodType?: string;
    masterLabel: string;
    paymentGatewayProvider?: string;
    paymentMethodType?: string;
    recordType?: string;
}

export type GenAiFunction = Metadata &  {
    description?: string;
    invocationTarget: string;
    invocationTargetType: PlannerFunctionInvocableTargetType;
    isConfirmationRequired?: boolean;
    masterLabel: string;
}

export type GenAiPlanner = Metadata &  {
    capabilities?: string;
    description?: string;
    genAiFunctions?: GenAiPlannerFunctionDef | GenAiPlannerFunctionDef[];
    genAiPlugins?: GenAiPlannerFunctionDef | GenAiPlannerFunctionDef[];
    masterLabel: string;
    plannerType: PlannerType;
}

export type GenAiPlannerFunctionDef = {
    genAiFunctionName?: string;
    genAiPluginName?: string;
}

export type GenAiPlugin = Metadata &  {
    description?: string;
    developerName: string;
    genAiFunctions?: GenAiPluginFunctionDef | GenAiPluginFunctionDef[];
    masterLabel: string;
}

export type GenAiPluginFunctionDef = {
    functionName: string;
}

export type GlobalPicklist = Metadata &  {
    description?: string;
    globalPicklistValues?: GlobalPicklistValue | GlobalPicklistValue[];
    masterLabel: string;
    sorted: boolean;
}

export type GlobalValueSet = Metadata & sObject &  {
    customValue?: CustomValue | CustomValue[];
    description?: string;
    masterLabel: string;
    sorted: boolean;
}

export type Group = Metadata & sObject &  {
    doesIncludeBosses?: boolean;
    name: string;
}

export type HomePageComponent = Metadata & sObject &  {
    body?: string;
    height?: number;
    links?: string | string[];
    page?: string;
    pageComponentType: PageComponentType;
    showLabel?: boolean;
    showScrollbars?: boolean;
    width?: PageComponentWidth;
}

export type HomePageLayout = Metadata & sObject &  {
    narrowComponents?: string | string[];
    wideComponents?: string | string[];
}

export type IPAddressRange = Metadata & sObject &  {
    description?: string;
    endIpAddress: string;
    ipAddressFeature: IPAddressFeature;
    ipAddressUsageScope: IPAddressUsageScope;
    isProtected?: boolean;
    masterLabel: string;
    startIpAddress: string;
}

export type Icon = Metadata &  {
    image: string;
    key: string;
    usageType: IconUsageType;
}

export type IdentityVerificationProcDef = Metadata & sObject &  {
    masterLabel: string;
    searchLayoutType: IdentityVerificationSearchLayoutType;
}

export type IdentityVerificationProcDtl = Metadata & sObject &  {
    apexClass?: string;
    dataSourceType: IdentityVerificationDataSourceType;
    developerName: string;
    displayRecordFieldName?: string;
    isActive?: boolean;
    isRetryAllowedAfterLimit?: boolean;
    linkedIdVerfProcessDet?: string;
    masterLabel: string;
    objectName?: string;
    optionalVerifiersMinVerfCount?: number;
    retryLimit?: number;
    searchFilter?: string;
    searchRecordUniqueIdField?: string;
    searchResultSortBy?: string;
    searchSequenceNumber: number;
    searchType: IdentityVerificationSearchType;
}

export type IdentityVerificationProcFld = Metadata & sObject &  {
    customFieldLabel?: string;
    dataSourceType: IdentityVerificationProcFldDataSourceType;
    developerName: string;
    fieldDataType?: IdentityVerificationProcFldFieldDataType;
    fieldName: string;
    fieldType: IdentityVerificationProcFldFieldType;
    fieldValueFormula?: string;
    isActive?: boolean;
    isManualInput?: boolean;
    masterLabel: string;
    sequenceNumber: number;
}

export type InboundCertificate = Metadata &  {
    expirationDate: Date;
    issuer: string;
    masterLabel: string;
    serialId: string;
}

export type InboundNetworkConnection = Metadata & sObject &  {
    connectionType: ExternalConnectionType;
    description: string;
    inboundNetworkConnProperties?: InboundNetworkConnProperty | InboundNetworkConnProperty[];
    isActive: boolean;
    label: string;
    status: ExternalConnectionStatus;
}

export type InboundNetworkConnProperty = {
    propertyName: InboundConnPropertyName;
    propertyValue: string;
}

export type Index = Metadata & sObject &  {
    fields?: IndexField | IndexField[];
    label: string;
    minNumRequiredIndexedFields?: number;
    type?: string;
}

export type IndexField = {
    name: string;
    sortDirection: string;
}

export type InstalledPackage = Metadata &  {
    activateRSS: boolean;
    password?: string;
    securityType?: string;
    versionNumber: string;
}

export type IntegrationProviderDef = Metadata & sObject &  {
    active?: boolean;
    apexClass?: string;
    description?: string;
    developerName: string;
    externalServiceOperationName?: string;
    externalServiceRegistration?: string;
    fileBasedApexClass?: string;
    inputDataProcessor?: string;
    integrationProviderAttributes?: IntegrationProviderAttr | IntegrationProviderAttr[];
    javaClassName?: string;
    outputDataProcessor?: string;
    providerLabel: string;
    type: DefinitionType;
}

export type IntegrationProviderAttr = {
    dataType: AttrDataType;
    dateTimeValue?: Date;
    dateValue?: Date;
    description?: string;
    developerName: string;
    doubleValue?: number;
    integerValue?: number;
    label: string;
    percentageValue?: number;
    required: boolean;
    stringValue?: string;
    trueOrFalseValue?: boolean;
}

export type InternalDataConnector = Metadata &  {
    dataConnectionStatus: DataConnectionStatus;
    dataConnectorType: DataConnectorType;
    dataPlatform: string;
    dataSourceTenant: string;
    externalRecordId: string;
    masterLabel: string;
}

export type InternalOrganization = Metadata & sObject &  {
    isForDataExport: boolean;
    isForDataImport: boolean;
    masterLabel: string;
}

export type KeywordList = Metadata & sObject &  {
    description?: string;
    keywords?: Keyword | Keyword[];
    masterLabel: string;
}

export type Keyword = {
    keyword: string;
}

export type Layout = Metadata & sObject &  {
    customButtons?: string | string[];
    customConsoleComponents?: CustomConsoleComponents;
    emailDefault?: boolean;
    excludeButtons?: string | string[];
    feedLayout?: FeedLayout;
    headers?: LayoutHeader | LayoutHeader[];
    layoutSections?: LayoutSection | LayoutSection[];
    miniLayout?: MiniLayout;
    multilineLayoutFields?: string | string[];
    platformActionList?: PlatformActionList;
    quickActionList?: QuickActionList;
    relatedContent?: RelatedContent;
    relatedLists?: RelatedListItem | RelatedListItem[];
    relatedObjects?: string | string[];
    runAssignmentRulesDefault?: boolean;
    showEmailCheckbox?: boolean;
    showHighlightsPanel?: boolean;
    showInteractionLogPanel?: boolean;
    showKnowledgeComponent?: boolean;
    showRunAssignmentRulesCheckbox?: boolean;
    showSolutionSection?: boolean;
    showSubmitAndAttachButton?: boolean;
    summaryLayout?: SummaryLayout;
}

export type CustomConsoleComponents = {
    primaryTabComponents?: PrimaryTabComponents;
    subtabComponents?: SubtabComponents;
}

export type PrimaryTabComponents = {
    containers?: Container | Container[];
}

export type Container = {
    height?: number;
    isContainerAutoSizeEnabled: boolean;
    region: string;
    sidebarComponents?: SidebarComponent | SidebarComponent[];
    style: string;
    unit: string;
    width?: number;
}

export type SidebarComponent = {
    componentType: string;
    createAction?: string;
    enableLinking?: boolean;
    height?: number;
    label?: string;
    lookup?: string;
    page?: string;
    relatedLists?: RelatedList | RelatedList[];
    unit?: string;
    updateAction?: string;
    width?: number;
}

export type RelatedList = {
    hideOnDetail: boolean;
    name: string;
}

export type SubtabComponents = {
    containers?: Container | Container[];
}

export type FeedLayout = {
    autocollapsePublisher?: boolean;
    compactFeed?: boolean;
    feedFilterPosition?: FeedLayoutFilterPosition;
    feedFilters?: FeedLayoutFilter | FeedLayoutFilter[];
    fullWidthFeed?: boolean;
    hideSidebar?: boolean;
    highlightExternalFeedItems?: boolean;
    leftComponents?: FeedLayoutComponent | FeedLayoutComponent[];
    rightComponents?: FeedLayoutComponent | FeedLayoutComponent[];
    useInlineFiltersInConsole?: boolean;
}

export type FeedLayoutFilter = {
    feedFilterName?: string;
    feedFilterType: FeedLayoutFilterType;
    feedItemType?: FeedItemType;
}

export type FeedLayoutComponent = {
    componentType: FeedLayoutComponentType;
    height?: number;
    page?: string;
}

export type LayoutSection = {
    customLabel?: boolean;
    detailHeading?: boolean;
    editHeading?: boolean;
    label?: string;
    layoutColumns?: LayoutColumn | LayoutColumn[];
    style: LayoutSectionStyle;
}

export type LayoutColumn = {
    layoutItems?: LayoutItem | LayoutItem[];
    reserved?: string;
}

export type LayoutItem = {
    analyticsCloudComponent?: AnalyticsCloudComponentLayoutItem;
    behavior?: UiBehavior;
    canvas?: string;
    component?: string;
    customLink?: string;
    emptySpace?: boolean;
    field?: string;
    height?: number;
    page?: string;
    reportChartComponent?: ReportChartComponentLayoutItem;
    scontrol?: string;
    showLabel?: boolean;
    showScrollbars?: boolean;
    width?: string;
}

export type AnalyticsCloudComponentLayoutItem = {
    assetType: string;
    devName: string;
    error?: string;
    filter?: string;
    height?: number;
    hideOnError?: boolean;
    showHeader?: boolean;
    showSharing?: boolean;
    showTitle?: boolean;
    width?: string;
}

export type ReportChartComponentLayoutItem = {
    cacheData?: boolean;
    contextFilterableField?: string;
    error?: string;
    hideOnError?: boolean;
    includeContext?: boolean;
    reportName: string;
    showTitle?: boolean;
    size?: ReportChartComponentSize;
}

export type MiniLayout = {
    fields?: string | string[];
    relatedLists?: RelatedListItem | RelatedListItem[];
}

export type RelatedListItem = {
    customButtons?: string | string[];
    excludeButtons?: string | string[];
    fields?: string | string[];
    quickActions?: string | string[];
    relatedList: string;
    sortField?: string;
    sortOrder?: SortOrder;
}

export type RelatedContent = {
    relatedContentItems?: RelatedContentItem | RelatedContentItem[];
}

export type RelatedContentItem = {
    layoutItem: LayoutItem;
}

export type SummaryLayout = {
    masterLabel: string;
    sizeX: number;
    sizeY?: number;
    sizeZ?: number;
    summaryLayoutItems?: SummaryLayoutItem | SummaryLayoutItem[];
    summaryLayoutStyle: SummaryLayoutStyle;
}

export type SummaryLayoutItem = {
    customLink?: string;
    field?: string;
    posX: number;
    posY?: number;
    posZ?: number;
}

export type LeadConvertSettings = Metadata & sObject &  {
    allowOwnerChange?: boolean;
    objectMapping?: ObjectMapping | ObjectMapping[];
    opportunityCreationOptions?: VisibleOrRequired;
}

export type Letterhead = Metadata &  {
    available: boolean;
    backgroundColor: string;
    bodyColor: string;
    bottomLine: LetterheadLine;
    description?: string;
    footer: LetterheadHeaderFooter;
    header: LetterheadHeaderFooter;
    middleLine: LetterheadLine;
    name: string;
    topLine: LetterheadLine;
}

export type LetterheadLine = {
    color: string;
    height: number;
}

export type LetterheadHeaderFooter = {
    backgroundColor: string;
    height: number;
    horizontalAlignment?: LetterheadHorizontalAlignment;
    logo?: string;
    verticalAlignment?: LetterheadVerticalAlignment;
}

export type LicenseDefinition = Metadata &  {
    aggregationGroup: string;
    description?: string;
    isPublished: boolean;
    label: string;
    licensedCustomPermissions?: LicensedCustomPermissions | LicensedCustomPermissions[];
    licensingAuthority: string;
    licensingAuthorityProvider: string;
    minPlatformVersion: number;
    origin: string;
    revision: number;
    trialLicenseDuration: number;
    trialLicenseQuantity: number;
}

export type LicensedCustomPermissions = {
    customPermission: string;
    licenseDefinition: string;
}

export type LightningBolt = Metadata & sObject &  {
    category: LightningBoltCategory;
    lightningBoltFeatures?: LightningBoltFeatures | LightningBoltFeatures[];
    lightningBoltImages?: LightningBoltImages | LightningBoltImages[];
    lightningBoltItems?: LightningBoltItems | LightningBoltItems[];
    masterLabel: string;
    publisher: string;
    summary: string;
}

export type LightningBoltFeatures = {
    description?: string;
    order: number;
    title: string;
}

export type LightningBoltImages = {
    image: string;
    order: number;
}

export type LightningBoltItems = {
    name: string;
    type: string;
}

export type LightningComponentBundle = Metadata & sObject &  {
    apiVersion?: number;
    capabilities?: Capabilities;
    description?: string;
    isExplicitImport?: boolean;
    isExposed?: boolean;
    lwcResources?: LwcResources;
    masterLabel?: string;
    runtimeNamespace?: string;
    targetConfigs?: string;
    targets?: Targets;
}

export type Capabilities = {
    capability?: string | string[];
}

export type LwcResources = {
    lwcResource?: LwcResource | LwcResource[];
}

export type LwcResource = {
    filePath: string;
    source: string;
}

export type Targets = {
    target?: string | string[];
}

export type LightningExperienceTheme = Metadata & sObject &  {
    defaultBrandingSet: string;
    description?: string;
    masterLabel: string;
    shouldOverrideLoadingImage?: boolean;
}

export type LightningMessageChannel = Metadata & sObject &  {
    description?: string;
    isExposed?: boolean;
    lightningMessageFields?: LightningMessageField | LightningMessageField[];
    masterLabel: string;
}

export type LightningMessageField = {
    description?: string;
    fieldName: string;
}

export type LightningOnboardingConfig = Metadata & sObject &  {
    collaborationGroup?: string;
    customQuestion?: string;
    feedbackFormDaysFrequency?: number;
    isCustom: boolean;
    masterLabel: string;
    promptDelayTime?: number;
    sendFeedbackToSalesforce: boolean;
}

export type ListView = Metadata &  {
    booleanFilter?: string;
    columns?: string | string[];
    division?: string;
    filterScope: FilterScope;
    filters?: ListViewFilter | ListViewFilter[];
    label: string;
    language?: Language;
    queue?: string;
    sharedTo?: SharedTo;
}

export type ListViewFilter = {
    field: string;
    operation: FilterOperation;
    value?: string;
}

export type LiveChatAgentConfig = Metadata &  {
    assignments?: AgentConfigAssignments;
    autoGreeting?: string;
    capacity?: number;
    criticalWaitTime?: number;
    customAgentName?: string;
    disableTransferConferenceGreeting?: boolean;
    enableAgentFileTransfer?: boolean;
    enableAgentSneakPeek?: boolean;
    enableAssistanceFlag?: boolean;
    enableAutoAwayOnDecline?: boolean;
    enableAutoAwayOnPushTimeout?: boolean;
    enableChatConferencing?: boolean;
    enableChatMonitoring?: boolean;
    enableChatTransferToAgent?: boolean;
    enableChatTransferToButton?: boolean;
    enableChatTransferToSkill?: boolean;
    enableLogoutSound?: boolean;
    enableNotifications?: boolean;
    enableRequestSound?: boolean;
    enableSneakPeek?: boolean;
    enableVisitorBlocking?: boolean;
    enableWhisperMessage?: boolean;
    label: string;
    supervisorDefaultAgentStatusFilter?: SupervisorAgentStatusFilter;
    supervisorDefaultButtonFilter?: string;
    supervisorDefaultSkillFilter?: string;
    supervisorSkills?: SupervisorAgentConfigSkills;
    transferableButtons?: AgentConfigButtons;
    transferableSkills?: AgentConfigSkills;
}

export type AgentConfigAssignments = {
    profiles?: AgentConfigProfileAssignments;
    users?: AgentConfigUserAssignments;
}

export type AgentConfigProfileAssignments = {
    profile?: string | string[];
}

export type AgentConfigUserAssignments = {
    user?: string | string[];
}

export type SupervisorAgentConfigSkills = {
    skill?: string | string[];
}

export type AgentConfigButtons = {
    button?: string | string[];
}

export type AgentConfigSkills = {
    skill?: string | string[];
}

export type LiveChatButton = Metadata & sObject &  {
    animation?: LiveChatButtonPresentation;
    autoGreeting?: string;
    chasitorIdleTimeout?: number;
    chasitorIdleTimeoutWarning?: number;
    chatPage?: string;
    customAgentName?: string;
    deployments?: LiveChatButtonDeployments;
    enableQueue?: boolean;
    inviteEndPosition?: LiveChatButtonInviteEndPosition;
    inviteImage?: string;
    inviteStartPosition?: LiveChatButtonInviteStartPosition;
    isActive?: boolean;
    label: string;
    numberOfReroutingAttempts?: number;
    offlineImage?: string;
    onlineImage?: string;
    optionsCustomRoutingIsEnabled?: boolean;
    optionsHasChasitorIdleTimeout: boolean;
    optionsHasInviteAfterAccept?: boolean;
    optionsHasInviteAfterReject?: boolean;
    optionsHasRerouteDeclinedRequest?: boolean;
    optionsIsAutoAccept?: boolean;
    optionsIsInviteAutoRemove?: boolean;
    overallQueueLength?: number;
    perAgentQueueLength?: number;
    postChatPage?: string;
    postChatUrl?: string;
    preChatFormPage?: string;
    preChatFormUrl?: string;
    pushTimeOut?: number;
    routingType: LiveChatButtonRoutingType;
    site?: string;
    skills?: LiveChatButtonSkills;
    timeToRemoveInvite?: number;
    type: LiveChatButtonType;
    windowLanguage?: Language;
}

export type LiveChatButtonDeployments = {
    deployment?: string | string[];
}

export type LiveChatButtonSkills = {
    skill?: string | string[];
}

export type LiveChatDeployment = Metadata &  {
    brandingImage?: string;
    connectionTimeoutDuration?: number;
    connectionWarningDuration?: number;
    displayQueuePosition?: boolean;
    domainWhiteList?: LiveChatDeploymentDomainWhitelist;
    enablePrechatApi?: boolean;
    enableTranscriptSave?: boolean;
    label: string;
    mobileBrandingImage?: string;
    site?: string;
    windowTitle: string;
}

export type LiveChatDeploymentDomainWhitelist = {
    domain?: string | string[];
}

export type LiveChatSensitiveDataRule = Metadata &  {
    actionType: SensitiveDataActionType;
    description?: string;
    enforceOn: number;
    isEnabled: boolean;
    pattern: string;
    priority: number;
    processingType: SensitiveDataRuleProcessing;
    replacement?: string;
    version: SensitiveDataRuleVersion;
}

export type LocationUse = Metadata & sObject &  {
    isBookable?: boolean;
    isProtected?: boolean;
    locationType: string;
    masterLabel: string;
    use?: string;
}

export type LoyaltyProgramSetup = Metadata &  {
    label?: string;
    programProcesses?: LoyaltyProgramProcess | LoyaltyProgramProcess[];
}

export type LoyaltyProgramProcess = {
    description?: string;
    executionType?: LoyaltyPgmProcExecutionType;
    journalSubType?: string;
    journalType?: string;
    loyaltyTierGroup?: string;
    parameters?: LoyaltyProgramProcessParameter | LoyaltyProgramProcessParameter[];
    processName: string;
    processType: string;
    rules?: LoyaltyProgramProcessRule | LoyaltyProgramProcessRule[];
    status?: LoyaltyPgmProcStatus;
}

export type LoyaltyProgramProcessParameter = {
    condition?: LoyaltyProgramProcessCondition;
    dataType?: LoyaltyPgmProcParmDataType;
    decimalPlaces?: number;
    description?: string;
    isCollection?: boolean;
    isInput?: boolean;
    isOutput?: boolean;
    objectName?: string;
    parameterName: string;
    parameterType?: LoyaltyPgmProcParmType;
    value?: string;
}

export type LoyaltyProgramProcessCondition = {
    conditionCriteria?: string;
    conditionFilterCriteria?: LoyaltyProgramProcessConditionFilterCriteria | LoyaltyProgramProcessConditionFilterCriteria[];
    conditionName: string;
    conditionType?: LoyaltyPgmProcRuleType;
}

export type LoyaltyProgramProcessConditionFilterCriteria = {
    operator: LoyaltyPgmProcCondOperator;
    sequence: number;
    sourceFieldName: string;
    value?: string;
    valueType: LoyaltyPgmProcCondType;
}

export type LoyaltyProgramProcessRule = {
    actions?: LoyaltyProgramProcessAction | LoyaltyProgramProcessAction[];
    conditions?: LoyaltyProgramProcessCondition | LoyaltyProgramProcessCondition[];
    description?: string;
    endDate?: Date;
    isProcessEligibilityRule?: boolean;
    previousRule?: string;
    promotion?: string;
    ruleName: string;
    startDate?: Date;
    status?: LoyaltyPgmProcRuleStatus;
    stepMappings?: LoyaltyProgramProcessRuleStepMapping | LoyaltyProgramProcessRuleStepMapping[];
}

export type LoyaltyProgramProcessAction = {
    actionName: string;
    actionParameters?: LoyaltyProgramProcessActionParameter | LoyaltyProgramProcessActionParameter[];
    actionType: LoyaltyPgmProcActionType;
    crudActionType?: LoyaltyPgmProcCrudActType;
    decisionTable?: string;
    decisionTableDatasetLink?: string;
    entityApiName?: string;
    flowDefinition?: string;
    loyaltyProgramProcess?: string;
}

export type LoyaltyProgramProcessActionParameter = {
    operator?: LoyaltyPgmProcActParamOper;
    parameterName: string;
    sequenceNumber?: number;
    value: string;
    valueType?: LoyaltyPgmProcActParamType;
}

export type LoyaltyProgramProcessRuleStepMapping = {
    associatedStep: string;
    parentStep?: string;
    sequence: number;
}

export type MLDataDefinition = Metadata & sObject &  {
    developerName: string;
    entityDeveloperName: string;
    excludedFields?: string | string[];
    includedFields?: string | string[];
    joinFields?: MLField | MLField[];
    parentDefinitionDevName: string;
    scoringFilter?: MLFilter;
    segmentFilter?: MLFilter;
    trainingFilter?: MLFilter;
    type: MLDataDefinitionType;
}

export type MLField = {
    entity?: string;
    entityName?: string;
    field?: string;
    fieldName?: string;
    relatedField?: MLField;
    relationType?: MLRelationType;
    type: MLFieldType;
}

export type MLFilter = {
    filterName: string;
    lhFilter?: MLFilter;
    lhPredictionField?: string;
    lhType?: AIValueType;
    lhUnit?: AIFilterUnit;
    lhValue?: string;
    operation: AIFilterOperation;
    rhFilter?: MLFilter;
    rhPredictionField?: string;
    rhType?: AIValueType;
    rhUnit?: AIFilterUnit;
    rhValue?: string;
    sortOrder?: number;
}

export type MLGenerativeDefinition = Metadata & sObject &  {
    aiApplicationDeveloperName: string;
    description?: string;
    developerName: string;
    masterLabel?: string;
    status: MLGenerativeDefinitionStatus;
    type: MLGenerativeType;
}

export type MLPredictionDefinition = Metadata & sObject &  {
    aiApplicationDeveloperName: string;
    description?: string;
    developerName: string;
    masterLabel?: string;
    negativeExpression?: MLFilter;
    positiveExpression?: MLFilter;
    predictionField?: string;
    priority?: number;
    pushbackField?: string;
    status: MLPredictionDefinitionStatus;
    type: AIPredictionType;
}

export type MLRecommendationDefinition = Metadata & sObject &  {
    aiApplicationDeveloperName: string;
    description?: string;
    developerName: string;
    externalId?: string;
    interactionDateTimeField?: string;
    masterLabel: string;
    negativeExpression?: MLFilter;
    positiveExpression?: MLFilter;
    status: MLRecommendationDefinitionStatus;
}

export type ManagedContentType = Metadata & sObject &  {
    description?: string;
    developerName: string;
    managedContentNodeTypes?: ManagedContentNodeType | ManagedContentNodeType[];
    masterLabel: string;
}

export type ManagedContentNodeType = {
    helpText?: string;
    isLocalizable?: boolean;
    isRequired?: boolean;
    nodeLabel: string;
    nodeName: string;
    nodeType: MCNodeType;
    placeholderText?: string;
}

export type ManagedContentTypeBundle = Metadata &  {
    description?: string;
    developerName: string;
    masterLabel: string;
    schemaBody: string;
}

export type ManagedEventSubscription = Metadata & sObject &  {
    defaultReplay?: EventSubscriptionReplayPreset;
    errorRecoveryReplay?: EventSubscriptionReplayPreset;
    label?: string;
    state?: EventSubscriptionAdminState;
    topicName?: string;
    version?: string;
}

export type MarketAudienceDefinition = Metadata & sObject &  {
    audienceContactPoints?: AudienceContactPoint | AudienceContactPoint[];
    audiencePackageOwner?: string;
    channels?: string;
    description?: string;
    externalKey?: string;
    isProtected?: boolean;
    lastAudienceExcludedCount?: number;
    lastAudienceMemberCount?: number;
    marketAudienceFields?: MarketAudienceField | MarketAudienceField[];
    masterLabel: string;
    status: MarketAudienceStatus;
}

export type AudienceContactPoint = {
    audienceDefinition: string;
    audienceVersion?: number;
    contactPointType: ContactPointType;
    slotName: string;
}

export type MarketAudienceField = {
    audienceDefinition: string;
    audienceVersion: number;
    fieldDataType: AudienceFieldType;
    fieldDescription?: string;
    fieldName: string;
    slotName: string;
}

export type MarketSegmentDefinition = Metadata &  {
    additionalMetadata?: string;
    excludeCriteria?: string;
    includeCriteria?: string;
    masterLabel: string;
    segmentOn?: string;
}

export type MarketingAppExtActivity = Metadata & sObject &  {
    description?: string;
    endpointUrl?: string;
    isActive?: boolean;
    isProtected?: boolean;
    marketingAppExtension: string;
    masterLabel: string;
}

export type MarketingAppExtension = Metadata & sObject &  {
    description?: string;
    isActive?: boolean;
    isProtected?: boolean;
    marketingAppExtActions?: MarketingAppExtAction | MarketingAppExtAction[];
    masterLabel: string;
}

export type MarketingAppExtAction = {
    actionName: string;
    actionParams?: string;
    actionSchema?: string;
    actionSelector: string;
    apiName: string;
    description?: string;
    isActive?: boolean;
    marketingAppExtension: string;
}

export type MatchingRule = Metadata & sObject &  {
    booleanFilter?: string;
    description?: string;
    label: string;
    matchingRuleItems?: MatchingRuleItem | MatchingRuleItem[];
    ruleStatus: MatchingRuleStatus;
}

export type MatchingRuleItem = {
    blankValueBehavior?: BlankValueBehavior;
    fieldName: string;
    matchingMethod: MatchingMethod;
}

export type MessagingChannel = Metadata & sObject &  {
    automatedResponses?: MessagingAutoResponse | MessagingAutoResponse[];
    customParameters?: MessagingChannelCustomParameter | MessagingChannelCustomParameter[];
    description?: string;
    masterLabel: string;
    messagingChannelType: MessagingChannelType;
    sessionHandlerFlow?: string;
    sessionHandlerQueue: string;
    sessionHandlerType: MessagingSessionHandlerType;
    standardParameters?: MessagingChannelStandardParameter | MessagingChannelStandardParameter[];
}

export type MessagingAutoResponse = {
    response: string;
    type: MessagingAutoResponseType;
}

export type MessagingChannelCustomParameter = {
    actionParameterMappings?: MessagingChannelActionParameterMapping | MessagingChannelActionParameterMapping[];
    externalParameterName: string;
    masterLabel: string;
    maxLength?: number;
    name: string;
    parameterDataType: FlowDataType;
    parameterValueMappings?: MessagingChannelParameterValueMapping | MessagingChannelParameterValueMapping[];
}

export type MessagingChannelActionParameterMapping = {
    actionParameterName: string;
}

export type MessagingChannelParameterValueMapping = {
    lookupValue: string;
    lookupValueType: MessagingChannelTargetLookupValueType;
    parameterValue: string;
}

export type MessagingChannelStandardParameter = {
    actionParameterMappings?: MessagingChannelActionParameterMapping | MessagingChannelActionParameterMapping[];
    parameterType: MessagingChannelStandardParameterType;
    parameterValueMappings?: MessagingChannelParameterValueMapping | MessagingChannelParameterValueMapping[];
}

export type MetadataForSettings = Metadata &  {
}

export type AIReplyRecommendationsSettings = MetadataForSettings & sObject &  {
    enableAIReplyRecommendations?: boolean;
    enableGenReplyRecommendations?: boolean;
    enableServiceEinsteinGPTGrounding?: boolean;
}

export type AccountIntelligenceSettings = MetadataForSettings & sObject &  {
    enableAccountLogos?: boolean;
    enableAutomatedAccountFields?: boolean;
    enableNewsStories?: boolean;
}

export type AccountSettings = MetadataForSettings & sObject &  {
    enableAccountDiscovery?: boolean;
    enableAccountHistoryTracking?: boolean;
    enableAccountInsightsInMobile?: boolean;
    enableAccountOwnerReport?: boolean;
    enableAccountTeams?: boolean;
    enableContactHistoryTracking?: boolean;
    enableRelateContactToMultipleAccounts?: boolean;
    showViewHierarchyLink?: boolean;
}

export type ActionsSettings = MetadataForSettings & sObject &  {
    enableDefaultQuickActionsOn?: boolean;
    enableMdpEnabled?: boolean;
    enableOfflineWebLinks?: boolean;
    enableThirdPartyActions?: boolean;
}

export type ActivitiesSettings = MetadataForSettings & sObject &  {
    allowUsersToRelateMultipleContactsToTasksAndEvents?: boolean;
    autoRelateEventAttendees?: boolean;
    enableActivityReminders?: boolean;
    enableCalendarHomeLWC?: boolean;
    enableClickCreateEvents?: boolean;
    enableDragAndDropScheduling?: boolean;
    enableEmailTracking?: boolean;
    enableFlowTaskNotifsViaApex?: boolean;
    enableGroupTasks?: boolean;
    enableHideChildEventsPreference?: boolean;
    enableListViewScheduling?: boolean;
    enableLogNote?: boolean;
    enableMLSingleClientProfile?: boolean;
    enableMultidayEvents?: boolean;
    enableRecurringEvents?: boolean;
    enableRecurringTasks?: boolean;
    enableRollUpActivToContactsAcct?: boolean;
    enableSidebarCalendarShortcut?: boolean;
    enableSimpleTaskCreateUI?: boolean;
    enableTimelineCompDateSort?: boolean;
    enableUNSTaskDelegatedToNotifications?: boolean;
    enableUserListViewCalendars?: boolean;
    meetingRequestsLogo?: string;
    showCustomLogoMeetingRequests?: boolean;
    showEventDetailsMultiUserCalendar?: boolean;
    showHomePageHoverLinksForEvents?: boolean;
    showMyTasksHoverLinks?: boolean;
}

export type AddressSettings = MetadataForSettings & sObject &  {
    countriesAndStates: CountriesAndStates;
}

export type CountriesAndStates = {
    countries?: Country | Country[];
}

export type Country = {
    active: boolean;
    integrationValue: string;
    isoCode: string;
    label: string;
    orgDefault: boolean;
    standard: boolean;
    states?: State | State[];
    visible: boolean;
}

export type State = {
    active: boolean;
    integrationValue: string;
    isoCode: string;
    label: string;
    standard: boolean;
    visible: boolean;
}

export type Ai4mSettings = MetadataForSettings & sObject &  {
    enableUmaGlobalModel?: boolean;
    enableUmaSto?: boolean;
}

export type AnalyticsSettings = MetadataForSettings & sObject &  {
    alwaysGenPreviews?: boolean;
    analyticsAdoptionMetadata?: boolean;
    autoInstallApps?: boolean;
    bundleCachingOptOut?: boolean;
    canAccessAnalyticsViaAPI?: boolean;
    canAnnotateDashboards?: boolean;
    canEnableSavedView?: boolean;
    canExploreDataConversationally?: boolean;
    canShareAppsWithCommunities?: boolean;
    canViewThumbnailAssets?: boolean;
    concurrencyLimitSharing?: boolean;
    enableAmazonRedshiftOutputConnector?: boolean;
    enableAnalyticsEncryption?: boolean;
    enableAnalyticsSharingEnable?: boolean;
    enableAutoCompleteCombo?: boolean;
    enableAutonomousExperience?: boolean;
    enableAzureDLGen2OutputConnector?: boolean;
    enableC360GlobalProfileData?: boolean;
    enableCreateLegacyDataflows?: boolean;
    enableCrmaDataCloudIntegration?: boolean;
    enableDashboardComponentSnapshot?: boolean;
    enableDashboardFlexiTable?: boolean;
    enableDashboardToPDFEnable?: boolean;
    enableDataCloudReportingPref?: boolean;
    enableEmailReportsToPortalUsers?: boolean;
    enableFirebirdEditor?: boolean;
    enableFloatingReportHeaders?: boolean;
    enableInsights?: boolean;
    enableInsightsHCMode?: boolean;
    enableLightningReportBuilder?: boolean;
    enableLotusNotesImages?: boolean;
    enableMassEnableReportBuilder?: boolean;
    enableNewChartsEngine?: boolean;
    enableNullDimension?: boolean;
    enableOrgCanSeeLivePreviews?: boolean;
    enableOrgCanViewTableau?: boolean;
    enableOrgCanViewThumbnailForOA?: boolean;
    enableOrgHasMobileOfflineEnabled?: boolean;
    enableOrgHasWatchlistEnabled?: boolean;
    enableQueryLiveConnectors?: boolean;
    enableRemoveFooterForRepDisplay?: boolean;
    enableRemoveFooterFromRepExp?: boolean;
    enableReportHideXlsExportPref?: boolean;
    enableReportInlineEditPref?: boolean;
    enableReportNotificationsEnable?: boolean;
    enableRequestPrioritySchdl?: boolean;
    enableS1AnalyticsEclairEnable?: boolean;
    enableS3OutputConnector?: boolean;
    enableSFXJoinedReportsEnable?: boolean;
    enableSalesforceOutputConnector?: boolean;
    enableSecureImageSharing?: boolean;
    enableSnowflakeOutputConnector?: boolean;
    enableSummaryFilterOrgPref?: boolean;
    enableTableauHyperOutputConnector?: boolean;
    enableUseOldChartsLookAndFeel?: boolean;
    enableWaveAssetsNewDateVersion?: boolean;
    enableWaveCustomFiscal?: boolean;
    enableWaveIndexMVDim?: boolean;
    enableWaveIndexMVDimV2?: boolean;
    enableWaveMultiCurrency?: boolean;
    enableWaveRecordNavigation?: boolean;
    enableWaveReplication?: boolean;
    enableWaveSharingInheritance?: boolean;
    enableWaveSqlCFIndexing?: boolean;
    enableWaveTrendedDatasetCleanup?: boolean;
    enableWriteToDataCloud?: boolean;
    etlOrchestrationPref?: boolean;
    isDiscoveryOptimizationEnabled?: boolean;
    isHighVolumePushbackEnabled?: boolean;
    maxHoursAppInProgress?: number;
    queryCachingOptOut?: boolean;
    recipeDirectDataPref?: boolean;
    recipeFiscalPref?: boolean;
    recipePreCachingOptOut?: boolean;
    recipeStagedDataPref?: boolean;
    replaceBlankMeasuresWithNulls?: boolean;
    setWaveIsYearEndFiscalYear?: boolean;
    sonicEnabled?: boolean;
    turnOnTimeZones?: boolean;
}

export type ApexSettings = MetadataForSettings & sObject &  {
    defaultQueueableDelay?: number;
    enableAggregateCodeCoverageOnly?: boolean;
    enableApexAccessRightsPref?: boolean;
    enableApexApprovalLockUnlock?: boolean;
    enableApexCtrlImplicitWithSharingPref?: boolean;
    enableApexPropertyGetterPref?: boolean;
    enableAuraApexCtrlAuthUserAccessCheckPref?: boolean;
    enableAuraApexCtrlGuestUserAccessCheckPref?: boolean;
    enableCompileOnDeploy?: boolean;
    enableDisableParallelApexTesting?: boolean;
    enableGaplessTestAutoNum?: boolean;
    enableMngdCtrlActionAccessPref?: boolean;
    enableNonCertifiedApexMdCrud?: boolean;
    enableRestrictCommunityExecAnon?: boolean;
    enableSecureNoArgConstructorPref?: boolean;
}

export type AppExperienceSettings = MetadataForSettings & sObject &  {
    doesHideAllAppsInAppLauncher?: boolean;
}

export type AutomatedContactsSettings = MetadataForSettings & sObject &  {
    enableAddContactAutomatically?: boolean;
    enableAddContactRoleAutomatically?: boolean;
    enableAddContactRoleWithSuggestion?: boolean;
    enableAddContactWithSuggestion?: boolean;
}

export type BlockchainSettings = MetadataForSettings & sObject &  {
    enableBcp?: boolean;
    enableEtpNft?: boolean;
}

export type BotSettings = MetadataForSettings &  {
    enableBots?: boolean;
}

export type BusinessHoursSettings = MetadataForSettings & sObject &  {
    businessHours?: BusinessHoursEntry | BusinessHoursEntry[];
    holidays?: Holiday | Holiday[];
}

export type Holiday = {
    activityDate?: Date;
    businessHours?: string | string[];
    description?: string;
    endTime?: Date;
    isRecurring?: boolean;
    name?: string;
    recurrenceDayOfMonth?: number;
    recurrenceDayOfWeek?: string | string[];
    recurrenceDayOfWeekMask?: number;
    recurrenceEndDate?: Date;
    recurrenceInstance?: string;
    recurrenceInterval?: number;
    recurrenceMonthOfYear?: string;
    recurrenceStartDate?: Date;
    recurrenceType?: string;
    startTime?: Date;
}

export type CampaignSettings = MetadataForSettings & sObject &  {
    aiAttributionSuccessMilestone?: string;
    aiAttributionTimeframe?: number;
    enableAIAttribution?: boolean;
    enableAccountsAsCM?: boolean;
    enableAutoCampInfluenceDisabled?: boolean;
    enableB2bmaCampaignInfluence2?: boolean;
    enableCampaignHistoryTrackEnabled?: boolean;
    enableCampaignInfluence2?: boolean;
    enableCampaignMemberTWCF?: boolean;
    enableEKAI?: boolean;
    enableSuppressNoValueCI2?: boolean;
}

export type CaseSettings = MetadataForSettings & sObject &  {
    caseAssignNotificationTemplate?: string;
    caseAutoProcUser?: boolean;
    caseCloseNotificationTemplate?: string;
    caseCommentNotificationTemplate?: string;
    caseCreateNotificationTemplate?: string;
    caseFeedItemSettings?: FeedItemSettings | FeedItemSettings[];
    caseFeedReadUnreadLtng?: boolean;
    caseMergeInLightning?: boolean;
    closeCaseThroughStatusChange?: boolean;
    defaultCaseFeedLayoutOn?: boolean;
    defaultCaseOwner?: string;
    defaultCaseOwnerType?: string;
    defaultCaseUser?: string;
    emailActionDefaultsHandlerClass?: string;
    emailToCase?: EmailToCaseSettings;
    enableCaseFeed?: boolean;
    enableCaseSwarming?: boolean;
    enableCollapseEmailThread?: boolean;
    enableDraftEmails?: boolean;
    enableEarlyEscalationRuleTriggers?: boolean;
    enableEmailActionDefaultsHandler?: boolean;
    enableEmailContactOnCasePost?: boolean;
    enableEscalateQfiToCaseInternal?: boolean;
    enableEscalateQfiToCaseNetworks?: boolean;
    enableExtNetworksCaseFeedEnabled?: boolean;
    enableMultiLangSolnSrchCSS?: boolean;
    enableMultiLangSolnSrchPKB?: boolean;
    enableMultiLangSolution?: boolean;
    enableSolutionCategory?: boolean;
    enableSolutionInlineCategory?: boolean;
    enableSolutionShortSummary?: boolean;
    enableSuggestedArticlesApplication?: boolean;
    enableSuggestedArticlesCustomerPortal?: boolean;
    enableSuggestedArticlesPartnerPortal?: boolean;
    enableSuggestedSolutions?: boolean;
    escalateCaseBefore?: boolean;
    genericMessageEnabled?: boolean;
    keepCaseMergeRecords?: boolean;
    keepRecordTypeOnAssignmentRule?: boolean;
    notifyContactOnCaseComment?: boolean;
    notifyDefaultCaseOwner?: boolean;
    notifyOwnerOnCaseComment?: boolean;
    notifyOwnerOnCaseOwnerChange?: boolean;
    predictiveSupportEnabled?: boolean;
    showEmailAttachmentsInCaseAttachmentsRL?: boolean;
    showFewerCloseActions?: boolean;
    systemUserEmail?: string;
    useSystemEmailAddress?: boolean;
    useSystemUserAsDefaultCaseUser?: boolean;
    visibleInCssCheckbox?: boolean;
    webToCase?: WebToCaseSettings;
}

export type FeedItemSettings = {
    characterLimit?: number;
    displayFormat?: FeedItemDisplayFormat;
    feedItemType: FeedItemType;
}

export type EmailToCaseSettings = {
    enableE2CAttachmentAsFile?: boolean;
    enableE2CDeduplicateAttachments?: boolean;
    enableE2CExternalServer?: boolean;
    enableE2CSourceTracking?: boolean;
    enableEmailToCase?: boolean;
    enableHtmlEmail?: boolean;
    enableNewToReadTriggers?: boolean;
    enableOnDemandEmailToCase?: boolean;
    enableThreadIDInBody?: boolean;
    enableThreadIDInSubject?: boolean;
    enableThreadTokenInBody?: boolean;
    enableThreadTokenInSubject?: boolean;
    notifyOwnerOnNewCaseEmail?: boolean;
    overEmailLimitAction?: EmailToCaseOnFailureActionType;
    preQuoteSignature?: boolean;
    replyWithNewContentOnly?: boolean;
    routingAddresses?: EmailToCaseRoutingAddress | EmailToCaseRoutingAddress[];
    showGeneratedEmailCheckbox?: boolean;
    unauthorizedSenderAction?: EmailToCaseOnFailureActionType;
    useEmailHeadersForThreading?: boolean;
}

export type EmailToCaseRoutingAddress = {
    addressType?: EmailToCaseRoutingAddressType;
    authorizedSenders?: string;
    caseOrigin?: string;
    caseOwner?: string;
    caseOwnerType?: string;
    casePriority?: string;
    createTask?: boolean;
    emailAddress?: string;
    emailServicesAddress?: string;
    fallbackQueue?: string;
    isVerified?: boolean;
    routingFlow?: string;
    routingName?: string;
    saveEmailHeaders?: boolean;
    taskStatus?: string;
}

export type WebToCaseSettings = {
    caseOrigin?: string;
    defaultResponseTemplate?: string;
    enableWebToCase?: boolean;
}

export type ChatterAnswersSettings = MetadataForSettings & sObject &  {
    emailFollowersOnBestAnswer?: boolean;
    emailFollowersOnReply?: boolean;
    emailOwnerOnPrivateReply?: boolean;
    emailOwnerOnReply?: boolean;
    enableAnswerViaEmail?: boolean;
    enableChatterAnswers: boolean;
    enableFacebookSSO?: boolean;
    enableInlinePublisher?: boolean;
    enableReputation?: boolean;
    enableRichTextEditor?: boolean;
    facebookAuthProvider?: string;
    showInPortals?: boolean;
}

export type ChatterEmailsMDSettings = MetadataForSettings & sObject &  {
    enableChatterDigestEmailsApiOnly?: boolean;
    enableChatterEmailAttachment?: boolean;
    enableCollaborationEmail?: boolean;
    enableDisplayAppDownloadBadges?: boolean;
    enableEmailReplyToChatter?: boolean;
    enableEmailToChatter?: boolean;
    noQnOwnNotifyOnCaseCmt?: boolean;
    noQnOwnNotifyOnRep?: boolean;
    noQnSubNotifyOnBestR?: boolean;
    noQnSubNotifyOnRep?: boolean;
}

export type ChatterSettings = MetadataForSettings & sObject &  {
    allowChatterGroupArchiving?: boolean;
    allowRecordsInChatterGroup?: boolean;
    enableApprovalRequest?: boolean;
    enableCaseFeedRelativeTimestamps?: boolean;
    enableChatter?: boolean;
    enableChatterEmoticons?: boolean;
    enableFeedEdit?: boolean;
    enableFeedPinning?: boolean;
    enableFeedsDraftPosts?: boolean;
    enableFeedsRichText?: boolean;
    enableInviteCsnUsers?: boolean;
    enableOutOfOfficeEnabledPref?: boolean;
    enableRichLinkPreviewsInFeed?: boolean;
    enableTodayRecsInFeed?: boolean;
    unlistedGroupsEnabled?: boolean;
}

export type CommerceSettings = MetadataForSettings & sObject &  {
    commerceAnalyticsEnabled?: boolean;
    commerceConciergeEnabled?: boolean;
    commerceDiscoveryExpansion?: boolean;
    commerceEnabled?: boolean;
    lowestUnitPriceTracking?: boolean;
}

export type CommsServiceConsoleSettings = MetadataForSettings & sObject &  {
    enableCommsServiceConsole?: boolean;
}

export type CommunitiesSettings = MetadataForSettings & sObject &  {
    applyLoginPageTypeToEmbeddedLogin?: boolean;
    blockEmbeddedLoginUnknownURLRedirect?: boolean;
    canModerateAllFeedPosts?: boolean;
    canModerateInternalFeedPosts?: boolean;
    embeddedVisualforcePages?: boolean;
    enableCommunityWorkspaces?: boolean;
    enableCspContactVisibilityPref?: boolean;
    enableCspNotesOnAccConPref?: boolean;
    enableEnablePRM?: boolean;
    enableExternalAccHierPref?: boolean;
    enableGuestPermDisOptOutCruc?: boolean;
    enableGuestRecordReassignOrgPref?: boolean;
    enableGuestSecurityOptOutCruc?: boolean;
    enableGuvSecurityOptOutPref?: boolean;
    enableInviteChatterGuestEnabled?: boolean;
    enableNameFieldsUserPIIEnabled?: boolean;
    enableNetPortalUserReportOpts?: boolean;
    enableNetworksEnabled?: boolean;
    enableOotbProfExtUserOpsEnable?: boolean;
    enablePRMAccRelPref?: boolean;
    enablePowerCustomerCaseStatus?: boolean;
    enablePreventBadgeGuestAccess?: boolean;
    enableRelaxPartnerAccountFieldPref?: boolean;
    enableUnsupportedBrowserModalPref?: boolean;
    enableUsernameUniqForOrgPref?: boolean;
}

export type CompanySettings = MetadataForSettings & sObject &  {
    enableCustomFiscalYear: boolean;
    fiscalYear?: FiscalYearSettings;
}

export type FiscalYearSettings = {
    fiscalYearNameBasedOn?: string;
    startMonth?: string;
}

export type ConnectedAppSettings = MetadataForSettings & sObject &  {
    enableAdminApprovedAppsOnly?: boolean;
    enableAdminApprovedAppsOnlyForExternalUser?: boolean;
    enableSkipUserProvisioningWizardWelcomePage?: boolean;
}

export type ConsentBannerSettings = Metadata & sObject &  {
    allowButtonColor: string;
    allowButtonTextColor: string;
    bannerColor: string;
    bannerFontFamily: BannerFontFamily;
    bannerMessage: string;
    bannerPosition: BannerPosition;
    bannerTextColor: string;
    declineButtonColor: string;
    declineButtonTextColor: string;
    fullName?: string;
    infoText?: string;
    infoUrl?: string;
    isProtected?: boolean;
    masterLabel: string;
    privacyPolicyText?: string;
    privacyPolicyUrl?: string;
}

export type ContentSettings = MetadataForSettings & sObject &  {
    enableCMSC2CConnections?: boolean;
    enableChatterFileLink?: boolean;
    enableContent?: boolean;
    enableContentAutoAssign?: boolean;
    enableContentDistForPortalUsers?: boolean;
    enableContentDistPwOptionsBit1?: boolean;
    enableContentDistPwOptionsBit2?: boolean;
    enableContentDistribution?: boolean;
    enableContentSupportMultiLanguage?: boolean;
    enableContentWorkspaceAccess?: boolean;
    enableDeleteFileInContentPacks?: boolean;
    enableFileShareSetByRecord?: boolean;
    enableFilesUsrShareNetRestricted?: boolean;
    enableJPGPreviews?: boolean;
    enableLibraryManagedFiles?: boolean;
    enableShowChatterFilesInContent?: boolean;
    enableSiteGuestUserToUploadFiles?: boolean;
    enableUploadFilesOnAttachments?: boolean;
    setValidContentTypeForAtchDocDownload?: boolean;
    skipContentAssetTriggers?: boolean;
    skipContentAssetTriggersOnDeploy?: boolean;
}

export type ContractSettings = MetadataForSettings & sObject &  {
    autoCalculateEndDate?: boolean;
    autoExpirationDelay?: string;
    autoExpirationRecipient?: string;
    autoExpireContracts?: boolean;
    enableContractHistoryTracking?: boolean;
    notifyOwnersOnContractExpiration?: boolean;
}

export type ConversationalIntelligenceSettings = MetadataForSettings & sObject &  {
    enableCallCoaching?: boolean;
    enableCallCoachingZoom?: boolean;
    enableCallExplorer?: boolean;
    enableCallSummarization?: boolean;
    enableDiarizationPref?: boolean;
    enableOpptyMatching?: boolean;
    enableUnifiedActivities?: boolean;
}

export type CurrencySettings = MetadataForSettings & sObject &  {
    enableCurrencyEffectiveDates?: boolean;
    enableCurrencySymbolWithMultiCurrency?: boolean;
    enableMultiCurrency?: boolean;
    isMultiCurrencyActivationAllowed?: boolean;
    isParenCurrencyConvDisabled?: boolean;
}

export type CustomAddressFieldSettings = MetadataForSettings & sObject &  {
    enableCustomAddressField?: boolean;
}

export type CustomerDataPlatformSettings = MetadataForSettings & sObject &  {
    enableCustomerDataPlatform?: boolean;
}

export type CustomizablePropensityScoringSettings = MetadataForSettings & sObject &  {
    enableCpsPref?: boolean;
}

export type DataDotComSettings = MetadataForSettings & sObject &  {
    enableAccountExportButtonOff?: boolean;
    enableAccountImportButtonOff?: boolean;
    enableAllowDupeContactFromLead?: boolean;
    enableAllowDupeLeadFromContact?: boolean;
    enableContactExportButtonOff?: boolean;
    enableContactImportButtonOff?: boolean;
    enableDDCSocialKeyEnabled?: boolean;
    enableDataDotComCleanEnabled?: boolean;
    enableDataDotComOptOutsEnabled?: boolean;
    enableDatacloudAPIEnabled?: boolean;
}

export type PlatformSlackSettings = MetadataForSettings & sObject &  {
    enableSlackService?: boolean;
    enableSlackServiceAlerts?: boolean;
    slackCapabilitiesEnabled?: boolean;
}

export type ProductConfiguratorSettings = MetadataForSettings &  {
    enableProductConfigurator?: boolean;
}

export type DataImportManagementSettings = MetadataForSettings & sObject &  {
    enableDataConnectorHubspot?: boolean;
    enableEasyImport?: boolean;
}

export type RevenueManagementSettings = MetadataForSettings &  {
    enableCoreCPQ?: boolean;
}

export type WorkforceEngagementSettings = MetadataForSettings & sObject &  {
    enableHistoricalAdherence?: boolean;
    enableIndividualAdherence?: boolean;
    enableIntradayManagement?: boolean;
    enableMachineLearningForecasting?: boolean;
    enableRealTimeAdherence?: boolean;
    enableWorkforceEngagement?: boolean;
    enableWorkforceEngagementConfiguration?: boolean;
}

export type KnowledgeGenerationSettings = MetadataForSettings & sObject &  {
    enableKnowledgeGeneration?: boolean;
}

export type ClaimMgmtFoundationEnabledSettings = MetadataForSettings & sObject &  {
    enableWarrantyClaimMgmt?: boolean;
}

export type MailMergeSettings = MetadataForSettings & sObject &  {
    enableExtendedMailMerge?: boolean;
    saveMailMergeDocsAsSalesforceDocs?: boolean;
}

export type AccountingSettings = MetadataForSettings & sObject &  {
    enableAccountingSubledger?: boolean;
    enableFinancePeriod?: boolean;
    enablePaymentMethodAdjust?: boolean;
    enableScheduledJob?: boolean;
}

export type CollectionsDashboardSettings = MetadataForSettings & sObject &  {
    enableCollectionsDashboard?: boolean;
}

export type InvLatePymntRiskCalcSettings = MetadataForSettings & sObject &  {
    enableInvLatePymntRiskCalc?: boolean;
}

export type FTestSettings = MetadataForSettings & sObject &  {
    enableTestPref?: boolean;
}

export type MediaAdSalesSettings = MetadataForSettings & sObject &  {
    enableMediaAdSales?: boolean;
}

export type IndustriesPricingSettings = MetadataForSettings &  {
    enableHighAvailability?: boolean;
    enablePricingWaterfall?: boolean;
    enablePricingWaterfallPersistence?: boolean;
    enableSalesforcePricing?: boolean;
}

export type BranchManagementSettings = MetadataForSettings & sObject &  {
    associateAccountWithBranch?: boolean;
}

export type DynamicFormsSettings = MetadataForSettings & sObject &  {
    enableFormsOnMobile?: boolean;
}

export type FTestAccessSettings = MetadataForSettings & sObject &  {
    enableTestPref?: boolean;
}

export type CodeBuilderSettings = MetadataForSettings & sObject &  {
    enableCodeBuilder?: boolean;
}

export type IndustriesContextSettings = MetadataForSettings &  {
    enableContextDefinitions?: boolean;
}

export type IncludeEstTaxInQuoteCPQSettings = MetadataForSettings &  {
    enableQuoteEstimatedTaxCPQ?: boolean;
}

export type SceGlobalModelOptOutSettings = MetadataForSettings &  {
    sceGlobalModelOptOut?: boolean;
}

export type SandboxSettings = MetadataForSettings & sObject &  {
    disableSandboxExpirationEmails?: boolean;
}

export type InterestTaggingSettings = MetadataForSettings & sObject &  {
    enableInterestTagging?: boolean;
}

export type ConversationServiceIntegrationSettings = MetadataForSettings &  {
    enableConvoCatchUpForAgents?: boolean;
    enableConvoCatchUpForSupervisors?: boolean;
}

export type EinsteinAISettings = MetadataForSettings &  {
    enableTrustPIIMasking?: boolean;
}

export type IndustriesGamificationSettings = MetadataForSettings &  {
    enableGamification?: boolean;
}

export type PlatformEventSettings = MetadataForSettings & sObject &  {
    enableEnhancedUsageMetrics?: boolean;
}

export type AssociationEngineSettings = MetadataForSettings & sObject &  {
    enableAssociationEngine?: boolean;
}

export type SourceTrackingSettings = MetadataForSettings & sObject &  {
    enableSourceTrackingSandboxes?: boolean;
}

export type OrgSettings = MetadataForSettings & sObject &  {
    enableCustomerSuccessPortal?: boolean;
    enableIncludeContractStatus?: boolean;
    enableMakeDeploymentsMandatory?: boolean;
    enableManageSelfServiceUsers?: boolean;
    enableOrgFeedSentimentAnalysis?: boolean;
    enableRADeploymentAttributeOnly?: boolean;
    enableResetDivisionOnLogin?: boolean;
}

export type DevHubSettings = MetadataForSettings & sObject &  {
    devOpsCenterBetaMsa?: boolean;
    enableDevOpsCenter?: boolean;
    enableDevOpsCenterGA?: boolean;
    enablePackaging2?: boolean;
    enableScratchOrgManagementPref?: boolean;
    enableScratchOrgSnapshotPref?: boolean;
    enableShapeExportPref?: boolean;
}

export type IncludeEstTaxInQuoteSettings = MetadataForSettings & sObject &  {
    enableQuoteEstimatedTax?: boolean;
}

export type ReferralMarketingSettings = MetadataForSettings &  {
    enableMarketingCloudIntegration?: boolean;
}

export type IndustriesLoyaltySettings = MetadataForSettings & sObject &  {
    enableAutomaticMemberTierAssessmentSelection?: boolean;
    enableAutomaticVoucherCodeGeneration?: boolean;
    enableFixedTypeNQPAggregation?: boolean;
    enableLoyaltyApiAccessForExternalSiteUsers?: boolean;
    enableLoyaltyRedeemedPointsExpirationInfoPref?: boolean;
    enableLoyaltyRulesVerifyCdpMemberSegment?: boolean;
    enableLoyaltyServiceExcellence?: boolean;
    enableNQPRealTimePointBalance?: boolean;
    enableNonQualifyingPointsConsolidation?: boolean;
    enableQPRealTimePointBalance?: boolean;
}

export type Web3Settings = MetadataForSettings & sObject &  {
    enableMultisig?: boolean;
}

export type IndustriesUnifiedPromotionsSettings = MetadataForSettings &  {
    enableUnifiedPromotions?: boolean;
}

export type PaymentsManagementEnabledSettings = MetadataForSettings & sObject &  {
    paymentsManagementEnabled?: boolean;
}

export type EinsteinGptSettings = MetadataForSettings & sObject &  {
    enableEinsteinGptPlatform?: boolean;
    enableGenAIOrgDataCloud?: boolean;
}

export type AppAnalyticsSettings = MetadataForSettings & sObject &  {
    enableAppAnalyticsOptOut?: boolean;
    enableSimulationMode?: boolean;
}

export type MapsAndLocationSettings = MetadataForSettings & sObject &  {
    enableAddressAutoComplete?: boolean;
    enableMapsAndLocation?: boolean;
}

export type OnlineSalesSettings = MetadataForSettings & sObject &  {
    enableSubscriptionAppEnrolled?: boolean;
}

export type DeploymentSettings = MetadataForSettings & sObject &  {
    doesSkipAsyncApexValidation?: boolean;
}

export type DiscoverySettings = MetadataForSettings & sObject &  {
    enableEinsteinAnswersPref?: boolean;
    enableEinsteinArticleRecommendations?: boolean;
}

export type DocumentChecklistSettings = MetadataForSettings & sObject &  {
    dciCustomSharing?: boolean;
    deleteDCIWithFiles?: boolean;
}

export type EACSettings = MetadataForSettings & sObject &  {
    addRcCompToFlexiPages?: boolean;
    autoPopulateGoogleMeetLinks?: boolean;
    automatedEmailFilter?: boolean;
    dSThresholdNotification?: boolean;
    enableActivityAnalyticsPref?: boolean;
    enableActivityCapture?: boolean;
    enableActivityMetrics?: boolean;
    enableActivitySyncEngine?: boolean;
    enableEACForEveryonePref?: boolean;
    enableEnforceEacSharingPref?: boolean;
    enableInboxActivitySharing?: boolean;
    enableInsightsInTimeline?: boolean;
    enableInsightsInTimelineEacStd?: boolean;
    enableUnifiedActivitiesPref?: boolean;
    provisionProductivityFeatures?: boolean;
    salesforceEventsOnlyPref?: boolean;
    sensitiveEmailFilter?: boolean;
    showEACCalendarPref?: boolean;
    syncInternalEvents?: boolean;
}

export type EinsteinAgentSettings = MetadataForSettings & sObject &  {
    einsteinAgentRecommendations?: boolean;
    reRunAttributeBasedRules?: boolean;
    runAssignmentRules?: boolean;
    summarizationRecs?: boolean;
    voiceWrapUpRecs?: boolean;
}

export type EinsteinAssistantSettings = MetadataForSettings & sObject &  {
    enableEinsteinAssistantDataExtractionEnabled?: boolean;
    enableEinsteinAssistantEnabled?: boolean;
    enableEinsteinEnableVoiceLogging?: boolean;
}

export type EinsteinDealInsightsSettings = MetadataForSettings & sObject &  {
    enableUnlikelyToCloseThisMonth?: boolean;
}

export type EinsteinDocumentCaptureSettings = MetadataForSettings & sObject &  {
    enableEinsteinDocumentReader?: boolean;
}

export type EmailAdministrationSettings = MetadataForSettings & sObject &  {
    enableComplianceBcc?: boolean;
    enableEmailConsentManagement?: boolean;
    enableEmailSenderIdCompliance?: boolean;
    enableEmailSpfCompliance?: boolean;
    enableEmailToSalesforce?: boolean;
    enableEmailTrackingIPBlocklist?: boolean;
    enableEmailWorkflowApproval?: boolean;
    enableEnhancedEmailEnabled?: boolean;
    enableHandleBouncedEmails?: boolean;
    enableHtmlEmail?: boolean;
    enableInternationalEmailAddresses?: boolean;
    enableListEmailLogActivities?: boolean;
    enableResendBouncedEmails?: boolean;
    enableRestrictTlsToDomains?: boolean;
    enableSendThroughGmailPref?: boolean;
    enableSendViaExchangePref?: boolean;
    enableSendViaGmailPref?: boolean;
    enableTinyMceSalesEmailEnabled?: boolean;
    enableUseOrgFootersForExtTrans?: boolean;
    enableVerifyEmailDomainByDkim?: boolean;
    sendEmailsEvenWhenAutomationUpdatesSameRecord?: boolean;
    sendMassEmailNotification?: boolean;
    sendTextOnlySystemEmails?: boolean;
}

export type EmailIntegrationSettings = MetadataForSettings & sObject &  {
    doesEmailLogAsEmailMessageInOutlook?: boolean;
    doesGmailStayConnectedToSalesforce?: boolean;
    enableContactAndEventSync?: boolean;
    enableContextualEverywhere?: boolean;
    enableEmailTrackingInMobile?: boolean;
    enableEngageForOutlook?: boolean;
    enableExtensionHostUnrestricted?: boolean;
    enableGmailIntegration?: boolean;
    enableInboxInternalEmailTracking?: boolean;
    enableInboxMobileIntune?: boolean;
    enableOutlookIntegration?: boolean;
    enableOutlookMobileIntegration?: boolean;
    enableProductivityFeatures?: boolean;
    enableSupplementalContactInfoInMobile?: boolean;
    isLayoutCustomizationAllowed?: boolean;
    orgIsSyncingEventsOutbound?: boolean;
    shouldUseTrustedDomainsList?: boolean;
}

export type EmailTemplateSettings = MetadataForSettings & sObject &  {
    enableTemplateEnhancedFolderPref?: boolean;
}

export type EmployeeFieldAccessSettings = MetadataForSettings & sObject &  {
    enableEmployeeFieldMaskDefaults?: boolean;
    enableEmployeeFieldMasking?: boolean;
}

export type EmployeeUserSettings = MetadataForSettings & sObject &  {
    emailEncoding: string;
    enableEmployeeAutoCreateUser?: boolean;
    enableEmployeeIsSourceOfTruth?: boolean;
    permset?: string;
    profile: string;
    usernameSuffix?: string;
}

export type EncryptionKeySettings = MetadataForSettings & sObject &  {
    canOptOutOfDerivationWithBYOK?: boolean;
    dataCloudEncryption?: boolean;
    enableBringYourOwnkms?: boolean;
    enableCacheOnlyKeys?: boolean;
    enableReplayDetection?: boolean;
}

export type EngagementMessagingSettings = MetadataForSettings & sObject &  {
    engagementEmailProvisionStatusOrgValue: number;
    engagementSMSProvisionStatusOrgValue: number;
    engagementWhatsAppProvisionStatusOrgValue: number;
    isEngagementMessagingComplete?: boolean;
    isEngagementMessagingEnabled?: boolean;
    isEngagementSMSComplete?: boolean;
    isEngagementSMSEnabled?: boolean;
    isEngagementWhatsAppComplete?: boolean;
    isEngagementWhatsAppEnabled?: boolean;
}

export type EnhancedNotesSettings = MetadataForSettings & sObject &  {
    enableEnhancedNotes?: boolean;
    enableTasksOnEnhancedNotes?: boolean;
}

export type EntitlementSettings = MetadataForSettings & sObject &  {
    assetLookupLimitedToActiveEntitlementsOnAccount?: boolean;
    assetLookupLimitedToActiveEntitlementsOnContact?: boolean;
    assetLookupLimitedToSameAccount?: boolean;
    assetLookupLimitedToSameContact?: boolean;
    enableEntitlementVersioning: boolean;
    enableEntitlements: boolean;
    enableMilestoneFeedItem?: boolean;
    enableMilestoneStoppedTime?: boolean;
    entitlementLookupLimitedToActiveStatus?: boolean;
    entitlementLookupLimitedToSameAccount?: boolean;
    entitlementLookupLimitedToSameAsset?: boolean;
    entitlementLookupLimitedToSameContact?: boolean;
    ignoreMilestoneBusinessHours?: boolean;
}

export type EssentialsSettings = MetadataForSettings & sObject &  {
    emailConnectorEnabled?: boolean;
}

export type EventLogObjectSettings = MetadataForSettings &  {
    eventLogObjects?: EventLogObject | EventLogObject[];
}

export type EventLogObject = {
    enabled: boolean;
    eventLogName: string;
}

export type EventSettings = MetadataForSettings & sObject &  {
    bypassMeteringBlock?: boolean;
    enableApexLimitEvents?: boolean;
    enableDeleteMonitoringData?: boolean;
    enableDynamicStreamingChannel?: boolean;
    enableEventLogGeneration?: boolean;
    enableEventLogWaveIntegration?: boolean;
    enableLoginForensics?: boolean;
    enableStreamingApi?: boolean;
    enableTransactionSecurityPolicies?: boolean;
}

export type ExperienceBundleSettings = MetadataForSettings &  {
    enableExperienceBundleMetadata?: boolean;
}

export type ExternalClientAppSettings = MetadataForSettings & sObject &  {
    enableClientSecretInRestApiAccess?: boolean;
    enableConsumerSecretApiAccess?: boolean;
    enableExternalClientApps?: boolean;
    enablePackageEcaOauthFromDevOrg?: boolean;
}

export type FieldServiceSettings = MetadataForSettings & sObject &  {
    apptAssistantExpiration?: number;
    apptAssistantInfoUrl?: string;
    apptAssistantRadiusUnitValue?: ApptAssistantRadiusUnit;
    apptAssistantRadiusValue?: number;
    apptAssistantStatus?: string;
    canPopulateGoogleAddress?: boolean;
    canSendAppCenterCrashReports?: boolean;
    canStoreMobileAnalytics?: boolean;
    deepLinkPublicSecurityKey?: string;
    doesAllowEditSaForCrew?: boolean;
    doesAvlCalcInclOvertime?: boolean;
    doesAvlCalcInclPrimOnly?: boolean;
    doesShareSaParentWoWithAr?: boolean;
    doesShareSaWithAr?: boolean;
    enableBatchWindow?: boolean;
    enableFloatingWorkOrder?: boolean;
    enablePopulateWorkOrderAddress?: boolean;
    enableWorkOrders?: boolean;
    enableWorkPlansAutoGeneration?: boolean;
    enableWorkStepManualStatusUpdate?: boolean;
    fieldServiceNotificationsOrgPref?: boolean;
    fieldServiceOrgPref?: boolean;
    isGeoCodeSyncEnabled?: boolean;
    isLocationHistoryEnabled?: boolean;
    mobileFeedbackEmails?: string;
    o2EngineEnabled?: boolean;
    objectMappingItem?: ObjectMappingItem | ObjectMappingItem[];
    optimizationServiceAccess?: boolean;
    serviceAppointmentsDueDateOffsetOrgValue?: number;
    workOrderDurationSource?: WorkOrderDurationSource;
    workOrderLineItemSearchFields?: string | string[];
    workOrderSearchFields?: string | string[];
}

export type ObjectMappingItem = {
    mappingType: MappingType;
    objectMapping: ObjectMapping;
}

export type FileUploadAndDownloadSecuritySettings = MetadataForSettings & sObject &  {
    dispositions?: FileTypeDispositionAssignmentBean | FileTypeDispositionAssignmentBean[];
    noHtmlUploadAsAttachment: boolean;
}

export type FileTypeDispositionAssignmentBean = {
    behavior: FileDownloadBehavior;
    fileType: FileType;
    securityRiskFileType: boolean;
}

export type FilesConnectSettings = MetadataForSettings & sObject &  {
    enableContentHubAllowed?: boolean;
    enableContentHubCvtLinksAllowed?: boolean;
    enableContentHubEOSearchLayout?: boolean;
}

export type FlowSettings = MetadataForSettings & sObject &  {
    canDebugFlowAsAnotherUser?: boolean;
    doesEnforceApexCpuTimeLimit?: boolean;
    doesFormulaEnforceDataAccess?: boolean;
    doesFormulaGenerateHtmlOutput?: boolean;
    enableEmailSimpleRespectProfiles?: boolean;
    enableEmailsimpleSecureProfiles?: boolean;
    enableFlowBREncodedFixEnabled?: boolean;
    enableFlowCustomPropertyEditor?: boolean;
    enableFlowDeployAsActiveEnabled?: boolean;
    enableFlowFieldFilterEnabled?: boolean;
    enableFlowFormulasFixEnabled?: boolean;
    enableFlowInterviewSharingEnabled?: boolean;
    enableFlowNullPreviousValueFix?: boolean;
    enableFlowPauseEnabled?: boolean;
    enableFlowReactiveChoiceOptions?: boolean;
    enableFlowReactiveScreens?: boolean;
    enableFlowUseApexExceptionEmail?: boolean;
    enableFlowViaRestUsesUserCtxt?: boolean;
    enableLightningRuntimeEnabled?: boolean;
    isApexPluginAccessModifierRespected?: boolean;
    isEnhancedFlowListViewVisible?: boolean;
    isFlowBlockAccessToSessionIDEnabled?: boolean;
    isManageFlowRequiredForAutomationCharts?: boolean;
    isSupportRollbackOnErrorForApexInvocableActionsEnabled?: boolean;
}

export type ForecastingObjectListSettings = MetadataForSettings & sObject &  {
    forecastingTypeObjectListSettings?: ForecastingTypeObjectListSettings | ForecastingTypeObjectListSettings[];
}

export type ForecastingTypeObjectListSettings = {
    forecastingObjectListLabelMappings?: ForecastingObjectListLabelMapping | ForecastingObjectListLabelMapping[];
    forecastingObjectListSelectedSettings: ForecastingObjectListSelectedSettings;
    forecastingObjectListUnselectedSettings: ForecastingObjectListUnselectedSettings;
    forecastingTypeDeveloperName: string;
}

export type ForecastingObjectListLabelMapping = {
    field: string;
    label: string;
}

export type ForecastingObjectListSelectedSettings = {
    field?: string | string[];
}

export type ForecastingObjectListUnselectedSettings = {
    field?: string | string[];
}

export type ForecastingSettings = MetadataForSettings & sObject &  {
    defaultToPersonalCurrency?: boolean;
    enableForecasts?: boolean;
    forecastingCategoryMappings?: ForecastingCategoryMapping | ForecastingCategoryMapping[];
    forecastingDisplayedFamilySettings?: ForecastingDisplayedFamilySettings | ForecastingDisplayedFamilySettings[];
    forecastingTypeSettings?: ForecastingTypeSettings | ForecastingTypeSettings[];
    globalAdjustmentsSettings: AdjustmentsSettings;
    globalForecastRangeSettings: ForecastRangeSettings;
    globalQuotasSettings: QuotasSettings;
}

export type ForecastingCategoryMapping = {
    forecastingItemCategoryApiName: string;
    weightedSourceCategories?: WeightedSourceCategory | WeightedSourceCategory[];
}

export type WeightedSourceCategory = {
    sourceCategoryApiName: string;
    weight: number;
}

export type ForecastingDisplayedFamilySettings = {
    productFamily?: string;
}

export type ForecastingTypeSettings = {
    active: boolean;
    displayedCategoryApiNames?: string | string[];
    forecastedCategoryApiNames?: string | string[];
    forecastingDateType: ForecastingDateType;
    hasProductFamily: boolean;
    isAmount: boolean;
    isAvailable: boolean;
    isQuantity: boolean;
    managerAdjustableCategoryApiNames?: string | string[];
    masterLabel: string;
    name: string;
    opportunityListFieldsLabelMappings?: OpportunityListFieldsLabelMapping | OpportunityListFieldsLabelMapping[];
    opportunityListFieldsSelectedSettings: OpportunityListFieldsSelectedSettings;
    opportunityListFieldsUnselectedSettings: OpportunityListFieldsUnselectedSettings;
    opportunitySplitName?: string;
    ownerAdjustableCategoryApiNames?: string | string[];
    territory2ModelName?: string;
}

export type OpportunityListFieldsLabelMapping = {
    field: string;
    label: string;
}

export type OpportunityListFieldsSelectedSettings = {
    field?: string | string[];
}

export type OpportunityListFieldsUnselectedSettings = {
    field?: string | string[];
}

export type AdjustmentsSettings = {
    allowExpandedColumns: boolean;
    enableAdjustments: boolean;
    enableOwnerAdjustments: boolean;
}

export type ForecastRangeSettings = {
    beginning: number;
    displaying: number;
    periodType: PeriodTypes;
}

export type QuotasSettings = {
    showQuotas: boolean;
}

export type FormulaSettings = MetadataForSettings & sObject &  {
    enableDSTAwareDatevalue?: boolean;
}

export type GoogleAppsSettings = MetadataForSettings & sObject &  {
    enableGmailButtons?: boolean;
    enableGmailButtonsAndLinks?: boolean;
    enableGmailLinks?: boolean;
    enableGoogleDocs?: boolean;
    enableGoogleDocsTab?: boolean;
    enableGoogleTalk?: boolean;
    googleAppsDomain?: string;
    googleAppsDomainLinked?: boolean;
    googleAppsDomainValidated?: boolean;
}

export type HighVelocitySalesSettings = MetadataForSettings & sObject &  {
    enableACAutoSendEmail?: boolean;
    enableACChangeTargetAssignee?: boolean;
    enableACSkipWeekends?: boolean;
    enableBusinessHours?: boolean;
    enableCadenceVariantTestingPref?: boolean;
    enableChgTgtAssigneeUsrPermPref?: boolean;
    enableDispositionCategory?: boolean;
    enableEngagementWaveAnalyticsPref?: boolean;
    enableHighVelocitySales?: boolean;
    enableHighVelocitySalesSetup?: boolean;
    enableInvoiceAttributionPref?: boolean;
    enableLogACallForCTIPref?: boolean;
    enableLogTasksForLinkedInPref?: boolean;
    enableMultipleCadencesPref?: boolean;
    enableOpportunityAttributionPermPref?: boolean;
    enableQuickCadenceAutoSendEmail?: boolean;
    enableTaskLoggingPref?: boolean;
}

export type IdeasSettings = MetadataForSettings & sObject &  {
    enableChatterProfile?: boolean;
    enableHtmlIdea?: boolean;
    enableIdeaMultipleCategory?: boolean;
    enableIdeaThemes?: boolean;
    enableIdeas?: boolean;
    enableIdeasControllerExtensions?: boolean;
    enableIdeasReputation?: boolean;
    halfLife?: number;
    ideasProfilePage?: string;
}

export type IdentityProviderSettings = MetadataForSettings &  {
    certificateName: string;
    enableIdentityProvider: boolean;
}

export type IncidentMgmtSettings = MetadataForSettings & sObject &  {
    enableAlertBroadcastType?: boolean;
    enableEmailBroadcastType?: boolean;
    enableIncidentMgmt?: boolean;
    enableSiteBannerBroadcastType?: boolean;
    enableSlackBroadcastType?: boolean;
}

export type IndustriesAutomotiveSettings = MetadataForSettings & sObject &  {
    enableAutomotiveCloud?: boolean;
    enableAutomotiveScheduler?: boolean;
    enableAutomotiveServiceExcellence?: boolean;
}

export type IndustriesEinsteinFeatureSettings = MetadataForSettings & sObject &  {
    documentReaderConfidenceOrgValue: number;
}

export type IndustriesEventOrchSettings = MetadataForSettings &  {
    enableActionableEventOrch?: boolean;
    enableEventOrchDecisionTable?: boolean;
}

export type IndustriesFieldServiceSettings = MetadataForSettings &  {
    enableIndustriesFieldService?: boolean;
}

export type IndustriesManufacturingSettings = MetadataForSettings & sObject &  {
    enableFleetManagement?: boolean;
    enableIndManufacturing?: boolean;
    enableIndustriesMfgAccountForecast?: boolean;
    enableIndustriesMfgAdvForecast?: boolean;
    enableIndustriesMfgIAS?: boolean;
    enableIndustriesMfgProgram?: boolean;
    enableIndustriesMfgTargets?: boolean;
    enablePartnerLeadManagement?: boolean;
    enablePartnerPerformanceManagement?: boolean;
    enablePartnerVisitManagement?: boolean;
    enablePtnrLeadMgmtMappings?: boolean;
    enableRevMgmtForSlsAgr?: boolean;
    enableVehAssetFinAddtnlCmpnts?: boolean;
    enableVehicleAndAssetFinance?: boolean;
}

export type IndustriesSettings = MetadataForSettings & sObject &  {
    allowMultipleProducersToWorkOnSamePolicy?: boolean;
    appointmentDistributionOrgPref?: boolean;
    captureResourceUtilizationOrgPref?: boolean;
    createCustomerPropertyFromLAProperty?: boolean;
    createFSCAssetFromLAAsset?: boolean;
    createFSCAssetFromLAProperty?: boolean;
    createFSCLiabilityFromLAFinancial?: boolean;
    createFSCLiabilityFromLALiability?: boolean;
    createFinancialAccountFromLAAsset?: boolean;
    createFinancialAccountFromLALiability?: boolean;
    createFinancialAccountsFromLAFinancials?: boolean;
    createFinancialAccountsFromLAProperty?: boolean;
    enableAIAccelerator?: boolean;
    enableAWSTextractAnalyzeIDPref?: boolean;
    enableAWSTextractQueriesPref?: boolean;
    enableAWSTextractTablesPref?: boolean;
    enableAcademicOperations?: boolean;
    enableAccessToMasterListOfCoverageTypes?: boolean;
    enableAccountScoreEnabled?: boolean;
    enableActionableList?: boolean;
    enableActionableListOrgPref?: boolean;
    enableAdvancedScheduling?: boolean;
    enableAlumniRelations?: boolean;
    enableAnyResourceTypeOrgPref?: boolean;
    enableAppFrmAnywhereOrgPref?: boolean;
    enableAppInviteOrgPref?: boolean;
    enableBehavioralHealthAppPref?: boolean;
    enableBenefitAndGoalSharingPref?: boolean;
    enableBenefitManagementPreference?: boolean;
    enableBlockResourceAvailabilityOrgPref?: boolean;
    enableBusinessMessenger?: boolean;
    enableCalculationUsingParentPolicyOnly?: boolean;
    enableCallReportAdminContextPref?: boolean;
    enableCareGapPrefSetting?: boolean;
    enableCareMgmtSlackAccess?: boolean;
    enableCarePlansPreference?: boolean;
    enableCdpSalesExcellence?: boolean;
    enableChurnPredictionRT?: boolean;
    enableClaimMgmt?: boolean;
    enableClinicalDataModel?: boolean;
    enableCompliantDataSharingForAccount?: boolean;
    enableCompliantDataSharingForAppFormProductSiteUsers?: boolean;
    enableCompliantDataSharingForAppFormSiteUsers?: boolean;
    enableCompliantDataSharingForApplicationForm?: boolean;
    enableCompliantDataSharingForApplicationFormProduct?: boolean;
    enableCompliantDataSharingForBudget?: boolean;
    enableCompliantDataSharingForBudgetSiteUsers?: boolean;
    enableCompliantDataSharingForCustomObjects?: boolean;
    enableCompliantDataSharingForFinancialDeal?: boolean;
    enableCompliantDataSharingForFundingAward?: boolean;
    enableCompliantDataSharingForFundingAwardSiteUsers?: boolean;
    enableCompliantDataSharingForFundingOpportunity?: boolean;
    enableCompliantDataSharingForFundingOpportunitySiteUsers?: boolean;
    enableCompliantDataSharingForIndividualApplication?: boolean;
    enableCompliantDataSharingForIndividualApplicationSiteUsers?: boolean;
    enableCompliantDataSharingForInteraction?: boolean;
    enableCompliantDataSharingForInteractionSummary?: boolean;
    enableCompliantDataSharingForOpportunity?: boolean;
    enableCompliantDataSharingForPartyProfile?: boolean;
    enableCompliantDataSharingForPartyProfileSiteUsers?: boolean;
    enableCompliantDataSharingForPreliminaryApplicationRef?: boolean;
    enableCompliantDataSharingForPreliminaryApplicationRefSiteUsers?: boolean;
    enableComprehendMedical?: boolean;
    enableContactCenterAccess?: boolean;
    enableContractMgmtPref?: boolean;
    enableContractsAIPref?: boolean;
    enableCreateMultiAttendeeEventOrgPref?: boolean;
    enableCrisisCenterAccess?: boolean;
    enableCriteriaBasedSearchAndFilter?: boolean;
    enableCustomFlowsOnCycleCount?: boolean;
    enableCustomFlowsOnExpiryPage?: boolean;
    enableDCHMSO365AddIn?: boolean;
    enableDataCloudEventsOnTimeline?: boolean;
    enableDealManagement?: boolean;
    enableDeleteCustomObjectParticipantRecordCompliantDataSharing?: boolean;
    enableDepriveSoqlAccessGuestUserOrgPref?: boolean;
    enableDepriveSoqlAccessOrgPref?: boolean;
    enableDiscoveryFrameworkMetadata?: boolean;
    enableDiscoveryFrwrkSampleTemplate?: boolean;
    enableDisplaySummaryOnTimeline?: boolean;
    enableDpeProviderSearchSettingsOrgPref?: boolean;
    enableDropInAppointmentsOrgPref?: boolean;
    enableDropInFallbackMechOrgPref?: boolean;
    enableDropInSkillMatchingOrgPref?: boolean;
    enableEDCGenerativeAI?: boolean;
    enableEducationCloud?: boolean;
    enableEinsteinDocReader?: boolean;
    enableEinsteinVisits?: boolean;
    enableEnhancedQuestionCreation?: boolean;
    enableEpcDeleteAccess?: boolean;
    enableEventManagementOrgPref?: boolean;
    enableEventWriteOrgPref?: boolean;
    enableExistingHealthCloudOrg?: boolean;
    enableFSCInsuranceReport?: boolean;
    enableFSCInsuranceServiceConsole?: boolean;
    enableFinancialAccountMgmt?: boolean;
    enableFinancialDealCallReportCmpPref?: boolean;
    enableFinancialDealCallReportPref?: boolean;
    enableFinancialDealRoleHierarchy?: boolean;
    enableFundraising?: boolean;
    enableGenAIAssessmentQuestions?: boolean;
    enableGnrcDisclsFrmwrk?: boolean;
    enableGrantmaking?: boolean;
    enableGroupMembershipPref?: boolean;
    enableHCReferralScoring?: boolean;
    enableHomeHealth?: boolean;
    enableHomeHlthRschdFlowRcntVer?: boolean;
    enableIESentimentAnalysis?: boolean;
    enableIndustriesAssessment?: boolean;
    enableIndustriesAssessmentGuestOrgPref?: boolean;
    enableIndustriesAssessmentPrefill?: boolean;
    enableIndustriesCaptchaVerification?: boolean;
    enableIndustriesIntegrationOrchestratorPref?: boolean;
    enableIndustriesKYC?: boolean;
    enableIndustriesOnboarding?: boolean;
    enableIndustriesRebates?: boolean;
    enableIndustriesShipAndDebit?: boolean;
    enableIndustriesStageManagementPref?: boolean;
    enableIntegratedCareManagementSetting?: boolean;
    enableInteractionCstmSharingPref?: boolean;
    enableInteractionRoleHierarchy?: boolean;
    enableInteractionSummaryPref?: boolean;
    enableInteractionSummaryRoleHierarchy?: boolean;
    enableLifeSciencesClinialTrailManagement?: boolean;
    enableManyToManyRelationships?: boolean;
    enableMaterialityAssessment?: boolean;
    enableMcgSetting?: boolean;
    enableMedRecSetting?: boolean;
    enableMedicalDeviceEnabled?: boolean;
    enableMedicationManagementEnabled?: boolean;
    enableMentoring?: boolean;
    enableMicrosoftWordAddInEnabled?: boolean;
    enableMortgageRlaTotalsOrgPref?: boolean;
    enableMulesoftFhirR4Apis?: boolean;
    enableMultiResourceOrgPref?: boolean;
    enableMultipleCareProgramEnrolleeOrgPref?: boolean;
    enableMultipleTopicsForShiftsOrgPref?: boolean;
    enableNZCMngEnrgyAttrCr?: boolean;
    enableNZCMngEsgPgm?: boolean;
    enableNearcoreRuleProcessing?: boolean;
    enableObjectDetection?: boolean;
    enableOutcomes?: boolean;
    enableOverbookingOrgPref?: boolean;
    enablePatientAppointmentSchedulingOrgPref?: boolean;
    enablePatientServicesOrchestration?: boolean;
    enablePolicyAdministration?: boolean;
    enablePreBookedFallbackMechOrgPref?: boolean;
    enableProviderSearchForGuestUser?: boolean;
    enableProviderSearchSyncOrgPref?: boolean;
    enableRBLUsingCalcService?: boolean;
    enableRecordRollup?: boolean;
    enableReferralManagementApp?: boolean;
    enableReferralScoring?: boolean;
    enableReminders?: boolean;
    enableSCAssignFootprint?: boolean;
    enableSCBEIEnabled?: boolean;
    enableSCCarbonAccounting?: boolean;
    enableSCCarbonCreditAlloc?: boolean;
    enableSCCreateFootprint?: boolean;
    enableSCDGF?: boolean;
    enableSCEmssnsForecasting?: boolean;
    enableSCExpansionUseCase?: boolean;
    enableSCExternalEngMgmt?: boolean;
    enableSCGenrateCnsmpRcd?: boolean;
    enableSCSNGManagement?: boolean;
    enableSCScope3HubEnabled?: boolean;
    enableSCSnGAffiliates?: boolean;
    enableSCSplitCnsmpRcd?: boolean;
    enableSCTargetSetting?: boolean;
    enableSCWasteManagement?: boolean;
    enableSCWaterManagement?: boolean;
    enableScoringFrameworkCRMAPref?: boolean;
    enableScoringFrameworkOrgPref?: boolean;
    enableSentimentAnalysis?: boolean;
    enableShareSaWithArOrgPref?: boolean;
    enableSlackForCib?: boolean;
    enableSmartTags?: boolean;
    enableStudentSuccess?: boolean;
    enableSustainabilityCloud?: boolean;
    enableSyncInteractionsPref?: boolean;
    enableTearSheetPref?: boolean;
    enableTextExtract?: boolean;
    enableTimelinePref?: boolean;
    enableTopicOrTemplate?: boolean;
    enableTopicTimeSlot?: boolean;
    enableTurnOffDsclsReprtPbsrName?: boolean;
    enableUMPayerAppAccessOrgPreference?: boolean;
    enableVideoVisitsOrgPref?: boolean;
    enableVisitCalendarSync?: boolean;
    enableVisitInventoryEnabled?: boolean;
    loanApplicantAddressAutoCreation?: boolean;
    loanApplicantAutoCreation?: boolean;
    mortgageSalesforceSharing?: boolean;
    rlaEditIfAccHasEdit?: boolean;
    transformRBLtoDPE?: boolean;
}

export type InventorySettings = MetadataForSettings & sObject &  {
    enableOCIB2CIntegration?: boolean;
    enableOmniChannelInventory?: boolean;
}

export type InvocableActionSettings = MetadataForSettings & sObject &  {
    isPartialSaveAllowed?: boolean;
}

export type IoTSettings = MetadataForSettings &  {
    enableIoT?: boolean;
    enableIoTInsightsPilot?: boolean;
    enableIoTUsageEmail?: boolean;
}

export type KnowledgeSettings = MetadataForSettings & sObject &  {
    answers?: KnowledgeAnswerSettings;
    cases?: KnowledgeCaseSettings;
    defaultLanguage?: string;
    enableChatterQuestionKBDeflection?: boolean;
    enableCreateEditOnArticlesTab?: boolean;
    enableExternalMediaContent?: boolean;
    enableKbStandardSharing?: boolean;
    enableKnowledge?: boolean;
    enableKnowledgeAgentContribution?: boolean;
    enableKnowledgeAnswersPromotion?: boolean;
    enableKnowledgeArticleTextHighlights?: boolean;
    enableKnowledgeCaseRL?: boolean;
    enableKnowledgeKeywordAutoComplete?: boolean;
    enableKnowledgeTitleAutoComplete?: boolean;
    enableLightningKbAutoLoadRichTextField?: boolean;
    enableLightningKnowledge?: boolean;
    languages?: KnowledgeLanguageSettings;
    showArticleSummariesCustomerPortal?: boolean;
    showArticleSummariesInternalApp?: boolean;
    showArticleSummariesPartnerPortal?: boolean;
    showValidationStatusField?: boolean;
    suggestedArticles?: KnowledgeSuggestedArticlesSettings;
    votingEnabled?: boolean;
}

export type KnowledgeAnswerSettings = {
    assignTo?: string;
    defaultArticleType?: string;
    enableArticleCreation?: boolean;
}

export type KnowledgeCaseSettings = {
    articlePDFCreationProfile?: string;
    articlePublicSharingCommunities?: KnowledgeCommunitiesSettings;
    articlePublicSharingSites?: KnowledgeSitesSettings;
    articlePublicSharingSitesChatterAnswers?: KnowledgeSitesSettings;
    assignTo?: string;
    customizationClass?: string;
    defaultContributionArticleType?: string;
    editor?: KnowledgeCaseEditor;
    enableArticleCreation?: boolean;
    enableArticlePublicSharingSites?: boolean;
    enableCaseDataCategoryMapping?: boolean;
    useProfileForPDFCreation?: boolean;
}

export type KnowledgeCommunitiesSettings = {
    community?: string | string[];
}

export type KnowledgeSitesSettings = {
    site?: string | string[];
}

export type KnowledgeLanguageSettings = {
    language?: KnowledgeLanguage | KnowledgeLanguage[];
}

export type KnowledgeLanguage = {
    active?: boolean;
    defaultAssignee?: string;
    defaultAssigneeType?: KnowledgeLanguageLookupValueType;
    defaultReviewer?: string;
    defaultReviewerType?: KnowledgeLanguageLookupValueType;
    name: string;
}

export type KnowledgeSuggestedArticlesSettings = {
    caseFields?: KnowledgeCaseFieldsSettings;
    useSuggestedArticlesForCase?: boolean;
    workOrderFields?: KnowledgeWorkOrderFieldsSettings;
    workOrderLineItemFields?: KnowledgeWorkOrderLineItemFieldsSettings;
}

export type KnowledgeCaseFieldsSettings = {
    field?: KnowledgeCaseField | KnowledgeCaseField[];
}

export type KnowledgeCaseField = {
    name?: string;
}

export type KnowledgeWorkOrderFieldsSettings = {
    field?: KnowledgeWorkOrderField | KnowledgeWorkOrderField[];
}

export type KnowledgeWorkOrderField = {
    name?: string;
}

export type KnowledgeWorkOrderLineItemFieldsSettings = {
    field?: KnowledgeWorkOrderLineItemField | KnowledgeWorkOrderLineItemField[];
}

export type KnowledgeWorkOrderLineItemField = {
    name?: string;
}

export type LanguageSettings = MetadataForSettings & sObject &  {
    enableCanadaIcuFormat?: boolean;
    enableDataTranslation?: boolean;
    enableEndUserLanguages?: boolean;
    enableICULocaleDateFormat?: boolean;
    enableLanguageExtensionPackage?: boolean;
    enableLocalNamesForStdObjects?: boolean;
    enableLocaleInsensitiveFiltering?: boolean;
    enablePlatformLanguages?: boolean;
    enableTranslationWorkbench?: boolean;
    useLanguageFallback?: boolean;
}

export type LeadConfigSettings = MetadataForSettings & sObject &  {
    doesEnableLeadConvertDefaultSubjectBlankTaskCreation?: boolean;
    doesHideOpportunityInConvertLeadWindow?: boolean;
    doesPreserveLeadStatus?: boolean;
    doesSelectNoOpportunityOnConvertLead?: boolean;
    doesTrackHistory?: boolean;
    enableConversionsOnMobile?: boolean;
    enableOrgWideMergeAndDelete?: boolean;
    shouldLeadConvertRequireValidation?: boolean;
    shouldSendNotificationEmailWhenLeadOwnerUpdatesViaApexInLEX?: boolean;
}

export type LicensingSettings = MetadataForSettings & sObject &  {
    enableAutoCreateLicenseDefinition?: boolean;
}

export type LightningExperienceSettings = MetadataForSettings & sObject &  {
    activeThemeName?: string;
    enableAccessCheckCrucPref?: boolean;
    enableApiUserLtngOutAccessPref?: boolean;
    enableAuraCDNPref?: boolean;
    enableAuraSecStaticResCRUCPref?: boolean;
    enableErrorExperienceEnabled?: boolean;
    enableFeedbackInMobile?: boolean;
    enableGoogleSheetsForSfdcEnabled?: boolean;
    enableHideOpenInQuip?: boolean;
    enableIE11DeprecationMsgHidden?: boolean;
    enableIE11LEXCrucPref?: boolean;
    enableInAppLearning?: boolean;
    enableInAppTooltips?: boolean;
    enableLEXExtensionComponentCustomization?: boolean;
    enableLEXExtensionDarkMode?: boolean;
    enableLEXExtensionInlineEditModifier?: boolean;
    enableLEXExtensionLinkGrabber?: boolean;
    enableLEXExtensionRelatedLists?: boolean;
    enableLEXExtensionRequiredFields?: boolean;
    enableLEXExtensionTrailhead?: boolean;
    enableLEXOnIpadEnabled?: boolean;
    enableLexEndUsersNoSwitching?: boolean;
    enableNavPersonalizationOptOut?: boolean;
    enableNoBackgroundNavigations?: boolean;
    enableQuip?: boolean;
    enableRemoveThemeBrandBanner?: boolean;
    enableS1BannerPref?: boolean;
    enableS1BrowserEnabled?: boolean;
    enableS1DesktopEnabled?: boolean;
    enableS1UiLoggingEnabled?: boolean;
    enableSalesforceNext?: boolean;
    enableSidToken3rdPartyAuraApp?: boolean;
    enableSkypeChatEnabled?: boolean;
    enableSparkAllUsers?: boolean;
    enableSparkConversationEnabled?: boolean;
    enableTryLightningOptOut?: boolean;
    enableUseS1AlohaDesktop?: boolean;
    enableUsersAreLightningOnly?: boolean;
    enableWebExEnabled?: boolean;
    enableWebexAllUsers?: boolean;
    isLEXExtensionComponentCustomizationOff?: boolean;
    isLEXExtensionDarkModeOff?: boolean;
    isLEXExtensionLinkGrabberOff?: boolean;
    isLEXExtensionOff?: boolean;
}

export type LiveAgentSettings = MetadataForSettings & sObject &  {
    enableChatFindOrCreateEnable?: boolean;
    enableLiveAgent?: boolean;
    enableQuickTextEnabled?: boolean;
}

export type LiveMessageSettings = MetadataForSettings &  {
    enableCheckCEUserPerm?: boolean;
    enableLiveMessage?: boolean;
}

export type MacroSettings = MetadataForSettings & sObject &  {
    contextualMacroFiltering?: boolean;
    enableAdvancedSearch?: boolean;
    macrosInFolders?: boolean;
}

export type MeetingsSettings = MetadataForSettings & sObject &  {
    enableSalesforceMeetings?: boolean;
    enableSalesforceMeetingsSyncCheck?: boolean;
    enableZoomVideoConference?: boolean;
}

export type MfgServiceConsoleSettings = MetadataForSettings & sObject &  {
    enableMfgServiceConsole?: boolean;
}

export type MobileSettings = MetadataForSettings & sObject &  {
    dashboardMobile?: DashboardMobileSettings;
    enableImportContactFromDevice?: boolean;
    enableOfflineDraftsEnabled?: boolean;
    enablePopulateNameManuallyInToday?: boolean;
    enableS1EncryptedStoragePref2?: boolean;
    enableS1OfflinePref?: boolean;
}

export type DashboardMobileSettings = {
    enableDashboardIPadApp?: boolean;
}

export type MyDomainSettings = MetadataForSettings & sObject &  {
    canOnlyLoginWithMyDomainUrl?: boolean;
    doesApiLoginRequireOrgDomain?: boolean;
    doesWarnOnForceComRedirect?: boolean;
    doesWarnOnRedirect?: boolean;
    domainPartition?: OrgDomainShard;
    enableEdgeDuringRollout?: boolean;
    enableNativeBrowserForAuthOnAndroid?: boolean;
    enableNativeBrowserForAuthOnIos?: boolean;
    enableShareBrowserSessionAndroidForAuth?: boolean;
    enableShareBrowserSessionIOSForAuth?: boolean;
    instancedUrlRedirectHandling?: OrgDomainRedirectOption;
    logRedirections?: boolean;
    myDomainName?: string;
    myDomainSuffix?: OrgDomainProdSuffix;
    redirectForceComSiteUrls?: boolean;
    redirectPriorMyDomain?: boolean;
    use3rdPartyCookieBlockingCompatibleHostnames?: boolean;
    useEdge?: boolean;
    useEnhancedDomainsInSandbox?: boolean;
    useStabilizedMyDomainHostnames?: boolean;
    useStabilizedSandboxMyDomainHostnames?: boolean;
}

export type NameSettings = MetadataForSettings & sObject &  {
    enableInformalName?: boolean;
    enableMiddleName?: boolean;
    enableNameSuffix?: boolean;
}

export type NotificationsSettings = MetadataForSettings & sObject &  {
    enableActvityReminderBrowserNotifs?: boolean;
    enableMobileAppPushNotifications?: boolean;
    enableNotifications?: boolean;
}

export type OauthOidcSettings = MetadataForSettings & sObject &  {
    blockOAuthUnPwFlow?: boolean;
    blockOAuthUsrAgtFlow?: boolean;
    isPkceRequired?: boolean;
    oAuthCdCrdtFlowEnable?: boolean;
}

export type ObjectLinkingSettings = MetadataForSettings & sObject &  {
    enableObjectLinking?: boolean;
}

export type OmniChannelPricingSettings = MetadataForSettings & sObject &  {
    enableOmniChannelPricing?: boolean;
}

export type OmniChannelSettings = MetadataForSettings &  {
    enableOmniAutoLoginPrompt?: boolean;
    enableOmniChannel?: boolean;
    enableOmniSecondaryRoutingPriority?: boolean;
    enableOmniSkillsRouting?: boolean;
}

export type OpportunityScoreSettings = MetadataForSettings & sObject &  {
    enableOpportunityScoring?: boolean;
}

export type OpportunitySettings = MetadataForSettings & sObject &  {
    autoActivateNewReminders?: boolean;
    customizableProductSchedulesEnabled?: boolean;
    doesEnforceStandardOpportunitySaveLogic?: boolean;
    enableExpandedPipelineInspectionSetup?: boolean;
    enableFindSimilarOpportunities?: boolean;
    enableForecastCategoryMetrics?: boolean;
    enableOpportunityFieldHistoryTracking?: boolean;
    enableOpportunityInsightsInMobile?: boolean;
    enableOpportunityTeam?: boolean;
    enablePipelineChangesMetrics?: boolean;
    enablePipelineInspection?: boolean;
    enablePipelineInspectionFlow?: boolean;
    enablePipelineInspectionSingleCategoryRollup?: boolean;
    enableRevenueInsights?: boolean;
    enableServiceCaseInsights?: boolean;
    enableUpdateReminders?: boolean;
    findSimilarOppFilter?: FindSimilarOppFilter;
    oppAmountDealMotionEnabled?: boolean;
    oppCloseDateDealMotionEnabled?: boolean;
    promptToAddProducts?: boolean;
    pushCountEnabled?: boolean;
    simpleOppCreateFromContact?: boolean;
    simpleOppCreateFromEvent?: boolean;
}

export type FindSimilarOppFilter = {
    similarOpportunitiesDisplayColumns?: string | string[];
    similarOpportunitiesMatchFields?: string | string[];
}

export type OrderManagementSettings = MetadataForSettings & sObject &  {
    enableB2CHighScaleOrders?: boolean;
    enableB2CIntegration?: boolean;
    enableDuplicateManagement?: boolean;
    enableHighScaleOrders?: boolean;
    enableIndividualOrderItemTaxAdjustments?: boolean;
    enableOMAutomation?: boolean;
    enableOrderManagement?: boolean;
    enablePersonAccountsForShoppers?: boolean;
    ingestOrdersAtScale?: boolean;
    initOMAutomation?: boolean;
    orgHasCommerceB2BPromotionsEnabled?: boolean;
    orgHasHighScaleOrdersEnabledForB2CIntegration?: boolean;
    repricingEnabled?: boolean;
}

export type OrderSettings = MetadataForSettings & sObject &  {
    enableEnhancedCommerceOrders?: boolean;
    enableNegativeQuantity?: boolean;
    enableOptionalPricebook?: boolean;
    enableOrderEvents?: boolean;
    enableOrderWithMultiplePriceBooks?: boolean;
    enableOrders: boolean;
    enableReductionOrders?: boolean;
    enableZeroQuantity?: boolean;
}

export type PardotEinsteinSettings = MetadataForSettings & sObject &  {
    enableCampaignInsight?: boolean;
    enableEngagementScore?: boolean;
}

export type PardotSettings = MetadataForSettings & sObject &  {
    enableAIEinsteinEngageFreq?: boolean;
    enableAIOptimizedSendTime?: boolean;
    enableB2bmaAppEnabled?: boolean;
    enableEngagementHistoryDashboards?: boolean;
    enableEnhancedProspectCustomFieldsSync?: boolean;
    enablePardotAppV1Enabled?: boolean;
    enablePardotEnabled?: boolean;
    enablePardotObjectSync?: boolean;
    enableProspectActivityDataset?: boolean;
}

export type PartyDataModelSettings = MetadataForSettings & sObject &  {
    enableAutoSelectIndividualOnMerge?: boolean;
    enableConsentManagement?: boolean;
    enableIndividualAutoCreate?: boolean;
}

export type PathAssistantSettings = MetadataForSettings & sObject &  {
    canOverrideAutoPathCollapseWithUserPref?: boolean;
    pathAssistantEnabled?: boolean;
}

export type PaymentsSettings = MetadataForSettings & sObject &  {
    enablePayments?: boolean;
}

export type PicklistSettings = MetadataForSettings & sObject &  {
    isPicklistApiNameEditDisabled?: boolean;
}

export type PlatformEncryptionSettings = MetadataForSettings & sObject &  {
    canEncryptManagedPackageFields?: boolean;
    enableDeterministicEncryption?: boolean;
    enableEncryptFieldHistory?: boolean;
    enableEncryptionSearchEnabled?: boolean;
    enableEventBusEncryption?: boolean;
    isMEKForEncryptionRequired?: boolean;
    isUseHighAssuranceKeysRequired?: boolean;
}

export type PortalsSettings = MetadataForSettings & sObject &  {
    clickjackSSPLoginPage?: boolean;
    redirectPortalLoginToHttps?: boolean;
}

export type PredictionBuilderSettings = MetadataForSettings & sObject &  {
    enablePredictionBuilder?: boolean;
    isPredictionBuilderStarted?: boolean;
}

export type PrivacySettings = MetadataForSettings & sObject &  {
    authorizationCaptureBrowser?: boolean;
    authorizationCaptureEmail?: boolean;
    authorizationCaptureIp?: boolean;
    authorizationCaptureLocation?: boolean;
    authorizationCustomSharing?: boolean;
    authorizationLockingAndVersioning?: boolean;
    enableConfigurableUserPIIActive?: boolean;
    enableConsentAuditTrail?: boolean;
    enableConsentEventStream?: boolean;
    enableDefaultMetadataValues?: boolean;
    useUmaDefaultConsentRecs?: boolean;
}

export type ProductSettings = MetadataForSettings & sObject &  {
    enableCascadeActivateToRelatedPrices?: boolean;
    enableMySettings?: boolean;
    enableQuantitySchedule?: boolean;
    enableRevenueSchedule?: boolean;
}

export type QuickTextSettings = MetadataForSettings & sObject &  {
    hideQuickTextUiInLtng?: boolean;
    lightningQuickTextEnabled?: boolean;
    quickTextsInFolders?: boolean;
}

export type QuoteSettings = MetadataForSettings & sObject &  {
    enableQuote: boolean;
    enableQuotesWithoutOppEnabled?: boolean;
}

export type RealTimeEventSettings = MetadataForSettings & sObject &  {
    realTimeEvents?: RealTimeEvent | RealTimeEvent[];
}

export type RealTimeEvent = {
    entityName: string;
    isEnabled: boolean;
}

export type RecommendationBuilderSettings = MetadataForSettings & sObject &  {
    enableErbEnabledPref?: boolean;
    enableErbStartedPref?: boolean;
}

export type RecordPageSettings = MetadataForSettings & sObject &  {
    enableActivityRelatedList?: boolean;
    enableFullRecordView?: boolean;
}

export type RetailExecutionSettings = MetadataForSettings & sObject &  {
    enableProductHierarchy?: boolean;
    enableRetailExecution?: boolean;
    enableVisitSharing?: boolean;
}

export type SchemaSettings = MetadataForSettings & sObject &  {
    enableAdvancedCMTSecurity?: boolean;
    enableAdvancedCSSecurity?: boolean;
    enableListCustomSettingCreation?: boolean;
    enableSOSLOnCustomSettings?: boolean;
}

export type SearchSettings = MetadataForSettings & sObject &  {
    documentContentSearchEnabled: boolean;
    enableAdvancedSearchInAlohaSidebar?: boolean;
    enableEinsteinSearchAnswersGPT?: boolean;
    enableEinsteinSearchAssistantDialog?: boolean;
    enableEinsteinSearchEs4kPilot?: boolean;
    enableEinsteinSearchNLSFilters?: boolean;
    enableEinsteinSearchNaturalLanguage?: boolean;
    enableEinsteinSearchPersonalization?: boolean;
    enableEinsteinSearchQA?: boolean;
    enablePersonalTagging?: boolean;
    enablePublicTagging?: boolean;
    enableQuerySuggestionPigOn?: boolean;
    enableSalesforceGeneratedSynonyms?: boolean;
    enableSearchTermHistory?: boolean;
    enableSetupSearch?: boolean;
    enableSuggestArticlesLinksOnly?: boolean;
    enableUseDefaultSearchEntity?: boolean;
    optimizeSearchForCJKEnabled: boolean;
    recentlyViewedUsersForBlankLookupEnabled: boolean;
    searchSettingsByObject: SearchSettingsByObject;
    sidebarAutoCompleteEnabled: boolean;
    sidebarDropDownListEnabled: boolean;
    sidebarLimitToItemsIOwnCheckboxEnabled: boolean;
    singleSearchResultShortcutEnabled: boolean;
    spellCorrectKnowledgeSearchEnabled: boolean;
}

export type SearchSettingsByObject = {
    searchSettingsByObject?: ObjectSearchSetting | ObjectSearchSetting[];
}

export type ObjectSearchSetting = {
    enhancedLookupEnabled: boolean;
    lookupAutoCompleteEnabled: boolean;
    name: string;
    resultsPerPageCount: number;
}

export type SecuritySettings = MetadataForSettings & sObject &  {
    canUsersGrantLoginAccess?: boolean;
    enableAdminLoginAsAnyUser?: boolean;
    enableAuditFieldsInactiveOwner?: boolean;
    enableAuraSecureEvalPref?: boolean;
    enableCoepHeader?: boolean;
    enableCoopHeader?: boolean;
    enableCrossOrgRedirects?: boolean;
    enablePermissionsPolicy?: boolean;
    enableRequireHttpsConnection?: boolean;
    networkAccess?: NetworkAccess;
    passwordPolicies?: PasswordPolicies;
    redirectBlockModeEnabled?: boolean;
    sendCspForUncommonClients?: boolean;
    sessionSettings?: SessionSettings;
    singleSignOnSettings?: SingleSignOnSettings;
}

export type NetworkAccess = {
    ipRanges?: IpRange | IpRange[];
}

export type IpRange = {
    description?: string;
    end?: string;
    start?: string;
}

export type PasswordPolicies = {
    apiOnlyUserHomePageURL?: string;
    complexity?: Complexity;
    expiration?: Expiration;
    historyRestriction?: string;
    lockoutInterval?: LockoutInterval;
    maxLoginAttempts?: MaxLoginAttempts;
    minimumPasswordLength?: string;
    minimumPasswordLifetime?: boolean;
    obscureSecretAnswer?: boolean;
    passwordAssistanceMessage?: string;
    passwordAssistanceURL?: string;
    questionRestriction?: QuestionRestriction;
}

export type SessionSettings = {
    allowUserAuthenticationByCertificate?: boolean;
    allowUserCertBasedAuthenticationWithOcspValidation?: boolean;
    canConfirmEmailChangeInLightningCommunities?: boolean;
    canConfirmIdentityBySmsOnly?: boolean;
    disableTimeoutWarning?: boolean;
    enableBuiltInAuthenticator?: boolean;
    enableCSPOnEmail?: boolean;
    enableCSRFOnGet?: boolean;
    enableCSRFOnPost?: boolean;
    enableCacheAndAutocomplete?: boolean;
    enableClickjackNonsetupSFDC?: boolean;
    enableClickjackNonsetupUser?: boolean;
    enableClickjackNonsetupUserHeaderless?: boolean;
    enableClickjackSetup?: boolean;
    enableCoepHeader?: boolean;
    enableContentSniffingProtection?: boolean;
    enableCoopHeader?: boolean;
    enableLightningLogin?: boolean;
    enableLightningLoginOnlyWithUserPerm?: boolean;
    enableMFADirectUILoginOptIn?: boolean;
    enableOauthCorsPolicy?: boolean;
    enablePermissionsPolicy?: boolean;
    enablePostForSessions?: boolean;
    enableSMSIdentity?: boolean;
    enableU2F?: boolean;
    enableUpgradeInsecureRequests?: boolean;
    enableXssProtection?: boolean;
    enforceIpRangesEveryRequest?: boolean;
    enforceUserDeviceRevoked?: boolean;
    forceLogoutOnSessionTimeout?: boolean;
    forceRelogin?: boolean;
    grantCameraAccess?: string;
    grantMicrophoneAccess?: string;
    hasRetainedLoginHints?: boolean;
    hasUserSwitching?: boolean;
    hstsOnForcecomSites?: boolean;
    identityConfirmationOnEmailChange?: boolean;
    identityConfirmationOnTwoFactorRegistrationEnabled?: boolean;
    lockSessionsToDomain?: boolean;
    lockSessionsToIp?: boolean;
    lockerServiceAPIVersion?: string;
    lockerServiceCSP?: boolean;
    lockerServiceNext?: boolean;
    lockerServiceNextControl?: boolean;
    logoutURL?: string;
    redirectBlockModeEnabled?: boolean;
    redirectionWarning?: boolean;
    referrerPolicy?: boolean;
    referrerPolicyDirective?: string;
    requireHttpOnly?: boolean;
    requireHttps?: boolean;
    sendCspForUncommonClients?: boolean;
    sessionTimeout?: SessionTimeout;
    sidToken3rdPartyAuraApp?: boolean;
    skipSFAWhenMFADirectUILogin?: boolean;
    terminateUserSessionsWhenAdminResetsPassword?: boolean;
    useEAPIRateLimitForConnectAPI?: boolean;
    useLocalStorageForLogoutUrl?: boolean;
}

export type SingleSignOnSettings = {
    enableCaseInsensitiveFederationID?: boolean;
    enableForceDelegatedCallout?: boolean;
    enableMultipleSamlConfigs?: boolean;
    enableSamlJitProvisioning?: boolean;
    enableSamlLogin?: boolean;
    isLoginWithSalesforceCredentialsDisabled?: boolean;
}

export type ServiceCloudVoiceSettings = MetadataForSettings & sObject &  {
    enableAmazonQueueManagement?: boolean;
    enableDefaultChannelForSCV?: boolean;
    enableEndUserForSCV?: boolean;
    enableOmniCapacityForSCV?: boolean;
    enablePTQueueManagement?: boolean;
    enableRZoneCloudVoiceOptIn?: boolean;
    enableSCVBYOT?: boolean;
    enableSCVExternalTelephony?: boolean;
    enableSCVSupportBannerDisplayed?: boolean;
    enableServiceCloudVoice?: boolean;
}

export type ServiceSetupAssistantSettings = MetadataForSettings & sObject &  {
    enableServiceSetupAssistant?: boolean;
}

export type SharingSettings = MetadataForSettings & sObject &  {
    deferGroupMembership?: boolean;
    deferSharingRules?: boolean;
    enableAccountRoleOptimization?: boolean;
    enableAssetSharing?: boolean;
    enableCommunityUserVisibility?: boolean;
    enableExternalSharingModel?: boolean;
    enableManagerGroups?: boolean;
    enableManualUserRecordSharing?: boolean;
    enablePartnerSuperUserAccess?: boolean;
    enablePortalUserCaseSharing?: boolean;
    enablePortalUserVisibility?: boolean;
    enableRemoveTMGroupMembership?: boolean;
    enableRestrictAccessLookupRecords?: boolean;
    enableSecureGuestAccess?: boolean;
    enableShareObjectReportTypes?: boolean;
    enableStandardReportVisibility?: boolean;
    enableTerritoryForecastManager?: boolean;
}

export type SiteSettings = MetadataForSettings &  {
    enableEnhancedSitesAndContentPlatform?: boolean;
    enableProxyLoginICHeader?: boolean;
    enableSitesRecordReassignOrgPref?: boolean;
    enableTopicsInSites?: boolean;
}

export type SocialCustomerServiceSettings = MetadataForSettings & sObject &  {
    caseSubjectOption: CaseSubjectOption;
    enableAllFBResponseAccounts?: boolean;
    enableInboundProcessingConcurrency?: boolean;
    enableSocialApprovals?: boolean;
    enableSocialCaseAssignmentRules?: boolean;
    enableSocialCustomerService?: boolean;
    enableSocialPersonaHistoryTracking?: boolean;
    enableSocialPostHistoryTracking?: boolean;
    enableSocialReceiveParentPost?: boolean;
}

export type SubscriptionManagementSettings = MetadataForSettings & sObject &  {
    enableConvertNegativeInvoiceLinesToCreditMemoAndApply?: boolean;
    enablePaymentScheduleAutomation?: boolean;
    enableRefundAutomation?: boolean;
    enableRevSubMgmtBlngOptOut?: boolean;
    enableSubscriptionManagement?: boolean;
}

export type SurveySettings = MetadataForSettings & sObject &  {
    enableIndustriesCxmEnabled?: boolean;
    enableSurvey?: boolean;
    enableSurveyOwnerCanManageResponse?: boolean;
}

export type SystemNotificationSettings = MetadataForSettings & sObject &  {
    disableDowntimeNotifications?: boolean;
    disableMaintenanceNotifications?: boolean;
}

export type Territory2Settings = MetadataForSettings & sObject &  {
    defaultAccountAccessLevel?: string;
    defaultCaseAccessLevel?: string;
    defaultContactAccessLevel?: string;
    defaultOpportunityAccessLevel?: string;
    enableTerritoryManagement2?: boolean;
    opportunityFilterSettings?: Territory2SettingsOpportunityFilter;
    showTM2EnabledBanner?: boolean;
    supportedObjects?: Territory2SupportedObject | Territory2SupportedObject[];
    t2ForecastAccessLevel?: string;
    tm2BypassRealignAccInsert?: boolean;
    tm2EnableUserAssignmentLog?: boolean;
}

export type Territory2SettingsOpportunityFilter = {
    apexClassName?: string;
    enableFilter: boolean;
    runOnCreate: boolean;
}

export type Territory2SupportedObject = {
    defaultAccessLevel: string;
    objectType: string;
    state: string;
}

export type TrailheadSettings = MetadataForSettings & sObject &  {
    enableConfettiEffect?: boolean;
    enableMyTrailheadPref?: boolean;
    enableTrailheadInLexTerms?: boolean;
}

export type TrialOrgSettings = MetadataForSettings & sObject &  {
    enableSampleDataDeleted?: boolean;
}

export type UserEngagementSettings = MetadataForSettings & sObject &  {
    canGovCloudUseAdoptionApps?: boolean;
    doesScheduledSwitcherRunDaily?: boolean;
    enableCustomHelpGlobalSection?: boolean;
    enableHelpMenuShowFeedback?: boolean;
    enableHelpMenuShowHelp?: boolean;
    enableHelpMenuShowNewUser?: boolean;
    enableHelpMenuShowSearch?: boolean;
    enableHelpMenuShowSfdcContent?: boolean;
    enableHelpMenuShowShortcut?: boolean;
    enableHelpMenuShowSupport?: boolean;
    enableHelpMenuShowTrailhead?: boolean;
    enableIBILOptOutDashboards?: boolean;
    enableIBILOptOutEvents?: boolean;
    enableIBILOptOutReports?: boolean;
    enableIBILOptOutTasks?: boolean;
    enableLexToClassicFeedbackEnable?: boolean;
    enableOrchestrationInSandbox?: boolean;
    enableOrgUserAssistEnabled?: boolean;
    enableScheduledSwitcher?: boolean;
    enableSfdcProductFeedbackSurvey?: boolean;
    enableShowSalesforceUserAssist?: boolean;
    isAutoTransitionDelayed?: boolean;
    isCrucNotificationDisabled?: boolean;
    isCustomProfileAutoTransitionDelayed?: boolean;
    isLEXWelcomeMatDisabled?: boolean;
    isMeetTheAssistantDisabledInClassic?: boolean;
    isMeetTheAssistantDisabledInLightning?: boolean;
    isSmartNudgesDisabled?: boolean;
    optimizerAppEnabled?: boolean;
}

export type UserInterfaceSettings = MetadataForSettings & sObject &  {
    alternateAlohaListView?: boolean;
    dynamicMruActionsOff?: boolean;
    enableAsyncRelatedLists?: boolean;
    enableClickjackUserPageHeaderless?: boolean;
    enableCollapsibleSections?: boolean;
    enableCollapsibleSideBar?: boolean;
    enableCustomObjectTruncate?: boolean;
    enableCustomeSideBarOnAllPages?: boolean;
    enableDeleteFieldHistory?: boolean;
    enableExternalObjectAsyncRelatedLists?: boolean;
    enableHoverDetails?: boolean;
    enableInlineEdit?: boolean;
    enableLightningVerticalNav?: boolean;
    enableNewPageLayoutEditor?: boolean;
    enablePersonalCanvas?: boolean;
    enablePrintableListViews?: boolean;
    enableProfileCustomTabsets?: boolean;
    enableQuickCreate?: boolean;
    enableRelatedListHovers?: boolean;
    enableTabOrganizer?: boolean;
    enableVerticalNavSeamlessSwitching?: boolean;
}

export type UserManagementSettings = MetadataForSettings & sObject &  {
    enableCanAnswerContainUsername?: boolean;
    enableConcealPersonalInfo?: boolean;
    enableContactlessExternalIdentityUsers?: boolean;
    enableEnhancedConcealPersonalInfo?: boolean;
    enableEnhancedPermsetMgmt?: boolean;
    enableEnhancedProfileMgmt?: boolean;
    enableEnhcUiUserAccessPolicies?: boolean;
    enableNewProfileUI?: boolean;
    enableProfileFiltering?: boolean;
    enableRestrictEmailDomains?: boolean;
    enableScrambleUserData?: boolean;
    enableUserSelfDeactivate?: boolean;
    permsetsInFieldCreation?: boolean;
    psaExpirationUIEnabled?: boolean;
    restrictedProfileCloning?: boolean;
    userAccessPoliciesEnabled?: boolean;
}

export type VoiceSettings = MetadataForSettings & sObject &  {
    enableCallDisposition?: boolean;
    enableConsentReminder?: boolean;
    enableDefaultRecording?: boolean;
    enableVoiceCallList?: boolean;
    enableVoiceCallRecording?: boolean;
    enableVoiceCoaching?: boolean;
    enableVoiceConferencing?: boolean;
    enableVoiceLocalPresence?: boolean;
    enableVoiceMail?: boolean;
    enableVoiceMailDrop?: boolean;
}

export type WarrantyLifecycleMgmtSettings = MetadataForSettings & sObject &  {
    enableWarrantyLCMgmt?: boolean;
}

export type WebToXSettings = MetadataForSettings & sObject &  {
    shouldHideRecordInfoInEmail?: boolean;
    webToCaseSpamFilter?: boolean;
    webToLeadSpamFilter?: boolean;
}

export type WorkDotComSettings = MetadataForSettings & sObject &  {
    enableCoachingManagerGroupAccess?: boolean;
    enableGoalManagerGroupAccess?: boolean;
    enableProfileSkills?: boolean;
    enableProfileSkillsAddFeedPost?: boolean;
    enableProfileSkillsAutoSuggest?: boolean;
    enableProfileSkillsUsePlatform?: boolean;
    enableWorkBadgeDefRestrictPref?: boolean;
    enableWorkCalibration?: boolean;
    enableWorkCanvasPref?: boolean;
    enableWorkCertification?: boolean;
    enableWorkCertificationNotification?: boolean;
    enableWorkRewardsPref?: boolean;
    enableWorkThanksPref?: boolean;
    enableWorkUseObjectivesForGoals?: boolean;
}

export type MfgProgramTemplate = Metadata & sObject &  {
    description?: string;
    programTemplateItems?: MfgProgramTemplateItem | MfgProgramTemplateItem[];
    programTemplateName: string;
    status: MfgProgramTemplateStatus;
}

export type MfgProgramTemplateItem = {
    advAccountForecastSet?: string;
    description?: string;
    templateItemName: string;
    transformationDisplayOrder: number;
    transformationType: MfgProgramTransformationType;
}

export type MilestoneType = Metadata &  {
    description?: string;
    recurrenceType?: MilestoneTypeRecurrenceType;
}

export type MktCalcInsightObjectDef = Metadata &  {
    creationType: CalculatedInsightCreationType;
    description?: string;
    expression?: string;
    masterLabel: string;
}

export type MktDataConnection = Metadata & sObject &  {
    connectionMethod: MktDataConnectionMethod;
    connectionStatus?: MktDataConnectionStatus;
    connectorName: string;
    externalRecordIdentifier?: string;
    masterLabel: string;
}

export type MktDataConnectionCred = Metadata & sObject &  {
    credentialName: string;
    value: string;
}

export type MktDataConnectionParam = Metadata & sObject &  {
    paramName: string;
    value: string;
}

export type MktDataConnectionSrcParam = Metadata & sObject &  {
    paramName: string;
    referenceObject: string;
    value: string;
}

export type MktDataTranField = Metadata & sObject &  {
    creationType: DefinitionCreationType;
    datatype: string;
    dateFormat?: string;
    externalName: string;
    isDataRequired?: boolean;
    length?: number;
    masterLabel: string;
    precision?: number;
    primaryIndexOrder?: number;
    scale?: number;
    sequence: number;
}

export type MktDataTranObject = Metadata & sObject &  {
    connector: string;
    creationType: DefinitionCreationType;
    dataSource: string;
    dataSourceObject: string;
    masterLabel: string;
    objectCategory: string;
}

export type MktDatalakeSrcKeyQualifier = Metadata &  {
    description?: string;
    masterLabel: string;
}

export type MlDomain = Metadata & sObject &  {
    description?: string;
    label: string;
    mlIntents?: MlIntent | MlIntent[];
    mlSlotClasses?: MlSlotClass | MlSlotClass[];
}

export type MlModelArtifact = Metadata &  {
    algorithmType?: MlAIModelAlgorithmType;
    description?: string;
    generativeModelType?: MlGenerativeModelType;
    inputFeatures?: MlModelInput | MlModelInput[];
    label: string;
    modelCapabilities?: MlGenerativeModelCapability | MlGenerativeModelCapability[];
    modelType: MlModelType;
    outputFeatures?: MlModelOutput | MlModelOutput[];
    parameters?: MlParameterDefinition | MlParameterDefinition[];
    predictionType?: MlModelPredictionType;
    runtimeType?: MlRuntimeType;
    sourceContainer?: string;
    sourceType: MlModelSourceType;
    status: MlModelArtifactStatus;
    trainingMetrics?: string;
}

export type MlModelInput = {
    isDisparateImpact?: boolean;
    isSegmentField?: boolean;
    isSensitive?: boolean;
    label: string;
    name: string;
    position?: number;
    type: string;
    values?: string | string[];
}

export type MlModelOutput = {
    label: string;
    name: string;
    type: string;
}

export type MlParameterDefinition = {
    continuousDefault?: number;
    continuousMaximum?: number;
    continuousMinimum?: number;
    description?: string;
    discreteDefault?: string;
    discreteValues?: string | string[];
    modelCapabilities?: MlGenerativeModelCapability | MlGenerativeModelCapability[];
    name: string;
    subtype: MlParameterSubtype;
    type: MlParameterType;
}

export type MlModelKit = Metadata &  {
    activatedModels?: MlActivatedModel | MlActivatedModel[];
    description?: string;
    label: string;
    objectiveType?: MlObjectiveType;
    outcomeGoal: MlOutcomeGoalType;
    outputFeatures?: MlModelOutput | MlModelOutput[];
    predictionType?: MlModelPredictionType;
    status: MlModelKitStatus;
}

export type MlActivatedModel = {
    description?: string;
    label: string;
    model: string;
    modelCapability?: MlGenerativeModelCapability;
    name: string;
    parameterOverrides?: MlParameterOverride | MlParameterOverride[];
    position: number;
    refreshEnabled?: boolean;
    status: MlActivatedModelStatus;
}

export type MlParameterOverride = {
    continuousValue?: number;
    discreteValue?: string;
    parameter: string;
}

export type MobileApplicationDetail = Metadata &  {
    applicationBinaryFile?: string;
    applicationBinaryFileName?: string;
    applicationBundleIdentifier?: string;
    applicationFileLength?: number;
    applicationIconFile?: string;
    applicationIconFileName?: string;
    applicationInstallUrl?: string;
    devicePlatform: DevicePlatformType;
    deviceType?: string;
    minimumOsVersion?: string;
    privateApp?: boolean;
    version: string;
}

export type ModerationRule = Metadata & sObject &  {
    action: ModerationRuleAction;
    actionLimit?: number;
    active: boolean;
    description?: string;
    entitiesAndFields?: ModeratedEntityField | ModeratedEntityField[];
    masterLabel: string;
    notifyLimit?: number;
    timePeriod?: RateLimitTimePeriod;
    type?: ModerationRuleType;
    userCriteria?: string | string[];
    userMessage?: string;
}

export type ModeratedEntityField = {
    entityName: string;
    fieldName?: string;
    keywordList?: string;
}

export type Module = Metadata &  {
    description?: string;
    label: string;
    moduleDependencies?: ModuleDependencies;
    moduleType: string;
    name: string;
    version?: string;
}

export type ModuleDependencies = {
    moduleRef?: ModuleRef | ModuleRef[];
}

export type MyDomainDiscoverableLogin = Metadata &  {
    apexHandler: string;
    executeApexHandlerAs?: string;
    usernameLabel?: string;
}

export type NamedCredential = Metadata & sObject &  {
    allowMergeFieldsInBody?: boolean;
    allowMergeFieldsInHeader?: boolean;
    authProvider?: string;
    authTokenEndpointUrl?: string;
    awsAccessKey?: string;
    awsAccessSecret?: string;
    awsRegion?: string;
    awsService?: string;
    calloutStatus?: CalloutStatus;
    certificate?: string;
    endpoint?: string;
    generateAuthorizationHeader?: boolean;
    jwtAudience?: string;
    jwtFormulaSubject?: string;
    jwtIssuer?: string;
    jwtSigningCertificate?: string;
    jwtTextSubject?: string;
    jwtValidityPeriodSeconds?: number;
    label: string;
    namedCredentialParameters?: NamedCredentialParameter | NamedCredentialParameter[];
    namedCredentialType?: NamedCredentialType;
    oauthRefreshToken?: string;
    oauthScope?: string;
    oauthToken?: string;
    outboundNetworkConnection?: string;
    password?: string;
    principalType?: ExternalPrincipalType;
    protocol?: AuthenticationProtocol;
    username?: string;
}

export type NamedCredentialParameter = {
    certificate?: string;
    description?: string;
    externalCredential?: string;
    outboundNetworkConnection?: string;
    parameterName: string;
    parameterType: NamedCredentialParamType;
    parameterValue?: string;
    sequenceNumber?: number;
}

export type NavigationMenu = Metadata & sObject &  {
    container: string;
    containerType: string;
    label: string;
    navigationMenuItem?: NavigationMenuItem | NavigationMenuItem[];
}

export type Network = Metadata &  {
    allowInternalUserLogin?: boolean;
    allowMembersToFlag?: boolean;
    allowedExtensions?: string;
    caseCommentEmailTemplate?: string;
    changePasswordTemplate: string;
    chgEmailVerNewTemplate?: string;
    chgEmailVerOldTemplate?: string;
    communityRoles?: CommunityRoles;
    description?: string;
    deviceActEmailTemplate?: string;
    disableReputationRecordConversations?: boolean;
    emailFooterLogo?: string;
    emailFooterText?: string;
    emailSenderAddress: string;
    emailSenderName: string;
    enableApexCDNCaching?: boolean;
    enableCustomVFErrorPageOverrides?: boolean;
    enableDirectMessages?: boolean;
    enableExpFriendlyUrlsAsDefault?: boolean;
    enableExperienceBundleBasedSnaOverrideEnabled?: boolean;
    enableGuestChatter?: boolean;
    enableGuestFileAccess?: boolean;
    enableGuestMemberVisibility?: boolean;
    enableImageOptimizationCDN?: boolean;
    enableInvitation?: boolean;
    enableKnowledgeable?: boolean;
    enableLWRExperienceConnectedApp?: boolean;
    enableMemberVisibility?: boolean;
    enableNicknameDisplay?: boolean;
    enablePrivateMessages?: boolean;
    enableReputation?: boolean;
    enableShowAllNetworkSettings?: boolean;
    enableSiteAsContainer?: boolean;
    enableTalkingAboutStats?: boolean;
    enableTopicAssignmentRules?: boolean;
    enableTopicSuggestions?: boolean;
    enableUpDownVote?: boolean;
    feedChannel?: string;
    forgotPasswordTemplate: string;
    gatherCustomerSentimentData?: boolean;
    headlessForgotPasswordTemplate?: string;
    headlessRegistrationTemplate?: string;
    lockoutTemplate?: string;
    logoutUrl?: string;
    maxFileSizeKb?: number;
    navigationLinkSet?: NavigationLinkSet;
    networkAuthApiSettings?: NetworkAuthApiSettings;
    networkMemberGroups?: NetworkMemberGroup;
    networkPageOverrides?: NetworkPageOverride;
    newSenderAddress?: string;
    picassoSite?: string;
    recommendationAudience?: RecommendationAudience;
    recommendationDefinition?: RecommendationDefinition;
    reputationLevels?: ReputationLevelDefinitions;
    reputationPointsRules?: ReputationPointsRules;
    selfRegMicroBatchSubErrorEmailTemplate?: string;
    selfRegProfile?: string;
    selfRegistration?: boolean;
    sendWelcomeEmail?: boolean;
    site: string;
    siteArchiveStatus?: SitesArchiveStatus;
    status: NetworkStatus;
    tabs: NetworkTabSet;
    urlPathPrefix?: string;
    verificationTemplate?: string;
    welcomeTemplate: string;
}

export type CommunityRoles = {
    customerUserRole?: string;
    employeeUserRole?: string;
    partnerUserRole?: string;
}

export type NetworkAuthApiSettings = {
    doesForgotPasswordRequireAuth?: boolean;
    doesPwdlessLoginRequireAuth?: boolean;
    doesRegistrationRequireAuth?: boolean;
    emailTmplsAllowlist?: NetworkEmailTmplAllowlist | NetworkEmailTmplAllowlist[];
    isForgotPwdAllowed?: boolean;
    isForgotPwdEmailTemplateAllowlistingEnabled?: boolean;
    isHeadlessUserRegistrationAllowed?: boolean;
    isPwdlessLoginAllowed?: boolean;
    isRecaptchaRequiredForgotPwd?: boolean;
    isRecaptchaRequiredPwdlessLogin?: boolean;
    isRecaptchaRequiredRgstr?: boolean;
    isUniversalClientRgstrAllowed?: boolean;
    maxPasswordResetAttempts?: number;
    recaptchaScoreThreshold?: number;
    recaptchaSecretKey?: string;
    registrationExecutionUser?: string;
    registrationHandler?: string;
    registrationUserDefaultProfile?: string;
}

export type NetworkEmailTmplAllowlist = {
    emailTemplate: string;
}

export type NetworkMemberGroup = {
    permissionSet?: string | string[];
    profile?: string | string[];
}

export type NetworkPageOverride = {
    changePasswordPageOverrideSetting?: NetworkPageOverrideSetting;
    forgotPasswordPageOverrideSetting?: NetworkPageOverrideSetting;
    homePageOverrideSetting?: NetworkPageOverrideSetting;
    loginPageOverrideSetting?: NetworkPageOverrideSetting;
    selfRegProfilePageOverrideSetting?: NetworkPageOverrideSetting;
}

export type RecommendationAudience = {
    recommendationAudienceDetails?: RecommendationAudienceDetail | RecommendationAudienceDetail[];
}

export type RecommendationAudienceDetail = {
    audienceCriteriaType?: AudienceCriteriaType;
    audienceCriteriaValue?: string;
    setupName?: string;
}

export type RecommendationDefinition = {
    recommendationDefinitionDetails?: RecommendationDefinitionDetail | RecommendationDefinitionDetail[];
}

export type RecommendationDefinitionDetail = {
    actionUrl?: string;
    description?: string;
    linkText?: string;
    scheduledRecommendations?: ScheduledRecommendation;
    setupName?: string;
    title?: string;
}

export type ScheduledRecommendation = {
    scheduledRecommendationDetails?: ScheduledRecommendationDetail | ScheduledRecommendationDetail[];
}

export type ScheduledRecommendationDetail = {
    channel?: RecommendationChannel;
    enabled?: boolean;
    rank?: number;
    recommendationAudience?: string;
}

export type ReputationLevelDefinitions = {
    level?: ReputationLevel | ReputationLevel[];
}

export type ReputationLevel = {
    branding?: ReputationBranding;
    label?: string;
    lowerThreshold: number;
}

export type ReputationBranding = {
    smallImage?: string;
}

export type ReputationPointsRules = {
    pointsRule?: ReputationPointsRule | ReputationPointsRule[];
}

export type ReputationPointsRule = {
    eventType: string;
    points: number;
}

export type NetworkTabSet = {
    customTab?: string | string[];
    defaultTab: string;
    standardTab?: string | string[];
}

export type NetworkBranding = Metadata &  {
    loginBackgroundImageUrl?: string;
    loginFooterText?: string;
    loginLogo?: string;
    loginLogoName?: string;
    loginPrimaryColor?: string;
    loginQuaternaryColor?: string;
    loginRightFrameUrl?: string;
    network?: string;
    pageFooter?: string;
    pageHeader?: string;
    primaryColor: string;
    primaryComplementColor: string;
    quaternaryColor: string;
    quaternaryComplementColor: string;
    secondaryColor: string;
    staticLogoImageUrl?: string;
    tertiaryColor: string;
    tertiaryComplementColor: string;
    zeronaryColor: string;
    zeronaryComplementColor: string;
}

export type OauthCustomScope = Metadata &  {
    assignedTo?: OauthCustomScopeApp | OauthCustomScopeApp[];
    description: string;
    developerName: string;
    isProtected?: boolean;
    isPublic?: boolean;
    masterLabel: string;
}

export type OauthCustomScopeApp = {
    connectedApp: string;
}

export type OauthTokenExchangeHandler = Metadata &  {
    description: string;
    developerName: string;
    enablements?: OauthTokenExchHandlerApp | OauthTokenExchHandlerApp[];
    isAccessTokenSupported: boolean;
    isEnabled: boolean;
    isIdTokenSupported: boolean;
    isJwtSupported: boolean;
    isProtected?: boolean;
    isRefreshTokenSupported: boolean;
    isSaml2Supported: boolean;
    isUserCreationAllowed: boolean;
    masterLabel: string;
    tokenHandlerApex: string;
}

export type OauthTokenExchHandlerApp = {
    apexExecutionUser: string;
    connectedApp?: string;
    externalClientApp?: string;
    isDefault: boolean;
}

export type ObjectHierarchyRelationship = Metadata & sObject &  {
    childObjectMapping?: ObjectMapping;
    childObjectMappingId?: string;
    inputObjRecordsGrpFieldName?: string;
    mappingType?: ObjHierarchyMappingType;
    masterLabel?: string;
    outputPntRelationshipFieldName?: string;
    parentObjectMapping: ObjectMapping;
    parentObjectMappingId?: string;
    parentRecord?: string;
    parentRelationshipFieldName?: string;
    sourceReferenceRelaFieldName?: string;
    usageType: MappingUsageType;
}

export type ObjectSourceTargetMap = Metadata &  {
    creationType?: DefinitionCreationType;
    fieldSourceTargetMaps?: FieldSourceTargetMap | FieldSourceTargetMap[];
    masterLabel: string;
    sequenceNbr?: number;
    sourceObjectName: string;
    targetObjectName: string;
}

export type FieldSourceTargetMap = {
    creationType?: DefinitionCreationType;
    filterApplied?: boolean;
    filterOperationType?: string;
    filterValue?: string;
    isSourceFormula?: boolean;
    sourceField: string;
    sourceFormula?: string;
    targetField: string;
}

export type OcrSampleDocument = Metadata & sObject &  {
    applicationType?: OcrApplicationType;
    contentAsset?: string;
    documentHeight?: number;
    documentType: string;
    masterLabel: string;
    ocrSampleDocumentFields?: OcrSampleDocumentField | OcrSampleDocumentField[];
    ocrSampleDocumentPages?: OcrSampleDocumentPage | OcrSampleDocumentPage[];
}

export type OcrSampleDocumentField = {
    cellColumnNumber?: number;
    cellColumnSpanValue?: number;
    cellRowNumber?: number;
    cellRowSpanValue?: number;
    fieldLabelMaxX?: number;
    fieldLabelMaxY?: number;
    fieldLabelMinX?: number;
    fieldLabelMinY?: number;
    fieldValueName?: string;
    isAutoExtractedValue?: boolean;
    keyContent?: string;
    ocrSampleDocument: string;
    ocrSampleDocumentPage?: string;
    ocrSampleDocumentPageItem?: OcrSampleDocumentPageItem;
}

export type OcrSampleDocumentPageItem = {
    hasHeader?: boolean;
    sequenceNumber: number;
    title?: string;
    type: ItemType;
}

export type OcrSampleDocumentPage = {
    ocrSampleDocument: string;
    ocrSampleDocumentPageItems?: OcrSampleDocumentPageItem | OcrSampleDocumentPageItem[];
    pageHeight?: number;
    pageNumber: number;
}

export type OcrTemplate = Metadata & sObject &  {
    active?: boolean;
    description?: string;
    documentType: string;
    masterLabel: string;
    ocrTargetObjects?: OcrTargetObject | OcrTargetObject[];
    ocrTemplateSampleDocuments?: OcrTemplateSampleDocument | OcrTemplateSampleDocument[];
    pageCount?: number;
    templateName: string;
}

export type OcrTargetObject = {
    ocrTargetObjFieldMappings?: OcrTargetObjFieldMapping | OcrTargetObjFieldMapping[];
    targetObject: string;
    targetObjectRecordType?: string;
}

export type OcrTargetObjFieldMapping = {
    ocrSampleDocField?: OcrSampleDocumentField;
    targetField: string;
    type: OcrMappingType;
}

export type OcrTemplateSampleDocument = {
    ocrSampleDocument?: string;
}

export type OmniDataTransform = Metadata &  {
    active?: boolean;
    assignmentRulesUsed?: boolean;
    deletedOnSuccess?: boolean;
    description?: string;
    errorIgnored?: boolean;
    expectedInputJson?: string;
    expectedInputOtherData?: string;
    expectedInputXml?: string;
    expectedOutputJson?: string;
    expectedOutputOtherData?: string;
    expectedOutputXml?: string;
    fieldLevelSecurityEnabled?: boolean;
    inputParsingClass?: string;
    inputType?: OmniDataTransformInputType;
    name: string;
    namespace?: string;
    nullInputsIncludedInOutput?: boolean;
    omniDataTransformItem?: OmniDataTransformItem | OmniDataTransformItem[];
    outputParsingClass?: string;
    outputType?: string;
    overrideKey?: string;
    preprocessorClassName?: string;
    previewJsonData?: string;
    previewOtherData?: string;
    previewSourceObjectData?: string;
    previewXmlData?: string;
    processSuperBulk?: boolean;
    requiredPermission?: string;
    responseCacheTtlMinutes?: number;
    responseCacheType?: string;
    rollbackOnError?: boolean;
    sourceObject?: string;
    sourceObjectDefault?: boolean;
    synchronousProcessThreshold?: number;
    targetOutputDocumentIdentifier?: string;
    targetOutputFileName?: string;
    type: string;
    uniqueName?: string;
    versionNumber?: number;
    xmlDeclarationRemoved?: boolean;
    xmlOutputTagsOrder?: string;
}

export type OmniDataTransformItem = {
    defaultValue?: string;
    disabled?: boolean;
    filterDataType?: ODTItemFilterDataType;
    filterGroup?: number;
    filterOperator?: string;
    filterValue?: string;
    formulaConverted?: string;
    formulaExpression?: string;
    formulaResultPath?: string;
    formulaSequence?: number;
    globalKey?: string;
    inputFieldName?: string;
    inputObjectName?: string;
    inputObjectQuerySequence?: number;
    linkedFieldName?: string;
    linkedObjectSequence?: number;
    lookupByFieldName?: string;
    lookupObjectName?: string;
    lookupReturnedFieldName?: string;
    migrationAttribute?: string;
    migrationCategory?: string;
    migrationGroup?: string;
    migrationKey?: string;
    migrationPattern?: string;
    migrationProcess?: string;
    migrationType?: string;
    migrationValue?: string;
    name: string;
    omniDataTransformation?: string;
    omniDataTransformationId?: string;
    outputCreationSequence?: number;
    outputFieldFormat?: string;
    outputFieldName?: string;
    outputObjectName?: string;
    requiredForUpsert?: boolean;
    transformValuesMappings?: string;
    upsertKey?: boolean;
}

export type OmniExtTrackingDef = Metadata & sObject &  {
    description?: string;
    developerName: string;
    isActive: boolean;
    masterLabel: string;
    omniExtTrackingDefKey?: string;
    omniExtTrackingEventDefs?: OmniExtTrackingEventDef | OmniExtTrackingEventDef[];
    trackingFrameworkInformation: string;
    trackingServiceProvider: ExternalTrackingVendor;
}

export type OmniExtTrackingEventDef = Metadata & sObject &  {
    componentType: OmniAnalyticsComponentType;
    description?: string;
    developerName: string;
    inclusionRule: string;
    masterLabel: string;
    omniExtTrackingDef?: string;
    omniExtTrackingEventDefKey?: string;
    payloadTemplate: string;
}

export type OmniIntegrationProcedure = Metadata &  {
    customHtmlTemplates?: string;
    customJavaScript?: string;
    description?: string;
    designerCustomizationType?: string;
    elementTypeComponentMapping?: string;
    isActive?: boolean;
    isIntegrationProcedure?: boolean;
    isMetadataCacheDisabled?: boolean;
    isOmniScriptEmbeddable?: boolean;
    isTestProcedure?: boolean;
    isWebCompEnabled?: boolean;
    language: string;
    lastPreviewPage?: string;
    name: string;
    nameSpace?: string;
    omniProcessElements?: OmniProcessElement | OmniProcessElement[];
    omniProcessKey?: string;
    omniProcessType: OmniProcessType;
    overrideKey?: string;
    propertySetConfig?: string;
    requiredPermission?: string;
    responseCacheType?: string;
    subType: string;
    type: string;
    uniqueName: string;
    versionNumber: number;
    webComponentKey?: string;
}

export type OmniProcessElement = {
    childElements?: OmniProcessElement | OmniProcessElement[];
    description?: string;
    designerCustomizationType?: string;
    discoveryFrameworkUsageType?: string;
    embeddedOmniScriptKey?: string;
    isActive?: boolean;
    isOmniScriptEmbeddable?: boolean;
    level?: number;
    name: string;
    omniProcessVersionNumber?: number;
    parentElementName?: string;
    parentElementType?: string;
    propertySetConfig?: string;
    sequenceNumber?: number;
    type?: string;
    uniqueIndex?: string;
}

export type OmniInteractionAccessConfig = Metadata & sObject &  {
    configName?: string;
    isAsyncCardCachingEnabled: boolean;
    isCardApexRemoteDisabled: boolean;
    isCardCacheDisabled: boolean;
    isCardDataTfrmDisabled: boolean;
    isCardIntegrationProcDisabled: boolean;
    isCardRestApiDisabled: boolean;
    isCardSoqlDisabled: boolean;
    isCardSoslDisabled: boolean;
    isCardStreamingApiDisabled: boolean;
    isDataTfrmEncrpFieldsDisabled: boolean;
    masterLabel: string;
    setupOwner?: string;
}

export type OmniInteractionConfig = Metadata & sObject &  {
    masterLabel: string;
    value: string;
}

export type OmniScript = Metadata &  {
    customHtmlTemplates?: string;
    customJavaScript?: string;
    description?: string;
    designerCustomizationType?: string;
    discoveryFrameworkUsageType?: string;
    elementTypeComponentMapping?: string;
    isActive?: boolean;
    isIntegrationProcedure?: boolean;
    isMetadataCacheDisabled?: boolean;
    isOmniScriptEmbeddable?: boolean;
    isTestProcedure?: boolean;
    isWebCompEnabled?: boolean;
    language: string;
    lastPreviewPage?: string;
    name: string;
    nameSpace?: string;
    omniProcessElements?: OmniProcessElement | OmniProcessElement[];
    omniProcessKey?: string;
    omniProcessType: OmniProcessType;
    overrideKey?: string;
    propertySetConfig?: string;
    requiredPermission?: string;
    responseCacheType?: string;
    subType: string;
    type: string;
    uniqueName: string;
    versionNumber: number;
    webComponentKey?: string;
}

export type OmniSupervisorConfig = Metadata & sObject &  {
    isTimelineHidden: boolean;
    masterLabel: string;
    omniSupervisorConfigAction?: OmniSupervisorConfigAction | OmniSupervisorConfigAction[];
    omniSupervisorConfigGroup?: OmniSupervisorConfigGroup | OmniSupervisorConfigGroup[];
    omniSupervisorConfigProfile?: OmniSupervisorConfigProfile | OmniSupervisorConfigProfile[];
    omniSupervisorConfigQueue?: OmniSupervisorConfigQueue | OmniSupervisorConfigQueue[];
    omniSupervisorConfigSkill?: OmniSupervisorConfigSkill | OmniSupervisorConfigSkill[];
    skillVisibility?: OmniSuperSkillVisibilityType;
}

export type OmniSupervisorConfigAction = {
    actionName: OmniSupervisorActionName;
    actionTab: OmniSupervisorActionTab;
    customActionFlow?: string;
    displayOrder: number;
}

export type OmniSupervisorConfigGroup = {
    group: string;
}

export type OmniSupervisorConfigProfile = {
    profile: string;
}

export type OmniSupervisorConfigQueue = {
    queue: string;
}

export type OmniSupervisorConfigSkill = {
    skill: string;
}

export type OmniTrackingComponentDef = Metadata & sObject &  {
    componentType: OmniAnalyticsComponentType;
    componentVersion: number;
    developerName: string;
    masterLabel: string;
    omniTrackingComponentDefKey?: string;
    omniTrackingGroup?: string;
}

export type OmniTrackingGroup = Metadata & sObject &  {
    description?: string;
    developerName: string;
    endDate?: Date;
    groupType: OmniTrackingGroupType;
    isActive: boolean;
    masterLabel: string;
    maxAgeInDays?: number;
    omniExtTrackingDef?: string;
    omniTrackingComponentDefs?: OmniTrackingComponentDef | OmniTrackingComponentDef[];
    omniTrackingGroupKey?: string;
    startDate?: Date;
}

export type OmniUiCard = Metadata &  {
    authorName: string;
    clonedFromOmniUiCardKey?: string;
    dataSourceConfig: string;
    description?: string;
    isActive: boolean;
    name: string;
    omniUiCardType: OmniUiCardType;
    overrideKey?: string;
    propertySetConfig: string;
    sampleDataSourceResponse?: string;
    stylingConfiguration?: string;
    versionNumber: string;
}

export type Orchestration = Metadata &  {
    context: string;
    masterLabel: string;
}

export type OrchestrationContext = Metadata &  {
    datasets?: OrchestrationContextDataset | OrchestrationContextDataset[];
    description?: string;
    events?: OrchestrationContextEvent | OrchestrationContextEvent[];
    imageFile: string;
    imageScale: number;
    masterLabel: string;
    runtimeType: string;
    salesforceObject?: string;
    salesforceObjectPrimaryKey?: string;
}

export type OrchestrationContextDataset = {
    datasetType: string;
    orchestrationDataset: string;
}

export type OrchestrationContextEvent = {
    eventType: string;
    orchestrationEvent: string;
    platformEvent: string;
    platformEventPrimaryKey: string;
}

export type OutboundNetworkConnection = Metadata & sObject &  {
    connectionType: ExternalConnectionType;
    description?: string;
    isActive: boolean;
    label: string;
    outboundNetworkConnProperties?: OutboundNetworkConnProperty | OutboundNetworkConnProperty[];
    status: ExternalConnectionStatus;
}

export type OutboundNetworkConnProperty = {
    propertyName: OutboundConnPropertyName;
    propertyValue: string;
}

export type ParticipantRole = Metadata &  {
    defaultAccessLevel: ParticipantRoleAccessLevel;
    isActive?: boolean;
    masterLabel: string;
    parentObject: string;
}

export type PathAssistant = Metadata & sObject &  {
    active: boolean;
    entityName: string;
    fieldName: string;
    masterLabel: string;
    pathAssistantSteps?: PathAssistantStep | PathAssistantStep[];
    recordTypeName: string;
}

export type PathAssistantStep = {
    fieldNames?: string | string[];
    info?: string;
    picklistValueName: string;
}

export type PaymentGatewayProvider = Metadata & sObject &  {
    apexAdapter?: string;
    comments?: string;
    gatewayType?: GatewayType;
    idempotencySupported: IdempotencySupportStatus;
    masterLabel: string;
}

export type PermissionSet = Metadata & sObject &  {
    applicationVisibilities?: PermissionSetApplicationVisibility | PermissionSetApplicationVisibility[];
    classAccesses?: PermissionSetApexClassAccess | PermissionSetApexClassAccess[];
    customMetadataTypeAccesses?: PermissionSetCustomMetadataTypeAccess | PermissionSetCustomMetadataTypeAccess[];
    customPermissions?: PermissionSetCustomPermissions | PermissionSetCustomPermissions[];
    customSettingAccesses?: PermissionSetCustomSettingAccess | PermissionSetCustomSettingAccess[];
    dataspaceScopes?: DataspaceScopeAccess | DataspaceScopeAccess[];
    description?: string;
    externalCredentialPrincipalAccesses?: PermissionSetExternalCredentialPrincipalAccess | PermissionSetExternalCredentialPrincipalAccess[];
    externalDataSourceAccesses?: PermissionSetExternalDataSourceAccess | PermissionSetExternalDataSourceAccess[];
    fieldPermissions?: PermissionSetFieldPermissions | PermissionSetFieldPermissions[];
    flowAccesses?: PermissionSetFlowAccess | PermissionSetFlowAccess[];
    hasActivationRequired?: boolean;
    label: string;
    license?: string;
    objectPermissions?: PermissionSetObjectPermissions | PermissionSetObjectPermissions[];
    pageAccesses?: PermissionSetApexPageAccess | PermissionSetApexPageAccess[];
    recordTypeVisibilities?: PermissionSetRecordTypeVisibility | PermissionSetRecordTypeVisibility[];
    tabSettings?: PermissionSetTabSetting | PermissionSetTabSetting[];
    userPermissions?: PermissionSetUserPermission | PermissionSetUserPermission[];
}

export type PermissionSetApplicationVisibility = {
    application: string;
    visible: boolean;
}

export type PermissionSetApexClassAccess = {
    apexClass: string;
    enabled: boolean;
}

export type PermissionSetCustomMetadataTypeAccess = {
    enabled: boolean;
    name: string;
}

export type PermissionSetCustomPermissions = {
    enabled: boolean;
    name: string;
}

export type PermissionSetCustomSettingAccess = {
    enabled: boolean;
    name: string;
}

export type DataspaceScopeAccess = {
    customizeActivationDefinitions?: boolean;
    customizeAllDefinitions?: boolean;
    customizeCalculatedInsightDefinitions?: boolean;
    customizeDataActionDefinitions?: boolean;
    customizeIdentityResolutionDefinitions?: boolean;
    customizeSegmentationDefinitions?: boolean;
    dataAccessLevel?: string;
    dataspaceScope: string;
    viewActivationDefinitions?: boolean;
    viewCalculatedInsightDefinitions?: boolean;
    viewDataActionDefinitions?: boolean;
    viewIdentityResolutionDefinitions?: boolean;
    viewSegmentationDefinitions?: boolean;
}

export type PermissionSetExternalCredentialPrincipalAccess = {
    enabled: boolean;
    externalCredentialPrincipal: string;
}

export type PermissionSetExternalDataSourceAccess = {
    enabled: boolean;
    externalDataSource: string;
}

export type PermissionSetFieldPermissions = {
    editable: boolean;
    field: string;
    readable?: boolean;
}

export type PermissionSetFlowAccess = {
    enabled: boolean;
    flow: string;
}

export type PermissionSetObjectPermissions = {
    allowCreate: boolean;
    allowDelete: boolean;
    allowEdit: boolean;
    allowRead: boolean;
    customizeSetup?: boolean;
    deleteSetup?: boolean;
    modifyAllRecords: boolean;
    object: string;
    viewAllRecords: boolean;
    viewSetup?: boolean;
}

export type PermissionSetApexPageAccess = {
    apexPage: string;
    enabled: boolean;
}

export type PermissionSetRecordTypeVisibility = {
    recordType: string;
    visible: boolean;
}

export type PermissionSetTabSetting = {
    tab: string;
    visibility: PermissionSetTabVisibility;
}

export type PermissionSetUserPermission = {
    enabled: boolean;
    name: string;
}

export type MutingPermissionSet = PermissionSet & sObject &  {
    label: string;
}

export type PermissionSetGroup = Metadata & sObject &  {
    description?: string;
    hasActivationRequired?: boolean;
    label: string;
    mutingPermissionSets?: string | string[];
    permissionSets?: string | string[];
    status?: string;
}

export type PermissionSetLicenseDefinition = Metadata &  {
    customPermissions?: PermissionSetLicenseDefinitionCustomPermission | PermissionSetLicenseDefinitionCustomPermission[];
    isSupplementLicense?: boolean;
    label: string;
    licenseExpirationPolicy: LicenseExpirationPolicy;
    userLicenseRestrictions?: string;
}

export type PermissionSetLicenseDefinitionCustomPermission = {
    name: string;
}

export type PersonAccountOwnerPowerUser = Metadata &  {
    developerName: string;
    masterLabel: string;
    portalType: string;
    user: string;
}

export type PlatformCachePartition = Metadata & sObject &  {
    description?: string;
    isDefaultPartition: boolean;
    masterLabel: string;
    platformCachePartitionTypes?: PlatformCachePartitionType | PlatformCachePartitionType[];
}

export type PlatformCachePartitionType = {
    allocatedCapacity: number;
    allocatedPartnerCapacity: number;
    allocatedPurchasedCapacity: number;
    allocatedTrialCapacity: number;
    cacheType: PlatformCacheType;
}

export type PlatformEventChannel = Metadata & sObject &  {
    channelType: PlatformEventChannelType;
    label: string;
}

export type PlatformEventChannelMember = Metadata & sObject &  {
    enrichedFields?: EnrichedField | EnrichedField[];
    eventChannel: string;
    filterExpression?: string;
    selectedEntity: string;
}

export type EnrichedField = {
    name: string;
}

export type PlatformLicenseDefinition = Metadata &  {
    cloudServiceProvider?: string;
    defaultLicenseDuration?: number;
    defaultStatus?: DefaultLicenseStatus;
    description?: string;
    hasDynamicResourceGroupKey?: boolean;
    includedFeatures?: IncludedFeature | IncludedFeature[];
    licenseOwner?: string;
    managementServiceProvider?: string;
    managementTenantId?: string;
    minPlatformVersion?: number;
    name: string;
    settingItems?: SettingItem | SettingItem[];
    settingUsageDefinitions?: SettingUsageDefinition | SettingUsageDefinition[];
}

export type IncludedFeature = {
    name: string;
    settingOverrides?: SettingOverride | SettingOverride[];
}

export type SettingOverride = {
    settingId: string;
    value: string;
}

export type SettingItem = {
    durableId: string;
    editable?: boolean;
    ignoreQuantity?: boolean;
    namespace?: string;
    value: string;
}

export type SettingUsageDefinition = {
    frequencyDefault: Frequency;
    hasRolloverDefault?: boolean;
    isPersistentResource: boolean;
    overageGraceDefault?: number;
    setting: string;
}

export type Portal = Metadata &  {
    active: boolean;
    admin?: string;
    defaultLanguage?: string;
    description?: string;
    emailSenderAddress: string;
    emailSenderName: string;
    enableSelfCloseCase?: boolean;
    footerDocument?: string;
    forgotPassTemplate?: string;
    headerDocument?: string;
    isSelfRegistrationActivated?: boolean;
    loginHeaderDocument?: string;
    logoDocument?: string;
    logoutUrl?: string;
    newCommentTemplate?: string;
    newPassTemplate?: string;
    newUserTemplate?: string;
    ownerNotifyTemplate?: string;
    selfRegNewUserUrl?: string;
    selfRegUserDefaultProfile?: string;
    selfRegUserDefaultRole?: PortalRoles;
    selfRegUserTemplate?: string;
    showActionConfirmation?: boolean;
    stylesheetDocument?: string;
    type: PortalType;
}

export type PostTemplate = Metadata & sObject &  {
    default?: boolean;
    description?: string;
    fields?: string | string[];
    label: string;
}

export type PriceRule = Metadata & sObject &  {
    conditionLogic: ConditionLogic;
    description?: string;
    effectiveDate?: Date;
    expirationDate?: Date;
    masterLabel: string;
    priceRuleActions?: PriceRuleAction | PriceRuleAction[];
    priceRuleConditions?: PriceRuleCondition | PriceRuleCondition[];
    priceRuleExecutionStages?: PriceRuleExecutionStage | PriceRuleExecutionStage[];
    sequence: number;
    status: RuleStatus;
}

export type PriceRuleAction = {
    conditionVariable?: string;
    priceRuleActionItems?: PriceRuleActionItem | PriceRuleActionItem[];
    sequence: number;
    targetObject?: string;
    type: TypeOfAction;
}

export type PriceRuleActionItem = {
    field: string;
    fieldValue: string;
    fieldValueType: InputValueType;
    sequence: number;
}

export type PriceRuleCondition = {
    accumulateResultCondInput?: string;
    accumulateResultCondInputType?: AccumulateResultCondInputType;
    accumulateResultOperator?: AccumulateResultOperator;
    aggregatedConditionVariable?: string;
    aggregationType?: ConditionAggregationFunction;
    conditionVariable?: string;
    matchType: TargetEntityMatchType;
    priceRuleConditionFilters?: PriceRuleConditionFilter | PriceRuleConditionFilter[];
    scope: ConditionType;
    sequence: number;
    targetObject: string;
}

export type PriceRuleConditionFilter = {
    field: string;
    fieldValue?: string;
    fieldValueType?: ConditionFilterInputValueType;
    operator: ConditionFilterOperator;
    sequence: number;
    variable?: string;
}

export type PriceRuleExecutionStage = {
    stage: ExecutionStageOfPriceRule;
}

export type PriceSheetDefinition = Metadata & sObject &  {
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    prcShtAttrDefinitions?: PrcShtAttrDefinition | PrcShtAttrDefinition[];
    priceSheetEntity: string;
    status?: PriceSheetDefinitionStatus;
}

export type PrcShtAttrDefinition = {
    columnLabel?: string;
    columnName: string;
    columnType: PriceSheetColumnType;
    isRangeColumn: boolean;
}

export type PricingActionParameters = Metadata & sObject &  {
    contextDefinition: string;
    contextMapping: string;
    developerName: string;
    effectiveFrom: Date;
    effectiveTo?: Date;
    isProtected?: boolean;
    masterLabel: string;
    objectName?: string;
    pricingProcedure?: string;
}

export type PricingRecipe = Metadata & sObject &  {
    defaultPricingProcedureId?: string;
    developerName?: string;
    isActive?: boolean;
    isInternal?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    pricingRecipeTableMapping?: PricingRecipeTableMapping | PricingRecipeTableMapping[];
}

export type PricingRecipeTableMapping = {
    fileBasedDecisionTableName?: string;
    isInternal?: boolean;
    pricingComponentType?: string;
    pricingRecipe: string;
}

export type ProcessFlowMigration = Metadata & sObject &  {
    destinationFlowDefinition: string;
    destinationFlowVersion: string;
    developerName: string;
    masterLabel: string;
    migratedCriteriaLabel?: string;
    migratedCriteriaName?: string;
    processVersion: string;
}

export type ProcessPalette = Metadata & sObject &  {
    allHeaderAutolayoutVisibility?: boolean | boolean[];
    allHeaderFreeformVisibility?: boolean | boolean[];
    allHeaderNames?: string | string[];
    allHeaderOrders?: number | number[];
    elementHeaders?: string | string[];
    elementOrders?: number | number[];
    elementSubtypeHeaders?: string | string[];
    elementSubtypeOrders?: number | number[];
    elementSubtypes?: string | string[];
    elementTypes?: FlowElementType | FlowElementType[];
    invocableActionHeaders?: string | string[];
    invocableActionIconNames?: string | string[];
    invocableActionIsCustoms?: boolean | boolean[];
    invocableActionOrders?: number | number[];
    invocableActions?: InvocableActionType | InvocableActionType[];
    name: string;
    shortcutActionIconNames?: string | string[];
    shortcutDescriptions?: string | string[];
    shortcutEnumApiNames?: string | string[];
    shortcutEnumTypes?: string | string[];
    shortcutHeaders?: string | string[];
    shortcutIfActionIsCustom?: boolean | boolean[];
    shortcutLabels?: string | string[];
    shortcutOrders?: number | number[];
}

export type ProcessTypeDefinition = Metadata & sObject &  {
    actionTypes?: InvocableActionType | InvocableActionType[];
    autoGeneratedRequiredVariables?: FlowVariable | FlowVariable[];
    defaultFlowRuntimeApiVersion?: number;
    elementSubtypeAllowList?: string | string[];
    elementTypes?: FlowElementType | FlowElementType[];
    flowDataTypeBlockList?: FlowDataType | FlowDataType[];
    isFlowManaged: boolean;
    label: string;
    lightningComponentMarkerInterfaces?: string | string[];
    minApiVersionForRefreshedRecords?: number;
    minValidApiVersionForSave?: number;
    name: string;
    screenFieldTypeBlockList?: FlowScreenFieldType | FlowScreenFieldType[];
    subflowAllowList?: FlowProcessType | FlowProcessType[];
    supportedFeatures?: string | string[];
    systemVariableBlockList?: FlowSystemVariable | FlowSystemVariable[];
    triggerTypeAllowList?: FlowTriggerType | FlowTriggerType[];
}

export type ProductAttrDisplayConfig = Metadata & sObject &  {
    dataType: string;
    displayType: string;
    masterLabel: string;
    status: string;
}

export type ProductAttributeSet = Metadata & sObject &  {
    description?: string;
    developerName: string;
    masterLabel: string;
    productAttributeSetItems?: ProductAttributeSetItem | ProductAttributeSetItem[];
}

export type ProductAttributeSetItem = {
    field: string;
    sequence: number;
}

export type ProductFamilyUsage = Metadata & sObject &  {
    productFamilyUsageType: ProductFamilyUsageType;
}

export type ProductSpecificationRecType = Metadata & sObject &  {
    isCommercial: boolean;
    masterLabel: string;
    productSpecificationType: string;
    recordType: string;
}

export type ProductSpecificationType = Metadata & sObject &  {
    description: string;
    masterLabel: string;
}

export type Profile = Metadata & sObject &  {
    applicationVisibilities?: ProfileApplicationVisibility | ProfileApplicationVisibility[];
    categoryGroupVisibilities?: ProfileCategoryGroupVisibility | ProfileCategoryGroupVisibility[];
    classAccesses?: ProfileApexClassAccess | ProfileApexClassAccess[];
    custom?: boolean;
    customMetadataTypeAccesses?: ProfileCustomMetadataTypeAccess | ProfileCustomMetadataTypeAccess[];
    customPermissions?: ProfileCustomPermissions | ProfileCustomPermissions[];
    customSettingAccesses?: ProfileCustomSettingAccess | ProfileCustomSettingAccess[];
    description?: string;
    externalDataSourceAccesses?: ProfileExternalDataSourceAccess | ProfileExternalDataSourceAccess[];
    fieldPermissions?: ProfileFieldLevelSecurity | ProfileFieldLevelSecurity[];
    flowAccesses?: ProfileFlowAccess | ProfileFlowAccess[];
    loginFlows?: LoginFlow | LoginFlow[];
    loginHours?: ProfileLoginHours;
    loginIpRanges?: ProfileLoginIpRange | ProfileLoginIpRange[];
    objectPermissions?: ProfileObjectPermissions | ProfileObjectPermissions[];
    pageAccesses?: ProfileApexPageAccess | ProfileApexPageAccess[];
    profileActionOverrides?: ProfileActionOverride | ProfileActionOverride[];
    recordTypeVisibilities?: ProfileRecordTypeVisibility | ProfileRecordTypeVisibility[];
    tabVisibilities?: ProfileTabVisibility | ProfileTabVisibility[];
    userLicense?: string;
    userPermissions?: ProfileUserPermission | ProfileUserPermission[];
}

export type ProfileApplicationVisibility = {
    application: string;
    default: boolean;
    visible: boolean;
}

export type ProfileCategoryGroupVisibility = {
    dataCategories?: string | string[];
    dataCategoryGroup: string;
    visibility: CategoryGroupVisibility;
}

export type ProfileApexClassAccess = {
    apexClass: string;
    enabled: boolean;
}

export type ProfileCustomMetadataTypeAccess = {
    enabled: boolean;
    name: string;
}

export type ProfileCustomPermissions = {
    enabled: boolean;
    name: string;
}

export type ProfileCustomSettingAccess = {
    enabled: boolean;
    name: string;
}

export type ProfileExternalDataSourceAccess = {
    enabled: boolean;
    externalDataSource: string;
}

export type ProfileFieldLevelSecurity = {
    editable: boolean;
    field: string;
    readable?: boolean;
}

export type ProfileFlowAccess = {
    enabled: boolean;
    flow: string;
}

export type LoginFlow = {
    flow?: string;
    flowType: LoginFlowType;
    friendlyName: string;
    uiLoginFlowType: UiLoginFlowType;
    useLightningRuntime?: boolean;
    vfFlowPage?: string;
    vfFlowPageTitle?: string;
}

export type ProfileLoginHours = {
    fridayEnd?: string;
    fridayStart?: string;
    mondayEnd?: string;
    mondayStart?: string;
    saturdayEnd?: string;
    saturdayStart?: string;
    sundayEnd?: string;
    sundayStart?: string;
    thursdayEnd?: string;
    thursdayStart?: string;
    tuesdayEnd?: string;
    tuesdayStart?: string;
    wednesdayEnd?: string;
    wednesdayStart?: string;
}

export type ProfileLoginIpRange = {
    description?: string;
    endAddress: string;
    startAddress: string;
}

export type ProfileObjectPermissions = {
    allowCreate?: boolean;
    allowDelete?: boolean;
    allowEdit?: boolean;
    allowRead?: boolean;
    customizeSetup?: boolean;
    deleteSetup?: boolean;
    modifyAllRecords?: boolean;
    object: string;
    viewAllRecords?: boolean;
    viewSetup?: boolean;
}

export type ProfileApexPageAccess = {
    apexPage: string;
    enabled: boolean;
}

export type ProfileRecordTypeVisibility = {
    default: boolean;
    personAccountDefault?: boolean;
    recordType: string;
    visible: boolean;
}

export type ProfileTabVisibility = {
    tab: string;
    visibility: TabVisibility;
}

export type ProfileUserPermission = {
    enabled: boolean;
    name: string;
}

export type Prompt = Metadata & sObject &  {
    masterLabel: string;
    promptVersions?: PromptVersion | PromptVersion[];
}

export type PromptVersion = {
    actionButtonLabel?: string;
    actionButtonLink?: string;
    body: string;
    customApplication?: string;
    delayDays?: number;
    description?: string;
    dismissButtonLabel?: string;
    displayPosition?: PromptDisplayPosition;
    displayType: PromptDisplayType;
    elementRelativePosition?: PromptElementRelativePosition;
    endDate?: Date;
    experience?: PromptExperience;
    experienceContext?: string;
    header?: string;
    icon?: string;
    image?: string;
    imageAltText?: string;
    imageLink?: string;
    imageLocation?: PromptImageLocation;
    indexWithIsPublished?: string;
    indexWithoutIsPublished?: string;
    isPublished?: boolean;
    masterLabel: string;
    publishedByUser?: string;
    publishedDate?: Date;
    referenceElementContext?: string;
    shouldDisplayActionButton?: boolean;
    shouldIgnoreGlobalDelay?: boolean;
    startDate?: Date;
    stepNumber?: number;
    targetAppDeveloperName?: string;
    targetAppNamespacePrefix?: string;
    targetPageKey1?: string;
    targetPageKey2?: string;
    targetPageKey3?: string;
    targetPageKey4?: string;
    targetPageType?: string;
    targetRecordType?: string;
    themeColor?: PromptThemeColor;
    themeSaturation?: PromptThemeSaturation;
    timesToDisplay?: number;
    title: string;
    uiFormulaRule?: UiFormulaRule;
    userAccess?: PromptUserAccess;
    userProfileAccess?: PromptUserProfileAccess;
    versionNumber: number;
    videoLink?: string;
}

export type Queue = Metadata &  {
    doesSendEmailToMembers?: boolean;
    email?: string;
    name: string;
    queueMembers?: QueueMembers;
    queueRoutingConfig?: string;
    queueSobject?: QueueSobject | QueueSobject[];
}

export type QueueMembers = {
    publicGroups?: PublicGroups;
    roleAndSubordinates?: RoleAndSubordinates;
    roleAndSubordinatesInternal?: RoleAndSubordinatesInternal;
    roles?: Roles;
    users?: Users;
}

export type PublicGroups = {
    publicGroup?: string | string[];
}

export type RoleAndSubordinates = {
    roleAndSubordinate?: string | string[];
}

export type RoleAndSubordinatesInternal = {
    roleAndSubordinateInternal?: string | string[];
}

export type Roles = {
    role?: string | string[];
}

export type Users = {
    user?: string | string[];
}

export type QueueSobject = {
    sobjectType: string;
}

export type QuickAction = Metadata &  {
    actionSubtype?: ActionSubtype;
    canvas?: string;
    description?: string;
    fieldOverrides?: FieldOverride | FieldOverride[];
    flowDefinition?: string;
    height?: number;
    icon?: string;
    isProtected?: boolean;
    label?: string;
    lightningComponent?: string;
    lightningWebComponent?: string;
    optionsCreateFeedItem: boolean;
    page?: string;
    quickActionLayout?: QuickActionLayout;
    quickActionSendEmailOptions?: QuickActionSendEmailOptions;
    standardLabel?: QuickActionLabel;
    successMessage?: string;
    targetObject?: string;
    targetParentField?: string;
    targetRecordType?: string;
    type: QuickActionType;
    width?: number;
}

export type FieldOverride = {
    field: string;
    formula?: string;
    literalValue?: string;
}

export type QuickActionLayout = {
    layoutSectionStyle: LayoutSectionStyle;
    quickActionLayoutColumns?: QuickActionLayoutColumn | QuickActionLayoutColumn[];
}

export type QuickActionLayoutColumn = {
    quickActionLayoutItems?: QuickActionLayoutItem | QuickActionLayoutItem[];
}

export type QuickActionLayoutItem = {
    emptySpace?: boolean;
    field?: string;
    uiBehavior?: UiBehavior;
}

export type QuickActionSendEmailOptions = {
    defaultEmailTemplateName?: string;
    ignoreDefaultEmailTemplateSubject: boolean;
}

export type RecommendationStrategy = Metadata & sObject &  {
    actionContext?: StrategyAction | StrategyAction[];
    aiLoad?: StrategyNodeAiLoad | StrategyNodeAiLoad[];
    aiSort?: StrategyNodeAiSort | StrategyNodeAiSort[];
    contextRecordType?: string;
    description?: string;
    filter?: StrategyNodeFilter | StrategyNodeFilter[];
    if?: StrategyNodeIf | StrategyNodeIf[];
    invocableAction?: StrategyNodeInvocableAction | StrategyNodeInvocableAction[];
    isTemplate?: boolean;
    label: string;
    map?: StrategyNodeMap | StrategyNodeMap[];
    mutuallyExclusive?: StrategyNodeExclusive | StrategyNodeExclusive[];
    onBehalfOfExpression?: string;
    recommendationLimit?: StrategyNodeRecommendationLimit | StrategyNodeRecommendationLimit[];
    recommendationLoad?: StrategyNodeRecommendationLoad | StrategyNodeRecommendationLoad[];
    sort?: StrategyNodeSort | StrategyNodeSort[];
    union?: StrategyNodeUnion | StrategyNodeUnion[];
}

export type StrategyAction = {
    action: string;
    argument?: StrategyActionArg | StrategyActionArg[];
    description?: string;
    label?: string;
    name: string;
    type: InvocableActionType;
}

export type StrategyActionArg = {
    name: string;
    value: string;
}

export type StrategyNodeAiLoad = StrategyNodeUnionBase &  {
    acceptanceLabel: string;
    actionReference: string;
    descriptionField: string;
    recommendationDefinitionDevName: string;
    rejectionLabel?: string;
    titleField: string;
}

export type StrategyNodeUnionBase = StrategyNodeBase &  {
    limit?: number;
}

export type StrategyNodeBase = {
    childNode?: string | string[];
    description?: string;
    label?: string;
    name: string;
}

export type StrategyNodeAiSort = StrategyNodeUnionBase &  {
}

export type StrategyNodeExclusive = StrategyNodeUnionBase &  {
}

export type StrategyNodeFilter = StrategyNodeUnionBase &  {
    expression: string;
}

export type StrategyNodeIf = StrategyNodeUnionBase &  {
    childNodeExpression?: IfExpression | IfExpression[];
    onlyFirstMatch?: boolean;
}

export type IfExpression = {
    childName: string;
    expression: string;
}

export type StrategyNodeInvocableAction = StrategyNodeUnionBase &  {
    action: string;
    argument?: StrategyNodeInvocableActionArg | StrategyNodeInvocableActionArg[];
    isGenerator: boolean;
    type: InvocableActionType;
}

export type StrategyNodeInvocableActionArg = {
    name: string;
    value: string;
}

export type StrategyNodeMap = StrategyNodeUnionBase &  {
    mapExpression?: MapExpression | MapExpression[];
}

export type MapExpression = {
    expression: string;
    name: string;
    type?: string;
}

export type StrategyNodeRecommendationLimit = StrategyNodeUnionBase &  {
    filterMode?: StrategyReactionType | StrategyReactionType[];
    lookbackDuration?: number;
    maxRecommendationCount?: number;
}

export type StrategyNodeRecommendationLoad = StrategyNodeUnionBase &  {
    condition?: RecommendationLoadCondition | RecommendationLoadCondition[];
    conditionLogic?: string;
    object: string;
    sortField?: StrategyNodeSortField | StrategyNodeSortField[];
}

export type RecommendationLoadCondition = {
    field: string;
    operator: RecommendationConditionOperator;
    value: RecommendationConditionValue;
}

export type RecommendationConditionValue = {
    type: RecommendationConditionValueType;
    value?: string;
}

export type StrategyNodeSortField = {
    name: string;
    nullsFirst?: boolean;
    order?: SortOrder;
}

export type StrategyNodeSort = StrategyNodeUnionBase &  {
    field?: StrategyNodeSortField | StrategyNodeSortField[];
}

export type StrategyNodeUnion = StrategyNodeUnionBase &  {
}

export type RecordActionDeployment = Metadata & sObject &  {
    channelConfigurations?: RecordActionDeploymentChannel | RecordActionDeploymentChannel[];
    componentName?: ComponentName;
    deploymentContexts?: RecordActionDeploymentContext | RecordActionDeploymentContext[];
    hasGuidedActions?: boolean;
    hasOmniscripts?: boolean;
    hasRecommendations?: boolean;
    masterLabel: string;
    recommendation?: RecordActionRecommendation;
    selectableItems?: RecordActionSelectableItem | RecordActionSelectableItem[];
}

export type RecordActionDeploymentChannel = {
    channel: ChannelSource;
    channelItems?: RecordActionDefaultItem | RecordActionDefaultItem[];
    isAutopopEnabled?: boolean;
}

export type RecordActionDefaultItem = {
    action: string;
    isMandatory?: boolean;
    isUiRemoveHidden?: boolean;
    pinned: PinnedAction;
    position: number;
    type: RecordActionType;
}

export type RecordActionDeploymentContext = {
    entityName: string;
    recommendationStrategy?: string;
}

export type RecordActionRecommendation = {
    defaultStrategy?: string;
    hasDescription: boolean;
    hasImage: boolean;
    hasRealtimeRecommendations?: boolean;
    hasRejectAction: boolean;
    hasTitle: boolean;
    maxDisplayRecommendations: number;
    shouldLaunchActionOnReject: boolean;
}

export type RecordActionSelectableItem = {
    action: string;
    frequentActionSequenceNbr?: number;
    isFrequentAction?: boolean;
    type: RecordActionType;
}

export type RecordAggregationDefinition = Metadata & sObject &  {
    aggregateFromObject: string;
    aggregateToObject: string;
    aggregationType: RecordAggregationDefinitionAggregationType;
    batchProcessingDefinition?: string;
    description?: string;
    displayName: string;
    recordAggregationObject?: RecordAggregationObject | RecordAggregationObject[];
    status: RecordAggregationDefinitionStatus;
}

export type RecordAggregationObject = {
    associatedObject: string;
    developerName?: string;
    filterLogic?: string;
    masterLabel: string;
    recordAggregationJoinCondition?: RecordAggregationJoinCondition | RecordAggregationJoinCondition[];
    recordAggregationObjectFilter?: RecordAggregationObjectFilter | RecordAggregationObjectFilter[];
}

export type RecordAggregationJoinCondition = {
    joinField: string;
    navigationSequenceNumber: number;
    relatedJoinField: string;
    relatedRecordAggregationObject: string;
    type: RecordAggregationJoinConditionType;
}

export type RecordAggregationObjectFilter = {
    associatedObjectField: string;
    operator: RecordAggregationObjectFilterOperator;
    sequenceNumber: number;
    value: string;
}

export type RecordAlertCategory = Metadata & sObject &  {
    description?: string;
    masterLabel: string;
    severity?: string;
}

export type RecordType = Metadata & sObject &  {
    active: boolean;
    businessProcess?: string;
    compactLayoutAssignment?: string;
    description?: string;
    label: string;
    picklistValues?: RecordTypePicklistValue | RecordTypePicklistValue[];
}

export type RecordTypePicklistValue = {
    picklist: string;
    values?: PicklistValue | PicklistValue[];
}

export type RedirectWhitelistUrl = Metadata &  {
    url: string;
}

export type ReferencedDashboard = Metadata &  {
    application: string;
    description?: string;
    embedUrl: string;
    masterLabel: string;
    templateAssetSourceName?: string;
    visibility: string;
}

export type RelationshipGraphDefinition = Metadata & sObject &  {
    isActive: boolean;
    isTemplate: boolean;
    masterLabel: string;
    relationshipGraphDefVersions?: RelationshipGraphDefVersion | RelationshipGraphDefVersion[];
}

export type RelationshipGraphDefVersion = {
    graphDefinition: string;
    graphType: string;
}

export type RemoteSiteSetting = Metadata &  {
    description?: string;
    disableProtocolSecurity: boolean;
    isActive: boolean;
    url: string;
}

export type Report = Metadata &  {
    aggregates?: ReportAggregate | ReportAggregate[];
    blockInfo?: ReportBlockInfo;
    buckets?: ReportBucketField | ReportBucketField[];
    chart?: ReportChart;
    colorRanges?: ReportColorRange | ReportColorRange[];
    columns?: ReportColumn | ReportColumn[];
    crossFilters?: ReportCrossFilter | ReportCrossFilter[];
    currency?: CurrencyIsoCode;
    customDetailFormulas?: ReportCustomDetailFormula | ReportCustomDetailFormula[];
    dataCategoryFilters?: ReportDataCategoryFilter | ReportDataCategoryFilter[];
    description?: string;
    division?: string;
    filter?: ReportFilter;
    folderName?: string;
    format: ReportFormat;
    formattingRules?: ReportFormattingRule | ReportFormattingRule[];
    groupingsAcross?: ReportGrouping | ReportGrouping[];
    groupingsDown?: ReportGrouping | ReportGrouping[];
    historicalSelector?: ReportHistoricalSelector;
    name: string;
    numSubscriptions?: number;
    params?: ReportParam | ReportParam[];
    reportType: string;
    reportTypeApiName?: string;
    roleHierarchyFilter?: string;
    rowLimit?: number;
    scope?: string;
    showCurrentDate?: boolean;
    showDetails?: boolean;
    showGrandTotal?: boolean;
    showSubTotals?: boolean;
    sortColumn?: string;
    sortOrder?: SortOrder;
    territoryHierarchyFilter?: string;
    timeFrameFilter?: ReportTimeFrameFilter;
    userFilter?: string;
}

export type ReportAggregate = {
    acrossGroupingContext?: string;
    calculatedFormula: string;
    datatype: ReportAggregateDatatype;
    description?: string;
    developerName: string;
    downGroupingContext?: string;
    isActive: boolean;
    isCrossBlock?: boolean;
    masterLabel: string;
    reportType?: string;
    scale?: number;
}

export type ReportBlockInfo = {
    aggregateReferences?: ReportAggregateReference | ReportAggregateReference[];
    blockId: string;
    joinTable: string;
}

export type ReportAggregateReference = {
    aggregate: string;
}

export type ReportBucketField = {
    bucketType: ReportBucketFieldType;
    developerName: string;
    masterLabel: string;
    nullTreatment?: ReportFormulaNullTreatment;
    otherBucketLabel?: string;
    sourceColumnName: string;
    useOther?: boolean;
    values?: ReportBucketFieldValue | ReportBucketFieldValue[];
}

export type ReportBucketFieldValue = {
    value: string;
}

export type ReportChart = {
    backgroundColor1?: string;
    backgroundColor2?: string;
    backgroundFadeDir?: ChartBackgroundDirection;
    chartSummaries?: ChartSummary | ChartSummary[];
    chartType: ChartType;
    enableHoverLabels?: boolean;
    expandOthers?: boolean;
    groupingColumn?: string;
    legendPosition?: ChartLegendPosition;
    location?: ChartPosition;
    secondaryGroupingColumn?: string;
    showAxisLabels?: boolean;
    showPercentage?: boolean;
    showTotal?: boolean;
    showValues?: boolean;
    size?: ReportChartSize;
    summaryAxisManualRangeEnd?: number;
    summaryAxisManualRangeStart?: number;
    summaryAxisRange?: ChartRangeType;
    textColor?: string;
    textSize?: number;
    title?: string;
    titleColor?: string;
    titleSize?: number;
}

export type ReportColorRange = {
    aggregate?: ReportSummaryType;
    columnName: string;
    highBreakpoint?: number;
    highColor: string;
    lowBreakpoint?: number;
    lowColor: string;
    midColor: string;
}

export type ReportColumn = {
    aggregateTypes?: ReportSummaryType | ReportSummaryType[];
    field: string;
    reverseColors?: boolean;
    showChanges?: boolean;
}

export type ReportCrossFilter = {
    criteriaItems?: ReportFilterItem | ReportFilterItem[];
    operation: ObjectFilterOperator;
    primaryTableColumn: string;
    relatedTable: string;
    relatedTableJoinColumn: string;
}

export type ReportFilterItem = {
    column: string;
    columnToColumn?: boolean;
    isUnlocked?: boolean;
    operator: FilterOperation;
    snapshot?: string;
    value?: string;
}

export type ReportCustomDetailFormula = {
    calculatedFormula: string;
    dataType: string;
    description?: string;
    developerName: string;
    label: string;
    scale: number;
}

export type ReportDataCategoryFilter = {
    dataCategory: string;
    dataCategoryGroup: string;
    operator: DataCategoryFilterOperation;
}

export type ReportFilter = {
    booleanFilter?: string;
    criteriaItems?: ReportFilterItem | ReportFilterItem[];
    language?: Language;
}

export type ReportFormattingRule = {
    aggregate?: ReportSummaryType;
    columnName: string;
    values?: ReportFormattingRuleValue | ReportFormattingRuleValue[];
}

export type ReportFormattingRuleValue = {
    backgroundColor?: string;
    rangeUpperBound?: number;
}

export type ReportGrouping = {
    aggregateType?: ReportAggrType;
    dateGranularity?: UserDateGranularity;
    field: string;
    sortByName?: string;
    sortOrder: SortOrder;
    sortType?: ReportSortType;
}

export type ReportHistoricalSelector = {
    snapshot?: string | string[];
}

export type ReportParam = {
    name: string;
    value: string;
}

export type ReportTimeFrameFilter = {
    dateColumn: string;
    endDate?: Date;
    interval: UserDateInterval;
    startDate?: Date;
}

export type ReportType = Metadata &  {
    autogenerated?: boolean;
    baseObject: string;
    category: ReportTypeCategory;
    deployed: boolean;
    description?: string;
    join?: ObjectRelationship;
    label: string;
    sections?: ReportLayoutSection | ReportLayoutSection[];
}

export type ObjectRelationship = {
    join?: ObjectRelationship;
    outerJoin: boolean;
    relationship: string;
}

export type ReportLayoutSection = {
    columns?: ReportTypeColumn | ReportTypeColumn[];
    masterLabel: string;
}

export type ReportTypeColumn = {
    checkedByDefault: boolean;
    displayNameOverride?: string;
    field: string;
    table: string;
}

export type RestrictionRule = Metadata & sObject &  {
    active: boolean;
    dataspaceScope?: string;
    description?: string;
    enforcementType: EnforcementType;
    masterLabel: string;
    recordFilter: string;
    targetEntity: string;
    userCriteria?: string;
    version: number;
}

export type RoleOrTerritory = Metadata &  {
    caseAccessLevel?: string;
    contactAccessLevel?: string;
    description?: string;
    mayForecastManagerShare?: boolean;
    name: string;
    opportunityAccessLevel?: string;
}

export type Role = RoleOrTerritory &  {
    parentRole?: string;
}

export type Territory = RoleOrTerritory &  {
    accountAccessLevel?: string;
    parentTerritory?: string;
}

export type RuleLibraryDefinition = Metadata & sObject &  {
    contextDefinition: string;
    contextRuleStatus: ContextRuleStatus;
    description?: string;
    label: string;
    rulesetDefinitions?: RulesetDefinition | RulesetDefinition[];
    usageType: ContextRuleUsageType;
}

export type RulesetDefinition = Metadata & sObject &  {
    endDate?: Date;
    executionType: ExecutionType;
    label: string;
    ruleDefinitions?: RuleDefinition | RuleDefinition[];
    startDate?: Date;
    status: ContextRuleStatus;
}

export type RuleDefinition = Metadata & sObject &  {
    actions?: RuleAction | RuleAction[];
    criteria?: RuleFilterCriteria | RuleFilterCriteria[];
    description?: string;
    endDate?: Date;
    label: string;
    ruleCategory: RuleCategory;
    ruleStatus: ContextRuleStatus;
    sequenceNumber: number;
    startDate: Date;
    variables?: RuleReferenceVariable | RuleReferenceVariable[];
}

export type RuleAction = {
    actionParameters?: RuleActionParameter | RuleActionParameter[];
    actionType: RuleActionType;
    name: string;
    sequenceNumber: number;
}

export type RuleActionParameter = {
    name: string;
    sequenceNumber: number;
    sourceCriteriName?: string;
    value: string;
    valueType: VariableValueType;
}

export type RuleFilterCriteria = {
    actions?: RuleAction | RuleAction[];
    conditionLogic: string;
    conditions?: RuleCondition | RuleCondition[];
    executionSequence: number;
    name: string;
    parentFilterCriteria?: string;
    type: RuleFilterCriteriaType;
}

export type RuleCondition = {
    name?: string;
    operator: RuleConditionOperator;
    sequenceNumber: number;
    value?: string | string[];
    valueType: VariableValueType;
    variable: string;
}

export type RuleReferenceVariable = {
    contextTag?: string;
    dataType: RuleRefVariableDataType;
    decimalPlaces?: number;
    name: string;
    type: RuleRefVariableType;
    value?: string;
}

export type SalesAgreementSettings = Metadata & sObject &  {
    actualsCalculationMode: ActualsCalculationMode;
    displayGroups?: AdvAcctFrcstDisplayGroup | AdvAcctFrcstDisplayGroup[];
    displayedAgreementTermsMetrics: string;
    isOnlyApprovalProcessUsed: boolean;
    measureDefinitions?: AdvAcctForecastMeasureDef | AdvAcctForecastMeasureDef[];
    objectMapping?: ObjectMapping;
    primaryNotifEmailAddress?: string;
    renewalPeriodDayCount?: number;
    secondaryNotifEmailAddress?: string;
}

export type SalesWorkQueueSettings = Metadata &  {
    featureName: string;
    targetEntity: string;
    targetField: string;
}

export type SamlSsoConfig = Metadata &  {
    attributeName?: string;
    attributeNameIdFormat?: string;
    decryptionCertificate?: string;
    errorUrl?: string;
    executionUserId?: string;
    identityLocation: SamlIdentityLocationType;
    identityMapping: SamlIdentityType;
    issuer: string;
    loginUrl?: string;
    logoutUrl?: string;
    name: string;
    oauthTokenEndpoint?: string;
    redirectBinding?: boolean;
    requestSignatureMethod?: string;
    requestSigningCertId?: string;
    salesforceLoginUrl?: string;
    samlEntityId: string;
    samlJitHandlerId?: string;
    samlVersion: SamlType;
    singleLogoutBinding?: SamlSpSLOBinding;
    singleLogoutUrl?: string;
    useConfigRequestMethod?: boolean;
    useSameDigestAlgoForSigning?: boolean;
    userProvisioning?: boolean;
    validationCert: string;
}

export type Schema = Metadata &  {
    description?: string;
    schemaContentType: PlatformSchemaContentType;
    sequenceNumber: number;
}

export type SchemaDefinition = Metadata &  {
    description?: string;
    domainType: DomainType;
}

export type Scontrol = Metadata & sObject &  {
    contentSource: SControlContentSource;
    description?: string;
    encodingKey: Encoding;
    fileContent?: string;
    fileName?: string;
    name: string;
    supportsCaching: boolean;
}

export type ScoreCategory = Metadata & sObject &  {
    categoryName: string;
    description: string;
    developerName: string;
    iconUrl: string;
    masterLabel: string;
    parentCategoryId?: string;
    scoreCategoryCalcInsights?: ScoreCategoryCalcInsight | ScoreCategoryCalcInsight[];
    scoreRangeClassifications?: ScoreRangeClassification | ScoreRangeClassification[];
}

export type ScoreCategoryCalcInsight = {
    insightDateFieldName: string;
    insightName: string;
    insightScoreFieldName: string;
    insightSubjectFieldName: string;
}

export type ScoreRangeClassification = {
    classificationName: string;
    colorHexadecimalCode: string;
    rangeEndValue: number;
    rangeStartValue: number;
}

export type SearchCriteriaConfiguration = Metadata & sObject &  {
    actionList?: string;
    aggrCriteriaFieldset?: FieldSet;
    description?: string;
    distanceCriteria?: string;
    filterType?: SearchCriteriaConfigurationFilterType;
    isActive?: boolean;
    masterLabel: string;
    resultDisplayFormat?: SearchCriteriaConfigurationResultDisplayFormat;
    resultFieldset?: FieldSet;
    resultFlexCard?: string;
    searchCriteriaFieldset?: FieldSet;
    searchableObjDataSyncInfo?: string;
    searchableObject: string;
    sortingCriteriaFieldset?: FieldSet;
}

export type SearchCustomization = Metadata & sObject &  {
    channel: string;
    isProtected?: boolean;
    masterLabel: string;
}

export type SearchResultActionConfig = Metadata & sObject &  {
    actionReference: string;
    actionScope: SearchResultActionScope;
    actionType: SearchResultActionType;
    description?: string;
    masterLabel: string;
}

export type SearchableObjDataSyncInfo = Metadata & sObject &  {
    dataSyncActive?: boolean;
    dataSyncJob?: string;
    description?: string;
    displayFieldSet?: FieldSet;
    lastDataSyncRunDate?: string;
    lookupMappings?: ObjectMapping;
    masterLabel: string;
    parsingFieldSet?: FieldSet;
    picklistMappings?: ObjectMapping | ObjectMapping[];
    scheduleFrequencyInHours?: string;
    searchableObject: string;
}

export type ServiceAISetupDefinition = Metadata & sObject &  {
    appSourceType: ApplicationSourceType;
    name: string;
    setupStatus: ServiceAISetupDefStatus;
    supportedLanguages?: string;
}

export type ServiceAISetupField = Metadata & sObject &  {
    entity: string;
    field: string;
    fieldMappingType: ServiceAISetupFieldType;
    fieldPosition: number;
    name: string;
    setupDefinition: string;
}

export type ServiceProcess = Metadata &  {
    description?: string;
    processLabel: string;
    serviceProcessAttributes?: ServiceProcessAttribute | ServiceProcessAttribute[];
    serviceProcessDependencies?: ServiceProcessDependency | ServiceProcessDependency[];
    serviceProcessItemGroups?: ServiceProcessItemGroup | ServiceProcessItemGroup[];
    shortDescription?: string;
    usageType: SvcCatalogItemUsageType;
}

export type ServiceProcessAttribute = {
    attributeType?: SvcCtlgItemAttrAttributeType;
    baseObjectApiName?: string;
    dataType?: SvcCatalogItemAttrDataType;
    description?: string;
    developerName: string;
    fieldIdentifier?: string;
    groupApiName: string;
    inputVariableValue?: string;
    isAttrValueDerivAtRuntime?: boolean;
    isRequired?: boolean;
    label: string;
    parentAttribute?: string;
    referenceObjectApiName?: string;
    sortOrder?: number;
}

export type ServiceProcessDependency = {
    dependencyReference: string;
    type: SvcCatalogItemDependencyType;
}

export type ServiceProcessItemGroup = {
    apiName: string;
    groupName: string;
    sortOrder: number;
}

export type SharingBaseRule = Metadata &  {
    accessLevel: string;
    accountSettings?: AccountSharingRuleSettings;
    description?: string;
    label: string;
    sharedTo: SharedTo;
}

export type AccountSharingRuleSettings = {
    caseAccessLevel: string;
    contactAccessLevel: string;
    opportunityAccessLevel: string;
}

export type SharingOwnerRule = SharingBaseRule &  {
    sharedFrom: SharedTo;
}

export type SharingTerritoryRule = SharingOwnerRule &  {
}

export type SharingReason = Metadata &  {
    label: string;
}

export type SharingSet = Metadata &  {
    accessMappings?: AccessMapping | AccessMapping[];
    description?: string;
    name: string;
    profiles?: string | string[];
}

export type AccessMapping = {
    accessLevel: string;
    object: string;
    objectField: string;
    userField: string;
}

export type SiteDotCom = Metadata &  {
    label: string;
    siteType: SiteType;
}

export type Skill = Metadata &  {
    assignments?: SkillAssignments;
    description?: string;
    label: string;
    skillType?: string;
}

export type SkillAssignments = {
    profiles?: SkillProfileAssignments;
    users?: SkillUserAssignments;
}

export type SkillProfileAssignments = {
    profile?: string | string[];
}

export type SkillUserAssignments = {
    user?: string | string[];
}

export type SkillType = Metadata & sObject &  {
    masterLabel: string;
}

export type SlackApp = Metadata & sObject &  {
    apiVersion?: number;
    appKey: string;
    appToken: string;
    botScopes?: string;
    clientKey: string;
    clientSecret: string;
    config: string;
    isProtected?: boolean;
    masterLabel: string;
    signingSecret: string;
    userScopes?: string;
}

export type SlackRecordLayout = Metadata & sObject &  {
    isProtected?: boolean;
    masterLabel: string;
    sobjectType: string;
    viewMode: SlackRecordLayoutViewMode;
}

export type StandardValueSet = Metadata & sObject &  {
    groupingStringEnum?: string;
    sorted: boolean;
    standardValue?: StandardValue | StandardValue[];
}

export type StaticResource = Metadata & sObject &  {
    cacheControl: StaticResourceCacheControl;
    contentType: string;
    description?: string;
}

export type StnryAssetEnvSrcCnfg = Metadata & sObject &  {
    recordType: string;
    stationaryAssetType: StationaryAssetType;
}

export type StreamingAppDataConnector = Metadata &  {
    appIdentifier: string;
    dataConnectorType: DataConnectorType;
    isProtected?: boolean;
    masterLabel: string;
}

export type SustainabilityUom = Metadata & sObject &  {
    description?: string;
    isProductUom?: boolean;
    isProtected?: boolean;
    isStationaryAssetUom?: boolean;
    isVehicleAssetUom?: boolean;
    masterLabel: string;
    unitType: UnitType;
}

export type SustnUomConversion = Metadata & sObject &  {
    conversionFactor: number;
    fuelType?: string;
    isProtected?: boolean;
    masterLabel?: string;
    sourceUom: string;
    targetUom: string;
    uomsKey?: string;
}

export type SvcCatalogCategory = Metadata & sObject &  {
    image?: string;
    isActive?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    parentCategory?: string;
    sortOrder?: number;
}

export type SvcCatalogFilterCriteria = Metadata & sObject &  {
    conditions?: SvcCatalogFilterCondition | SvcCatalogFilterCondition[];
    criteriaRelation: CriteriaRelationshipType;
    description?: string;
    isActive?: boolean;
    mainLabel: string;
}

export type SvcCatalogFilterCondition = {
    index: number;
    operator: CriterionOperator;
    source: string;
    value: string;
}

export type SvcCatalogFulfillmentFlow = Metadata & sObject &  {
    description: string;
    flow: string;
    icon?: string;
    isProtected?: boolean;
    items?: SvcCatalogFulfillFlowItem | SvcCatalogFulfillFlowItem[];
    masterLabel: string;
}

export type SvcCatalogFulfillFlowItem = {
    catalogInputVariable: string;
    displayType?: PropertyDisplayType;
    fieldDefinition?: string;
    fieldLookupDomain?: string;
    isAdditionalQuestionsInputVariable?: boolean;
    isRequired?: boolean;
    lookupDomainFieldType?: string;
    masterLabel: string;
    objectLookupDomain?: string;
}

export type SvcCatalogItemDef = Metadata & sObject &  {
    apiVersion?: number;
    catalogFilterCriteria?: SvcCatalogItemDefFiltrCrit | SvcCatalogItemDefFiltrCrit[];
    categories?: SvcCatalogCategoryItem | SvcCatalogCategoryItem[];
    dataCategories?: SvcCatalogItemDefDataCategorySelection | SvcCatalogItemDefDataCategorySelection[];
    description?: string;
    fulfillmentFlow?: string;
    image?: string;
    inputs?: SvcCatalogItemAttribute | SvcCatalogItemAttribute[];
    internalNotes?: string;
    isFeatured?: boolean;
    isProtected?: boolean;
    masterLabel: string;
    sharedTo?: SharedTo;
    status: PublishStatusType;
}

export type SvcCatalogItemDefFiltrCrit = {
    svcCatalogFilterCriteria: string;
}

export type SvcCatalogCategoryItem = {
    isPrimaryCategory?: boolean;
    sortOrder?: number;
    svcCatalogCategory: string;
}

export type SvcCatalogItemDefDataCategorySelection = {
    category: string;
    categoryGroup: string;
}

export type SvcCatalogItemAttribute = {
    field?: string;
    inputType: SvcCatalogItemAttrDataType;
    inputVariable?: string;
    isRequired: boolean;
    label: string;
    maxValue?: number;
    minValue?: number;
    name: string;
    object?: string;
    options?: SvcCatalogItemAttrDetail | SvcCatalogItemAttrDetail[];
    type: SvcCatalogItemAttrType;
    value?: string;
}

export type SvcCatalogItemAttrDetail = {
    isDefault: boolean;
    label: string;
    value: string;
}

export type SynonymDictionary = Metadata &  {
    groups?: SynonymGroup | SynonymGroup[];
    isProtected?: boolean;
    label: string;
}

export type Territory2 = Metadata &  {
    accountAccessLevel?: string;
    caseAccessLevel?: string;
    contactAccessLevel?: string;
    customFields?: FieldValue | FieldValue[];
    description?: string;
    name: string;
    objectAccessLevels?: Territory2AccessLevel | Territory2AccessLevel[];
    opportunityAccessLevel?: string;
    parentTerritory?: string;
    ruleAssociations?: Territory2RuleAssociation | Territory2RuleAssociation[];
    territory2Type: string;
}

export type FieldValue = {
    name: string;
}

export type Territory2AccessLevel = {
    accessLevel: string;
    objectType: string;
}

export type Territory2RuleAssociation = {
    inherited: boolean;
    ruleName: string;
}

export type Territory2Model = Metadata &  {
    customFields?: FieldValue | FieldValue[];
    description?: string;
    name: string;
}

export type Territory2Rule = Metadata &  {
    active: boolean;
    booleanFilter?: string;
    name: string;
    objectType: string;
    ruleItems?: Territory2RuleItem | Territory2RuleItem[];
}

export type Territory2RuleItem = {
    field: string;
    operation: FilterOperation;
    value?: string;
}

export type Territory2Type = Metadata &  {
    description?: string;
    name: string;
    priority: number;
}

export type TimeSheetTemplate = Metadata & sObject &  {
    active: boolean;
    description?: string;
    frequency: TimeSheetFrequency;
    masterLabel: string;
    startDate: Date;
    timeSheetTemplateAssignments?: TimeSheetTemplateAssignment | TimeSheetTemplateAssignment[];
    workWeekEndDay: DaysOfWeek;
    workWeekStartDay: DaysOfWeek;
}

export type TimeSheetTemplateAssignment = {
    assignedTo?: string;
}

export type TimelineObjectDefinition = Metadata & sObject &  {
    baseObject: string;
    definition: string;
    isActive?: boolean;
    masterLabel: string;
}

export type TopicsForObjects = Metadata &  {
    enableTopics: boolean;
    entityApiName: string;
}

export type TransactionSecurityPolicy = Metadata & sObject &  {
    action: TransactionSecurityAction;
    active: boolean;
    apexClass?: string;
    blockMessage?: string;
    customEmailContent?: string;
    description?: string;
    developerName?: string;
    eventName?: TransactionSecurityEventName;
    eventType?: MonitoredEvents;
    executionUser?: string;
    flow?: string;
    masterLabel?: string;
    resourceName?: string;
    type?: TxnSecurityPolicyType;
}

export type TransactionSecurityAction = {
    block: boolean;
    endSession: boolean;
    freezeUser: boolean;
    notifications?: TransactionSecurityNotification | TransactionSecurityNotification[];
    twoFactorAuthentication: boolean;
}

export type TransactionSecurityNotification = {
    inApp: boolean;
    sendEmail: boolean;
    user: string;
}

export type Translations = Metadata &  {
    botBlocks?: BotBlockTranslation | BotBlockTranslation[];
    botTemplates?: BotTemplateTranslation | BotTemplateTranslation[];
    bots?: BotTranslation | BotTranslation[];
    customApplications?: CustomApplicationTranslation | CustomApplicationTranslation[];
    customLabels?: CustomLabelTranslation | CustomLabelTranslation[];
    customPageWebLinks?: CustomPageWebLinkTranslation | CustomPageWebLinkTranslation[];
    customTabs?: CustomTabTranslation | CustomTabTranslation[];
    desFieldTemplateMessages?: ExplainabilityMsgTemplateFieldTranslation | ExplainabilityMsgTemplateFieldTranslation[];
    flowDefinitions?: FlowDefinitionTranslation | FlowDefinitionTranslation[];
    identityVerificationCustomFieldLabels?: IdentityVerificationFieldTranslation | IdentityVerificationFieldTranslation[];
    pipelineInspMetricConfigs?: PipelineInspMetricConfigTranslation | PipelineInspMetricConfigTranslation[];
    prompts?: PromptTranslation | PromptTranslation[];
    quickActions?: GlobalQuickActionTranslation | GlobalQuickActionTranslation[];
    reportTypes?: ReportTypeTranslation | ReportTypeTranslation[];
    scontrols?: ScontrolTranslation | ScontrolTranslation[];
}

export type BotBlockTranslation = {
    botBlockVersions?: BotBlockVersionTranslation | BotBlockVersionTranslation[];
    fullName: string;
}

export type BotBlockVersionTranslation = {
    botDialogs?: BotDialogTranslation | BotDialogTranslation[];
    fullName: string;
}

export type BotDialogTranslation = {
    botSteps?: BotStepTranslation | BotStepTranslation[];
    developerName: string;
    label?: string;
}

export type BotStepTranslation = {
    botMessages?: BotMessageTranslation | BotMessageTranslation[];
    botSteps?: BotStepTranslation | BotStepTranslation[];
    botVariableOperation?: BotVariableOperationTranslation;
    stepIdentifier: string;
    type: BotStepType;
}

export type BotMessageTranslation = {
    message?: string;
    messageIdentifier: string;
}

export type BotVariableOperationTranslation = {
    botMessages?: BotMessageTranslation | BotMessageTranslation[];
    botQuickReplyOptions?: BotQuickReplyOptionTranslation | BotQuickReplyOptionTranslation[];
    quickReplyOptionTemplate?: string;
    retryMessages?: BotMessageTranslation | BotMessageTranslation[];
    successMessages?: BotMessageTranslation | BotMessageTranslation[];
    type: BotVariableOperationType;
    variableOperationIdentifier: string;
}

export type BotQuickReplyOptionTranslation = {
    literalValue?: string;
    quickReplyOptionIdentifier: string;
}

export type BotTemplateTranslation = {
    botDialogs?: BotDialogTranslation | BotDialogTranslation[];
    fullName: string;
}

export type BotTranslation = {
    botVersions?: BotVersionTranslation | BotVersionTranslation[];
    fullName: string;
}

export type BotVersionTranslation = {
    botDialogs?: BotDialogTranslation | BotDialogTranslation[];
    fullName: string;
}

export type CustomApplicationTranslation = {
    description: string;
    label: string;
    name: string;
}

export type CustomLabelTranslation = {
    label: string;
    name: string;
}

export type CustomPageWebLinkTranslation = {
    label: string;
    name: string;
}

export type CustomTabTranslation = {
    label: string;
    name: string;
}

export type ExplainabilityMsgTemplateFieldTranslation = {
    description?: string;
    label?: string;
    name: string;
    templateMessage?: string;
}

export type FlowDefinitionTranslation = {
    flows?: FlowTranslation | FlowTranslation[];
    fullName: string;
    label?: string;
}

export type FlowTranslation = {
    choices?: FlowChoiceTranslation | FlowChoiceTranslation[];
    customErrorMessages?: FlowCustomErrorMessageTranslation | FlowCustomErrorMessageTranslation[];
    fullName?: string;
    label?: string;
    screens?: FlowScreenTranslation | FlowScreenTranslation[];
    stages?: FlowStageTranslation | FlowStageTranslation[];
    textTemplates?: FlowTextTemplateTranslation | FlowTextTemplateTranslation[];
}

export type FlowChoiceTranslation = {
    choiceText?: string;
    name: string;
    userInput?: FlowChoiceUserInputTranslation;
}

export type FlowChoiceUserInputTranslation = {
    promptText?: string;
    validationRule?: FlowInputValidationRuleTranslation;
}

export type FlowInputValidationRuleTranslation = {
    errorMessage?: string;
}

export type FlowCustomErrorMessageTranslation = {
    developerName: string;
    errorMessage?: string;
    field?: string;
}

export type FlowScreenTranslation = {
    backButtonLabel?: string;
    fields?: FlowScreenFieldTranslation | FlowScreenFieldTranslation[];
    helpText?: string;
    name: string;
    nextOrFinishButtonLabel?: string;
    pauseButtonLabel?: string;
    pausedText?: string;
}

export type FlowScreenFieldTranslation = {
    fieldText?: string;
    helpText?: string;
    inputParameters?: FlowInputParameterTranslation | FlowInputParameterTranslation[];
    name: string;
    validationRule?: FlowInputValidationRuleTranslation;
}

export type FlowInputParameterTranslation = {
    name: string;
    value: FlowFerovTranslation;
}

export type FlowFerovTranslation = {
    complexValues?: FlowComplexLiteralTranslation | FlowComplexLiteralTranslation[];
    stringValue?: string;
}

export type FlowComplexLiteralTranslation = {
    customAspectKey?: string;
    value?: string;
}

export type FlowStageTranslation = {
    label?: string;
    name: string;
}

export type FlowTextTemplateTranslation = {
    name: string;
    text?: string;
}

export type IdentityVerificationFieldTranslation = {
    customFieldLabel?: string;
    description?: string;
    label?: string;
    name: string;
}

export type PipelineInspMetricConfigTranslation = {
    label: string;
    name: string;
}

export type PromptTranslation = {
    description?: string;
    label?: string;
    name: string;
    promptVersions?: PromptVersionTranslation | PromptVersionTranslation[];
}

export type PromptVersionTranslation = {
    actionButtonLabel?: string;
    actionButtonLink?: string;
    body?: string;
    description?: string;
    dismissButtonLabel?: string;
    header?: string;
    imageAltText?: string;
    imageLink?: string;
    label?: string;
    name: string;
    stepNumber?: number;
    title?: string;
    videoLink?: string;
}

export type GlobalQuickActionTranslation = {
    aspect?: string;
    label: string;
    name: string;
}

export type ReportTypeTranslation = {
    description?: string;
    label?: string;
    name: string;
    sections?: ReportTypeSectionTranslation | ReportTypeSectionTranslation[];
}

export type ReportTypeSectionTranslation = {
    columns?: ReportTypeColumnTranslation | ReportTypeColumnTranslation[];
    label?: string;
    name: string;
}

export type ReportTypeColumnTranslation = {
    label: string;
    name: string;
}

export type ScontrolTranslation = {
    label: string;
    name: string;
}

export type UIObjectRelationConfig = Metadata & sObject &  {
    UIObjectRelationFieldConfigs?: UIObjectRelationFieldConfig | UIObjectRelationFieldConfig[];
    contextObject: string;
    contextObjectRecordType?: string;
    directRelationshipField?: string;
    indirectObjectContextField?: string;
    indirectObjectRelatedField?: string;
    indirectRelationshipObject?: string;
    isActive?: boolean;
    masterLabel: string;
    relatedObject: string;
    relatedObjectRecordType?: string;
    relationshipType: ObjectRelationshipType;
}

export type UIObjectRelationFieldConfig = {
    displayLabel: string;
    queryText: string;
    rowOrder: number;
}

export type UiPlugin = Metadata & sObject &  {
    description?: string;
    extensionPointIdentifier: string;
    isEnabled: boolean;
    language: string;
    masterLabel: string;
}

export type UiViewDefinition = Metadata &  {
    content: string;
    type: FlexiPageType;
}

export type UserAccessPolicy = Metadata & sObject &  {
    booleanFilter: string;
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    status: UserAccessPolicyStatus;
    triggerType?: UserAccessPolicyTriggerType;
    userAccessPolicyActions?: UserAccessPolicyAction | UserAccessPolicyAction[];
    userAccessPolicyFilters?: UserAccessPolicyFilter | UserAccessPolicyFilter[];
}

export type UserAccessPolicyAction = {
    action: UserAccessPolicyActionType;
    target: string;
    type: UserAccessPolicyActionTargetType;
}

export type UserAccessPolicyFilter = {
    columnName?: string;
    operation: UserAccessPolicyFilterOperation;
    sortOrder: number;
    target: string;
    type: UserAccessPolicyFilterTargetType;
    value?: string;
}

export type UserAuthCertificate = Metadata &  {
    developerName: string;
    expirationDate?: Date;
    masterLabel: string;
    serialNumber: string;
    user: string;
}

export type UserCriteria = Metadata & sObject &  {
    creationAgeInSeconds?: number;
    description?: string;
    lastChatterActivityAgeInSeconds?: number;
    masterLabel: string;
    profiles?: string | string[];
    userTypes?: NetworkUserType | NetworkUserType[];
}

export type UserLicenseDefinition = Metadata &  {
    cloudServiceProvider?: string;
    defaultLicenseDuration?: number;
    defaultStatus?: DefaultLicenseStatus;
    description?: string;
    hasDynamicResourceGroupKey?: boolean;
    includedFeatures?: IncludedFeature | IncludedFeature[];
    isPermissionSetLicense?: boolean;
    licenseKey?: string;
    licenseOwner?: string;
    licensingAuthority?: string;
    managementServiceProvider?: string;
    managementTenantId?: string;
    minPlatformVersion?: number;
    name: string;
    settingItems?: SettingItem | SettingItem[];
    settingUsageDefinitions?: SettingUsageDefinition | SettingUsageDefinition[];
    standardPermissionSets?: StandardPermissionSet | StandardPermissionSet[];
}

export type StandardPermissionSet = {
    developerName: string;
    isSessionBased?: boolean;
    namespace?: string;
    profileKey?: string;
    requiredAccessCheck?: string;
    settingValues?: SettingValue | SettingValue[];
}

export type SettingValue = {
    durableId: string;
    value: string;
}

export type UserProfileSearchScope = Metadata & sObject &  {
    entityApiNames?: string | string[];
    profile?: string;
}

export type UserProvisioningConfig = Metadata & sObject &  {
    approvalRequired?: string;
    connectedApp: string;
    enabled?: boolean;
    enabledOperations?: string;
    flow?: string;
    masterLabel: string;
    namedCredential?: string;
    notes?: string;
    onUpdateAttributes?: string;
    reconFilter?: string;
    userAccountMapping?: string;
}

export type ValidationRule = Metadata & sObject &  {
    active: boolean;
    description?: string;
    errorConditionFormula: string;
    errorDisplayField?: string;
    errorMessage: string;
    shouldEvaluateOnClient?: boolean;
}

export type VehicleAssetEmssnSrcCnfg = Metadata & sObject &  {
    recordType: string;
    vehicleAssetType: VehicleAssetType;
}

export type ViewDefinition = Metadata & sObject &  {
    apiVersion?: number;
    content: string;
    description?: string;
    isProtected?: boolean;
    masterLabel: string;
    targetType: ViewTargetType;
}

export type VisualizationPlugin = Metadata &  {
    description?: string;
    developerName: string;
    icon: string;
    masterLabel: string;
    visualizationResources?: VisualizationResource | VisualizationResource[];
    visualizationTypes?: VisualizationType | VisualizationType[];
}

export type VisualizationResource = {
    description?: string;
    file: string;
    rank?: number;
    type: VisualizationResourceType;
}

export type VisualizationType = {
    description?: string;
    developerName: string;
    icon: string;
    masterLabel: string;
    scriptBootstrapMethod?: string;
}

export type WaveAnalyticAssetCollection = Metadata &  {
    collectionType: string;
    color: string;
    description?: string;
    folder?: string;
    items?: WaveAnalyticAssetCollectionItem | WaveAnalyticAssetCollectionItem[];
    label: string;
    masterLabel: string;
    shares?: FolderShare | FolderShare[];
}

export type WaveAnalyticAssetCollectionItem = {
    asset?: string;
    assetType?: string;
    sortOrder?: number;
}

export type WaveApplication = Metadata &  {
    assetIcon?: string;
    description?: string;
    folder: string;
    masterLabel: string;
    shares?: FolderShare | FolderShare[];
    templateOrigin?: string;
    templateVersion?: string;
}

export type WaveDashboard = Metadata &  {
    application: string;
    dateVersion?: number;
    description?: string;
    masterLabel: string;
    templateAssetSourceName?: string;
}

export type WaveComponent = WaveDashboard &  {
}

export type WaveDataflow = Metadata &  {
    application?: string;
    dataflowType?: string;
    description?: string;
    masterLabel: string;
}

export type WaveDataset = Metadata &  {
    application: string;
    description?: string;
    masterLabel: string;
    templateAssetSourceName?: string;
    type?: string;
}

export type WaveLens = Metadata &  {
    application: string;
    datasets?: string | string[];
    dateVersion?: number;
    description?: string;
    masterLabel: string;
    templateAssetSourceName?: string;
    visualizationType: string;
}

export type WaveRecipe = Metadata &  {
    application?: string;
    dataflow: string;
    format?: string;
    masterLabel: string;
    securityPredicate?: string;
    targetDatasetAlias?: string;
    templateAssetSourceName?: string;
}

export type WaveTemplateBundle = Metadata &  {
    assetIcon?: string;
    assetVersion?: number;
    description?: string;
    label: string;
    templateType: string;
}

export type WaveTemplateDetailsMetadata = Metadata &  {
}

export type WaveTemplateExternalDataMetadata = Metadata &  {
    edgemartLabel: string;
    format: string;
    label: string;
    simulatedRowCount?: number;
}

export type WaveTemplateLensDashboardMetadata = Metadata &  {
}

export type WaveXmd = Metadata &  {
    application?: string;
    dataset: string;
    datasetConnector?: string;
    datasetFullyQualifiedName?: string;
    dates?: WaveXmdDate | WaveXmdDate[];
    dimensions?: WaveXmdDimension | WaveXmdDimension[];
    measures?: WaveXmdMeasure | WaveXmdMeasure[];
    organizations?: WaveXmdOrganization | WaveXmdOrganization[];
    origin?: string;
    type?: string;
    waveVisualization?: string;
}

export type WaveXmdDate = {
    alias: string;
    compact?: boolean;
    dateFieldDay?: string;
    dateFieldEpochDay?: string;
    dateFieldEpochSecond?: string;
    dateFieldFiscalMonth?: string;
    dateFieldFiscalQuarter?: string;
    dateFieldFiscalWeek?: string;
    dateFieldFiscalYear?: string;
    dateFieldFullYear?: string;
    dateFieldHour?: string;
    dateFieldMinute?: string;
    dateFieldMonth?: string;
    dateFieldQuarter?: string;
    dateFieldSecond?: string;
    dateFieldWeek?: string;
    dateFieldYear?: string;
    description?: string;
    firstDayOfWeek: number;
    fiscalMonthOffset: number;
    isYearEndFiscalYear?: boolean;
    label?: string;
    showInExplorer?: boolean;
    sortIndex: number;
    type: string;
}

export type WaveXmdDimension = {
    conditionalFormatting?: WaveXmdFormattingProperty | WaveXmdFormattingProperty[];
    customActions?: WaveXmdDimensionCustomAction | WaveXmdDimensionCustomAction[];
    customActionsEnabled?: boolean;
    dateFormat?: string;
    defaultAction?: string;
    description?: string;
    field: string;
    fullyQualifiedName?: string;
    imageTemplate?: string;
    isDerived: boolean;
    isMultiValue?: boolean;
    label?: string;
    linkTemplate?: string;
    linkTemplateEnabled?: boolean;
    linkTooltip?: string;
    members?: WaveXmdDimensionMember | WaveXmdDimensionMember[];
    origin?: string;
    recordDisplayFields?: WaveXmdRecordDisplayLookup | WaveXmdRecordDisplayLookup[];
    recordIdField?: string;
    recordOrganizationIdField?: string;
    salesforceActions?: WaveXmdDimensionSalesforceAction | WaveXmdDimensionSalesforceAction[];
    salesforceActionsEnabled?: boolean;
    showDetailsDefaultFieldIndex?: number;
    showInExplorer?: boolean;
    sortIndex: number;
}

export type WaveXmdFormattingProperty = {
    formattingBins?: WaveXmdFormattingBin | WaveXmdFormattingBin[];
    formattingPredicates?: WaveXmdFormattingPredicate | WaveXmdFormattingPredicate[];
    property: string;
    referenceField: string;
    sortIndex: number;
    type: string;
}

export type WaveXmdFormattingBin = {
    bin: string;
    formatValue: string;
    label: string;
    sortIndex: number;
}

export type WaveXmdFormattingPredicate = {
    formatValue: string;
    operator: string;
    sortIndex: number;
    value: string;
}

export type WaveXmdDimensionCustomAction = {
    customActionName: string;
    enabled: boolean;
    icon?: string;
    method?: string;
    sortIndex: number;
    target?: string;
    tooltip?: string;
    url?: string;
}

export type WaveXmdDimensionMember = {
    color?: string;
    label?: string;
    member: string;
    sortIndex: number;
}

export type WaveXmdRecordDisplayLookup = {
    recordDisplayField: string;
    sortIndex: number;
}

export type WaveXmdDimensionSalesforceAction = {
    enabled: boolean;
    salesforceActionName: string;
    sortIndex: number;
}

export type WaveXmdMeasure = {
    conditionalFormatting?: WaveXmdFormattingProperty | WaveXmdFormattingProperty[];
    currencies?: WaveXmdMeasure | WaveXmdMeasure[];
    currencyCode?: string;
    dateFormat?: string;
    description?: string;
    field: string;
    formatCustomFormat?: string;
    formatDecimalDigits?: number;
    formatDecimalSeparator?: string;
    formatIsNegativeParens?: boolean;
    formatPrefix?: string;
    formatSuffix?: string;
    formatThousandsSeparator?: string;
    formatUnit?: string;
    formatUnitMultiplier?: number;
    fullyQualifiedName?: string;
    isDerived: boolean;
    isMultiCurrency?: boolean;
    label?: string;
    origin?: string;
    showDetailsDefaultFieldIndex?: number;
    showInExplorer?: boolean;
    sortIndex: number;
}

export type WaveXmdOrganization = {
    instanceUrl: string;
    label: string;
    organizationIdentifier: string;
    sortIndex: number;
}

export type WebLink = Metadata & sObject &  {
    availability: WebLinkAvailability;
    description?: string;
    displayType: WebLinkDisplayType;
    encodingKey?: Encoding;
    hasMenubar?: boolean;
    hasScrollbars?: boolean;
    hasToolbar?: boolean;
    height?: number;
    isResizable?: boolean;
    linkType: WebLinkType;
    masterLabel?: string;
    openType: WebLinkWindowType;
    page?: string;
    position?: WebLinkPosition;
    protected: boolean;
    requireRowSelection?: boolean;
    scontrol?: string;
    showsLocation?: boolean;
    showsStatus?: boolean;
    url?: string;
    width?: number;
}

export type WebStoreBundle = Metadata &  {
    autoFacetingEnabled?: boolean;
    cartToOrderAutoCustomFieldMapping?: boolean;
    commerceEinsteinActivitiesTracked?: boolean;
    commerceEinsteinDeployed?: boolean;
    country?: CountryIsoCode;
    defaultCurrency?: string;
    defaultLanguage?: string;
    defaultTaxLocaleType: TaxLocaleType;
    description?: string;
    guestBrowsingEnabled?: boolean;
    guestCartTimeToLive?: number;
    label: string;
    orderLifeCycleType?: OrderLifeCycleType;
    pricingStrategy: PricingStrategy;
    productGrouping?: ProductGrouping;
    skipAdditionalEntitlementCheckForSearch?: boolean;
    skuDetectionEnabled?: boolean;
    storeName?: string;
    supportedCurrencies?: string;
    supportedLanguages?: string;
    supportedShipToCountries?: string;
    type: WebStoreType;
}

export type WebStoreTemplate = Metadata & sObject &  {
    autoFacetingEnabled?: boolean;
    cartAsyncProcessingEnabled?: boolean;
    cartCalculateEnabled?: boolean;
    cartToOrderAutoCustomFieldMapping?: boolean;
    checkoutTimeToLive?: number;
    checkoutValidAfterDate?: Date;
    commerceEinsteinActivitiesTracked?: boolean;
    commerceEinsteinDeployed?: boolean;
    country?: CountryIsoCode;
    defaultCurrency?: string;
    defaultLanguage: string;
    defaultTaxLocaleType: TaxLocaleType;
    description?: string;
    duplicateCartItemsEnabled?: boolean;
    guestBrowsingEnabled?: boolean;
    guestCartEnabled: boolean;
    guestCartTimeToLive?: number;
    guestCheckoutEnabled: boolean;
    masterLabel: string;
    maxValuesPerFacet?: number;
    orderActivationStatus?: string;
    orderLifeCycleType?: OrderLifeCycleType;
    paginationSize?: number;
    preserveGuestCartEnabled: boolean;
    pricingStrategy: PricingStrategy;
    productGrouping?: ProductGrouping;
    skipAdditionalEntitlementCheckForSearch?: boolean;
    skuDetectionEnabled?: boolean;
    splitShipmentEnabled: boolean;
    supportedCurrencies?: string;
    supportedLanguages: string;
    supportedShipToCountries?: string;
    type: WebStoreType;
}

export type WindowsPushApplicationSetup = Metadata &  {
    packageSecurityIdentifier: string;
    secretKey: string;
}

export type WorkSkillRouting = Metadata & sObject &  {
    isActive: boolean;
    masterLabel: string;
    relatedEntity: string;
    workSkillRoutingAttributes?: WorkSkillRoutingAttribute | WorkSkillRoutingAttribute[];
}

export type WorkSkillRoutingAttribute = {
    field: string;
    isAdditionalSkill?: boolean;
    skill: string;
    skillLevel?: number;
    skillPriority?: number;
    value?: string;
}

export type Workflow = Metadata &  {
}

export type WorkflowAction = Metadata &  {
}

export type WorkflowAlert = WorkflowAction & sObject &  {
    ccEmails?: string | string[];
    description: string;
    protected: boolean;
    recipients?: WorkflowEmailRecipient | WorkflowEmailRecipient[];
    senderAddress?: string;
    senderType?: ActionEmailSenderType;
    template: string;
}

export type WorkflowEmailRecipient = {
    field?: string;
    recipient?: string;
    type: ActionEmailRecipientTypes;
}

export type WorkflowFieldUpdate = WorkflowAction & sObject &  {
    description?: string;
    field: string;
    formula?: string;
    literalValue?: string;
    lookupValue?: string;
    lookupValueType?: LookupValueType;
    name: string;
    notifyAssignee: boolean;
    operation: FieldUpdateOperation;
    protected: boolean;
    reevaluateOnChange?: boolean;
    targetObject?: string;
}

export type WorkflowFlowAction = WorkflowAction &  {
    description?: string;
    flow: string;
    flowInputs?: WorkflowFlowActionParameter | WorkflowFlowActionParameter[];
    label: string;
    language?: string;
    protected: boolean;
}

export type WorkflowFlowActionParameter = {
    name: string;
    value?: string;
}

export type WorkflowKnowledgePublish = WorkflowAction &  {
    action: KnowledgeWorkflowAction;
    description?: string;
    label: string;
    language?: string;
    protected: boolean;
}

export type WorkflowOutboundMessage = WorkflowAction & sObject &  {
    apiVersion: number;
    description?: string;
    endpointUrl: string;
    fields?: string | string[];
    includeSessionId: boolean;
    integrationUser: string;
    name: string;
    protected: boolean;
    useDeadLetterQueue?: boolean;
}

export type WorkflowSend = WorkflowAction &  {
    action: SendAction;
    description?: string;
    label: string;
    language?: string;
    protected: boolean;
}

export type WorkflowTask = WorkflowAction & sObject &  {
    assignedTo?: string;
    assignedToType: ActionTaskAssignedToTypes;
    description?: string;
    dueDateOffset: number;
    notifyAssignee: boolean;
    offsetFromField?: string;
    priority: string;
    protected: boolean;
    status: string;
    subject: string;
}

export type WorkflowRule = Metadata & sObject &  {
    actions?: WorkflowActionReference | WorkflowActionReference[];
    active: boolean;
    booleanFilter?: string;
    criteriaItems?: FilterItem | FilterItem[];
    description?: string;
    failedMigrationToolVersion?: string;
    formula?: string;
    triggerType: WorkflowTriggerTypes;
    workflowTimeTriggers?: WorkflowTimeTrigger | WorkflowTimeTrigger[];
}

export type WorkflowTimeTrigger = {
    actions?: WorkflowActionReference | WorkflowActionReference[];
    offsetFromField?: string;
    timeLength?: string;
    workflowTimeTriggerUnit: WorkflowTimeUnits;
}

export type AIPredictionDefinition = {
    dataDefinitions?: AIDataDefinition | AIDataDefinition[];
    description: string;
    predictionTargets?: AIPredictionTarget | AIPredictionTarget[];
    status: AIPredictionDefinitionStatus;
    type: AIPredictionType;
}

export type AIDataDefinition = {
    dataFilter?: AIFilterGroup;
    description?: string;
    fieldType?: AIManagedFieldType;
    managedFields?: AIManagedField | AIManagedField[];
    modelDefinitions?: AIModelDefinition | AIModelDefinition[];
}

export type AIFilterGroup = {
    rootFilter: AIFilter;
}

export type AIFilter = {
    lhField?: AIPredictionField;
    lhFilter?: AIFilter;
    lhUnit?: AIFilterUnit;
    operation: AIFilterOperation;
    rhField?: AIPredictionField;
    rhFilter?: AIFilter;
    rhUnit?: AIFilterUnit;
    sortOrder?: number;
    values?: AIFilterValue | AIFilterValue[];
}

export type AIPredictionField = {
    entity: string;
    field: string;
    relatedPredictionField?: AIPredictionField;
}

export type AIFilterValue = {
    side: AISide;
    sortOrder?: number;
    type: AIValueType;
    value: string;
}

export type AIManagedField = {
    field: AIPredictionField;
}

export type AIModelDefinition = {
    approvalType?: AIModelDefinitionApprovalType;
    externalId: string;
    scoringFilter?: AIFilterGroup;
    status: AIModelDefinitionStatus;
    trainSplitRatio?: string;
    trainingFilter?: AIFilterGroup;
    type?: AIModelType;
}

export type AIPredictionTarget = {
    predictionExpressions?: AIPredictionExpression | AIPredictionExpression[];
    pushbackField?: AIPredictionField;
    strategy?: AIPredictionStrategy;
    targetField?: AIPredictionField;
}

export type AIPredictionExpression = {
    expressionFilterGroup?: AIFilterGroup;
    predictionExpressionName?: string;
}

export type ApexEmailNotification = {
    email?: string;
    user?: string;
}

export type AppMenuItem = {
    name: string;
    type: string;
}

export type AppSettings = {
    connectedAppName: string;
    enabled?: boolean;
}

export type ArticleTypeChannelDisplay = {
    articleTypeTemplates?: ArticleTypeTemplate | ArticleTypeTemplate[];
}

export type ArticleTypeTemplate = {
    channel: Channel;
    page?: string;
    template: Template;
}

export type CustomFieldTranslation = {
    caseValues?: ObjectNameCaseValue | ObjectNameCaseValue[];
    gender?: Gender;
    help?: string;
    label?: string;
    lookupFilter?: LookupFilterTranslation;
    name: string;
    picklistValues?: PicklistValueTranslation | PicklistValueTranslation[];
    relationshipLabel?: string;
    startsWith?: StartsWith;
}

export type ObjectNameCaseValue = {
    article?: Article;
    caseType?: CaseType;
    plural?: boolean;
    possessive?: Possessive;
    value: string;
}

export type LookupFilterTranslation = {
    errorMessage: string;
    informationalMessage: string;
}

export type PicklistValueTranslation = {
    masterLabel: string;
    translation?: string;
}

export type DiscoveryAIModel = Metadata &  {
    algorithmType: DiscoveryAlgorithmType;
    classificationThreshold?: number;
    description?: string;
    label: string;
    modelFields?: DiscoveryModelField | DiscoveryModelField[];
    modelRuntimeType: DiscoveryModelRuntimeType;
    predictedField: string;
    predictionType: DiscoveryPredictionType;
    sourceType: DiscoveryModelSourceType;
    status: DiscoveryAIModelStatus;
    trainingMetrics?: string;
    transformations?: DiscoveryModelTransform | DiscoveryModelTransform[];
}

export type DiscoveryModelField = {
    isDisparateImpact?: boolean;
    isSensitive?: boolean;
    label: string;
    name: string;
    type: DiscoveryModelFieldType;
    values?: string | string[];
}

export type DiscoveryModelTransform = {
    config?: string;
    sourceFieldNames?: string | string[];
    targetFieldNames?: string | string[];
    type: DiscoveryAIModelTransformationType;
}

export type DiscoveryCustomPrescribableFieldDefinition = {
    filters?: DiscoveryFilter | DiscoveryFilter[];
    template?: string;
}

export type DiscoveryFilter = {
    field: string;
    operator: DiscoveryFilterOperator;
    type?: DiscoveryFilterFieldType;
    values?: DiscoveryFilterValue | DiscoveryFilterValue[];
}

export type DiscoveryFilterValue = {
    type: DiscoveryFilterValueType;
    value: string;
}

export type DiscoveryDeployedModel = {
    active: boolean;
    aiModel: string;
    classificationThreshold?: number;
    fieldMappings?: DiscoveryFieldMap | DiscoveryFieldMap[];
    filters?: DiscoveryFilter | DiscoveryFilter[];
    label: string;
    name: string;
    prescribableFields?: DiscoveryPrescribableField | DiscoveryPrescribableField[];
}

export type DiscoveryFieldMap = {
    mappedField: string;
    modelField: string;
    sobjectFieldJoinKey?: string;
    source?: string;
    sourceFieldJoinKey?: string;
    sourceType: DiscoveryFieldMapSourceType;
}

export type DiscoveryPrescribableField = {
    customDefinitions?: DiscoveryCustomPrescribableFieldDefinition | DiscoveryCustomPrescribableFieldDefinition[];
    name: string;
}

export type DiscoveryGoal = Metadata &  {
    active: boolean;
    deployedModels?: DiscoveryDeployedModel | DiscoveryDeployedModel[];
    label: string;
    modelCards?: DiscoveryModelCard | DiscoveryModelCard[];
    outcome: DiscoveryGoalOutcome;
    predictionType: DiscoveryPredictionType;
    pushbackField?: string;
    pushbackType?: DiscoveryPushbackType;
    subscribedEntity?: string;
    terminalStateFilters?: DiscoveryFilter | DiscoveryFilter[];
}

export type DiscoveryModelCard = {
    contactEmail?: string;
    contactName?: string;
    label?: string;
    sections?: string;
}

export type DiscoveryGoalOutcome = {
    field: string;
    fieldLabel: string;
    goal: DiscoveryOutcomeGoal;
    mappedField?: string;
}

export type DiscoveryStory = Metadata &  {
    application: string;
    autopilot?: DiscoveryStoryAutopilotStatus;
    classificationThreshold?: number;
    label: string;
    outcome: DiscoveryStoryOutcome;
    sourceContainer: string;
    sourceType: DiscoveryStorySourceType;
    validationContainer?: string;
}

export type DiscoveryStoryOutcome = {
    failureValue?: string;
    field: string;
    goal: DiscoveryStoryOutcomeGoal;
    label: string;
    successValue?: string;
    type: DiscoveryStoryOutcomeType;
}

export type DocumentType = Metadata &  {
    description?: string;
    isActive: boolean;
    masterLabel: string;
}

export type EclairMap = {
    boundingBoxBottom?: number;
    boundingBoxLeft?: number;
    boundingBoxRight?: number;
    boundingBoxTop?: number;
    mapLabel?: string;
    mapName: string;
    projection: string;
}

export type EmbeddedServiceAppointmentSettings = {
    appointmentConfirmImg?: string;
    enabled: boolean;
    homeImg?: string;
    logoImg?: string;
    shouldShowExistingAppointment?: boolean;
    shouldShowNewAppointment?: boolean;
}

export type EmbeddedServiceCustomComponent = {
    customComponent?: string;
    customComponentType?: EmbeddedServiceCustomComponentType;
}

export type EmbeddedServiceCustomLabel = {
    customLabel?: string;
    feature?: EmbeddedServiceFeature;
    labelKey?: EmbeddedServiceLabelKey;
}

export type EmbeddedServiceCustomization = {
    customizationName: string;
    description?: string;
}

export type EmbeddedServiceFlow = {
    flow: string;
    flowType: EmbeddedServiceFlowType;
    isAuthenticationRequired: boolean;
}

export type EmbeddedServiceLayout = {
    layout: string;
    layoutType?: EmbeddedServiceLayoutType;
}

export type EmbeddedServiceLayoutRule = {
    appointmentStatus: string;
}

export type EmbeddedServiceMenuItem = {
    channel?: string;
    channelType?: EmbeddedServiceChannelType;
    customUrl?: string;
    displayOrder?: number;
    iconUrl?: string;
    isDisplayedOnPageLoad: boolean;
    itemName: string;
    osOptionsHideInIOS?: boolean;
    osOptionsHideInLinuxOS?: boolean;
    osOptionsHideInMacOS?: boolean;
    osOptionsHideInOtherOS?: boolean;
    osOptionsHideInWindowsOS?: boolean;
    phoneNumber?: string;
    shouldOpenUrlInSameTab?: boolean;
}

export type EmbeddedServiceMessagingChannel = {
    businessHours?: string;
    isEnabled: boolean;
    messagingChannel: string;
    shouldShowDeliveryReceipts: boolean;
    shouldShowEmojiSelection: boolean;
    shouldShowReadReceipts: boolean;
    shouldShowTypingIndicators: boolean;
    shouldStartNewLineOnEnter: boolean;
}

export type EmbeddedServiceResource = {
    resource: string;
    resourceType: EmbeddedServiceResourceType;
}

export type ExpressionSetDefinitionMajorVersion = {
}

export type ExternalAppOauthConfig = {
    callbackUrl: string;
    certificate?: string;
    consumerKey?: string;
    consumerSecret?: string;
    idTokenConfig?: ExternalAppIdTokenConfig;
    isClientCredentialsFlowEnabled?: boolean;
    isConsumerSecretOptional?: boolean;
    isDeviceFlowEnabled?: boolean;
    isIntrospectAllTokens?: boolean;
    isPkceRequired?: boolean;
    isRefreshTokenRotationEnabled?: boolean;
    isSecretRequiredForRefreshToken?: boolean;
    isSecretRequiredForTokenExchange?: boolean;
    isTokenExchangeEnabled?: boolean;
    shouldRotateConsumerKey?: boolean;
    shouldRotateConsumerSecret?: boolean;
}

export type ExtlClntAppNotificationType = {
    notificationType: string;
}

export type FieldClassificationSetting = {
    confidenceThreshold: number;
    predictionField: string;
    type: FieldClassificationConfigType;
}

export type FieldSetTranslation = {
    label: string;
    name: string;
}

export type GenAiPlannerAttr = {
    allowedValues?: string;
    dataType: PlannerAttrDataType;
    description?: string;
    developerName: string;
    isDisplayable?: boolean;
    isPersIdentInfo?: boolean;
    isRequired?: boolean;
    isUserInput?: boolean;
    mappingType: PlannerAttrMappingType;
    masterLabel: string;
    pattern?: string;
    value?: string;
}

export type HistoryRetentionPolicy = {
    archiveAfterMonths: number;
    archiveRetentionYears: number;
    description?: string;
    gracePeriodDays: number;
}

export type IframeWhiteListUrl = {
    context: IFrameWhitelistContext;
    url?: string;
}

export type InsightsExternalDataPartMetadata = {
    partNumber: number;
}

export type LayoutSectionTranslation = {
    label: string;
    section: string;
}

export type LayoutTranslation = {
    layout: string;
    layoutType?: string;
    sections?: LayoutSectionTranslation | LayoutSectionTranslation[];
}

export type LocalizedValue = {
    language?: string;
    parentValue?: string;
    value?: string;
}

export type MLFilterValue = {
    side: AISide;
    sortOrder?: number;
    type: AIValueType;
    value: string;
}

export type MktProfileActionOverride = {
    objectTypeId: string;
    profileId?: string;
}

export type NotificationChannels = {
    desktopEnabled?: boolean;
    mobileEnabled?: boolean;
    slackEnabled?: boolean;
}

export type NotificationTypeSettings = {
    appSettings?: AppSettings | AppSettings[];
    notificationChannels?: NotificationChannels;
    notificationType: string;
}

export type PresenceConfigAssignments = {
    profiles?: PresenceConfigProfileAssignments;
    users?: PresenceConfigUserAssignments;
}

export type PresenceConfigProfileAssignments = {
    profile?: string | string[];
}

export type PresenceConfigUserAssignments = {
    user?: string | string[];
}

export type PresenceDeclineReason = Metadata &  {
    label: string;
}

export type PresenceUserConfig = Metadata &  {
    assignments?: PresenceConfigAssignments;
    capacity: number;
    declineReasons?: string | string[];
    enableAutoAccept?: boolean;
    enableDecline?: boolean;
    enableDeclineReason?: boolean;
    enableDisconnectSound?: boolean;
    enableRequestSound?: boolean;
    interruptibleCapacity?: number;
    label: string;
    presenceStatusOnDecline?: string;
    presenceStatusOnPushTimeout?: string;
    userDisplayName?: string;
}

export type ProfileLayoutAssignment = {
    layout: string;
    recordType?: string;
}

export type ProfilePasswordPolicy = Metadata &  {
    forgotPasswordRedirect?: boolean;
    lockoutInterval: number;
    maxLoginAttempts: number;
    minimumPasswordLength: number;
    minimumPasswordLifetime?: boolean;
    obscure?: boolean;
    passwordComplexity: number;
    passwordExpiration: number;
    passwordHistory: number;
    passwordQuestion: number;
    profile: string;
}

export type ProfileSearchCustomization = {
    profile?: string;
    searchCustomization: string;
}

export type ProfileSessionSetting = Metadata &  {
    externalCommunityUserIdentityVerif: boolean;
    forceLogout: boolean;
    profile: string;
    requiredSessionLevel?: SessionSecurityLevel;
    sessionPersistence: boolean;
    sessionTimeout: number;
    sessionTimeoutWarning: boolean;
}

export type QueueRoutingConfig = Metadata &  {
    capacityPercentage?: number;
    capacityType?: CapacityType;
    capacityWeight?: number;
    dropAdditionalSkillsTimeout?: number;
    isAttributeBased?: boolean;
    label: string;
    pushTimeout?: number;
    queueOverflowAssignee?: string;
    routingModel: RoutingModel;
    routingPriority: number;
    skills?: QueueRoutingConfigSkill | QueueRoutingConfigSkill[];
    userOverflowAssignee?: string;
}

export type QueueRoutingConfigSkill = {
    skill?: string;
}

export type QuickActionTranslation = {
    aspect?: string;
    label: string;
    name: string;
}

export type RecordTypeTranslation = {
    description?: string;
    label: string;
    name: string;
}

export type SearchFieldCustomization = {
    fieldReference: string;
    objectReference: string;
    propertyName: string;
    propertyValue?: string;
    searchCustomization: string;
}

export type SearchObjectCustomization = {
    objectReference: string;
    propertyName: string;
    propertyValue?: string;
    searchCustomization: string;
}

export type ServiceChannel = Metadata &  {
    acwExtensionDuration?: number;
    afterConvoWorkMaxTime?: number;
    doesMinimizeWidgetOnAccept?: boolean;
    hasAcwExtensionEnabled?: boolean;
    hasAfterConvoWorkTimer?: boolean;
    hasAutoAcceptEnabled?: boolean;
    interactionComponent?: string;
    isInterruptible?: boolean;
    label: string;
    maxExtensions?: string;
    relatedEntityType: string;
    secondaryRoutingPriorityField?: string;
    serviceChannelFieldPriorities?: ServiceChannelFieldPriority | ServiceChannelFieldPriority[];
}

export type ServiceChannelFieldPriority = {
    priority: number;
    value: string;
}

export type ServiceChannelStatus = {
    channel?: string | string[];
}

export type ServicePresenceStatus = Metadata &  {
    channels?: ServiceChannelStatus;
    label: string;
}

export type SharingReasonTranslation = {
    label: string;
    name: string;
}

export type SharingRecalculation = {
    className: string;
}

export type SlackRecordLayoutAction = {
    quickAction?: string;
    slackRecordLayout: string;
    sortOrder: number;
}

export type SlackRecordLayoutAssignment = {
    profile?: string;
    recordType?: string;
    slackRecLayoutProfileRecType?: string;
    slackRecordLayout: string;
}

export type SlackRecordLayoutItem = {
    isReadOnly?: boolean;
    isRequired?: boolean;
    isShownInCreate?: boolean;
    isShownInEdit?: boolean;
    isShownInView?: boolean;
    referenceField: string;
    slackRecordLayout: string;
    sortOrder: number;
}

export type StandardFieldTranslation = {
    label?: string;
    name: string;
}

export type ValidationRuleTranslation = {
    errorMessage: string;
    name: string;
}

export type ValueTranslation = {
    masterLabel: string;
    translation?: string;
}

export type WebLinkTranslation = {
    label: string;
    name: string;
}

export type WorkflowTaskTranslation = {
    description?: string;
    name: string;
    subject?: string;
}

export type Package2VersionCodeCoverage = {
    apexCodeCoveragePercentage: number;
}

export type Package2VersionCodeCoveragePercentage = {
    className: string;
    codeCoveragePercentage: number;
}

export type Package2VersionCodeCoveragePercentages = {
    codeCovPercentages?: Package2VersionCodeCoveragePercentage | Package2VersionCodeCoveragePercentage[];
}

export type PackageUploadError = {
    message: string;
}

export type PackageUploadErrors = {
    errors?: PackageUploadError | PackageUploadError[];
}

export type SubscriberPackageCspTrustedSite = {
    endpointUrl: string;
}

export type SubscriberPackageCspTrustedSites = {
    settings?: SubscriberPackageCspTrustedSite | SubscriberPackageCspTrustedSite[];
}

export type SubscriberPackageDependencies = {
    ids?: SubscriberPackageDependency | SubscriberPackageDependency[];
}

export type SubscriberPackageDependency = {
    subscriberPackageVersionId: string;
}

export type SubscriberPackageDestinationProfile = {
    description: string;
    displayName: string;
    name: string;
    noAccess: boolean;
    profileId: string;
    type: string;
}

export type SubscriberPackageInstallError = {
    message: string;
}

export type SubscriberPackageInstallErrors = {
    errors?: SubscriberPackageInstallError | SubscriberPackageInstallError[];
}

export type SubscriberPackageProfileMapping = {
    source: string;
    target: string;
}

export type SubscriberPackageProfileMappings = {
    profileMappings?: SubscriberPackageProfileMapping | SubscriberPackageProfileMapping[];
}

export type SubscriberPackageProfiles = {
    destinationProfiles?: SubscriberPackageDestinationProfile | SubscriberPackageDestinationProfile[];
    sourceProfiles?: SubscriberPackageSourceProfile | SubscriberPackageSourceProfile[];
}

export type SubscriberPackageSourceProfile = {
    label: string;
    value: string;
}

export type SubscriberPackageRemoteSiteSetting = {
    secure: boolean;
    url: string;
}

export type SubscriberPackageRemoteSiteSettings = {
    settings?: SubscriberPackageRemoteSiteSetting | SubscriberPackageRemoteSiteSetting[];
}

export type sObject = {
    fieldsToNull?: string | string[];
    Id?: ID;
}

export type AIApplication = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalId?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: AIApplication;
    MlExternalId?: string;
    MlPredictionDefinitions?: QueryResult;
    MlRecommendationDefinitions?: QueryResult;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PredictionDefinitions?: QueryResult;
    Status?: AIApplicationStatus;
    SystemModstamp?: Date;
    Type?: AIApplicationType;
}

export type AIApplicationConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Application?: AIApplication;
    ApplicationId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalId?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsInsightReasonEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: AIApplicationConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Rank?: number;
    ScoringMode?: AIScoringMode;
    SystemModstamp?: Date;
}

export type AIConvSummarizationConfig = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FieldName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LookUpRelatedRecordField?: string;
    MasterLabel?: string;
    Metadata?: AIConvSummarizationConfig;
    ModuleNamespace?: string;
    ObjectName?: string;
    RecommendationOutputFieldName?: RecsOutputFieldName;
    RelatedEntity?: string;
    Status?: ConfigStatus;
    SystemModstamp?: Date;
}

export type AIDataDefinition =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataFilter?: AIFilterGroup;
    DataFilterId?: ID;
    Description?: string;
    ExternalId?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    ManagedFieldType?: AIManagedFieldType;
    ManagedFields?: QueryResult;
    ModelDefinitions?: QueryResult;
    PredictionDefinition?: AIPredictionDefinition;
    PredictionDefinitionId?: ID;
    SystemModstamp?: Date;
}

export type AIFactorComponent =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LeftHandDerivedField?: string;
    LeftHandField?: AIPredictionField;
    LeftHandFieldId?: ID;
    Model?: AIModel;
    ModelFactor?: AIModelFactor;
    ModelFactorId?: ID;
    ModelId?: ID;
    Operator?: AIModelMetricOperation;
    RightHandDerivedField?: string;
    RightHandField?: AIPredictionField;
    RightHandFieldId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
    Value?: string;
}

export type AIFeatureExtractor =  & sObject &  {
    AiUsecaseModel?: AIUsecaseModel;
    AiUsecaseModelId?: ID;
    AllManagedPackageMemberId?: ID;
    BatchInputSourceIdentifier?: string;
    BatchInputSourceType?: BatchInputSourceType;
    ClassName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FeatureInputType?: FeatureInputType;
    InputContext?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: ExtractorType;
}

export type AIFilter =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FilterGroup?: AIFilterGroup;
    FilterGroupId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LhFilter?: AIFilter;
    LhFilterId?: ID;
    LhPredictionField?: AIPredictionField;
    LhPredictionFieldId?: ID;
    LhUnit?: AIFilterUnit;
    ManageableState?: ManageableState;
    Operation?: AIFilterOperation;
    RhFilter?: AIFilter;
    RhFilterId?: ID;
    RhPredictionField?: AIPredictionField;
    RhPredictionFieldId?: ID;
    RhUnit?: AIFilterUnit;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type AIFilterGroup =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    PredictionDefinition?: AIPredictionDefinition;
    PredictionDefinitionId?: ID;
    RootFilter?: AIFilter;
    RootFilterId?: ID;
    SystemModstamp?: Date;
}

export type AIFilterValue =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Filter?: AIFilter;
    FilterGroup?: AIFilterGroup;
    FilterGroupId?: ID;
    FilterId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Side?: AISide;
    SortOrder?: number;
    SystemModstamp?: Date;
    Type?: AIValueType;
    Value?: string;
}

export type AIManagedField =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataDefinition?: AIDataDefinition;
    DataDefinitionId?: ID;
    Field?: AIPredictionField;
    FieldId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
}

export type AIModel = Metadata & sObject &  {
    ApprovalStatus?: AIModelApproval;
    ContentVersion?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Dataset?: string;
    DeveloperName?: string;
    ExternalId?: string;
    FailureReasonCode?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AIModel;
    ModelContent?: string;
    ModelContentLength?: number;
    ModelDefinition?: AIModelDefinition;
    ModelDefinitionId?: ID;
    ModuleNamespace?: string;
    Priority?: number;
    ScoringStatus?: AIScoringStatus;
    SystemModstamp?: Date;
    TrainingEndTime?: Date;
    TrainingStartTime?: Date;
    Type?: AIModelType;
}

export type AIModelDefinition =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApprovalType?: AIModelDefinitionApprovalType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataDefinition?: AIDataDefinition;
    DataDefinitionId?: ID;
    ExternalId?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    ScoringFilter?: AIFilterGroup;
    ScoringFilterId?: ID;
    Status?: AIModelDefinitionStatus;
    SystemModstamp?: Date;
    TrainSplitRatio?: string;
    TrainingFilter?: AIFilterGroup;
    TrainingFilterId?: ID;
    Type?: AIModelType;
}

export type AIModelFactor =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExternalId?: string;
    IntensityType?: AIIntensityType;
    IntensityValue?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LowerLimit?: number;
    Model?: AIModel;
    ModelId?: ID;
    SystemModstamp?: Date;
    Type?: AIModelFactorType;
    UpperLimit?: number;
}

export type AIModelGraph =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSetType?: AIDataSetType;
    GraphPoints?: string;
    GraphType?: AIModelGraphType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Model?: AIModel;
    ModelId?: ID;
    SchemaVersion?: string;
    SystemModstamp?: Date;
}

export type AIModelMetric =  & sObject &  {
    ClassLabel1?: string;
    ClassLabel2?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    Iteration?: number;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MetricType?: AIMetricType;
    MetricValue?: number;
    Model?: AIModel;
    ModelId?: ID;
    SystemModstamp?: Date;
}

export type AIPredictionDefinition =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    Application?: AIApplication;
    ApplicationId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataDefinition?: QueryResult;
    Description?: string;
    FilterGroup?: QueryResult;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    PredictionTargets?: QueryResult;
    Status?: AIPredictionDefinitionStatus;
    SystemModstamp?: Date;
    Type?: AIPredictionType;
}

export type AIPredictionExpression =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExpressionFilterGroup?: AIFilterGroup;
    ExpressionFilterGroupId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    PredictionDefinition?: AIPredictionDefinition;
    PredictionDefinitionId?: ID;
    PredictionExpressionName?: string;
    PredictionTarget?: AIPredictionTarget;
    PredictionTargetId?: ID;
    SystemModstamp?: Date;
}

export type AIPredictionField =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Entity?: string;
    Field?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    PredictionDefinition?: AIPredictionDefinition;
    PredictionDefinitionId?: ID;
    RelatedPredictionField?: AIPredictionField;
    RelatedPredictionFieldId?: ID;
    SystemModstamp?: Date;
}

export type AIPredictionTarget =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    PredictionDefinition?: AIPredictionDefinition;
    PredictionDefinitionId?: ID;
    PushbackField?: AIPredictionField;
    PushbackFieldId?: ID;
    Strategy?: AIPredictionStrategy;
    SystemModstamp?: Date;
    TargetField?: AIPredictionField;
    TargetFieldId?: ID;
}

export type AIReplyRecommendationsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAiReplyRecommendationsEnabled?: boolean;
    IsGenReplyRecommendationsEnabled?: boolean;
    IsServiceEinsteinGptGroundingEnabled?: boolean;
    Metadata?: AIReplyRecommendationsSettings;
}

export type AIScoringModelDefVersion = Metadata & sObject &  {
    AIScoringModelDefinition?: AIScoringModelDefinition;
    AIScoringModelDefinitionId?: ID;
    AdditionalInformation?: string;
    AiUsecaseDefinition?: AIUsecaseDefinition;
    AiUsecaseDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AIScoringModelDefVersion;
    ModelMode?: AIScoringModelDefVersionMode;
    ModuleNamespace?: string;
    Status?: AIScoringModelVersionStatus;
    Steps?: QueryResult;
    SystemModstamp?: Date;
}

export type AIScoringModelDefinition = Metadata & sObject &  {
    AiModelConfig?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AIScoringModelDefinition;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    Versions?: QueryResult;
}

export type AIScoringStep =  & sObject &  {
    AiModelConfigStep?: string;
    AiScoringModelDefVersion?: AIScoringModelDefVersion;
    AiScoringModelDefVersionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StepDetail?: string;
    SystemModstamp?: Date;
    ValidationStatus?: AIScoringStepValidationStatus;
    ValidationStatusResult?: string;
}

export type AIUsecaseDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreatorType?: CreatorType;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MaximumInsightCount?: number;
    MaximumRecommendationCount?: number;
    MaximumSuggestionCount?: number;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PrimaryResponseObject?: string;
    RecommendationResponseObject?: string;
    RecommendationSource?: RcmdSourceType;
    SecondaryResponseObject?: string;
    ShouldSaveFeatures?: boolean;
    ShouldSaveInsights?: boolean;
    ShouldSaveRecommendation?: boolean;
    ShouldSaveRequestResponse?: boolean;
    ShouldSaveScore?: boolean;
    ShouldSaveSuggestions?: boolean;
    SuggestionImpactMinimumPct?: number;
    SystemModstamp?: Date;
    UsecaseName?: string;
}

export type AIUsecaseFieldMapping =  & sObject &  {
    AiUsecaseDefinition?: AIUsecaseDefinition;
    AiUsecaseDefinitionId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    JoinFieldInformation?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MappedFieldName?: string;
    MappedFieldType?: MappedFieldType;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ResponseFieldName?: string;
    ResponseObject?: string;
    SequenceNumber?: number;
    SystemModstamp?: Date;
}

export type AIUsecaseModel =  & sObject &  {
    AiFeatureExtractor?: AIFeatureExtractor;
    AiFeatureExtractorId?: ID;
    AiUsecaseDefinition?: AIUsecaseDefinition;
    AiUsecaseDefinitionId?: ID;
    AllManagedPackageMemberId?: ID;
    ArePredctGenInRealTime?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PredictionDefinition?: string;
    PredictionPlatform?: PredictionPlatform;
    SystemModstamp?: Date;
}

export type AccountForecastFormula =  & sObject &  {
    AccountForecastSettings?: AccountForecastSettings;
    AccountForecastSettingsId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EndingPeriod?: number;
    Formula?: string;
    FormulaType?: FormulaType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StartingPeriod?: number;
    SystemModstamp?: Date;
}

export type AccountForecastSettings = Metadata & sObject &  {
    AccountFilterId?: ID;
    AccountForecastSettings?: QueryResult;
    AcctPrdctPrdFrcstVolCnt?: number;
    CalculationFrequency?: CalculationFrequency;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DisplayDuration?: number;
    DisplayedForecastMetrics?: string;
    DisplayedRevenueMetrics?: string;
    EditsAllowedFor?: number;
    ForecastFrequency?: ForecastFrequency;
    FullName?: string;
    HasOpportunityItemSchedule?: boolean;
    HasOpportunityProbability?: boolean;
    IsAcctFrcstOpSuccessful?: boolean;
    IsDeleted?: boolean;
    IsEditableAtStartOfPeriod?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AccountForecastSettings;
    ModuleNamespace?: string;
    ObjectMapping?: ObjectMapping;
    ObjectMappingId?: ID;
    PrimaryNotifEmailAddress?: string;
    ProductFilterId?: ID;
    RecalculateAllFrcstCnt?: number;
    RegenerateForecastCnt?: number;
    SalesAgreementFilterId?: ID;
    SecondaryNotifEmailAddress?: string;
    StartingPeriod?: number;
    SystemModstamp?: Date;
}

export type AccountIntelligenceSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAccountLogosEnabled?: boolean;
    IsAutomatedAccountFieldsEnabled?: boolean;
    IsNewsStoriesEnabled?: boolean;
    Metadata?: AccountIntelligenceSettings;
}

export type AccountRelationshipShareRule = Metadata & sObject &  {
    AccessLevel?: string;
    AccountToCriteriaField?: string;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EntityType?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    StaticFormulaCriteria?: string;
    SystemModstamp?: Date;
    Type?: string;
}

export type AccountSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAccountDiscoveryEnabled?: boolean;
    IsAccountHistoryTrackingEnabled?: boolean;
    IsAccountInsightsInMobileEnabled?: boolean;
    IsAccountOwnerReportEnabled?: boolean;
    IsAccountTeamsEnabled?: boolean;
    IsContactHistoryTrackingEnabled?: boolean;
    IsRelateContactToMultipleAccountsEnabled?: boolean;
    Metadata?: AccountSettings;
    ShowViewHierarchyLink?: boolean;
}

export type AccountingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAccountingSubledgerEnabled?: boolean;
    IsFinancePeriodEnabled?: boolean;
    IsPaymentMethodAdjustEnabled?: boolean;
    IsScheduledJobEnabled?: boolean;
    Metadata?: AccountingSettings;
}

export type AcctMgrTargetSettings = Metadata & sObject &  {
    AcctMgrPeriodicTargetDstrCnt?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AcctMgrTargetSettings;
    ModuleNamespace?: string;
    PeriodType?: PeriodTypes;
    PricebookId?: ID;
    SystemModstamp?: Date;
    TeamMemberHierarchyType?: TeamMemberHierarchyType;
}

export type WorkflowAlert = WorkflowAction & sObject &  {
    CcEmails?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: WorkflowAlert;
    NamespacePrefix?: string;
    SenderType?: ActionEmailSenderType;
    TemplateId?: ID;
}

export type WorkflowFieldUpdate = WorkflowAction & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FieldDefinition?: FieldDefinition;
    FieldDefinitionId?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LiteralValue?: string;
    LookupValueId?: ID;
    ManageableState?: ManageableState;
    Metadata?: WorkflowFieldUpdate;
    Name?: string;
    NamespacePrefix?: string;
    SourceTableEnumOrId?: string;
}

export type ActionLauncherItemDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Identifier?: string;
    IsDeleted?: boolean;
    ItemActionType?: ItemActionType;
    ItemCategory?: ItemCategory;
    ItemLanguage?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SubType?: string;
    SystemModstamp?: Date;
    Type?: string;
    VersionNumber?: string;
}

export type WorkflowOutboundMessage = WorkflowAction & sObject &  {
    ApiVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    IntegrationUserId?: ID;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: WorkflowOutboundMessage;
    Name?: string;
    NamespacePrefix?: string;
}

export type ActionOverride =  & sObject &  &  {
    ContentId?: ID;
    ContentName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomApplication?: CustomApplication;
    CustomApplicationId?: ID;
    Description?: string;
    FormFactor?: FormFactor;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Name?: string;
    NamespacePrefix?: string;
    PageOrSobjectType?: string;
    SkipRecordTypeSelect?: boolean;
    SystemModstamp?: Date;
    Type?: ActionOverrideType;
}

export type WorkflowTask = WorkflowAction & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: WorkflowTask;
    NamespacePrefix?: string;
    Priority?: string;
    Status?: string;
    Subject?: string;
}

export type ActionableEventOrchDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ActionableEventTypeDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ActionsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsDefaultQuickActionsOnEnabled?: boolean;
    IsMdpEnabledEnabled?: boolean;
    IsOfflineWebLinksEnabled?: boolean;
    IsThirdPartyActionsEnabled?: boolean;
    Metadata?: ActionsSettings;
}

export type ActivationPlatform = Metadata & sObject &  {
    ActivationPlatformActvAttrs?: QueryResult;
    ActivationPlatformAdditionalMetadata?: string;
    ActivationPlatformConnectorType?: ActivationPlatformConnectorType;
    ActvPlatformFields?: QueryResult;
    ActvnPlatformAudIdentifiers?: QueryResult;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataConnector?: sObject;
    DataConnectorId?: ID;
    Description?: string;
    DeveloperName?: string;
    Enabled?: boolean;
    FullName?: string;
    IncludeSegmentNames?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LogoUrl?: string;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActivationPlatform;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Notes?: string;
    OutputFormat?: ActivationPlatformFileOutputFormat;
    OutputGrouping?: ActivationPlatformFileOutputGrouping;
    PeriodicRefreshFrequecy?: ActivationPlatformPeriodicFullRefresh;
    RefreshFrequency?: ActivationPlatformRefreshFrequency;
    RefreshMode?: ActivationPlatformRefreshMode;
    SystemModstamp?: Date;
}

export type ActivationPlatformActvAttr = Metadata & sObject &  {
    ActivationPlatform?: ActivationPlatform;
    ActivationPlatformId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FieldName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsRequired?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActivationPlatformActvAttr;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectName?: string;
    SystemModstamp?: Date;
}

export type ActivationPlatformField = Metadata & sObject &  {
    ActivationPlatform?: ActivationPlatform;
    ActivationPlatformFieldValues?: QueryResult;
    ActivationPlatformId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    HelpText?: string;
    IsDeleted?: boolean;
    IsHidden?: boolean;
    IsRequired?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActivationPlatformField;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: ActivationPlatformFieldDataType;
}

export type ActivitiesSettings = MetadataForSettings & sObject &  {
    AllowUsersToRelateMultipleContactsToTasksAndEvents?: boolean;
    AutoRelateEventAttendees?: boolean;
    DurableId?: string;
    FullName?: string;
    IsActivityRemindersEnabled?: boolean;
    IsCalendarHomeLwcEnabled?: boolean;
    IsClickCreateEventsEnabled?: boolean;
    IsDragAndDropSchedulingEnabled?: boolean;
    IsEmailTrackingEnabled?: boolean;
    IsFlowTaskNotifsViaApexEnabled?: boolean;
    IsGroupTasksEnabled?: boolean;
    IsHideChildEventsPreferenceEnabled?: boolean;
    IsListViewSchedulingEnabled?: boolean;
    IsLogNoteEnabled?: boolean;
    IsMlSingleClientProfileEnabled?: boolean;
    IsMultidayEventsEnabled?: boolean;
    IsRecurringEventsEnabled?: boolean;
    IsRecurringTasksEnabled?: boolean;
    IsRollUpActivToContactsAcctEnabled?: boolean;
    IsSidebarCalendarShortcutEnabled?: boolean;
    IsSimpleTaskCreateUiEnabled?: boolean;
    IsTimelineCompDateSortEnabled?: boolean;
    IsUnsTaskDelegatedToNotificationsEnabled?: boolean;
    IsUserListViewCalendarsEnabled?: boolean;
    MeetingRequestsLogo?: string;
    Metadata?: ActivitiesSettings;
    ShowCustomLogoMeetingRequests?: boolean;
    ShowEventDetailsMultiUserCalendar?: boolean;
    ShowHomePageHoverLinksForEvents?: boolean;
    ShowMyTasksHoverLinks?: boolean;
}

export type ActnblListKeyPrfmIndDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FilterExpression?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActnblListKeyPrfmIndDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectName?: string;
    SystemModstamp?: Date;
}

export type ActvPfrmDataConnectorS3 = Metadata & sObject &  {
    ActvPfrmDataConnectors?: QueryResult;
    AllManagedPackageMemberId?: ID;
    BucketName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExportDirectory?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActvPfrmDataConnectorS3;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ActvPlatformAdncIdentifier = Metadata & sObject &  {
    ActivationPlatform?: ActivationPlatform;
    ActivationPlatformId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IdentifierHashMethod?: ActivationPlatformIdentifierHashMethod;
    IdentifierType?: ActivationPlatformIdentifierType;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActvPlatformAdncIdentifier;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ActvPlatformFieldValue = Metadata & sObject &  {
    ActivationPlatformField?: ActivationPlatformField;
    ActivationPlatformFieldId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActvPlatformFieldValue;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type ActvPlatformOAuthConnector = Metadata & sObject &  {
    ActvPfrmDataConnectors?: QueryResult;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ActvPlatformOAuthConnector;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OauthProvider?: OAuthProviderType;
    OauthUrl?: string;
    SystemModstamp?: Date;
}

export type AddressSettings = MetadataForSettings & sObject &  {
    CountriesAndStates?: CountriesAndStates;
    CountriesAndStatesId?: string;
    DurableId?: string;
    FullName?: string;
    Metadata?: AddressSettings;
}

export type AdjustmentsSettings =  & sObject &  {
    AllowExpandedColumns?: boolean;
    DurableId?: string;
    IsAdjustmentsEnabled?: boolean;
    IsOwnerAdjustmentsEnabled?: boolean;
}

export type AdvAccountForecastFormula =  & sObject &  {
    AdvAccountForecastSet?: AdvAccountForecastSet;
    AdvAccountForecastSetId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EndPeriod?: number;
    FormulaExpression?: string;
    FormulaType?: AdvAcctFcstFormulaType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StartPeriod?: number;
    SystemModstamp?: Date;
}

export type AdvAccountForecastPeriod =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayDuration?: number;
    ForecastPeriodGroup?: AdvAcctForecastPeriodGroup;
    ForecastPeriodGroupId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SequenceNumber?: number;
    SystemModstamp?: Date;
    Type?: PeriodTypes;
}

export type AdvAccountForecastSet = Metadata & sObject &  {
    AccountFieldName?: string;
    AdvAcctForecastSet?: QueryResult;
    AdvAcctFrcstDisplayGroupForecastSet?: QueryResult;
    AdvancedAccountForecastSet?: QueryResult;
    AllManagedPackageMemberId?: ID;
    CalculationFrequency?: AdvAcctFcstCalcFrequency;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ForecastFactObjectName?: string;
    ForecastPeriodGroup?: AdvAcctForecastPeriodGroup;
    ForecastPeriodGroupId?: ID;
    ForecastQuantityFieldName?: string;
    ForecastRevenueFieldName?: string;
    ForecastSetFieldName?: string;
    ForecastSetName?: string;
    ForecastStatusFieldName?: string;
    FullName?: string;
    GenerationDpeDefName?: BatchCalcJobDefinition;
    GenerationDpeDefNameId?: ID;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: AdvAccountForecastSet;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PeriodFieldName?: string;
    RecalculateDpeDefName?: BatchCalcJobDefinition;
    RecalculateDpeDefNameId?: ID;
    RegenerationDpeDefName?: BatchCalcJobDefinition;
    RegenerationDpeDefNameId?: ID;
    RolloverDpeDefName?: BatchCalcJobDefinition;
    RolloverDpeDefNameId?: ID;
    RolloverFrequency?: AdvAcctFcstCalcFrequency;
    Status?: AdvAccForecastSetStatus;
    SystemModstamp?: Date;
}

export type AdvAcctForecastAdjPeriod =  & sObject &  {
    AdjustmentDayCount?: number;
    AdvAccountForecastSet?: AdvAccountForecastSet;
    AdvAccountForecastSetId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Frequency?: PeriodTypes;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Profile?: Profile;
    ProfileId?: ID;
    StartDay?: number;
    SystemModstamp?: Date;
}

export type AdvAcctForecastDimSource = Metadata & sObject &  {
    AdvAcctForecastDimSrcName?: string;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: AdvAcctForecastDimSource;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SourceObjectName?: string;
    SystemModstamp?: Date;
}

export type AdvAcctForecastDimension =  & sObject &  {
    AdvAcctForecastDimName?: string;
    AdvAcctForecastDimSource?: AdvAcctForecastDimSource;
    AdvAcctForecastDimSourceId?: ID;
    AdvAcctForecastSet?: AdvAccountForecastSet;
    AdvAcctForecastSetId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DimensionFieldName?: string;
    HierarchySequenceNumber?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type AdvAcctForecastMeasureDef =  & sObject &  {
    AdvAccountForecastSet?: sObject;
    AdvAccountForecastSetId?: ID;
    AdvAcctForecastMeasureDefName?: string;
    AdvAcctFrcstDplyGroupItemMeasure?: QueryResult;
    AggregationType?: AdvAcctFcstAggregationType;
    ComputationMethod?: AdvAcctFcstComputationMethod;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ForecastDataMeasureName?: string;
    ForecastMeasureName?: string;
    ForecastMeasureType?: AdvAcctFcstMeasureType;
    IsAdjustmentTracked?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type AdvAcctForecastPeriodGroup = Metadata & sObject &  {
    AdvAcctForecastPeriodGroup?: QueryResult;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ForecastPeriodGroup?: QueryResult;
    ForecastPeriodGroupName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: AdvAcctForecastPeriodGroup;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    StartPeriod?: number;
    Status?: ForecastPeriodGroupStatus;
    SystemModstamp?: Date;
}

export type AdvAcctFrcstDisplayGroup =  & sObject &  {
    AdvAccountForecastSet?: sObject;
    AdvAccountForecastSetId?: ID;
    AdvAcctFrcstDisplayGroupName?: string;
    AdvAcctFrcstDplyGroupItemParent?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    GroupType?: AdvAcctFrcstDisplayGroupType;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    UserProfile?: Profile;
    UserProfileId?: ID;
}

export type AdvAcctFrcstDplyGroupItem =  & sObject &  {
    AdvAcctFrcstDisplayGroup?: AdvAcctFrcstDisplayGroup;
    AdvAcctFrcstDisplayGroupId?: ID;
    AdvAcctFrcstDplyGroupItemName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayOrder?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MeasureReference?: AdvAcctForecastMeasureDef;
    MeasureReferenceId?: ID;
    SystemModstamp?: Date;
}

export type AdvancedObjectMapping = Metadata & sObject &  {
    Client?: FieldMappingClient;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AdvancedObjectMapping;
    ModuleNamespace?: string;
    SourceObject?: string;
    SystemModstamp?: Date;
    TargetObject?: string;
}

export type Ai4mSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsUmaGlobalModelEnabled?: boolean;
    IsUmaStoEnabled?: boolean;
    Metadata?: Ai4mSettings;
}

export type AllPackage = sObject &  {
    ApexGackUserId?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    LastModifiedDate?: Date;
    LmaOrganizationId?: ID;
    LocalSystemModstampDate?: Date;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OptionsAppAnalyticsEnabled?: boolean;
    OptionsDataCloudPackage?: boolean;
    PackageCategory?: PackageCategory;
    PackageCrc?: number;
    PackageItems?: QueryResult;
    PackageName?: string;
    Server?: string;
    SourceSystemModstampDate?: Date;
    SystemModstamp?: Date;
}

export type AnalyticsSettings = MetadataForSettings & sObject &  {
    AlwaysGenPreviews?: boolean;
    AnalyticsAdoptionMetadata?: boolean;
    AutoInstallApps?: boolean;
    BundleCachingOptOut?: boolean;
    CanAccessAnalyticsViaApi?: boolean;
    CanAnnotateDashboards?: boolean;
    CanEnableSavedView?: boolean;
    CanExploreDataConversationally?: boolean;
    CanShareAppsWithCommunities?: boolean;
    CanViewThumbnailAssets?: boolean;
    ConcurrencyLimitSharing?: boolean;
    DurableId?: string;
    EtlOrchestrationPref?: boolean;
    FullName?: string;
    IsAmazonRedshiftOutputConnectorEnabled?: boolean;
    IsAnalyticsEncryptionEnabled?: boolean;
    IsAnalyticsSharingEnableEnabled?: boolean;
    IsAutoCompleteComboEnabled?: boolean;
    IsAutonomousExperienceEnabled?: boolean;
    IsAzureDlGen2OutputConnectorEnabled?: boolean;
    IsC360GlobalProfileDataEnabled?: boolean;
    IsCreateLegacyDataflowsEnabled?: boolean;
    IsCrmaDataCloudIntegrationEnabled?: boolean;
    IsDashboardComponentSnapshotEnabled?: boolean;
    IsDashboardFlexiTableEnabled?: boolean;
    IsDashboardToPdfEnableEnabled?: boolean;
    IsDataCloudReportingPrefEnabled?: boolean;
    IsDiscoveryOptimizationEnabled?: boolean;
    IsEmailReportsToPortalUsersEnabled?: boolean;
    IsFirebirdEditorEnabled?: boolean;
    IsFloatingReportHeadersEnabled?: boolean;
    IsHighVolumePushbackEnabled?: boolean;
    IsInsightsEnabled?: boolean;
    IsInsightsHcModeEnabled?: boolean;
    IsLightningReportBuilderEnabled?: boolean;
    IsLotusNotesImagesEnabled?: boolean;
    IsMassEnableReportBuilderEnabled?: boolean;
    IsNewChartsEngineEnabled?: boolean;
    IsNullDimensionEnabled?: boolean;
    IsOrgCanSeeLivePreviewsEnabled?: boolean;
    IsOrgCanViewTableauEnabled?: boolean;
    IsOrgCanViewThumbnailForOaEnabled?: boolean;
    IsOrgHasMobileOfflineEnabledEnabled?: boolean;
    IsOrgHasWatchlistEnabledEnabled?: boolean;
    IsQueryLiveConnectorsEnabled?: boolean;
    IsRemoveFooterForRepDisplayEnabled?: boolean;
    IsRemoveFooterFromRepExpEnabled?: boolean;
    IsReportHideXlsExportPrefEnabled?: boolean;
    IsReportInlineEditPrefEnabled?: boolean;
    IsReportNotificationsEnableEnabled?: boolean;
    IsRequestPrioritySchdlEnabled?: boolean;
    IsS1AnalyticsEclairEnableEnabled?: boolean;
    IsS3OutputConnectorEnabled?: boolean;
    IsSalesforceOutputConnectorEnabled?: boolean;
    IsSecureImageSharingEnabled?: boolean;
    IsSfxJoinedReportsEnableEnabled?: boolean;
    IsSnowflakeOutputConnectorEnabled?: boolean;
    IsSummaryFilterOrgPrefEnabled?: boolean;
    IsTableauHyperOutputConnectorEnabled?: boolean;
    IsUseOldChartsLookAndFeelEnabled?: boolean;
    IsWaveAssetsNewDateVersionEnabled?: boolean;
    IsWaveCustomFiscalEnabled?: boolean;
    IsWaveIndexMvDimEnabled?: boolean;
    IsWaveIndexMvDimV2Enabled?: boolean;
    IsWaveMultiCurrencyEnabled?: boolean;
    IsWaveRecordNavigationEnabled?: boolean;
    IsWaveReplicationEnabled?: boolean;
    IsWaveSharingInheritanceEnabled?: boolean;
    IsWaveSqlCfIndexingEnabled?: boolean;
    IsWaveTrendedDatasetCleanupEnabled?: boolean;
    IsWriteToDataCloudEnabled?: boolean;
    MaxHoursAppInProgress?: number;
    Metadata?: AnalyticsSettings;
    QueryCachingOptOut?: boolean;
    RecipeDirectDataPref?: boolean;
    RecipeFiscalPref?: boolean;
    RecipePreCachingOptOut?: boolean;
    RecipeStagedDataPref?: boolean;
    ReplaceBlankMeasuresWithNulls?: boolean;
    SetWaveIsYearEndFiscalYear?: boolean;
    SonicEnabled?: boolean;
    TurnOnTimeZones?: boolean;
}

export type AnimationRule = Metadata & sObject &  {
    AnimationFrequency?: AnimationFrequencyUnit;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AnimationRule;
    ModuleNamespace?: string;
    RecordType?: RecordType;
    RecordTypeContext?: AnimationRuleRecordTypeContext;
    RecordTypeId?: ID;
    SobjectType?: string;
    SystemModstamp?: Date;
    TargetField?: string;
    TargetFieldChangeToValues?: string;
}

export type ApexClass = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    Body?: string;
    BodyCrc?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsValid?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LengthWithoutComments?: number;
    ManageableState?: ManageableState;
    Metadata?: ApexClass;
    Name?: string;
    NamespacePrefix?: string;
    Status?: ApexCodeUnitStatus;
    SymbolTable?: SymbolTable;
    SystemModstamp?: Date;
}

export type ApexClassDefinition = sObject &  {
    ApiVersion?: number;
    Body?: string;
    ClassIdentifier?: string;
    ClassName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DurableId?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LengthWithoutComments?: number;
    NamespacePrefix?: string;
    ProviderIdentifier?: string;
}

export type ApexClassMember = sObject &  {
    Body?: string;
    Content?: string;
    ContentEntity?: ApexClass;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: ApexClass;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SymbolTable?: SymbolTable;
    SystemModstamp?: Date;
}

export type ApexCodeCoverage = sObject &  {
    ApexClassOrTrigger?: sObject;
    ApexClassOrTriggerId?: ID;
    ApexTestClass?: ApexClass;
    ApexTestClassId?: ID;
    Coverage?: Coverage;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NumLinesCovered?: number;
    NumLinesUncovered?: number;
    SystemModstamp?: Date;
    TestMethodName?: string;
}

export type ApexCodeCoverageAggregate = sObject &  {
    ApexClassOrTrigger?: sObject;
    ApexClassOrTriggerId?: ID;
    Coverage?: Coverage;
    CoverageLastModifiedDate?: Date;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NumLinesCovered?: number;
    NumLinesUncovered?: number;
    SystemModstamp?: Date;
}

export type ApexComponent = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    ControllerKey?: string;
    ControllerType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Markup?: string;
    MasterLabel?: string;
    ModuleNamespace?: string;
    Name?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ApexComponentMember = sObject &  {
    Body?: string;
    Content?: string;
    ContentEntity?: ApexComponent;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: ApexComponent;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type ApexDebuggerBreakpoint = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    Expression?: string;
    FileName?: string;
    Function?: string;
    HitCondition?: ApexDebuggerBreakpointHitCondition;
    HitValue?: number;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Line?: number;
    MayEdit?: boolean;
    Name?: string;
    Session?: ApexDebuggerSession;
    SessionId?: ID;
    SystemModstamp?: Date;
    Type?: ApexDebuggerBreakpointType;
}

export type ApexDebuggerEvent = sObject &  {
    Breakpoint?: ApexDebuggerBreakpoint;
    BreakpointId?: ID;
    ClassBody?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    Description?: string;
    FileName?: string;
    HasClassBody?: boolean;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Line?: number;
    MayEdit?: boolean;
    Name?: string;
    Request?: ApexDebuggerRequest;
    RequestId?: ID;
    RequestSequence?: number;
    Sequence?: number;
    Session?: ApexDebuggerSession;
    SessionId?: ID;
    Stacktrace?: string;
    SystemModstamp?: Date;
    Type?: ApexDebuggerEventType;
    Username?: string;
}

export type ApexDebuggerLicense = sObject &  {
    ChildOrg?: string;
    ChildSession?: string;
    ChildUser?: string;
    ChildUsername?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    Expires?: Date;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LicenseType?: ApexDebuggerLicenseType;
    MayEdit?: boolean;
    Name?: string;
    SystemModstamp?: Date;
}

export type ApexDebuggerRequest = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    Description?: string;
    Events?: QueryResult;
    HasDebuggingPermit?: boolean;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayEdit?: boolean;
    Name?: string;
    Port?: number;
    RequestIdentifier?: string;
    RequestType?: ApexRequestType;
    Server?: string;
    Session?: ApexDebuggerSession;
    SessionId?: ID;
    SystemModstamp?: Date;
}

export type ApexDebuggerSession = sObject &  {
    Breakpoints?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    EntryPointFilter?: string;
    Events?: QueryResult;
    HostAndPort?: string;
    IsAsyncIgnored?: boolean;
    IsDeleted?: boolean;
    IsInternal?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    License?: string;
    LicenseOrg?: string;
    LicenseType?: ApexDebuggerLicenseType;
    MayEdit?: boolean;
    Name?: string;
    RequestTypeFilter?: string;
    Requests?: QueryResult;
    Status?: ApexDebuggerStatus;
    StatusBy?: ApexDebuggerKilledBy;
    StatusMessage?: string;
    StatusUsername?: string;
    SystemModstamp?: Date;
    UserIdFilter?: string;
}

export type ApexEmailNotification =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Email?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    User?: User;
    UserId?: ID;
}

export type ApexExecutionOverlayAction = sObject &  {
    ActionScript?: string;
    ActionScriptType?: ApexExecutionOverlayActionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExecutableEntity?: sObject;
    ExecutableEntityId?: ID;
    ExecutableEntityName?: string;
    ExpirationDate?: Date;
    IsDeleted?: boolean;
    IsDumpingHeap?: boolean;
    Iteration?: number;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Line?: number;
    Scope?: User;
    ScopeId?: ID;
    SurrogateKey?: string;
    SystemModstamp?: Date;
}

export type ApexExecutionOverlayResult = sObject &  {
    ActionScript?: string;
    ActionScriptType?: ApexExecutionOverlayActionType;
    ApexResult?: ApexResult;
    ClassName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExpirationDate?: Date;
    HeapDump?: HeapDump;
    IsDeleted?: boolean;
    IsDumpingHeap?: boolean;
    Iteration?: number;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Line?: number;
    Namespace?: string;
    OverlayResultLength?: number;
    RequestedBy?: User;
    RequestedById?: ID;
    SOQLResult?: SOQLResult;
    SystemModstamp?: Date;
    User?: sObject;
    UserId?: ID;
}

export type ApexInvocableMethod = sObject &  {
    ActionType?: InvocableActionType;
    Category?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    IsDeleted?: boolean;
    IsStandard?: boolean;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MethodName?: string;
    ParentApexClass?: ApexClass;
    ParentApexClassId?: ID;
    SystemModstamp?: Date;
}

export type ApexInvocableMethodParam = sObject &  {
    ApexClass?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: string;
    Description?: string;
    IsDeleted?: boolean;
    IsInput?: boolean;
    IsOutput?: boolean;
    IsRequired?: boolean;
    IsSystemGeneratedOutput?: boolean;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MaxOccurs?: number;
    ParamName?: string;
    ParentApexMethod?: ApexInvocableMethod;
    ParentApexMethodId?: ID;
    SobjecType?: string;
    SystemModstamp?: Date;
}

export type ApexLog = sObject &  {
    Application?: string;
    DurationMilliseconds?: number;
    LastModifiedDate?: Date;
    Location?: ApexLogLocation;
    LogLength?: number;
    LogUser?: sObject;
    LogUserId?: ID;
    Operation?: string;
    Request?: string;
    RequestIdentifier?: string;
    StartTime?: Date;
    Status?: string;
    SystemModstamp?: Date;
}

export type ApexOrgWideCoverage = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PercentCovered?: number;
    SystemModstamp?: Date;
}

export type ApexPage = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    ControllerKey?: string;
    ControllerType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    FullName?: string;
    IsAvailableInTouch?: boolean;
    IsConfirmationTokenRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Markup?: string;
    MasterLabel?: string;
    Metadata?: ApexPage;
    ModuleNamespace?: string;
    Name?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ApexPageInfo = sObject &  {
    ApexPageId?: string;
    ApiVersion?: number;
    Description?: string;
    DurableId?: string;
    IsAvailableInTouch?: boolean;
    IsShowHeader?: string;
    MasterLabel?: string;
    Name?: string;
    NameSpacePrefix?: string;
}

export type ApexPageMember = sObject &  {
    Body?: string;
    Content?: string;
    ContentEntity?: ApexPage;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: ApexPage;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type ApexSettings = MetadataForSettings & sObject &  {
    DefaultQueueableDelay?: number;
    DurableId?: string;
    FullName?: string;
    IsAggregateCodeCoverageOnlyEnabled?: boolean;
    IsApexAccessRightsPrefEnabled?: boolean;
    IsApexApprovalLockUnlockEnabled?: boolean;
    IsApexCtrlImplicitWithSharingPrefEnabled?: boolean;
    IsApexPropertyGetterPrefEnabled?: boolean;
    IsAuraApexCtrlAuthUserAccessCheckPrefEnabled?: boolean;
    IsAuraApexCtrlGuestUserAccessCheckPrefEnabled?: boolean;
    IsCompileOnDeployEnabled?: boolean;
    IsDisableParallelApexTestingEnabled?: boolean;
    IsGaplessTestAutoNumEnabled?: boolean;
    IsMngdCtrlActionAccessPrefEnabled?: boolean;
    IsNonCertifiedApexMdCrudEnabled?: boolean;
    IsRestrictCommunityExecAnonEnabled?: boolean;
    IsSecureNoArgConstructorPrefEnabled?: boolean;
    Metadata?: ApexSettings;
}

export type ApexTestQueueItem = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExtendedStatus?: string;
    Methods?: string;
    ParentJobId?: ID;
    ShouldSkipCodeCoverage?: boolean;
    Status?: AsyncApexJobStatus;
    SystemModstamp?: Date;
    TestRunResultId?: ID;
}

export type ApexTestResult = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    ApexLog?: ApexLog;
    ApexLogId?: ID;
    ApexTestResults?: QueryResult;
    ApexTestRunResult?: ApexTestRunResult;
    ApexTestRunResultId?: ID;
    AsyncApexJob?: AsyncApexJob;
    AsyncApexJobId?: ID;
    Message?: string;
    MethodName?: string;
    Outcome?: ApexTestOutcome;
    QueueItem?: ApexTestQueueItem;
    QueueItemId?: ID;
    RunTime?: number;
    StackTrace?: string;
    SystemModstamp?: Date;
    TestTimestamp?: Date;
}

export type ApexTestResultLimits = sObject &  {
    ApexTestResult?: ApexTestResult;
    ApexTestResultId?: ID;
    AsyncCalls?: number;
    Callouts?: number;
    Cpu?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Dml?: number;
    DmlRows?: number;
    Email?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LimitContext?: string;
    LimitExceptions?: string;
    MobilePush?: number;
    QueryRows?: number;
    Soql?: number;
    Sosl?: number;
    SystemModstamp?: Date;
}

export type ApexTestRunResult = sObject &  {
    AsyncApexJob?: AsyncApexJob;
    AsyncApexJobId?: ID;
    ClassesCompleted?: number;
    ClassesEnqueued?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EndTime?: Date;
    IsAllTests?: boolean;
    IsDeleted?: boolean;
    JobName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MethodsCompleted?: number;
    MethodsEnqueued?: number;
    MethodsFailed?: number;
    Source?: string;
    StartTime?: Date;
    Status?: AsyncApexJobStatus;
    SystemModstamp?: Date;
    TestTime?: number;
    User?: User;
    UserId?: ID;
}

export type ApexTestSuite = Metadata & sObject &  {
    ApexClassIds?: ID | ID[];
    ApexClassJunctions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    TestSuiteName?: string;
}

export type ApexTrigger = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    Body?: string;
    BodyCrc?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    IsValid?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LengthWithoutComments?: number;
    ManageableState?: ManageableState;
    Metadata?: ApexTrigger;
    ModuleNamespace?: string;
    Name?: string;
    NamespacePrefix?: string;
    Status?: ApexCodeUnitStatus;
    SystemModstamp?: Date;
    TableEnumOrId?: string;
    UsageAfterDelete?: boolean;
    UsageAfterInsert?: boolean;
    UsageAfterUndelete?: boolean;
    UsageAfterUpdate?: boolean;
    UsageBeforeDelete?: boolean;
    UsageBeforeInsert?: boolean;
    UsageBeforeUpdate?: boolean;
    UsageIsBulk?: boolean;
}

export type ApexTriggerMember = sObject &  {
    Body?: string;
    Content?: string;
    ContentEntity?: ApexTrigger;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: ApexTrigger;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SymbolTable?: SymbolTable;
    SystemModstamp?: Date;
}

export type ApexTypeImplementor = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    ClassName?: string;
    ClassNamespacePrefix?: string;
    DurableId?: string;
    InterfaceApexClass?: ApexClass;
    InterfaceApexClassId?: ID;
    InterfaceName?: string;
    InterfaceNamespacePrefix?: string;
    IsConcrete?: boolean;
}

export type AppAnalyticsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAppAnalyticsOptOutEnabled?: boolean;
    IsSimulationModeEnabled?: boolean;
    Metadata?: AppAnalyticsSettings;
}

export type AppExperienceSettings = MetadataForSettings & sObject &  {
    DoesHideAllAppsInAppLauncher?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: AppExperienceSettings;
}

export type AppExplorationDataConsent = Metadata & sObject &  {
    ApplicationName?: string;
    AvailableObjects?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EnabledObjects?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsProjectAccessEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ProjectName?: string;
    SystemModstamp?: Date;
}

export type ApplicationRecordTypeConfig = Metadata & sObject &  {
    ApplicationUsageType?: ApplicationUsageType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ObjectName?: string;
    RecordTypeName?: string;
    SystemModstamp?: Date;
}

export type ApplicationSubtypeDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApplicationUsageType?: AppDomainUsageType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type AppointmentAssignmentPolicy = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AppointmentAssignmentPolicy;
    ModuleNamespace?: string;
    PolicyApplicableDuration?: PolicyApplicableDuration;
    PolicyType?: AssignmentPolicyType;
    SystemModstamp?: Date;
    UtilizationFactor?: UtilizationFactor;
}

export type AppointmentSchedulingPolicy = Metadata & sObject &  {
    AppointmentAssignmentPolicy?: AppointmentAssignmentPolicy;
    AppointmentAssignmentPolicyId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExtCalEventHandler?: ApexClass;
    ExtCalEventHandlerId?: ID;
    Fullname?: string;
    IsDeleted?: boolean;
    IsSvcTerrOpHoursWithShiftsUsed?: boolean;
    IsSvcTerritoryMemberShiftUsed?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AppointmentSchedulingPolicy;
    ModuleNamespace?: string;
    ShouldCheckExternalCalendar?: boolean;
    ShouldConsiderCalendarEvents?: boolean;
    ShouldEnforceExcludedResource?: boolean;
    ShouldEnforceRequiredResource?: boolean;
    ShouldMatchSkill?: boolean;
    ShouldMatchSkillLevel?: boolean;
    ShouldRespectVisitingHours?: boolean;
    ShouldUsePrimaryMembers?: boolean;
    ShouldUseSecondaryMembers?: boolean;
    SystemModstamp?: Date;
}

export type ApptBookingConfig = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    ApptBookingUrlConfigs?: QueryResult;
    AssignedProviderRole?: string;
    AttendanceDaysCount?: number;
    AttendanceThresholdPct?: number;
    BestTimeSlotsDefinition?: string;
    CanCreateDuplicateRecord?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsSingleSourceSystem?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    ServiceApptRecordTypeName?: string;
    SystemModstamp?: Date;
}

export type ApptBookingUrlConfig = sObject &  {
    AdditionalHeaders?: string;
    ApptBookingConfig?: ApptBookingConfig;
    ApptBookingConfigId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EndpointName?: AppointmentEndpointName;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    UrlPath?: string;
}

export type AssessmentConfiguration = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Configuration?: AssessmentConfigurationOption;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Resolution?: FlowDefinition;
    ResolutionId?: ID;
    SystemModstamp?: Date;
    Type?: AssessmentType;
}

export type AssessmentQuestionConfig = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type AssessmentQuestionSetConfig = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type AssignmentRule = Metadata & sObject &  {
    Active?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
}

export type AssistantContextItem = Metadata & sObject &  {
    AssistantVersion?: AssistantVersion;
    AssistantVersionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    Index?: number;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AssistantContextItem;
    ModuleNamespace?: string;
    ParentContextItem?: AssistantContextItem;
    ParentContextItemId?: ID;
    ParentContextItems?: QueryResult;
    ParentRelationField?: string;
    ParentRelationFieldCache?: string;
    QuickActionParams?: QueryResult;
    SearchType?: AssistantSearchType;
    SlotClass?: string;
    SobjectActionParams?: QueryResult;
    SobjectActions?: QueryResult;
    SobjectType?: string;
    SobjectTypeCache?: string;
    SystemModstamp?: Date;
    WhereClause?: string;
}

export type AssistantDefinition = Metadata & sObject &  {
    AppVersionNumber?: number;
    AssistantVersions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AssistantDefinition;
    ModuleNamespace?: string;
    Status?: AssistantDefinitionStatus;
    SystemModstamp?: Date;
}

export type AssistantDefinitionProfile =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Definition?: AssistantDefinition;
    DefinitionId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Profile?: Profile;
    ProfileId?: ID;
    SystemModstamp?: Date;
}

export type AssistantSkill =  & sObject &  {
    AssistantSkillIntents?: QueryResult;
    AssistantVersion?: AssistantVersion;
    AssistantVersionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    ExternalModel?: string;
    Index?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MlDomain?: MlDomain;
    MlDomainId?: ID;
    SkillType?: string;
    SystemModstamp?: Date;
}

export type AssistantSkillIntent =  & sObject &  {
    Action?: sObject;
    ActionId?: ID;
    AssistantSkill?: AssistantSkill;
    AssistantSkillId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    Field?: string;
    Index?: number;
    IntentName?: string;
    IsDeleted?: boolean;
    IsPromptRequired?: boolean;
    IsRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MlIntent?: MlIntent;
    MlIntentId?: ID;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type AssistantSkillQuickAction = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AssistantSkillQuickAction;
    ModuleNamespace?: string;
    Prompt?: string;
    QuickAction?: QuickActionDefinition;
    QuickActionId?: ID;
    QuickActionName?: string;
    QuickActionNamespace?: string;
    QuickActionParams?: QueryResult;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type AssistantSkillQuickActionParam =  & sObject &  {
    AssistantAction?: AssistantSkillQuickAction;
    AssistantActionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    Field?: string;
    FieldCache?: string;
    Index?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Prompt?: string;
    ReferenceTarget?: AssistantContextItem;
    ReferenceTargetId?: ID;
    SlotClass?: string;
    SystemModstamp?: Date;
}

export type AssistantSkillSobjectAction = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AssistantSkillSobjectAction;
    ModuleNamespace?: string;
    Prompt?: string;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SobjectActionParams?: QueryResult;
    SobjectType?: string;
    SobjectTypeCache?: string;
    SystemModstamp?: Date;
    Target?: AssistantContextItem;
    TargetId?: ID;
    Type?: AssistantSkillSobjectActionType;
}

export type AssistantSkillSobjectParam =  & sObject &  {
    AssistantAction?: AssistantSkillSobjectAction;
    AssistantActionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    Field?: string;
    FieldCache?: string;
    Index?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Prompt?: string;
    ReferenceTarget?: AssistantContextItem;
    ReferenceTargetId?: ID;
    SlotClass?: string;
    SystemModstamp?: Date;
}

export type AssistantVersion = Metadata & sObject &  {
    AssistantSkills?: QueryResult;
    ContextItems?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Definition?: AssistantDefinition;
    DefinitionId?: ID;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: AssistantVersion;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    VersionActions?: QueryResult;
    VersionNumber?: number;
}

export type AssistantVersionAction =  & sObject &  {
    Action?: sObject;
    ActionId?: ID;
    AssistantVersion?: AssistantVersion;
    AssistantVersionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type AssociationEngineSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAssociationEngineEnabled?: boolean;
    Metadata?: AssociationEngineSettings;
}

export type AsyncApexJob = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    AsyncApex?: QueryResult;
    CompletedDate?: Date;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CronTriggerId?: ID;
    ExtendedStatus?: string;
    FileBasedApexClass?: string;
    IsFileBasedJob?: boolean;
    JobItemsProcessed?: number;
    JobType?: AsyncApexJobType;
    LastProcessed?: string;
    LastProcessedOffset?: number;
    MessageIdentifierId?: ID;
    MethodName?: string;
    NumAttempts?: number;
    NumberOfErrors?: number;
    OrderedByDate?: Date;
    ParentJobId?: ID;
    QueueNumber?: number;
    Status?: AsyncApexJobStatus;
    TotalJobItems?: number;
}

export type AudienceContactPoint =  & sObject &  {
    AudienceDefinition?: MarketAudienceDefinition;
    AudienceDefinitionId?: ID;
    AudienceVersion?: number;
    ContactPointType?: ContactPointType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SlotName?: string;
    SystemModstamp?: Date;
}

export type AuraDefinition =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    AuraDefinitionBundle?: AuraDefinitionBundle;
    AuraDefinitionBundleId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefType?: AuraDefType;
    Format?: AuraFormat;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Source?: string;
    SystemModstamp?: Date;
}

export type AuraDefinitionBundle = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: AuraDefinitionBundle;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type AuraDefinitionChange = sObject &  {
    Content?: string;
    ContentEntity?: AuraDefinition;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeleteIndicator?: boolean;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    Source?: string;
    SystemModstamp?: Date;
}

export type AutoResponseRule = Metadata & sObject &  {
    Active?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
}

export type AutomatedContactsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAddContactAutomaticallyEnabled?: boolean;
    IsAddContactRoleAutomaticallyEnabled?: boolean;
    IsAddContactRoleWithSuggestionEnabled?: boolean;
    IsAddContactWithSuggestionEnabled?: boolean;
    Metadata?: AutomatedContactsSettings;
}

export type B2BMktCampaignSyncConfig = sObject &  {
    CampaignRecordType?: RecordType;
    CampaignRecordTypeId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    PardotTenant?: PardotTenant;
    PardotTenantId?: ID;
    SystemModstamp?: Date;
}

export type B2BMktVirtualObjectField = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Errors?: string;
    ExternalIdentifier?: string;
    IsDeleted?: boolean;
    IsSynced?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncedAt?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ObjectType?: string;
    PardotAccount?: string;
    PardotFieldName?: string;
    SalesforceFieldName?: string;
    SystemModstamp?: Date;
}

export type BatchCalcJobDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BatchJobDefinition?: BatchJobDefinition;
    BatchJobDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSpaceApiName?: string;
    DataSyncJobs?: QueryResult;
    DeveloperName?: string;
    ExecutionPlatformType?: ExecutionPlatformType;
    FullName?: string;
    IsDeleted?: boolean;
    IsTemplate?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: BatchCalcJobDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ProcessType?: BatchCalcProcessType;
    SystemModstamp?: Date;
}

export type BatchCalcJobDefinitionView = sObject &  {
    CalculationDefinition?: string;
    DataSpaceApiName?: string;
    Description?: string;
    DurableId?: string;
    ExecutionPlatformType?: ExecutionPlatformType;
    InstalledPackageName?: string;
    IsActive?: boolean;
    IsTemplate?: boolean;
    LastModifiedBy?: string;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Name?: string;
    NamespacePrefix?: string;
    ProcessType?: BatchCalcProcessType;
}

export type BatchCalcJobProcessType = Metadata & sObject &  {
    DurableId?: string;
    EnumOrId?: string;
    FullName?: string;
    IsInternal?: boolean;
    IsListViewVisible?: boolean;
    Label?: string;
    Metadata?: BatchCalcJobProcessType;
    Name?: string;
}

export type BatchDataSource =  & sObject &  {
    BatchJobDefinition?: BatchJobDefinition;
    BatchJobDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CriteriaJoinCondition?: string;
    CriteriaJoinType?: CriteriaJoinType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SourceFieldName?: string;
    SourceTableName?: string;
    SystemModstamp?: Date;
}

export type BatchDataSrcFilterCriteria =  & sObject &  {
    BatchDataSource?: BatchDataSource;
    BatchDataSourceId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DynamicValueType?: DataSrcDynamicFilterType;
    FieldName?: string;
    FieldValue?: string;
    FilterCriteriaSequence?: number;
    IsDeleted?: boolean;
    IsDynamicValue?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Operator?: DataSourceFilterOperator;
    SystemModstamp?: Date;
}

export type BatchJobDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ProcessGroup?: string;
    Status?: BatchJobDefinitionStatus;
    SystemModstamp?: Date;
    Type?: BatchJobDefinitionType;
}

export type BatchProcessJobDefView = sObject &  {
    DurableId?: string;
    IsActive?: boolean;
    Label?: string;
    Name?: string;
    NamespacePrefix?: string;
    ProcessDefinition?: string;
    ProcessGroup?: string;
    SourceObjectName?: string;
    Type?: string;
    TypeInstance?: string;
}

export type BatchProcessJobDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BatchJobDefinition?: BatchJobDefinition;
    BatchJobDefinitionId?: ID;
    BatchJobDefinitionName?: string;
    BatchSize?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FlowDefinition?: FlowDefinition;
    FlowDefinitionId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: BatchProcessJobDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ProcessGroup?: string;
    RecordIdVariable?: string;
    RetryCount?: number;
    RetryInterval?: number;
    Status?: BatchJobDefinitionStatus;
    SystemModstamp?: Date;
    Type?: BatchJobDefinitionType;
    TypeInstance?: string;
}

export type BenefitAction = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BenefitParameterActions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FlowDefinition?: string;
    FlowInstance?: string;
    FullName?: string;
    IsActive?: boolean;
    IsBenefitExpirationAllowed?: boolean;
    IsBenefitUpdateAllowed?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MemberBenefitVariableName?: string;
    Metadata?: BenefitAction;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ProcessType?: BenefitActionProcessType;
    SystemModstamp?: Date;
    Type?: BenefitActionType;
}

export type BenefitActionParameter =  & sObject &  {
    BenefitAction?: BenefitAction;
    BenefitActionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: BenefitActionDataType;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ObjectName?: string;
    PicklistName?: string;
    SystemModstamp?: Date;
}

export type BenefitActionParameterValue =  & sObject &  {
    BenefitActionParameter?: BenefitActionParameter;
    BenefitActionParameterId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParameterValue?: string;
    SystemModstamp?: Date;
}

export type BldgEnrgyIntensityCnfg = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BuildingEnergyIntensityType?: BuildingEnergyIntensityType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SystemModstamp?: Date;
}

export type BlockchainSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsBcpEnabled?: boolean;
    IsEtpNftEnabled?: boolean;
    Metadata?: BlockchainSettings;
}

export type BotDefinition = sObject &  {
    ActiveVersion?: BotVersion;
    ActiveVersionId?: ID;
    BotMlDomain?: MlDomain;
    BotMlDomainId?: ID;
    BotUser?: User;
    BotUserId?: ID;
    BotVersions?: QueryResult;
    ConversationChannelProviders?: QueryResult;
    ConversationDefinitionVariables?: QueryResult;
    ConversationLanguage?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultOutboundFlow?: FlowDefinition;
    DefaultOutboundFlowId?: ID;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IconUrl?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastVersionNumber?: number;
    MasterLabel?: string;
    Metadata?: Bot;
    ModuleNamespace?: string;
    OptionsLogPrivateConvData?: boolean;
    OptionsRichContentEnabled?: boolean;
    SessionTimeout?: number;
    SystemModstamp?: Date;
    Type?: BotType;
}

export type BotVersion = Metadata & sObject &  {
    BotDefinition?: BotDefinition;
    BotDefinitionId?: ID;
    ConversationDefinitionDialogGroups?: QueryResult;
    ConversationDefinitionDialogs?: QueryResult;
    ConversationDefinitionGoals?: QueryResult;
    ConversationDefinitionNlpProviders?: QueryResult;
    ConversationDefinitionSystemDialogs?: QueryResult;
    ConversationDefinitionVariables?: QueryResult;
    ConversationRecordOutputFields?: QueryResult;
    CopilotPrimaryLanguage?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EntryDialog?: ConversationDefinitionDialog;
    EntryDialogId?: ID;
    GenAiPlannerBotVersionDefinitions?: QueryResult;
    IsDeleted?: boolean;
    LastActivatedDate?: Date;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MainMenuDialog?: ConversationDefinitionDialog;
    MainMenuDialogId?: ID;
    Metadata?: BotVersion;
    MlExternalModels?: QueryResult;
    ModuleNamespace?: string;
    OptionsArticleAnswersGPTEnabled?: boolean;
    OptionsCitationsEnabled?: boolean;
    OptionsIntentDisambiguationEnabled?: boolean;
    OptionsIntentV3Enabled?: boolean;
    OptionsKnowledgeFallbackEnabled?: boolean;
    OptionsSmallTalkEnabled?: boolean;
    PredictionMaxChoices?: number;
    PredictionSetup?: ConversationDefinitionPredictionSetup;
    PredictionSetupId?: ID;
    ResponseDelayMilliseconds?: number;
    Status?: BotStatusCode;
    SystemModstamp?: Date;
    ToneType?: GenAiBotToneType;
    VersionNumber?: number;
}

export type BranchManagementSettings = MetadataForSettings & sObject &  {
    AssociateAccountWithBranch?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: BranchManagementSettings;
}

export type BrandingSet = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: BrandingSet;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: string;
}

export type BrandingSetProperty =  & sObject &  {
    BrandingSet?: BrandingSet;
    BrandingSetId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PropertyName?: string;
    PropertyValue?: string;
    SystemModstamp?: Date;
}

export type BriefcaseDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: BriefcaseDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: BriefcaseType;
}

export type BusProcessFeedbackConfig = sObject &  {
    ActionName?: string;
    ActionType?: ExpFeedbackCollType;
    AllManagedPackageMemberId?: ID;
    BusinessProcessFeedbacks?: QueryResult;
    ConfigurationDescription?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Field?: string;
    FieldValue?: string;
    FlowDefinition?: FlowDefinition;
    FlowDefinitionId?: ID;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LatestFlowVersion?: Flow;
    LatestFlowVersionId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Object?: string;
    Recipient?: string;
    RecordType?: string;
    SystemModstamp?: Date;
    TriggerAction?: RecordTriggerType;
}

export type BusinessHours = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FridayEndTime?: Date;
    FridayStartTime?: Date;
    IsActive?: boolean;
    IsDefault?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastViewedDate?: Date;
    MessagingChannels?: QueryResult;
    MondayEndTime?: Date;
    MondayStartTime?: Date;
    Name?: string;
    SaturdayEndTime?: Date;
    SaturdayStartTime?: Date;
    SundayEndTime?: Date;
    SundayStartTime?: Date;
    SystemModstamp?: Date;
    ThursdayEndTime?: Date;
    ThursdayStartTime?: Date;
    TimeZoneSidKey?: string;
    TuesdayEndTime?: Date;
    TuesdayStartTime?: Date;
    WednesdayEndTime?: Date;
    WednesdayStartTime?: Date;
}

export type BusinessHoursEntry = Metadata & sObject &  {
    Active?: boolean;
    Default?: boolean;
    DurableId?: string;
    FridayEndTime?: Date;
    FridayStartTime?: Date;
    MondayEndTime?: Date;
    MondayStartTime?: Date;
    Name?: string;
    SaturdayEndTime?: Date;
    SaturdayStartTime?: Date;
    SundayEndTime?: Date;
    SundayStartTime?: Date;
    ThursdayEndTime?: Date;
    ThursdayStartTime?: Date;
    TimeZoneIdentifier?: string;
    TuesdayEndTime?: Date;
    TuesdayStartTime?: Date;
    WednesdayEndTime?: Date;
    WednesdayStartTime?: Date;
}

export type BusinessHoursSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    Metadata?: BusinessHoursSettings;
}

export type BusinessProcess = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    IsActive?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: BusinessProcess;
    Name?: string;
    NamespacePrefix?: string;
}

export type BusinessProcessDefinition =  & sObject &  {
    BusinessProcessFeedbacks?: QueryResult;
    BusinessProcessGroup?: BusinessProcessGroup;
    BusinessProcessGroupId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ProcessDescription?: string;
    SequenceNumber?: number;
    SystemModstamp?: Date;
}

export type BusinessProcessFeedback =  & sObject &  {
    ActionName?: string;
    ActionParam?: string;
    ActionType?: ExpFeedbackCollType;
    BusProcessFeedbackConfig?: BusProcessFeedbackConfig;
    BusProcessFeedbackConfigId?: ID;
    BusinessProcessDefinition?: BusinessProcessDefinition;
    BusinessProcessDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type BusinessProcessGroup = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BusinessProcessDefinitions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomerSatisfactionMetric?: SurveyQuestionType;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type BusinessProcessSettings = sObject &  {
    BusinessProcess?: sObject;
    BusinessProcessId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type BusinessProcessTypeDef = sObject &  {
    AllManagedPackageMemberId?: ID;
    ApplicationUsageType?: AppDomainUsageType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type BuyerGroupMember = sObject &  {
    Buyer?: sObject;
    BuyerGroupId?: ID;
    BuyerId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayEdit?: boolean;
    Name?: string;
    Owner?: sObject;
    OwnerId?: ID;
    SystemModstamp?: Date;
}

export type C2CPermissionBinding = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomPermset?: PermissionSet;
    CustomPermsetId?: ID;
    IntegrationName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Scope?: string;
    SystemModstamp?: Date;
}

export type CMSConnectAsset =  & sObject &  {
    AssetPath?: string;
    AssetType?: CMSConnectionAssetType;
    CmsConnectSource?: CMSConnectSource;
    CmsConnectSourceId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type CMSConnectLanguage =  & sObject &  {
    CmsConnectSource?: CMSConnectSource;
    CmsConnectSourceId?: ID;
    CmsLanguage?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type CMSConnectPersonalization =  & sObject &  {
    CmsConnectSource?: CMSConnectSource;
    CmsConnectSourceId?: ID;
    ConnectorPage?: string;
    ConnectorPageAsset?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OptionalParams?: string;
    SystemModstamp?: Date;
}

export type CMSConnectResourceDefinition =  & sObject &  {
    CmsConnectResourceType?: CMSConnectResourceType;
    CmsConnectResourceTypeId?: ID;
    CmsConnectSource?: CMSConnectSource;
    CmsConnectSourceId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    OptionsIsCollection?: boolean;
    PayloadType?: CMSConnectResourcePayloadType;
    ResourceIdPath?: string;
    ResourceNamePath?: string;
    ResourcePath?: string;
    RootNodePath?: string;
    SystemModstamp?: Date;
}

export type CMSConnectResourceType =  & sObject &  {
    CMSConnectResourceTypes?: QueryResult;
    CmsConnectSource?: CMSConnectSource;
    CmsConnectSourceId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    PayloadType?: CMSConnectResourcePayloadType;
    SystemModstamp?: Date;
}

export type CMSConnectSource = Metadata & sObject &  {
    CMSConnectAssets?: QueryResult;
    CMSConnectLanguages?: QueryResult;
    CMSConnectResourceDefinitions?: QueryResult;
    CMSConnectResourceTypes?: QueryResult;
    CmsConnectPersonalizations?: QueryResult;
    ConnectionType?: CMSSourceConnectionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CssScope?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: CMSConnectSource;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    Parent?: sObject;
    ParentId?: ID;
    RootPath?: string;
    SortOrder?: number;
    Status?: CMSConnectionStatus;
    SystemModstamp?: Date;
    Type?: CMSConnectionSourceType;
    WebsiteUrl?: string;
}

export type CallCenter = Metadata & sObject &  {
    AdapterUrl?: string;
    ContactCenterChannels?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomSettings?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Metadata?: CallCenter;
    Name?: string;
    Version?: number;
}

export type CallDisposition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Disposition?: string;
    DispositionCategory?: CallDispositionCategory;
    DispositionCategoryId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type CallDispositionCategory = sObject &  {
    Category?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Dispositions?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type CallRecordingGeoRestriction = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    GeographicRegionName?: string;
    GeographicRegionType?: GeographicRegionType;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type CampaignInfluenceModel = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDefaultModel?: boolean;
    IsDeleted?: boolean;
    IsModelLocked?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModelDescription?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordPreference?: InfluenceRecordPreferenceType;
    SystemModstamp?: Date;
}

export type CampaignSettings = MetadataForSettings & sObject &  {
    AiAttributionSuccessMilestone?: string;
    AiAttributionTimeframe?: number;
    DurableId?: string;
    FullName?: string;
    IsAccountsAsCmEnabled?: boolean;
    IsAiAttributionEnabled?: boolean;
    IsAutoCampInfluenceDisabledEnabled?: boolean;
    IsB2bmaCampaignInfluence2Enabled?: boolean;
    IsCampaignHistoryTrackEnabledEnabled?: boolean;
    IsCampaignInfluence2Enabled?: boolean;
    IsCampaignMemberTwcfEnabled?: boolean;
    IsEkaiEnabled?: boolean;
    IsSuppressNoValueCi2Enabled?: boolean;
    Metadata?: CampaignSettings;
}

export type CareBenefitVerifySettings = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CareBenefitVerifySettings;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    UriPath?: string;
}

export type CareLimitType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LimitType?: string;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CareLimitType;
    MetricType?: CareLimitTypeMetricType;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type CareProviderAfflRoleConfig = Metadata & sObject &  {
    AffiliationType?: CareProviderAfflType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: CareProviderAfflRoleConfig;
    ModuleNamespace?: string;
    ProviderRole?: string;
    SystemModstamp?: Date;
}

export type CareProviderSearchConfig = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MappedObject?: ProviderSearchObjectMapping;
    MasterLabel?: string;
    Metadata?: CareProviderSearchConfig;
    ModuleNamespace?: string;
    SourceField?: string;
    SystemModstamp?: Date;
    TargetField?: string;
}

export type CareRequestConfiguration = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CareRequestRecordType?: string;
    CareRequestRecords?: string;
    CareRequestType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDefaultRecordType?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CareRequestConfiguration;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type CareSystemFieldMapping = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalIdField?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CareSystemFieldMapping;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Role?: SourceSystemFieldRole;
    SourceSystem?: string;
    SystemModstamp?: Date;
    TargetObject?: string;
}

export type CaseSettings = MetadataForSettings & sObject &  {
    CaseAssignNotificationTemplate?: string;
    CaseAutoProcUser?: boolean;
    CaseCloseNotificationTemplate?: string;
    CaseCommentNotificationTemplate?: string;
    CaseCreateNotificationTemplate?: string;
    CaseFeedReadUnreadLtng?: boolean;
    CaseMergeInLightning?: boolean;
    CloseCaseThroughStatusChange?: boolean;
    DefaultCaseFeedLayoutOn?: boolean;
    DefaultCaseOwner?: string;
    DefaultCaseOwnerType?: string;
    DefaultCaseUser?: string;
    DurableId?: string;
    EmailActionDefaultsHandlerClass?: string;
    EmailToCaseId?: string;
    EscalateCaseBefore?: boolean;
    FullName?: string;
    GenericMessageEnabled?: boolean;
    IsCaseFeedEnabled?: boolean;
    IsCaseSwarmingEnabled?: boolean;
    IsCollapseEmailThreadEnabled?: boolean;
    IsDraftEmailsEnabled?: boolean;
    IsEarlyEscalationRuleTriggersEnabled?: boolean;
    IsEmailActionDefaultsHandlerEnabled?: boolean;
    IsEmailContactOnCasePostEnabled?: boolean;
    IsEscalateQfiToCaseInternalEnabled?: boolean;
    IsEscalateQfiToCaseNetworksEnabled?: boolean;
    IsExtNetworksCaseFeedEnabledEnabled?: boolean;
    IsMultiLangSolnSrchCssEnabled?: boolean;
    IsMultiLangSolnSrchPkbEnabled?: boolean;
    IsMultiLangSolutionEnabled?: boolean;
    IsSolutionCategoryEnabled?: boolean;
    IsSolutionInlineCategoryEnabled?: boolean;
    IsSolutionShortSummaryEnabled?: boolean;
    IsSuggestedArticlesApplicationEnabled?: boolean;
    IsSuggestedArticlesCustomerPortalEnabled?: boolean;
    IsSuggestedArticlesPartnerPortalEnabled?: boolean;
    IsSuggestedSolutionsEnabled?: boolean;
    KeepCaseMergeRecords?: boolean;
    KeepRecordTypeOnAssignmentRule?: boolean;
    Metadata?: CaseSettings;
    NotifyContactOnCaseComment?: boolean;
    NotifyDefaultCaseOwner?: boolean;
    NotifyOwnerOnCaseComment?: boolean;
    NotifyOwnerOnCaseOwnerChange?: boolean;
    PredictiveSupportEnabled?: boolean;
    ShowEmailAttachmentsInCaseAttachmentsRl?: boolean;
    ShowFewerCloseActions?: boolean;
    SystemUserEmail?: string;
    UseSystemEmailAddress?: boolean;
    UseSystemUserAsDefaultCaseUser?: boolean;
    VisibleInCssCheckbox?: boolean;
    WebToCaseId?: string;
}

export type CaseSubjectParticle = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    Index?: number;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: CaseSubjectParticle;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    TextField?: string;
    Type?: CaseSubjectParticleType;
}

export type Certificate = Metadata & sObject &  {
    CertificateChain?: string;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExpirationDate?: Date;
    KeySize?: number;
    MasterLabel?: string;
    MessagingChannelPaymentConfigs?: QueryResult;
    OptionsIsCaSigned?: boolean;
    OptionsIsEncryptedWithPE?: boolean;
    OptionsIsKeyExportTle?: boolean;
    OptionsIsNewEncr?: boolean;
    OptionsIsPrivateKeyExportable?: boolean;
    OptionsIsUnusable?: boolean;
    OptionsIsUsingKMS?: boolean;
}

export type ChannelObjectLinkingRule = Metadata & sObject &  {
    ActionForNoRecordFound?: ActionForNoRecordFound;
    ActionForSingleRecordFound?: ActionForSingleRecordFound;
    AllManagedPackageMemberId?: ID;
    ChannelType?: ChannelType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsLinkedRecordOpenedAsSubTab?: boolean;
    IsRuleActive?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectToLink?: ObjectToLink;
    RuleName?: string;
    SystemModstamp?: Date;
}

export type ChatbotMetric = sObject &  {
    AverageInteractionsPerSession?: string;
    AverageSessionTime?: string;
    AverageStepEvents?: string;
    ChatbotVersion?: BotVersion;
    ChatbotVersionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EscalationRate?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NumberOfDroppedConversations?: string;
    NumberOfSessions?: string;
    NumberOfSpamEvents?: string;
    SystemModstamp?: Date;
}

export type ChatterAnswersSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    EmailFollowersOnBestAnswer?: boolean;
    EmailFollowersOnReply?: boolean;
    EmailOwnerOnPrivateReply?: boolean;
    EmailOwnerOnReply?: boolean;
    FacebookAuthProvider?: string;
    FullName?: string;
    IsAnswerViaEmailEnabled?: boolean;
    IsChatterAnswersEnabled?: boolean;
    IsFacebookSsoEnabled?: boolean;
    IsInlinePublisherEnabled?: boolean;
    IsReputationEnabled?: boolean;
    IsRichTextEditorEnabled?: boolean;
    Metadata?: ChatterAnswersSettings;
    ShowInPortals?: boolean;
}

export type ChatterEmailsMDSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsChatterDigestEmailsApiOnlyEnabled?: boolean;
    IsChatterEmailAttachmentEnabled?: boolean;
    IsCollaborationEmailEnabled?: boolean;
    IsDisplayAppDownloadBadgesEnabled?: boolean;
    IsEmailReplyToChatterEnabled?: boolean;
    IsEmailToChatterEnabled?: boolean;
    Metadata?: ChatterEmailsMDSettings;
    NoQnOwnNotifyOnCaseCmt?: boolean;
    NoQnOwnNotifyOnRep?: boolean;
    NoQnSubNotifyOnBestR?: boolean;
    NoQnSubNotifyOnRep?: boolean;
}

export type ChatterSettings = MetadataForSettings & sObject &  {
    AllowChatterGroupArchiving?: boolean;
    AllowRecordsInChatterGroup?: boolean;
    DurableId?: string;
    FullName?: string;
    IsApprovalRequestEnabled?: boolean;
    IsCaseFeedRelativeTimestampsEnabled?: boolean;
    IsChatterEmoticonsEnabled?: boolean;
    IsChatterEnabled?: boolean;
    IsFeedEditEnabled?: boolean;
    IsFeedPinningEnabled?: boolean;
    IsFeedsDraftPostsEnabled?: boolean;
    IsFeedsRichTextEnabled?: boolean;
    IsInviteCsnUsersEnabled?: boolean;
    IsOutOfOfficeEnabledPrefEnabled?: boolean;
    IsRichLinkPreviewsInFeedEnabled?: boolean;
    IsTodayRecsInFeedEnabled?: boolean;
    Metadata?: ChatterSettings;
    UnlistedGroupsEnabled?: boolean;
}

export type ChoiceList = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type ChoiceListValue = sObject &  {
    ChoiceList?: ChoiceList;
    ChoiceListId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDefaultValue?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Order?: number;
    SystemModstamp?: Date;
    ValueName?: string;
}

export type ChoiceListValueDependency = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DependentValue?: ChoiceListValue;
    DependentValueId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParentValue?: ChoiceListValue;
    ParentValueId?: ID;
    SystemModstamp?: Date;
}

export type ClaimFinancialSettings = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ClaimCovPendingAuthStatus?: string;
    ClaimPendingAuthorityStatus?: string;
    ClmCovPymtDtlPendAuthSts?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ClaimMgmtFoundationEnabledSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsWarrantyClaimMgmtEnabled?: boolean;
    Metadata?: ClaimMgmtFoundationEnabledSettings;
}

export type ClauseCatgConfiguration = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    UsageType?: ClmCategoryUsageType;
}

export type CleanDataService = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CleanRules?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MatchEngine?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type CleanRule =  & sObject &  {
    CleanDataService?: CleanDataService;
    CleanDataServiceId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataAssessmentStatus?: CleanRuleDataAssessmentStatus;
    Description?: string;
    DeveloperName?: string;
    FieldMappingClients?: QueryResult;
    IsBulkEnabled?: boolean;
    IsDeleted?: boolean;
    IsSilentSaveEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    MatchConfidence?: number;
    MatchRule?: string;
    ModuleNamespace?: string;
    ShouldBypassTriggers?: boolean;
    ShouldBypassWorkflow?: boolean;
    SobjectType?: string;
    SourceSobjectType?: string;
    Status?: CleanRuleStatus;
    SystemModstamp?: Date;
}

export type CodeBuilderSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCodeBuilderEnabled?: boolean;
    Metadata?: CodeBuilderSettings;
}

export type CodeBundle = Metadata & sObject &  {
    ApiVersion?: number;
    Body?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Length?: number;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type CollectionsDashboardSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCollectionsDashboardEnabled?: boolean;
    Metadata?: CollectionsDashboardSettings;
}

export type ColorDefinition = sObject &  {
    Color?: string;
    Context?: string;
    DurableId?: string;
    TabDefinition?: TabDefinition;
    TabDefinitionId?: string;
    Theme?: string;
}

export type ChannelLayout = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ChannelLayout;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type CommerceEntitlementBuyerGroup = sObject &  {
    BuyerGroupId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayEdit?: boolean;
    Name?: string;
    PolicyId?: ID;
    SystemModstamp?: Date;
}

export type CommerceEntitlementProduct = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayEdit?: boolean;
    Name?: string;
    PolicyId?: ID;
    ProductId?: ID;
    SystemModstamp?: Date;
}

export type CommerceSettings = MetadataForSettings & sObject &  {
    CommerceAnalyticsEnabled?: boolean;
    CommerceConciergeEnabled?: boolean;
    CommerceDiscoveryExpansion?: boolean;
    CommerceEnabled?: boolean;
    DurableId?: string;
    FullName?: string;
    LowestUnitPriceTracking?: boolean;
    Metadata?: CommerceSettings;
}

export type CommonEventSubscription = sObject &  {
    BatchSize?: number;
    CheckpointReplay?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultReplay?: EventSubscriptionReplayPreset;
    ErrorRecoveryReplay?: EventSubscriptionReplayPreset;
    EventChannel?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ReferenceSubscription?: ManagedEventSubscription;
    ReferenceSubscriptionId?: ID;
    State?: EventSubscriptionAdminState;
    SystemModstamp?: Date;
    TopicName?: string;
    UsageType?: EventSubscriptionUsageType;
    Version?: string;
}

export type CommsServiceConsoleSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCommsServiceConsoleEnabled?: boolean;
    Metadata?: CommsServiceConsoleSettings;
}

export type CommunitiesSettings = MetadataForSettings & sObject &  {
    ApplyLoginPageTypeToEmbeddedLogin?: boolean;
    BlockEmbeddedLoginUnknownUrlRedirect?: boolean;
    CanModerateAllFeedPosts?: boolean;
    CanModerateInternalFeedPosts?: boolean;
    DurableId?: string;
    EmbeddedVisualforcePages?: boolean;
    FullName?: string;
    IsCommunityWorkspacesEnabled?: boolean;
    IsCspContactVisibilityPrefEnabled?: boolean;
    IsCspNotesOnAccConPrefEnabled?: boolean;
    IsEnablePrmEnabled?: boolean;
    IsExternalAccHierPrefEnabled?: boolean;
    IsGuestPermDisOptOutCrucEnabled?: boolean;
    IsGuestRecordReassignOrgPrefEnabled?: boolean;
    IsGuestSecurityOptOutCrucEnabled?: boolean;
    IsGuvSecurityOptOutPrefEnabled?: boolean;
    IsInviteChatterGuestEnabledEnabled?: boolean;
    IsNameFieldsUserPiiEnabledEnabled?: boolean;
    IsNetPortalUserReportOptsEnabled?: boolean;
    IsNetworksEnabledEnabled?: boolean;
    IsOotbProfExtUserOpsEnableEnabled?: boolean;
    IsPowerCustomerCaseStatusEnabled?: boolean;
    IsPreventBadgeGuestAccessEnabled?: boolean;
    IsPrmAccRelPrefEnabled?: boolean;
    IsRelaxPartnerAccountFieldPrefEnabled?: boolean;
    IsUnsupportedBrowserModalPrefEnabled?: boolean;
    IsUsernameUniqForOrgPrefEnabled?: boolean;
    Metadata?: CommunitiesSettings;
}

export type CommunityAIModelMapping = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: CommunityAIModelMapping;
    ModelContent?: string;
    ModelEntityType?: ModelEntityType;
    ModelStatus?: ModelStatus;
    ModuleNamespace?: string;
    NetworkId?: ID;
    SetupDefinition?: ServiceAISetupDefinition;
    SetupDefinitionId?: ID;
    SystemModstamp?: Date;
}

export type CommunityTemplateDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BaseTemplate?: CommunityBaseTemplate;
    Category?: CommunityTemplateCategory;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultBrandingSet?: BrandingSet;
    DefaultBrandingSetId?: ID;
    DefaultThemeDefinition?: CommunityThemeDefinition;
    DefaultThemeDefinitionId?: ID;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CommunityTemplateDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Publisher?: string;
    SystemModstamp?: Date;
}

export type CommunityThemeDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultBrandingSet?: BrandingSet;
    DefaultBrandingSetId?: ID;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CommunityThemeDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Publisher?: string;
    SystemModstamp?: Date;
}

export type CommunityWorkspacesNode = sObject &  {
    Description?: string;
    DevName?: string;
    ExternalId?: string;
    HelpLocator?: string;
    Label?: string;
    Locator?: string;
    NetworkId?: string;
    PageType?: string;
    Parent?: string;
    Workspace?: string;
}

export type CompactLayout = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CompactLayout;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type CompactLayoutInfo = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    IsDefault?: boolean;
    Items?: QueryResult;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Metadata?: CompactLayout;
    NamespacePrefix?: string;
    ParentEnumOrId?: string;
}

export type CompactLayoutItemInfo = sObject &  {
    CompactLayoutInfo?: CompactLayoutInfo;
    CompactLayoutInfoId?: string;
    DurableId?: string;
    FieldDefinition?: FieldDefinition;
    FieldDefinitionId?: string;
    SortOrder?: number;
}

export type CompactLayoutMapping = sObject &  {
    AssignedToEnumOrId?: string;
    CompactLayout?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type CompanySettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FiscalYear?: string;
    FullName?: string;
    IsCustomFiscalYearEnabled?: boolean;
    Metadata?: CompanySettings;
}

export type ComplexLiteralCustomAspect = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomAspectKey?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ReferenceObjectId?: ID;
    SystemModstamp?: Date;
}

export type ComponentLicenseStatus = sObject &  {
    ComponentIdentifier?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    IsDeleted?: boolean;
    IsLicensed?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayEdit?: boolean;
    Name?: string;
    OrgIdentifier?: string;
    SystemModstamp?: Date;
    UserIdentifier?: string;
}

export type ComputedComponentMetadata = sObject &  {
    AuraDefinitionBundle?: string;
    ComplexityScore?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    RuleViolations?: string;
    SystemModstamp?: Date;
    TotalDataRequestCount?: number;
    TotalDomNodes?: number;
}

export type ConnectedAppSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAdminApprovedAppsOnlyEnabled?: boolean;
    IsAdminApprovedAppsOnlyForExternalUserEnabled?: boolean;
    IsSkipUserProvisioningWizardWelcomePageEnabled?: boolean;
    Metadata?: ConnectedAppSettings;
}

export type ConnectedApplication = sObject &  {
    AppManifestVersionId?: ID;
    ApplicationOrg?: string;
    ConnAppPluginClassId?: ID;
    ContactEmail?: string;
    ContactPhone?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExecutionUserId?: ID;
    IconUrl?: string;
    InfoUrl?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LogoUrl?: string;
    MobileSessionTimeout?: string;
    MobileStartUrl?: string;
    Name?: string;
    NamedUserUvidTimeout?: string;
    OptionsAllowAdminApprovedUsersOnly?: boolean;
    OptionsAppIssueJwtTokenEnabled?: boolean;
    OptionsCodeCredentialGuestEnabled?: boolean;
    OptionsFullContentPushNotifications?: boolean;
    OptionsHasSessionLevelPolicy?: boolean;
    OptionsIsInternal?: boolean;
    OptionsRefreshTokenValidityMetric?: boolean;
    OptionsTokenExchangeManageBitEnabled?: boolean;
    PinLength?: string;
    RefreshTokenValidityPeriod?: number;
    SamlLoginInformation?: string;
    SessionPolicyAction?: PolicyAction;
    SessionTimeout?: string;
    StartUrl?: string;
    SystemModstamp?: Date;
    UvidTimeout?: string;
    Version?: string;
}

export type ConsentBannerSettings = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ConsentBannerSettings;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ContactCenterChannel =  & sObject &  {
    Channel?: MessagingChannel;
    ChannelId?: ID;
    ContactCenter?: CallCenter;
    ContactCenterId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    VoicemailFallbackQueue?: Group;
    VoicemailFallbackQueueId?: ID;
    VoicemailHandler?: string;
}

export type ContainerAsyncRequest = sObject &  {
    ApexClassMembers?: QueryResult;
    ApexComponentMembers?: QueryResult;
    ApexPageMembers?: QueryResult;
    ApexTriggerMembers?: QueryResult;
    AuraDefinitionChanges?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomFieldMembers?: QueryResult;
    DeployDetails?: DeployDetails;
    ErrorMsg?: string;
    FtestDeclMd1Members?: QueryResult;
    FtestDeclMd2Members?: QueryResult;
    FtestDeclMd3Members?: QueryResult;
    IsCheckOnly?: boolean;
    IsDeleted?: boolean;
    IsRunTests?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LoggingInformation?: string;
    MetadataContainer?: MetadataContainer;
    MetadataContainerId?: ID;
    MetadataContainerMember?: sObject;
    MetadataContainerMemberId?: ID;
    State?: ContainerAsyncRequestState;
    SystemModstamp?: Date;
    ValidationRuleMembers?: QueryResult;
    WorkflowAlertMembers?: QueryResult;
    WorkflowFieldUpdateMembers?: QueryResult;
    WorkflowOutboundMessageMembers?: QueryResult;
    WorkflowRuleMembers?: QueryResult;
    WorkflowTaskMembers?: QueryResult;
}

export type ContentSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsChatterFileLinkEnabled?: boolean;
    IsCmsC2CconnectionsEnabled?: boolean;
    IsContentAutoAssignEnabled?: boolean;
    IsContentDistForPortalUsersEnabled?: boolean;
    IsContentDistPwOptionsBit1Enabled?: boolean;
    IsContentDistPwOptionsBit2Enabled?: boolean;
    IsContentDistributionEnabled?: boolean;
    IsContentEnabled?: boolean;
    IsContentSupportMultiLanguageEnabled?: boolean;
    IsContentWorkspaceAccessEnabled?: boolean;
    IsDeleteFileInContentPacksEnabled?: boolean;
    IsFileShareSetByRecordEnabled?: boolean;
    IsFilesUsrShareNetRestrictedEnabled?: boolean;
    IsJpgPreviewsEnabled?: boolean;
    IsLibraryManagedFilesEnabled?: boolean;
    IsShowChatterFilesInContentEnabled?: boolean;
    IsSiteGuestUserToUploadFilesEnabled?: boolean;
    IsUploadFilesOnAttachmentsEnabled?: boolean;
    Metadata?: ContentSettings;
    SetValidContentTypeForAtchDocDownload?: boolean;
    SkipContentAssetTriggers?: boolean;
    SkipContentAssetTriggersOnDeploy?: boolean;
}

export type ContextAttrHydrationDetail =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextAttrHydrationDetails?: QueryResult;
    ContextAttributeMapping?: ContextAttributeMapping;
    ContextAttributeMappingId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InheritedFrom?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    ObjectName?: string;
    ParentHydrationDetail?: ContextAttrHydrationDetail;
    ParentHydrationDetailId?: ID;
    QueryAttribute?: string;
    SystemModstamp?: Date;
}

export type ContextAttribute =  & sObject &  {
    AggregateFunctionType?: ContextAggregateFunctionType;
    AggregateSrcContextAttr?: ContextAttribute;
    AggregateSrcContextAttrId?: ID;
    AllManagedPackageMemberId?: ID;
    ContextAttributeMappings?: QueryResult;
    ContextAttributes?: QueryResult;
    ContextNode?: ContextNode;
    ContextNodeId?: ID;
    ContextTags?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: ContextAttributeDataType;
    DomainSet?: string;
    FieldType?: ContextAttributeFieldType;
    InheritedFrom?: string;
    IsDeleted?: boolean;
    IsKey?: boolean;
    IsValue?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
    Title?: string;
}

export type ContextAttributeMapping =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextAttrHydrationDetails?: QueryResult;
    ContextAttribute?: ContextAttribute;
    ContextAttributeId?: ID;
    ContextInputAttributeName?: string;
    ContextNodeMapping?: ContextNodeMapping;
    ContextNodeMappingId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InheritedFrom?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
}

export type ContextDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ClonedFrom?: string;
    ContextDefinitionVersions?: QueryResult;
    ContextTtl?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    InheritedFrom?: string;
    InheritedFromVersion?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Title?: string;
}

export type ContextDefinitionVersion =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextDefinition?: ContextDefinition;
    ContextDefinitionId?: ID;
    ContextMappings?: QueryResult;
    ContextNodes?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EndDate?: Date;
    IsActive?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    StartDate?: Date;
    SystemModstamp?: Date;
    VersionNumber?: number;
}

export type ContextMapping =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextDefinitionVersion?: ContextDefinitionVersion;
    ContextDefinitionVersionId?: ID;
    ContextNodeMappings?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    InheritedFrom?: string;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
    Title?: string;
}

export type ContextNode =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextAttributes?: QueryResult;
    ContextDefinitionVersion?: ContextDefinitionVersion;
    ContextDefinitionVersionId?: ID;
    ContextNodeMappings?: QueryResult;
    ContextTags?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InheritedFrom?: string;
    IsDeleted?: boolean;
    IsTransposable?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
    Title?: string;
}

export type ContextNodeMapping =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextAttributeMappings?: QueryResult;
    ContextMapping?: ContextMapping;
    ContextMappingId?: ID;
    ContextNode?: ContextNode;
    ContextNodeId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InheritedFrom?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Object?: string;
    SystemModstamp?: Date;
}

export type ContextTag =  & sObject &  {
    ContextAttribute?: ContextAttribute;
    ContextAttributeId?: ID;
    ContextNode?: ContextNode;
    ContextNodeId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InheritedFrom?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    Title?: string;
}

export type ContractSettings = MetadataForSettings & sObject &  {
    AutoCalculateEndDate?: boolean;
    AutoExpirationDelay?: string;
    AutoExpirationRecipient?: string;
    AutoExpireContracts?: boolean;
    DurableId?: string;
    FullName?: string;
    IsContractHistoryTrackingEnabled?: boolean;
    Metadata?: ContractSettings;
    NotifyOwnersOnContractExpiration?: boolean;
}

export type ContractType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContractTypes?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ContractType;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SubTypes?: string;
    SystemModstamp?: Date;
}

export type ContractTypeConfig =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConfigType?: ContractConfigType;
    ConfigValue?: string;
    ContractType?: ContractType;
    ContractTypeId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
    UsageType?: ContractUsageType;
}

export type ConvMsgExternalTemplateVersion =  & sObject &  {
    AccountIdentifier?: string;
    AccountName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: ConversationMessageLayout;
    ParentId?: ID;
    Status?: ConvMsgExternalTemplateVersionStatus;
    SystemModstamp?: Date;
    TemplateName?: string;
    TemplateVersionIdentifier?: string;
}

export type ConvReasonReportDefinition = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EndDate?: Date;
    ExternalModelIdentifier?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ConvReasonReportDefinition;
    ModuleNamespace?: string;
    PipelineRunIdentifier?: string;
    RefreshFrequency?: RefreshFrequency;
    StartDate?: Date;
    Status?: ReportStatus;
    SystemModstamp?: Date;
}

export type ConvReasonReportSegmentDef = Metadata & sObject &  {
    ConvReasonReportDefinition?: ConvReasonReportDefinition;
    ConvReasonReportDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FilterCriteria?: string;
    FilterCriteriaAsJson?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ConvReasonReportSegmentDef;
    ModuleNamespace?: string;
    SegmentObject?: string;
    SegmentType?: SegmentationType;
    SystemModstamp?: Date;
    TargetObject?: string;
}

export type ConversationApplicationDefinition = sObject &  {
    ConversationDefinitions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IntegrationApplication?: string;
    IntegrationName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type ConversationChannelDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CapabilitiesSupportsDoubleOptInConsent?: boolean;
    CapabilitiesSupportsExplicitConsent?: boolean;
    CapabilitiesSupportsImplicitConsent?: boolean;
    CapabilitiesSupportsIsoCountryCode?: boolean;
    CapabilitiesSupportsKeywords?: boolean;
    ConnectedAppOauthLink?: string;
    ConsentOwner?: ConsentOwner;
    ConversationVendorInfo?: ConversationVendorInfo;
    ConversationVendorInfoId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomEventChnlAddrIdField?: string;
    CustomEventPayloadField?: string;
    CustomEventRecipientField?: string;
    CustomEventTypeField?: string;
    CustomPlatformEvent?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ConversationChannelDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RoutingOwner?: RoutingOwner;
    SystemModstamp?: Date;
}

export type ConversationContextVariableMapping =  & sObject &  {
    ConversationVariable?: ConversationDefinitionVariable;
    ConversationVariableId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Field?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessageType?: string;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type ConversationDefinitionBlock = sObject &  {
    AllManagedPackageMemberId?: ID;
    BotBlockVersions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IconId?: ID;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: BotBlock;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OptionsRichContentEnabled?: boolean;
    SystemModstamp?: Date;
}

export type ConversationDefinitionBlockVersion = sObject &  {
    ConversationDefinitionBlock?: ConversationDefinitionBlock;
    ConversationDefinitionBlockId?: ID;
    ConversationDefinitionDialogs?: QueryResult;
    ConversationDefinitionGoals?: QueryResult;
    ConversationDefinitionVariables?: QueryResult;
    ConversationLanguages?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Metadata?: BotBlockVersion;
    MlDomain?: MlDomain;
    MlDomainId?: ID;
    ModuleNamespace?: string;
    OptionsRichContentEnabled?: boolean;
    PermissionSet?: PermissionSet;
    PermissionSetId?: ID;
    Status?: ConvDefBlockVersionStatus;
    SystemModstamp?: Date;
}

export type ConversationDefinitionChannelProvider =  & sObject &  {
    ChannelProvider?: sObject;
    ChannelProviderId?: ID;
    ConversationDefinition?: BotDefinition;
    ConversationDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OptionsAgentRequired?: boolean;
    SystemModstamp?: Date;
}

export type ConversationDefinitionDialog = sObject &  {
    BotDialogGroup?: ConversationDefinitionDialogGroup;
    BotDialogGroupId?: ID;
    ConversationDefinitionSteps?: QueryResult;
    ConversationDefinitionSystemDialogs?: QueryResult;
    ConversationNavigationLinks?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DescendantConversationDefinitionMessages?: QueryResult;
    DescendantConversationDefinitionRichMessages?: QueryResult;
    DescendantConversationDefinitionStepConditions?: QueryResult;
    DescendantConversationDefinitionSteps?: QueryResult;
    DescendantConversationInvocationMappings?: QueryResult;
    DescendantConversationInvocations?: QueryResult;
    DescendantConversationMessageGroups?: QueryResult;
    DescendantConversationNavigationLinks?: QueryResult;
    DescendantConversationNavigations?: QueryResult;
    DescendantConversationQuickReplyOptions?: QueryResult;
    DescendantConversationRecordLookupConditionFields?: QueryResult;
    DescendantConversationRecordLookups?: QueryResult;
    DescendantConversationRecordOutputFields?: QueryResult;
    DescendantConversationSystemMessageMappings?: QueryResult;
    DescendantConversationSystemMessages?: QueryResult;
    DescendantConversationVariableOperands?: QueryResult;
    DescendantConversationVariableOperations?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsPlaceholderDialog?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: BotDialog;
    MlIntent?: MlIntent;
    MlIntentId?: ID;
    ModuleNamespace?: string;
    OptionsMlIntentTrainingEnabled?: boolean;
    Parent?: sObject;
    ParentId?: ID;
    ShowInFooterMenu?: boolean;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type ConversationDefinitionDialogGroup = sObject &  {
    BotVersion?: sObject;
    BotVersionId?: ID;
    ConversationDefinitionDialogs?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type ConversationDefinitionEventLog = sObject &  {
    Action?: string;
    BotSessionKey?: string;
    ChannelType?: MessageType;
    ConversationDefinition?: sObject;
    ConversationDefinitionId?: ID;
    ConversationTurn?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DialogDefinition?: ConversationDefinitionDialog;
    DialogDefinitionId?: ID;
    Duration?: number;
    EventDateTime?: Date;
    EventDetails?: string;
    EventJson?: string;
    EventLabel?: string;
    EventTarget?: string;
    EventTargetType?: ConversationDefinitionEventLogTargetType;
    EventTimestamp?: string;
    EventUuid?: string;
    ExternalLatencyTime?: number;
    IsDeleted?: boolean;
    IsSuccessful?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LogLevel?: ConversationDefinitionEventLogLevel;
    LogType?: ConversationDefinitionEventLogType;
    Message?: string;
    NumTokens?: number;
    OldEventJsonLength?: number;
    OldEventTimestamp?: Date;
    Parent?: ConversationDefinitionSession;
    ParentId?: ID;
    Planner?: string;
    PredictionType?: ConversationDefinitionEventPredictionType;
    PreviousEventLog?: ConversationDefinitionEventLog;
    PreviousEventLogId?: ID;
    PreviousEventLogUuid?: string;
    StepDefinition?: ConversationDefinitionStep;
    StepDefinitionId?: ID;
    StepType?: ConversationDefinitionEventLogStepType;
    SystemModstamp?: Date;
    User?: string;
}

export type ConversationDefinitionGoal =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ParentRecord?: sObject;
    ParentRecordId?: ID;
    SystemModstamp?: Date;
}

export type ConversationDefinitionMessage = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Message?: string;
    MessageIdentifier?: string;
    Order?: number;
    Parent?: sObject;
    ParentId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemModstamp?: Date;
}

export type ConversationDefinitionNlpProvider =  & sObject &  {
    ConversationDefinition?: BotVersion;
    ConversationDefinitionId?: ID;
    ConversationLanguage?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NlpProvider?: sObject;
    NlpProviderId?: ID;
    NlpProviderType?: ConversationDefinitionNlpProviderType;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type ConversationDefinitionPredictionDataCategory = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataCategory?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PredictionSetup?: ConversationDefinitionPredictionSetup;
    PredictionSetupId?: ID;
    SystemModstamp?: Date;
}

export type ConversationDefinitionPredictionSetup = sObject &  {
    ConvDefPredictionCategories?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ReferenceObject?: ServiceAISetupDefinition;
    ReferenceObjectId?: ID;
    SystemModstamp?: Date;
}

export type ConversationDefinitionRichMessage =  & sObject &  {
    ConversationInvocationMappings?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExecutionType?: ConversationMessageExecutionType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessageDefinition?: string;
    Parent?: sObject;
    ParentId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemModstamp?: Date;
}

export type ConversationDefinitionSession = sObject &  {
    ChannelType?: MessageType;
    ConversationDefinition?: sObject;
    ConversationDefinitionEventLogs?: QueryResult;
    ConversationDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalSessionKey?: string;
    HasErrorLogs?: boolean;
    Hour?: number;
    IntegrationName?: string;
    IntegrationType?: ConversationDefinitionSessionIntegrationType;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Mode?: ConversationDefinitionSessionMode;
    ModuleNamespace?: string;
    Owner?: sObject;
    OwnerId?: ID;
    RuntimeSessionKey?: string;
    SessionData?: string;
    SessionDataCompressedLength?: number;
    SessionDataLength?: number;
    SessionDuration?: number;
    SessionEndType?: ConversationDefinitionSessionEndType;
    SessionStartTime?: Date;
    SessionStatus?: ConversationDefinitionSessionStatus;
    SessionTransferResult?: ConversationDefinitionSessionTransferResult;
    SessionTransferTargetType?: ConversationDefinitionSessionTransferTargetType;
    SessionTransferType?: ConversationDefinitionSessionTransferType;
    StatusChangedDateTime?: Date;
    SystemModstamp?: Date;
    WasSessionEngaged?: boolean;
}

export type ConversationDefinitionStep = sObject &  {
    BooleanFilter?: string;
    BotNavigations?: QueryResult;
    ConditionLogicType?: ConversationDefinitionLogicalOperatorType;
    ConversationDefinitionMessages?: QueryResult;
    ConversationDefinitionRichMessages?: QueryResult;
    ConversationDefinitionStepConditions?: QueryResult;
    ConversationDefinitionStepGoalMappings?: QueryResult;
    ConversationDefinitionSteps?: QueryResult;
    ConversationInvocations?: QueryResult;
    ConversationRecordLookups?: QueryResult;
    ConversationSystemMessages?: QueryResult;
    ConversationVariableOperations?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: sObject;
    ParentId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SortOrder?: number;
    StepIdentifier?: string;
    SystemModstamp?: Date;
    Type?: BotStepType;
}

export type ConversationDefinitionStepCondition = sObject &  {
    ConversationDefinitionStep?: ConversationDefinitionStep;
    ConversationDefinitionStepId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LeftOperand?: string;
    OperatorType?: BotStepConditionOperatorType;
    RightOperandValue?: string;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type ConversationDefinitionStepGoalMapping =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Goal?: ConversationDefinitionGoal;
    GoalId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParentRecord?: ConversationDefinitionStep;
    ParentRecordId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemModstamp?: Date;
}

export type ConversationDefinitionSystemDialog = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Dialog?: ConversationDefinitionDialog;
    DialogId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: sObject;
    ParentId?: ID;
    SystemModstamp?: Date;
    Type?: ConversationSystemDialogType;
}

export type ConversationDefinitionTemplate = sObject &  {
    AllManagedPackageMemberId?: ID;
    ConversationDefinitionDialogGroups?: QueryResult;
    ConversationDefinitionDialogs?: QueryResult;
    ConversationDefinitionGoals?: QueryResult;
    ConversationDefinitionSystemDialogs?: QueryResult;
    ConversationDefinitionVariables?: QueryResult;
    ConversationLanguages?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EntryDialog?: ConversationDefinitionDialog;
    EntryDialogId?: ID;
    FullName?: string;
    GenAiPlannerBotVersionDefinitions?: QueryResult;
    IconId?: ID;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MainMenuDialog?: ConversationDefinitionDialog;
    MainMenuDialogId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: BotTemplate;
    MlDomain?: MlDomain;
    MlDomainId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OptionsRichContentEnabled?: boolean;
    PermissionSet?: PermissionSet;
    PermissionSetId?: ID;
    SystemModstamp?: Date;
    Type?: BotType;
}

export type ConversationDefinitionVariable = sObject &  {
    ConversationContextVariableMappings?: QueryResult;
    ConversationNavigationLinks?: QueryResult;
    ConversationVariableOperands?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: ConversationDataType;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    Parent?: sObject;
    ParentId?: ID;
    SystemModstamp?: Date;
    VariableCollectionType?: ConversationVariableCollectionType;
    VariableSobjectType?: string;
    VariableType?: ConversationVariableType;
}

export type ConversationInvocation = sObject &  {
    ConversationInvocationMappings?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InvocationTarget?: string;
    InvocationTargetType?: ConversationInvocableTargetType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: sObject;
    ParentId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemModstamp?: Date;
}

export type ConversationInvocationMapping = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParameterName?: string;
    Parent?: sObject;
    ParentId?: ID;
    RecordId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemModstamp?: Date;
    Type?: BotInvocationMappingType;
    Value?: string;
    Variable?: string;
}

export type ConversationMessageConstant =  & sObject &  {
    ConstantType?: ConversationMessageConstantType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: ConversationMessageDefinition;
    ParentId?: ID;
    ParentValue?: ConversationMessageConstantValue;
    ParentValueId?: ID;
    SystemModstamp?: Date;
}

export type ConversationMessageConstantValue = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Identifier?: string;
    ImageAssetId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: ConversationMessageDefinition;
    ParentConstant?: ConversationMessageConstant;
    ParentConstantId?: ID;
    ParentId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
    TextValue?: string;
    ValueType?: ConversationMessageValueType;
}

export type ConversationMessageDefinition = Metadata & sObject &  {
    ConversationMessageConstantValues?: QueryResult;
    ConversationMessageConstants?: QueryResult;
    ConversationMessageDefinitionHandlers?: QueryResult;
    ConversationMessageLayouts?: QueryResult;
    ConversationMessageParams?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefinitionType?: ConversationMessageDefinitionType;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    MessagingChannelAutoResponses?: QueryResult;
    Metadata?: ConversationMessageDefinition;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type ConversationMessageDefinitionHandler = sObject &  {
    ActiveRequestDurationMinutes?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Handler?: string;
    HandlerType?: ConversationMessageHandlerType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessageDefinition?: ConversationMessageDefinition;
    MessageDefinitionId?: ID;
    SystemModstamp?: Date;
}

export type ConversationMessageGroup = sObject &  {
    ConversationDefinitionMessages?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    IsOrdered?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: ConversationVariableOperation;
    ParentId?: ID;
    RootDialog?: ConversationDefinitionDialog;
    RootDialogId?: ID;
    SystemModstamp?: Date;
    Type?: ConversationMessageGroupType;
}

export type ConversationMessageLayout =  & sObject &  {
    ConversationMessageLayouts?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FormatType?: ConversationMessageFormatType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessageType?: ConversationMessageType;
    Parent?: ConversationMessageDefinition;
    ParentId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type ConversationMessageParameterDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsList?: boolean;
    IsRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    MaxListItems?: number;
    ParameterType?: ConversationMessageParameterType;
    Parent?: ConversationMessageDefinition;
    ParentId?: ID;
    ParentParameterDefinition?: ConversationMessageParameterDefinition;
    ParentParameterDefinitionId?: ID;
    SobjectType?: string;
    SortOrder?: number;
    SystemModstamp?: Date;
    ValueType?: ConversationMessageValueType;
}

export type ConversationNavigation = sObject &  {
    ConversationNavigationLinks?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: sObject;
    ParentId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemModstamp?: Date;
    Type?: BotNavigationType;
}

export type ConversationNavigationLink = sObject &  {
    ConversationNavigation?: ConversationNavigation;
    ConversationNavigationId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayLabel?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
    TargetBotDialog?: ConversationDefinitionDialog;
    TargetBotDialogId?: ID;
    TargetVariable?: ConversationDefinitionVariable;
    TargetVariableId?: ID;
}

export type ConversationQuickReplyOption = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LiteralValue?: string;
    Parent?: ConversationVariableOperation;
    ParentId?: ID;
    QuickReplyOptionIdentifier?: string;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type ConversationRecordLookup =  & sObject &  {
    AdvancedFilterText?: string;
    ConversationRecordLookupConditions?: QueryResult;
    ConversationRecordOutputFields?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FilterLogicType?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MaxLookupResults?: number;
    Parent?: ConversationDefinitionStep;
    ParentId?: ID;
    RootDialog?: ConversationDefinitionDialog;
    RootDialogId?: ID;
    SobjectType?: string;
    SortField?: string;
    SortOrder?: number;
    SourceVariable?: string;
    SystemModstamp?: Date;
    TargetVariable?: ConversationDefinitionVariable;
    TargetVariableId?: ID;
    Type?: ConversationRecordLookupType;
}

export type ConversationRecordLookupCondition =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LeftOperand?: string;
    OperatorType?: string;
    Parent?: ConversationRecordLookup;
    ParentId?: ID;
    RightOperand?: string;
    RightOperandValue?: string;
    RootDialog?: ConversationDefinitionDialog;
    RootDialogId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type ConversationRecordOutputField = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Field?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: sObject;
    ParentId?: ID;
    RootDialog?: ConversationDefinitionDialog;
    RootDialogId?: ID;
    SystemModstamp?: Date;
}

export type ConversationSlackApplication = sObject &  {
    ByeKeywords?: string;
    ConversationDefinitions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SlackApp?: string;
    SystemModstamp?: Date;
    WakeupKeywords?: string;
}

export type ConversationSystemMessage =  & sObject &  {
    ConversationSystemMessageMappings?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: ConversationDefinitionStep;
    ParentId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemModstamp?: Date;
    Type?: ConversationSystemMessageType;
}

export type ConversationSystemMessageMapping =  & sObject &  {
    ConversationSystemMessage?: ConversationSystemMessage;
    ConversationSystemMessageId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MappingType?: ConversationMappingType;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SystemMessageParamType?: ConversationSystemMessageParamType;
    SystemModstamp?: Date;
    Variable?: string;
}

export type ConversationVariableOperand = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OptionsDisableAutoFill?: boolean;
    Parent?: ConversationVariableOperation;
    ParentId?: ID;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    Source?: string;
    SourceType?: ConversationVariableOperandSourceType;
    SourceValue?: string;
    SystemModstamp?: Date;
    Target?: sObject;
    TargetId?: ID;
}

export type ConversationVariableOperation = sObject &  {
    BotNavigations?: QueryResult;
    ConversationDefinitionMessages?: QueryResult;
    ConversationDefinitionRichMessages?: QueryResult;
    ConversationInvocations?: QueryResult;
    ConversationMessageGroups?: QueryResult;
    ConversationQuickReplyOptions?: QueryResult;
    ConversationVariableOperands?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MaxCollectRetries?: number;
    OptionsAskCollectIfSet?: boolean;
    OptionsAutoSelectIfSingleChoice?: boolean;
    OptionsOptionalCollect?: boolean;
    Parent?: ConversationDefinitionStep;
    ParentId?: ID;
    QuickReplyOptionTemplate?: string;
    QuickReplyType?: BotQuickReplyType;
    QuickReplyWidgetType?: BotWidgetType;
    RootBotDialog?: ConversationDefinitionDialog;
    RootBotDialogId?: ID;
    SourceVariable?: string;
    SystemModstamp?: Date;
    Type?: BotVariableOperationType;
    VariableOperationIdentifier?: string;
}

export type ConversationVendorInfo = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AwsAccountKey?: string;
    AwsRootEmail?: string;
    AwsTenantVersion?: number;
    BridgeComponent?: string;
    CapabilitiesSupportsAgentSSO?: boolean;
    CapabilitiesSupportsEinsteinConversationInsights?: boolean;
    CapabilitiesSupportsIntelligence?: boolean;
    CapabilitiesSupportsKeyProvisioning?: boolean;
    CapabilitiesSupportsNamedCredential?: boolean;
    CapabilitiesSupportsPartnerContactCenterList?: boolean;
    CapabilitiesSupportsPartnerPhoneNumbers?: boolean;
    CapabilitiesSupportsPartnerTransferDestinations?: boolean;
    CapabilitiesSupportsQueueManagement?: boolean;
    CapabilitiesSupportsUniversalCallRecordingAccess?: boolean;
    CapabilitiesSupportsUserSyncing?: boolean;
    ConnectorUrl?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomConfig?: CustomObject;
    CustomConfigId?: ID;
    CustomLoginUrl?: string;
    DeveloperName?: string;
    FullName?: string;
    IntegrationClass?: ApexClass;
    IntegrationClassId?: ID;
    IsDeleted?: boolean;
    IsTaxCompliant?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ConversationVendorInfo;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    TelephonySettingsComponent?: string;
    VendorType?: ConversationVendorType;
}

export type ConversationalIntelligenceSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCallCoachingEnabled?: boolean;
    IsCallCoachingZoomEnabled?: boolean;
    IsCallExplorerEnabled?: boolean;
    IsCallSummarizationEnabled?: boolean;
    IsDiarizationPrefEnabled?: boolean;
    IsOpptyMatchingEnabled?: boolean;
    IsUnifiedActivitiesEnabled?: boolean;
    Metadata?: ConversationalIntelligenceSettings;
}

export type CountriesAndStates =  & sObject &  {
    DurableId?: string;
}

export type Country =  & sObject &  {
    Active?: boolean;
    DurableId?: string;
    IntegrationValue?: string;
    IsoCode?: string;
    Label?: string;
    OrgDefault?: boolean;
    Standard?: boolean;
    Visible?: boolean;
}

export type CspTrustedSite = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CanAccessCamera?: boolean;
    CanAccessMicrophone?: boolean;
    Context?: CspTrustedSiteContext;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EndpointUrl?: string;
    IsActive?: boolean;
    IsApplicableToConnectSrc?: boolean;
    IsApplicableToFontSrc?: boolean;
    IsApplicableToFrameSrc?: boolean;
    IsApplicableToImgSrc?: boolean;
    IsApplicableToMediaSrc?: boolean;
    IsApplicableToStyleSrc?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MobileExtensionId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type CurrencySettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCurrencyEffectiveDatesEnabled?: boolean;
    IsCurrencySymbolWithMultiCurrencyEnabled?: boolean;
    IsMultiCurrencyActivationAllowed?: boolean;
    IsMultiCurrencyEnabled?: boolean;
    IsParenCurrencyConvDisabled?: boolean;
    Metadata?: CurrencySettings;
}

export type CustomAddressFieldSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCustomAddressFieldEnabled?: boolean;
    Metadata?: CustomAddressFieldSettings;
}

export type CustomObject = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomHelpId?: ID;
    Description?: string;
    DeveloperName?: string;
    ExternalDataSource?: ExternalDataSource;
    ExternalDataSourceId?: ID;
    ExternalName?: string;
    ExternalRepository?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    NamespacePrefix?: string;
    SharingModel?: string;
}

export type CustomField = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ElementType?: ElementType;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    InlineHelpText?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Length?: number;
    ManageableState?: ManageableState;
    MaskChar?: EncryptedFieldMaskChar;
    MaskType?: EncryptedFieldMaskType;
    Metadata?: CustomField;
    NamespacePrefix?: string;
    Precision?: number;
    RelationshipLabel?: string;
    Scale?: number;
    SummaryOperation?: SummaryOperations;
    TableEnumOrId?: string;
}

export type CustomFieldMember = sObject &  {
    Content?: string;
    ContentEntity?: CustomField;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: CustomField;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type CustomHelpMenuSection = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CustomHelpMenuSection;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type CustomHttpHeader =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    HeaderFieldName?: string;
    HeaderFieldValue?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: sObject;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type Index = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IndexFields?: QueryResult;
    IsDeleted?: boolean;
    Label?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MinNumRequiredIndexedFields?: number;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SobjectType?: string;
    SystemModstamp?: Date;
    Type?: IndexType;
}

export type IndexField =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Field?: CustomField;
    FieldId?: ID;
    Index?: Index;
    IndexId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Ordinal?: number;
    SortDirection?: IndexSortDirection;
    SystemModstamp?: Date;
}

export type CustomNotificationType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomNotifTypeName?: string;
    Description?: string;
    Desktop?: boolean;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsSlack?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Mobile?: boolean;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type HomePageLayout = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Name?: string;
    NamespacePrefix?: string;
}

export type CustomTab = Metadata & sObject &  {
    ContentId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EncodingKey?: string;
    FullName?: string;
    HasSidebar?: boolean;
    IconId?: ID;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: CustomTab;
    MotifName?: string;
    NamespacePrefix?: string;
    Type?: CustomTabDefinitionType;
    Url?: string;
}

export type CustomerDataPlatformSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCustomerDataPlatformEnabled?: boolean;
    Metadata?: CustomerDataPlatformSettings;
}

export type CustomizablePropensityScoringSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCpsPrefEnabled?: boolean;
    Metadata?: CustomizablePropensityScoringSettings;
}

export type DashboardMobileSettings =  & sObject &  {
    DurableId?: string;
    IsDashboardIpadAppEnabled?: boolean;
}

export type DataAssessmentConfigItem = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataAssessmentConfigField?: string;
    DataAssessmentConfigValue?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type DataCalcInsightTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BuilderExpression?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationType?: CalculatedInsightCreationType;
    DataspaceName?: string;
    DataspacePrefix?: string;
    DefinitionType?: CalculatedInsightDefinitionType;
    Description?: string;
    DeveloperName?: string;
    Expression?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataCalcInsightTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    referenceObject?: QueryResult;
}

export type DataConnectorConvStorage = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DataConnectorInternalS3 = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type DataConnectorS3 = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Delimiter?: string;
    DeveloperName?: string;
    FileNameWildcard?: string;
    FileType?: string;
    FullName?: string;
    ImportFromDirectory?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataConnectorS3;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    S3AccessKey?: string;
    S3BucketName?: string;
    S3SecretKey?: string;
    SystemModstamp?: Date;
}

export type DataDotComEntitySetting = sObject &  {
    AllowDuplicates?: boolean;
    BypassSkippedRecords?: boolean;
    BypassTriggers?: boolean;
    BypassWorkflows?: boolean;
    CleanEntityOption?: CleanEntityOption;
    CleanJobEnabled?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsNextCleanJobFullSync?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SalesforceEntity?: string;
    SystemModstamp?: Date;
}

export type DataDotComSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAccountExportButtonOffEnabled?: boolean;
    IsAccountImportButtonOffEnabled?: boolean;
    IsAllowDupeContactFromLeadEnabled?: boolean;
    IsAllowDupeLeadFromContactEnabled?: boolean;
    IsContactExportButtonOffEnabled?: boolean;
    IsContactImportButtonOffEnabled?: boolean;
    IsDataDotComCleanEnabledEnabled?: boolean;
    IsDataDotComOptOutsEnabledEnabled?: boolean;
    IsDatacloudApiEnabledEnabled?: boolean;
    IsDdcSocialKeyEnabledEnabled?: boolean;
    Metadata?: DataDotComSettings;
}

export type DataGraphDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DaoDefinition?: QueryResult;
    DataGraphDefinition?: QueryResult;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DataGraphDependencyMppng = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DataGraphField = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SobjectType?: DataGraphDefinition;
    SobjectTypeId?: ID;
    SystemModstamp?: Date;
}

export type DataGraphFilterCondition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DataGraphFilterCriteria = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DataGraphRecencyCriteria = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DaoSourceObjectRecencyCriteria?: QueryResult;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DataGraphSource = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DaoSourceObject?: QueryResult;
    DataGraphSourceMapping?: QueryResult;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ParentObject?: QueryResult;
    SystemModstamp?: Date;
}

export type DataGraphVersion = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DataImportManagementSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsDataConnectorHubspotEnabled?: boolean;
    IsEasyImportEnabled?: boolean;
    Metadata?: DataImportManagementSettings;
}

export type DataIntegrationRecordPurchasePermission = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExternalObject?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    User?: User;
    UserId?: ID;
    UserRecordPurchaseLimit?: number;
}

export type DataModelTaxonomy = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationType?: DefinitionCreationType;
    DataModelType?: DataModelType;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: DataModelTaxonomy;
    ModuleNamespace?: string;
    Supplier?: string;
    SystemModstamp?: Date;
    UpdateDate?: Date;
    VersionNbr?: number;
}

export type DataObjectCategory = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataModelTaxonomy?: DataModelTaxonomy;
    DataModelTaxonomyId?: ID;
    DataObjectCategory?: QueryResult;
    DeveloperName?: string;
    ExternalDataTranCategories?: QueryResult;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: DataObjectCategory;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    TransportCategories?: QueryResult;
}

export type DataPackageKitDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsDeployed?: boolean;
    IsEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataPackageKitDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParentDataPackageKitDefinition?: QueryResult;
    SystemModstamp?: Date;
    VersionNumber?: number;
}

export type DataPackageKitObject = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataPackageKitObject;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type DataPlatDataSetBundle =  & sObject &  {
    BundleType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSets?: QueryResult;
    DataStreamDefinitionDataBundles?: QueryResult;
    Description?: string;
    IconUri?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type DataPlatform = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataConnectorType?: string;
    DataSetBundles?: QueryResult;
    DataSourceBundleDefinitionDataPlatforms?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    ForExportIntOrgName?: string;
    ForImportIntOrgName?: string;
    FullName?: string;
    IsConfiguredByAdmin?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LargeIconUri?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: DataPlatform;
    ModuleNamespace?: string;
    SmallIconUri?: string;
    SystemModstamp?: Date;
}

export type DataPlatformDataSet =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSetType?: string;
    Description?: string;
    IconUri?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type DataSource = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSources?: QueryResult;
    DataStreamDefinitionDataSources?: QueryResult;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataSource;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Prefix?: string;
    SystemModstamp?: Date;
    TransportSources?: QueryResult;
}

export type DataSourceBundleDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataPlatform?: DataPlatform;
    DataPlatformId?: ID;
    DataSourceBundleDefinition?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    Icon?: string;
    IsDeleted?: boolean;
    IsMultiDeploymentSupported?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataSourceBundleDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    referenceObject?: QueryResult;
}

export type DataSourceObject = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSource?: DataSource;
    DataSourceId?: ID;
    DataStreamTemplateDataSourceObject?: QueryResult;
    DeveloperName?: string;
    ExtDataTranObjectTemplateDataSourceObject?: QueryResult;
    ExternalRecordIdentifier?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataSourceObject;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectType?: DataObjectType;
    SourceObject?: QueryResult;
    SystemModstamp?: Date;
    TransportSourceObjects?: QueryResult;
}

export type DataSrcDataModelFieldMap = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSourceFieldId?: ID;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MktDataModelFieldId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SourceObject?: DataSourceObject;
    SourceObjectId?: ID;
    SystemModstamp?: Date;
    TargetObjectId?: ID;
    VersionNumber?: number;
}

export type DataStreamDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AreHeadersIncludedInFile?: boolean;
    BulkIngest?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationType?: DefinitionCreationType;
    DataConnector?: sObject;
    DataConnectorId?: ID;
    DataConnectorType?: string;
    DataExtensionIdentifier?: string;
    DataExtractField?: string;
    DataPlatDataSetBundle?: DataPlatDataSetBundle;
    DataPlatDataSetBundleId?: ID;
    DataPlatformDataSetItemName?: string;
    DataSource?: DataSource;
    DataSourceId?: ID;
    DataStreamDefinition?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    FileNameWildcard?: string;
    FullName?: string;
    InternalOrganization?: InternalOrganization;
    InternalOrganizationId?: ID;
    IsDeleted?: boolean;
    IsLimitedToNewFiles?: boolean;
    IsMissingFileFailure?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataStreamDefinition;
    MktDataConnectionSrcParams?: QueryResult;
    MktDataLakeObjectId?: ID;
    MktDataTranObject?: MktDataTranObject;
    MktDataTranObjectId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SourceDomainRef?: QueryResult;
    SystemModstamp?: Date;
}

export type DataStreamTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSourceBundleDefinition?: DataSourceBundleDefinition;
    DataSourceBundleDefinitionId?: ID;
    DataSourceObject?: DataSourceObject;
    DataSourceObjectId?: ID;
    DataStreamDefinitionTemplateConnection?: QueryResult;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DataStreamTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectCategory?: DataObjectCategory;
    ObjectCategoryId?: ID;
    RefreshFrequency?: DataImportRefreshFrequency;
    RefreshHours?: string;
    RefreshMode?: DataImportRefreshMode;
    SystemModstamp?: Date;
}

export type DataType = sObject &  {
    ContextServiceDataType?: ServiceDataType;
    ContextServiceDataTypeId?: string;
    ContextWsdlDataType?: WsdlDataType;
    ContextWsdlDataTypeId?: string;
    DeveloperName?: string;
    DurableId?: string;
    IsComplex?: boolean;
}

export type DebugLevel = sObject &  {
    ApexCode?: ApexLogLevel;
    ApexProfiling?: ApexLogLevel;
    Callout?: ApexLogLevel;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Database?: ApexLogLevel;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    Nba?: ApexLogLevel;
    System?: ApexLogLevel;
    SystemModstamp?: Date;
    Validation?: ApexLogLevel;
    Visualforce?: ApexLogLevel;
    Wave?: ApexLogLevel;
    Workflow?: ApexLogLevel;
}

export type DecisionMatrixDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DecisionMatrixDef?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    GroupKey?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DecisionMatrixDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PricingElementDecisionTables?: QueryResult;
    SubGroupKey?: string;
    SystemModstamp?: Date;
    Type?: DecisionMatrixType;
    UsageType?: ExpsSetProcessType;
}

export type DecisionMatrixDefinitionVersion = Metadata & sObject &  {
    ActiveVersionSnapshotId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DecisionMatrixDefinition?: DecisionMatrixDefinition;
    DecisionMatrixDefinitionId?: ID;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LatestVersionSnapshotId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DecisionMatrixDefinitionVersion;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Status?: DecisionMatrixDefStatus;
    SystemModstamp?: Date;
    VersionNumber?: number;
}

export type DecisionTable = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CollectOperator?: DecisionTableCollectOperator;
    ConditionCriteria?: string;
    ConditionType?: DecisionTableConditionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSourceType?: DecisionTableDataSourceType;
    DecisionTableParameters?: QueryResult;
    DecisionTableSourceCriterias?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    DoesConsiderNullValue?: boolean;
    FilterResultBy?: DecisionTableHitPolicy;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DecisionTable;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PricingElementDecisionTables?: QueryResult;
    RefreshFailureReason?: string;
    RefreshStatus?: DecisionTableRefreshStatus;
    SetupName?: string;
    SourceConditionLogic?: string;
    SourceObject?: string;
    Status?: DecisionTableStatus;
    SystemModstamp?: Date;
    Type?: DecisionTableType;
    UsageType?: DecisionTableUsageType;
}

export type DecisionTableDatasetLink = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DecisionTable?: DecisionTable;
    DecisionTableDatasetParameters?: QueryResult;
    DecisionTableId?: ID;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DecisionTableDatasetLink;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SetupName?: string;
    SourceObject?: string;
    SystemModstamp?: Date;
}

export type DecisionTableParameter =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: DTParameterDataType;
    DecimalScale?: number;
    DecisionOutputColumn?: QueryResult;
    DecisionTable?: DecisionTable;
    DecisionTableId?: ID;
    DomainObject?: string;
    FieldName?: string;
    FieldPath?: string;
    IsDeleted?: boolean;
    IsGroupByField?: boolean;
    IsPriorityField?: boolean;
    IsRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Length?: number;
    ManageableState?: ManageableState;
    Operator?: DecisionTableOperator;
    Sequence?: number;
    SortType?: DecisionTableSortType;
    SystemModstamp?: Date;
    Usage?: DecisionTableParameterType;
}

export type DecisionTableSourceCriteria =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DecisionTable?: DecisionTable;
    DecisionTableId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Operator?: DTSourceCriteriaOperator;
    SequenceNumber?: number;
    SourceFieldName?: string;
    SystemModstamp?: Date;
    Value?: string;
    ValueType?: DTSourceCriteriaValueType;
}

export type DecisionTblDatasetParameter =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DatasetFieldName?: string;
    DatasetSourceObject?: string;
    DecisionTableDatasetLink?: DecisionTableDatasetLink;
    DecisionTableDatasetLinkId?: ID;
    DecisionTableParameter?: DecisionTableParameter;
    DecisionTableParameterId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
}

export type DelegateGroup = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsLoginAccessEnabled?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    NameNorm?: string;
    SystemModstamp?: Date;
}

export type DelegateGroupGrant = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DelegateGroupId?: ID;
    GrantedId?: ID;
    KeyPrefix?: string;
    SystemModstamp?: Date;
}

export type DelegateGroupMember = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DelegateGroupId?: ID;
    SystemModstamp?: Date;
    UserOrGroupId?: ID;
}

export type DeployRequest = sObject &  {
    AbortRequested?: boolean;
    AllowMissingFiles?: boolean;
    AsyncRequestId?: ID;
    AutoUpdatePackage?: boolean;
    CanceledBy?: User;
    CanceledById?: ID;
    ChangeSetName?: string;
    CheckOnly?: boolean;
    CompletedDate?: Date;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeployTestResults?: QueryResult;
    ErrorMessage?: string;
    ErrorStatusCode?: string;
    IgnoreWarnings?: boolean;
    InboundChangeSetId?: ID;
    InitiatingNamespace?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NumberComponentErrors?: number;
    NumberComponentsDeployed?: number;
    NumberComponentsTotal?: number;
    NumberTestErrors?: number;
    NumberTestsCompleted?: number;
    NumberTestsTotal?: number;
    PurgeOnDelete?: boolean;
    RollbackOnError?: boolean;
    RunTestsEnabled?: boolean;
    SinglePackage?: boolean;
    SourceDeployRequest?: DeployRequest;
    SourceDeployRequestId?: ID;
    StartDate?: Date;
    StateDetail?: string;
    Status?: DeployStatus;
    SystemModstamp?: Date;
    TestLevel?: TestLevel;
    Type?: AsyncRequestSource;
}

export type DeployTestResult = sObject &  {
    CodeType?: string;
    ComponentId?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeployRequest?: DeployRequest;
    DeployRequestId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Message?: string;
    MethodName?: string;
    Name?: string;
    Namespace?: string;
    StackTrace?: string;
    Success?: boolean;
    SystemModstamp?: Date;
    Time?: number;
}

export type DeploymentSettings = MetadataForSettings & sObject &  {
    DoesSkipAsyncApexValidation?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: DeploymentSettings;
}

export type DevHubSettings = MetadataForSettings & sObject &  {
    DevOpsCenterBetaMsa?: boolean;
    DurableId?: string;
    FullName?: string;
    IsDevOpsCenterEnabled?: boolean;
    IsDevOpsCenterGaEnabled?: boolean;
    IsPackaging2Enabled?: boolean;
    IsScratchOrgManagementPrefEnabled?: boolean;
    IsScratchOrgSnapshotPrefEnabled?: boolean;
    IsShapeExportPrefEnabled?: boolean;
    Metadata?: DevHubSettings;
}

export type DisclosureDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DisclosureType?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type DisclosureDefinitionVersion = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AuthoringMode?: AuthoringMode;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DisclosureDefCurrVer?: string;
    DisclosureDefinition?: DisclosureDefinition;
    DisclosureDefinitionId?: ID;
    DocumentTemplateGlobalKey?: string;
    IsActive?: boolean;
    IsCurrentVersion?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OmniScriptCnfgApiName?: string;
    OmniScriptConfiguration?: string;
    SystemModstamp?: Date;
    VersionNumber?: string;
}

export type DisclosureType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DisclosureBodyLogo?: StaticResource;
    DisclosureBodyLogoId?: ID;
    DisclosureBodyUrl?: string;
    DisclosureCategory?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type DiscoverySettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEinsteinAnswersPrefEnabled?: boolean;
    IsEinsteinArticleRecommendationsEnabled?: boolean;
    Metadata?: DiscoverySettings;
}

export type Document = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Author?: User;
    AuthorId?: ID;
    Body?: string;
    BodyLength?: number;
    ContentType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Folder?: sObject;
    FolderId?: ID;
    FullName?: string;
    IsBodySearchable?: boolean;
    IsDeleted?: boolean;
    IsInternalUseOnly?: boolean;
    IsPublic?: boolean;
    Keywords?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastReferencedDate?: Date;
    LastViewedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: Document;
    Name?: string;
    NamespacePrefix?: string;
    SecurityOptionsAttachmentHasFlash?: boolean;
    SecurityOptionsAttachmentHasXSSThreat?: boolean;
    SecurityOptionsAttachmentScannedForXSS?: boolean;
    SecurityOptionsAttachmentScannedforFlash?: boolean;
    SystemModstamp?: Date;
    Type?: string;
    Url?: string;
}

export type DocumentChecklistSettings = MetadataForSettings & sObject &  {
    DciCustomSharing?: boolean;
    DeleteDciWithFiles?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: DocumentChecklistSettings;
}

export type DocumentGenerationSetting = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BatchDocGnrnPctLimitPerHour?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DocumentTemplateLibraryName?: string;
    FullName?: string;
    GenerationMechanism?: GenerationMechanism;
    GuestAccessNamedCredential?: string;
    IsBatchDocGnrnEnabled?: boolean;
    IsDeleted?: boolean;
    IsServerSideDocGenEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: DocumentGenerationSetting;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PreviewType?: PreviewType;
    SystemModstamp?: Date;
}

export type DocumentTemplateConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: DocumentTemplate;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type DocumentTypeInputPrompt = sObject &  {
    ApiName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DocumentTypeId?: ID;
    InputPrompt?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type DomainProvision = sObject &  {
    CnameTarget?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeprovisionType?: DomainDeprovisionType;
    DomainId?: ID;
    IsActive?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OptionsHasProvisioningFailed?: boolean;
    OptionsIsProvisionCanceled?: boolean;
    OptionsIsProvisioning?: boolean;
    OptionsIsSecurityProvisioning?: boolean;
    ProvisionEndDate?: Date;
    ProvisionFinalizeDate?: Date;
    ProvisionStartDate?: Date;
    ProvisionType?: DomainProvisionType;
    SourceCdnCertificate?: string;
    SourceHttpsOption?: DomainHttpsOption;
    SourceSandboxId?: ID;
    SystemModstamp?: Date;
    TargetCdnCertificate?: string;
    TargetCdnSecurityConfigType?: CdnSecurityConfigType;
    TargetCertificate?: Certificate;
    TargetCertificateId?: ID;
    TargetDomainName?: string;
    TargetHttpsOption?: DomainHttpsOption;
    TargetSandboxId?: ID;
}

export type DuplicateJobDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DuplicateJobMatchingRuleDefinitions?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SobjectSubtype?: MatchingRuleSobjectSubtype;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type DuplicateJobMatchingRuleDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DuplicateJobDefinition?: DuplicateJobDefinition;
    DuplicateJobDefinitionId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MatchingRule?: MatchingRule;
    MatchingRuleId?: ID;
    ObjectMapping?: ObjectMapping;
    ObjectMappingId?: ID;
    SystemModstamp?: Date;
}

export type DynamicFormsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsFormsOnMobileEnabled?: boolean;
    Metadata?: DynamicFormsSettings;
}

export type EACSettings = MetadataForSettings & sObject &  {
    AddRcCompToFlexiPages?: boolean;
    AutoPopulateGoogleMeetLinks?: boolean;
    AutomatedEmailFilter?: boolean;
    DsThresholdNotification?: boolean;
    DurableId?: string;
    FullName?: string;
    IsActivityAnalyticsPrefEnabled?: boolean;
    IsActivityCaptureEnabled?: boolean;
    IsActivityMetricsEnabled?: boolean;
    IsActivitySyncEngineEnabled?: boolean;
    IsEacForEveryonePrefEnabled?: boolean;
    IsEnforceEacSharingPrefEnabled?: boolean;
    IsInboxActivitySharingEnabled?: boolean;
    IsInsightsInTimelineEacStdEnabled?: boolean;
    IsInsightsInTimelineEnabled?: boolean;
    IsUnifiedActivitiesPrefEnabled?: boolean;
    Metadata?: EACSettings;
    ProvisionProductivityFeatures?: boolean;
    SalesforceEventsOnlyPref?: boolean;
    SensitiveEmailFilter?: boolean;
    ShowEacCalendarPref?: boolean;
    SyncInternalEvents?: boolean;
}

export type ESignatureConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConfigType?: ConfigType;
    ConfigValue?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    GroupType?: ConfigGroup;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ESignatureConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Vendor?: Vendor;
}

export type ESignatureEnvelopeConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExpirationPeriod?: number;
    ExpirationWarningPeriod?: number;
    FirstReminderPeriod?: number;
    FullName?: string;
    IsDeleted?: boolean;
    IsExpirationEnabled?: boolean;
    IsReminderEnabled?: boolean;
    IsVendorDefaultNtfcnEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ESignatureEnvelopeConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ReminderIntervalPeriod?: number;
    SystemModstamp?: Date;
    TargetObjectName?: string;
    Vendor?: Vendor;
    VendorAccountIdentifier?: string;
}

export type EinsteinAgentSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    EinsteinAgentRecommendations?: boolean;
    FullName?: string;
    Metadata?: EinsteinAgentSettings;
    ReRunAttributeBasedRules?: boolean;
    RunAssignmentRules?: boolean;
    SummarizationRecs?: boolean;
    VoiceWrapUpRecs?: boolean;
}

export type EinsteinAssistantSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEinsteinAssistantDataExtractionEnabledEnabled?: boolean;
    IsEinsteinAssistantEnabledEnabled?: boolean;
    IsEinsteinEnableVoiceLoggingEnabled?: boolean;
    Metadata?: EinsteinAssistantSettings;
}

export type EinsteinDealInsightsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsUnlikelyToCloseThisMonthEnabled?: boolean;
    Metadata?: EinsteinDealInsightsSettings;
}

export type EinsteinDocumentCaptureSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEinsteinDocumentReaderEnabled?: boolean;
    Metadata?: EinsteinDocumentCaptureSettings;
}

export type EinsteinGptSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEinsteinGptPlatformEnabled?: boolean;
    IsAIFeedbackWithDCEnabled?: boolean;
    Metadata?: EinsteinGptSettings;
}

export type EmailAdministrationSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsComplianceBccEnabled?: boolean;
    IsEmailConsentManagementEnabled?: boolean;
    IsEmailSenderIdComplianceEnabled?: boolean;
    IsEmailSpfComplianceEnabled?: boolean;
    IsEmailToSalesforceEnabled?: boolean;
    IsEmailTrackingIpBlocklistEnabled?: boolean;
    IsEmailWorkflowApprovalEnabled?: boolean;
    IsEnhancedEmailEnabledEnabled?: boolean;
    IsHandleBouncedEmailsEnabled?: boolean;
    IsHtmlEmailEnabled?: boolean;
    IsInternationalEmailAddressesEnabled?: boolean;
    IsListEmailLogActivitiesEnabled?: boolean;
    IsResendBouncedEmailsEnabled?: boolean;
    IsRestrictTlsToDomainsEnabled?: boolean;
    IsSendThroughGmailPrefEnabled?: boolean;
    IsSendViaExchangePrefEnabled?: boolean;
    IsSendViaGmailPrefEnabled?: boolean;
    IsTinyMceSalesEmailEnabledEnabled?: boolean;
    IsUseOrgFootersForExtTransEnabled?: boolean;
    IsVerifyEmailDomainByDkimEnabled?: boolean;
    Metadata?: EmailAdministrationSettings;
    SendEmailsEvenWhenAutomationUpdatesSameRecord?: boolean;
    SendMassEmailNotification?: boolean;
    SendTextOnlySystemEmails?: boolean;
}

export type EmailIntegrationSettings = MetadataForSettings & sObject &  {
    DoesEmailLogAsEmailMessageInOutlook?: boolean;
    DoesGmailStayConnectedToSalesforce?: boolean;
    DurableId?: string;
    FullName?: string;
    IsContactAndEventSyncEnabled?: boolean;
    IsContextualEverywhereEnabled?: boolean;
    IsEmailTrackingInMobileEnabled?: boolean;
    IsEngageForOutlookEnabled?: boolean;
    IsExtensionHostUnrestrictedEnabled?: boolean;
    IsGmailIntegrationEnabled?: boolean;
    IsInboxInternalEmailTrackingEnabled?: boolean;
    IsInboxMobileIntuneEnabled?: boolean;
    IsLayoutCustomizationAllowed?: boolean;
    IsOutlookIntegrationEnabled?: boolean;
    IsOutlookMobileIntegrationEnabled?: boolean;
    IsProductivityFeaturesEnabled?: boolean;
    IsSupplementalContactInfoInMobileEnabled?: boolean;
    Metadata?: EmailIntegrationSettings;
    OrgIsSyncingEventsOutbound?: boolean;
    ShouldUseTrustedDomainsList?: boolean;
}

export type EmailTemplate = Metadata & sObject &  {
    ApiVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: EmailTemplate;
    Name?: string;
    NamespacePrefix?: string;
    RelatedEntityType?: string;
    Subject?: string;
    UiType?: EmailTemplateUiType;
}

export type EmailTemplateSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsTemplateEnhancedFolderPrefEnabled?: boolean;
    Metadata?: EmailTemplateSettings;
}

export type EmailToCaseRoutingAddress =  & sObject &  {
    AddressType?: string;
    AuthorizedSenders?: string;
    CaseOrigin?: string;
    CaseOwner?: string;
    CaseOwnerType?: string;
    CasePriority?: string;
    CreateTask?: boolean;
    DurableId?: string;
    EmailAddress?: string;
    EmailServicesAddress?: string;
    FallbackQueue?: string;
    IsVerified?: boolean;
    RoutingFlow?: string;
    RoutingName?: string;
    SaveEmailHeaders?: boolean;
    TaskStatus?: string;
}

export type EmailToCaseSettings =  & sObject &  {
    DurableId?: string;
    IsE2CattachmentAsFileEnabled?: boolean;
    IsE2CdeduplicateAttachmentsEnabled?: boolean;
    IsE2CexternalServerEnabled?: boolean;
    IsE2CsourceTrackingEnabled?: boolean;
    IsEmailToCaseEnabled?: boolean;
    IsHtmlEmailEnabled?: boolean;
    IsNewToReadTriggersEnabled?: boolean;
    IsOnDemandEmailToCaseEnabled?: boolean;
    IsThreadIdInBodyEnabled?: boolean;
    IsThreadIdInSubjectEnabled?: boolean;
    IsThreadTokenInBodyEnabled?: boolean;
    IsThreadTokenInSubjectEnabled?: boolean;
    NotifyOwnerOnNewCaseEmail?: boolean;
    OverEmailLimitAction?: string;
    PreQuoteSignature?: boolean;
    ReplyWithNewContentOnly?: boolean;
    ShowGeneratedEmailCheckbox?: boolean;
    UnauthorizedSenderAction?: string;
    UseEmailHeadersForThreading?: boolean;
}

export type EmbeddedMessagingChannel = sObject &  {
    AnonymousUserJwtExpiry?: number;
    AuthMode?: EmbeddedServiceAuthModeType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DoesAllowInbdFiles?: boolean;
    DoesAllowInbdFilesDerived?: boolean;
    DoesAllowTranscriptSend?: boolean;
    IsDeleted?: boolean;
    IsEstimatedWaitTimeEnabled?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    SystemModstamp?: Date;
    VerifiedUserJwtExpiry?: number;
}

export type EmbeddedServiceAppointmentSettings =  & sObject &  {
    AppointmentConfirmImg?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    Enabled?: boolean;
    HomeImg?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LogoImg?: string;
    ShouldShowExistingAppointment?: boolean;
    ShouldShowNewAppointment?: boolean;
    SystemModstamp?: Date;
}

export type EmbeddedServiceBranding = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContrastInvertedColor?: string;
    ContrastPrimaryColor?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    Font?: string;
    FullName?: string;
    Height?: number;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: EmbeddedServiceBranding;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    NavBarColor?: string;
    NavBarTextColor?: string;
    PrimaryColor?: string;
    SecondaryColor?: string;
    SecondaryNavBarColor?: string;
    SystemModstamp?: Date;
    Width?: number;
}

export type EmbeddedServiceConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AreGuestUsersAllowed?: boolean;
    AuthMethod?: EmbeddedServiceAuthMethod;
    Branding?: BrandingSet;
    BrandingId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeploymentFeature?: EmbeddedServiceDeploymentFeature;
    DeploymentType?: EmbeddedServiceDeploymentType;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    IsTermsAndConditionsEnabled?: boolean;
    IsTermsAndConditionsRequired?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: EmbeddedServiceConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ShouldHideAuthDialog?: boolean;
    SiteId?: ID;
    SystemModstamp?: Date;
}

export type EmbeddedServiceConfigPub = sObject &  {
    Branding?: string;
    ChoiceList?: string;
    CoreVersion?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EsDeploymentConfig?: string;
    Form?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: EmbeddedServiceConfig;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type EmbeddedServiceCustomComponent =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomComponent?: sObject;
    CustomComponentId?: ID;
    CustomComponentType?: EmbeddedServiceCustomComponentType;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    Feature?: EmbeddedServiceFeature;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type EmbeddedServiceCustomLabel =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomLabel?: ExternalString;
    CustomLabelId?: ID;
    EmbeddedServiceConfig?: sObject;
    EmbeddedServiceConfigId?: ID;
    IsDeleted?: boolean;
    LabelKey?: EmbeddedServiceLabelKey;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type EmbeddedServiceCustomization =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomizationName?: string;
    Description?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: sObject;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type EmbeddedServiceFlow =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    Feature?: EmbeddedServiceFeature;
    Flow?: string;
    FlowType?: EmbeddedServiceFlowType;
    IsAuthenticationRequired?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type EmbeddedServiceFlowConfig = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    Enabled?: boolean;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Metadata?: EmbeddedServiceFlowConfig;
    SystemModstamp?: Date;
}

export type EmbeddedServiceForm = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayContext?: EmbeddedServiceFormDisplayContext;
    IsActive?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: EmbeddedServiceConfig;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type EmbeddedServiceFormField = sObject &  {
    ChoiceControllingField?: EmbeddedServiceFormField;
    ChoiceControllingFieldId?: ID;
    ChoiceList?: ChoiceList;
    ChoiceListId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayOrder?: number;
    EmbeddedServiceForm?: EmbeddedServiceForm;
    EmbeddedServiceFormId?: ID;
    FormField?: string;
    FormFieldType?: EmbeddedServiceFormFieldType;
    IsDeleted?: boolean;
    IsHidden?: boolean;
    IsRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type EmbeddedServiceLabelsPub = sObject &  {
    ChoiceListLabels?: string;
    CoreVersion?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomLabels1?: string;
    CustomLabels2?: string;
    EmbeddedServiceConfigPub?: EmbeddedServiceConfigPub;
    EmbeddedServiceConfigPubId?: ID;
    FormLabels?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type EmbeddedServiceLayout =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    Feature?: EmbeddedServiceFeature;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Layout?: FlexiPage;
    LayoutId?: ID;
    LayoutType?: EmbeddedServiceLayoutType;
    SystemModstamp?: Date;
}

export type EmbeddedServiceLayoutRule =  & sObject &  {
    AppointmentStatus?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmbeddedServiceLayout?: EmbeddedServiceLayout;
    EmbeddedServiceLayoutId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type EmbeddedServiceLiveAgent = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AvatarImg?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    Enabled?: boolean;
    FontSize?: EmbeddedServiceFontSize;
    FullName?: string;
    IsDeleted?: boolean;
    IsOfflineCaseEnabled?: boolean;
    IsQueuePositionEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LiveAgentChatUrl?: string;
    LiveAgentContentUrl?: string;
    LiveChatButton?: LiveChatButton;
    LiveChatButtonId?: ID;
    LiveChatDeploymentId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: EmbeddedServiceLiveAgent;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OfflineCaseBackgroundImg?: string;
    PrechatBackgroundImg?: string;
    PrechatEnabled?: boolean;
    PrechatJson?: string;
    Scenario?: EmbeddedServiceScenario;
    SmallCompanyLogoImg?: string;
    SystemModstamp?: Date;
    WaitingStateBackgroundImg?: string;
}

export type EmbeddedServiceMenuItem =  & sObject &  {
    Channel?: sObject;
    ChannelId?: ID;
    ChannelType?: EmbeddedServiceChannelType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomUrl?: string;
    DisplayOrder?: number;
    EmbeddedServiceMenu?: EmbeddedServiceMenuSettings;
    EmbeddedServiceMenuId?: ID;
    IconUrl?: string;
    IsDeleted?: boolean;
    IsDisplayedOnPageLoad?: boolean;
    ItemName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OsOptionsHideInIOS?: boolean;
    OsOptionsHideInLinuxOS?: boolean;
    OsOptionsHideInMacOS?: boolean;
    OsOptionsHideInOtherOS?: boolean;
    OsOptionsHideInWindowsOS?: boolean;
    PhoneNumber?: string;
    ShouldOpenUrlInSameTab?: boolean;
    SystemModstamp?: Date;
}

export type EmbeddedServiceMenuSettings = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Branding?: BrandingSet;
    BrandingId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: EmbeddedServiceMenuSettings;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type EmbeddedServiceMessagingChannel =  & sObject &  {
    BusinessHours?: BusinessHours;
    BusinessHoursId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmbeddedServiceConfig?: EmbeddedServiceConfig;
    EmbeddedServiceConfigId?: ID;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    ShouldShowDeliveryReceipts?: boolean;
    ShouldShowEmojiSelection?: boolean;
    ShouldShowReadReceipts?: boolean;
    ShouldShowTypingIndicators?: boolean;
    ShouldStartNewLineOnEnter?: boolean;
    SystemModstamp?: Date;
}

export type EmbeddedServiceMobilePlatform = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: EmbeddedServiceConfig;
    ParentId?: ID;
    PlatformType?: MobilePlatformType;
    PushNotificationCredential?: MobilePushNotificationCredential;
    PushNotificationCredentialId?: ID;
    SystemModstamp?: Date;
}

export type EmbeddedServiceQuickAction =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmbeddedServiceLiveAgent?: EmbeddedServiceLiveAgent;
    EmbeddedServiceLiveAgentId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Order?: number;
    QuickActionDefinition?: QuickActionDefinition;
    QuickActionDefinitionId?: ID;
    QuickActionType?: EmbeddedServiceQuickActionType;
    SystemModstamp?: Date;
}

export type EmbeddedServiceResource =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: EmbeddedServiceCustomization;
    ParentId?: ID;
    Resource?: StaticResource;
    ResourceId?: ID;
    ResourceType?: EmbeddedServiceResourceType;
    SystemModstamp?: Date;
}

export type EmployeeDataSyncField = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    IsActive?: boolean;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    IsRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SourceField?: string;
    SystemModstamp?: Date;
    TargetField?: string;
}

export type EmployeeFieldAccessSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEmployeeFieldMaskDefaultsEnabled?: boolean;
    IsEmployeeFieldMaskingEnabled?: boolean;
    Metadata?: EmployeeFieldAccessSettings;
}

export type EmployeeUserSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    EmailEncoding?: string;
    FullName?: string;
    IsEmployeeAutoCreateUserEnabled?: boolean;
    IsEmployeeIsSourceOfTruthEnabled?: boolean;
    Metadata?: EmployeeUserSettings;
    Permset?: string;
    Profile?: string;
    UsernameSuffix?: string;
}

export type EncryptionKeySettings = MetadataForSettings & sObject &  {
    CanOptOutOfDerivationWithByok?: boolean;
    DataCloudEncryption?: boolean;
    DurableId?: string;
    FullName?: string;
    IsBringYourOwnkmsEnabled?: boolean;
    IsCacheOnlyKeysEnabled?: boolean;
    IsReplayDetectionEnabled?: boolean;
    Metadata?: EncryptionKeySettings;
}

export type EngagementMessagingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    EngagementEmailProvisionStatusOrgValue?: number;
    EngagementSmsProvisionStatusOrgValue?: number;
    EngagementWhatsAppProvisionStatusOrgValue?: number;
    FullName?: string;
    IsEngagementMessagingComplete?: boolean;
    IsEngagementMessagingEnabled?: boolean;
    IsEngagementSmsComplete?: boolean;
    IsEngagementSmsEnabled?: boolean;
    IsEngagementWhatsAppComplete?: boolean;
    IsEngagementWhatsAppEnabled?: boolean;
    Metadata?: EngagementMessagingSettings;
}

export type EnhancedNotesSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEnhancedNotesEnabled?: boolean;
    IsTasksOnEnhancedNotesEnabled?: boolean;
    Metadata?: EnhancedNotesSettings;
}

export type EntitlementSettings = MetadataForSettings & sObject &  {
    AssetLookupLimitedToActiveEntitlementsOnAccount?: boolean;
    AssetLookupLimitedToActiveEntitlementsOnContact?: boolean;
    AssetLookupLimitedToSameAccount?: boolean;
    AssetLookupLimitedToSameContact?: boolean;
    DurableId?: string;
    EntitlementLookupLimitedToActiveStatus?: boolean;
    EntitlementLookupLimitedToSameAccount?: boolean;
    EntitlementLookupLimitedToSameAsset?: boolean;
    EntitlementLookupLimitedToSameContact?: boolean;
    FullName?: string;
    IgnoreMilestoneBusinessHours?: boolean;
    IsEntitlementVersioningEnabled?: boolean;
    IsEntitlementsEnabled?: boolean;
    IsMilestoneFeedItemEnabled?: boolean;
    IsMilestoneStoppedTimeEnabled?: boolean;
    Metadata?: EntitlementSettings;
}

export type EntityDefinition = sObject &  {
    ApexTriggers?: QueryResult;
    AssignmentRules?: QueryResult;
    AutoResponseRules?: QueryResult;
    BusinessProcesses?: QueryResult;
    ChildRelationships?: QueryResult;
    CompactLayouts?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomFields?: QueryResult;
    DefaultCompactLayout?: CompactLayoutInfo;
    DefaultCompactLayoutId?: string;
    DefaultImplementation?: string;
    DeploymentStatus?: DeploymentStatus;
    Description?: string;
    DetailUrl?: string;
    DeveloperName?: string;
    DurableId?: string;
    EditDefinitionUrl?: string;
    EditUrl?: string;
    ExtendedBy?: string;
    ExtendsInterfaces?: string;
    ExternalSharingModel?: string;
    FieldSets?: QueryResult;
    Fields?: QueryResult;
    FormulaVariables?: QueryResult;
    FullName?: string;
    GlobalVariableTypes?: QueryResult;
    HasSubtypes?: boolean;
    HelpSettingPageName?: string;
    HelpSettingPageUrl?: string;
    IconUrl?: string;
    ImplementedBy?: string;
    ImplementsInterfaces?: string;
    InternalSharingModel?: string;
    IsActivityTrackable?: boolean;
    IsApexTriggerable?: boolean;
    IsAutoActivityCaptureEnabled?: boolean;
    IsBulkApiAccessAllowed?: boolean;
    IsCloneable?: boolean;
    IsCompactLayoutable?: boolean;
    IsCustomSetting?: boolean;
    IsCustomizable?: boolean;
    IsDeepCloneable?: boolean;
    IsDeprecatedAndHidden?: boolean;
    IsEverCreatable?: boolean;
    IsEverDeletable?: boolean;
    IsEverUpdatable?: boolean;
    IsFeedEnabled?: boolean;
    IsFieldHistoryTracked?: boolean;
    IsFlsEnabled?: boolean;
    IsIdEnabled?: boolean;
    IsInterface?: boolean;
    IsLayoutable?: boolean;
    IsMruEnabled?: boolean;
    IsProcessEnabled?: boolean;
    IsQueryable?: boolean;
    IsReplicateable?: boolean;
    IsReportingEnabled?: boolean;
    IsRetrieveable?: boolean;
    IsSearchLayoutable?: boolean;
    IsSearchable?: boolean;
    IsSharingAllowed?: boolean;
    IsStreamingApiAccessAllowed?: boolean;
    IsSubtype?: boolean;
    IsTriggerable?: boolean;
    IsWorkflowEnabled?: boolean;
    KeyPrefix?: string;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Layouts?: QueryResult;
    Limits?: QueryResult;
    LookupFilters?: QueryResult;
    MasterLabel?: string;
    Metadata?: CustomObject;
    NamespacePrefix?: string;
    NewUrl?: string;
    OverridesOfTypeEntity?: QueryResult;
    OwnerChangeOptions?: QueryResult;
    Particles?: QueryResult;
    PluralLabel?: string;
    PostTemplates?: QueryResult;
    Publisher?: Publisher;
    PublisherId?: string;
    QualifiedApiName?: string;
    QuickActionDefinitions?: QueryResult;
    RecordTypes?: QueryResult;
    RecordTypesSupported?: RecordTypesSupported;
    RelatedListDefinitions?: QueryResult;
    RelationshipDomains?: QueryResult;
    RunningUserEntityAccess?: UserEntityAccess;
    RunningUserEntityAccessId?: string;
    SearchLayouts?: QueryResult;
    StandardActions?: QueryResult;
    ValidationRules?: QueryResult;
    WebLinks?: QueryResult;
    WorkflowAlerts?: QueryResult;
    WorkflowFieldUpdates?: QueryResult;
    WorkflowOutboundMessages?: QueryResult;
    WorkflowTasks?: QueryResult;
}

export type EntityImplements = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityEnumOrId?: string;
    FullName?: string;
    InterfaceEnumOrId?: string;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    IsFullyMapped?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: EntityImplements;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type EntityLimit = sObject &  {
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    Label?: string;
    Max?: number;
    Remaining?: number;
    Type?: EntityLimitType;
}

export type EntityParticle = sObject &  {
    ByteLength?: number;
    DataType?: string;
    DefaultValueFormula?: string;
    DefaultValueFormulaJavaScript?: string;
    DeveloperName?: string;
    Digits?: number;
    DurableId?: string;
    EncryptionState?: EncryptionState;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    ExtraTypeInfo?: string;
    FieldDefinition?: FieldDefinition;
    FieldDefinitionId?: string;
    FormulaParticles?: QueryResult;
    InlineHelpText?: string;
    IsApiFilterable?: boolean;
    IsApiGroupable?: boolean;
    IsApiSortable?: boolean;
    IsAutonumber?: boolean;
    IsCalculated?: boolean;
    IsCaseSensitive?: boolean;
    IsCompactLayoutable?: boolean;
    IsComponent?: boolean;
    IsCompound?: boolean;
    IsCreatable?: boolean;
    IsDefaultedOnCreate?: boolean;
    IsDependentPicklist?: boolean;
    IsDeprecatedAndHidden?: boolean;
    IsDisplayLocationInDecimal?: boolean;
    IsEncrypted?: boolean;
    IsFieldHistoryTracked?: boolean;
    IsHighScaleNumber?: boolean;
    IsHtmlFormatted?: boolean;
    IsIdLookup?: boolean;
    IsLayoutable?: boolean;
    IsListVisible?: boolean;
    IsNameField?: boolean;
    IsNamePointing?: boolean;
    IsNillable?: boolean;
    IsPermissionable?: boolean;
    IsUnique?: boolean;
    IsUpdatable?: boolean;
    IsWorkflowFilterable?: boolean;
    IsWriteRequiresMasterRead?: boolean;
    Label?: string;
    LayoutParticles?: QueryResult;
    Length?: number;
    Mask?: string;
    MaskType?: string;
    MasterLabel?: string;
    Name?: string;
    NamespacePrefix?: string;
    PicklistValues?: QueryResult;
    Precision?: number;
    ProductProperties?: QueryResult;
    QualifiedApiName?: string;
    ReferenceTargetField?: string;
    ReferenceTo?: RelationshipReferenceTo;
    RelationshipName?: string;
    RelationshipOrder?: number;
    Scale?: number;
    ValueType?: DataType;
    ValueTypeId?: string;
}

export type EssentialsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    EmailConnectorEnabled?: boolean;
    FullName?: string;
    Metadata?: EssentialsSettings;
}

export type EventRelayConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DestinationResourceName?: string;
    DeveloperName?: string;
    EventChannel?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: EventRelayConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RelayOption?: string;
    State?: EventRelayAdminState;
    SystemModstamp?: Date;
    TopicName?: string;
    UsageType?: EventRelayUsageType;
}

export type EventSettings = MetadataForSettings & sObject &  {
    BypassMeteringBlock?: boolean;
    DurableId?: string;
    FullName?: string;
    IsApexLimitEventsEnabled?: boolean;
    IsDeleteMonitoringDataEnabled?: boolean;
    IsDynamicStreamingChannelEnabled?: boolean;
    IsEventLogGenerationEnabled?: boolean;
    IsEventLogWaveIntegrationEnabled?: boolean;
    IsLoginForensicsEnabled?: boolean;
    IsStreamingApiEnabled?: boolean;
    IsTransactionSecurityPoliciesEnabled?: boolean;
    Metadata?: EventSettings;
}

export type EventTypeDefinition = sObject &  {
    Description?: string;
    DurableId?: string;
    EventType?: EventType;
    Fields?: QueryResult;
    IsTransactional?: boolean;
    Label?: string;
    QualifiedApiName?: string;
    SubscriptionType?: EventSubscriptionType;
}

export type EventTypeFieldDefinition = sObject &  {
    DataType?: string;
    Description?: string;
    DurableId?: string;
    EventTypeDefinition?: EventTypeDefinition;
    EventTypeDefinitionId?: string;
    IsPublication?: boolean;
    IsRequired?: boolean;
    IsSubscription?: boolean;
    Label?: string;
    QualifiedApiName?: string;
}

export type ExplainabilityActionDef = sObject &  {
    ActionLogSchemaType?: ActionLogSchemaType;
    AllManagedPackageMemberId?: ID;
    ApplicationSubtype?: ApplicationSubtypeDefinition;
    ApplicationSubtypeId?: ID;
    ApplicationType?: EASAppType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsInternal?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ProcessType?: BusinessProcessTypeDef;
    ProcessTypeId?: ID;
    SystemModstamp?: Date;
}

export type ExplainabilityActionVersion = Metadata & sObject &  {
    ActionLogMessageTemplate?: string;
    ActionSpecification?: string;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefinitionVersion?: number;
    Description?: string;
    DeveloperName?: string;
    ExplainabilityActionDef?: ExplainabilityActionDef;
    ExplainabilityActionDefId?: ID;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ExplainabilityMsgTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EmtUsageType?: EmtUsageType;
    ExpressionSetStepType?: ExpressionSetStepType;
    IsDefault?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Message?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ResultType?: EvaluationResult;
    SystemModstamp?: Date;
}

export type ExpressionSetDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultPricingProcedureForRecipe?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    ExpressionSetDefinition?: QueryResult;
    FullName?: string;
    InterfaceSourceType?: ExpsSetInterfaceSourceType;
    IsDeleted?: boolean;
    IsTemplate?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExpressionSetDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    UsageType?: ExpsSetProcessType;
}

export type ExpressionSetDefinitionVersion = Metadata & sObject &  {
    ActiveVersionSnapshotId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExpressionSetDefinition?: ExpressionSetDefinition;
    ExpressionSetDefinitionId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LatestVersionSnapshotId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExpressionSetDefinitionVersion;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ShouldShowExplExternally?: boolean;
    Status?: ExpsSetStatus;
    SystemModstamp?: Date;
    VersionNumber?: number;
}

export type ExpressionSetMessageToken = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ExpressionSetObjectAlias = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: ExpsSetObjectDataType;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExpressionSetObjectAlias;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectAlias?: string;
    ObjectApiName?: string;
    SystemModstamp?: Date;
    UsageType?: ExpsSetProcessType;
}

export type ExpressionSetView = sObject &  {
    Description?: string;
    DurableId?: string;
    ExpressionSetDetails?: string;
    HasContextDefinitionRef?: boolean;
    IsExecutable?: boolean;
    IsTemplate?: boolean;
    LastModifiedBy?: string;
    LastModifiedDate?: Date;
    Name?: string;
    NamespacePrefix?: string;
    UsageType?: ExpsSetProcessType;
}

export type ExpsSetObjectAliasFieldVw = sObject &  {
    DurableId?: string;
    ExpsSetDefVerVarField?: string;
    FieldAlias?: string;
    InstalledPackageName?: string;
    LastModifiedBy?: string;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    NamespacePrefix?: string;
    ObjectAlias?: string;
    ObjectApiName?: string;
    SourceFieldDataType?: ExpsSetDataType;
    SourceFieldDecimalScale?: number;
    SourceFieldName?: string;
    UsageType?: ExpsSetProcessType;
}

export type ExtDataTranFieldTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSourceFieldId?: ID;
    DeveloperName?: string;
    ExtDataTranObjectTemplate?: ExtDataTranObjectTemplate;
    ExtDataTranObjectTemplateId?: ID;
    ExternalDataTranField?: ExternalDataTranField;
    ExternalDataTranFieldExtDataTranFieldTemplate?: QueryResult;
    ExternalDataTranFieldId?: ID;
    ExternalName?: string;
    FullName?: string;
    IsDataRequired?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExtDataTranFieldTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ExtDataTranObjectTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSourceObject?: DataSourceObject;
    DataSourceObjectId?: ID;
    DeveloperName?: string;
    ExternalDataTranObject?: ExternalDataTranObject;
    ExternalDataTranObjectExtDataTranObjectTemplate?: QueryResult;
    ExternalDataTranObjectId?: ID;
    ExternalName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExtDataTranObjectTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ExternalAIMetric = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExternalAiMetricType?: ExternalAiMetricType;
    ExternalAiModel?: ExternalAIModel;
    ExternalAiModelId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MetricKey?: string;
    MetricValue?: string;
    SystemModstamp?: Date;
}

export type ExternalAIModel = Metadata & sObject &  {
    ApplicationType?: ApplicationSourceType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalAiMetrics?: QueryResult;
    ExternalModelKey?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ExternalAIModel;
    ModuleNamespace?: string;
    Status?: ExternalModelStatus;
    SystemModstamp?: Date;
    Threshold?: number;
    TrainingJobName?: string;
}

export type ExternalClientAppSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsClientSecretInRestApiAccessEnabled?: boolean;
    IsConsumerSecretApiAccessEnabled?: boolean;
    IsExternalClientAppsEnabled?: boolean;
    IsPackageEcaOauthFromDevOrgEnabled?: boolean;
    Metadata?: ExternalClientAppSettings;
}

export type ExternalCredential = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AuthenticationProtocol?: AuthenticationProtocol;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExternalCredentialParameters?: QueryResult;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExternalCredential;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ExternalCredentialParameter =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    AuthProviderId?: ID;
    Certificate?: Certificate;
    CertificateId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    ExternalCredential?: ExternalCredential;
    ExternalCredentialId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    ParameterGroup?: string;
    ParameterName?: string;
    ParameterType?: ExternalCredentialParamType;
    ParameterValue?: string;
    SequenceNumber?: number;
    SystemModstamp?: Date;
}

export type ExternalDataSource = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AuthProviderId?: ID;
    Certificate?: Certificate;
    CertificateId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomConfiguration?: string;
    CustomEntityDefinitions?: QueryResult;
    CustomHttpHeaders?: QueryResult;
    DeveloperName?: string;
    Endpoint?: string;
    ExternalDataSrcDescriptors?: QueryResult;
    FullName?: string;
    IsDeleted?: boolean;
    IsWritable?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExternalDataSource;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    NamespacePrefix?: string;
    OauthRefreshToken?: string;
    OauthScope?: string;
    OauthToken?: string;
    Password?: string;
    PrincipalType?: ExternalPrincipalType;
    Protocol?: AuthenticationProtocol;
    Repository?: string;
    SystemModstamp?: Date;
    Type?: string;
    Username?: string;
    Version?: string;
}

export type ExternalDataSrcDescriptor = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomObject?: CustomObject;
    CustomObjectId?: ID;
    Descriptor?: string;
    DescriptorVersion?: string;
    DeveloperName?: string;
    ExternalDataSource?: ExternalDataSource;
    ExternalDataSourceId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExternalDataSrcDescriptor;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Subtype?: ExternalDataSrcDescSubtype;
    SystemModstamp?: Date;
    SystemVersion?: number;
    Type?: ExternalDataSrcDescType;
}

export type ExternalDataTranField = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationType?: DefinitionCreationType;
    Datatype?: string;
    DateFormat?: string;
    DeveloperName?: string;
    ExtDataTranFieldTemplate?: ExtDataTranFieldTemplate;
    ExtDataTranFieldTemplateExternalDataTranField?: QueryResult;
    ExtDataTranFieldTemplateId?: ID;
    ExternalDataTranObject?: ExternalDataTranObject;
    ExternalDataTranObjectId?: ID;
    ExternalName?: string;
    FullName?: string;
    IsDataRequired?: boolean;
    IsDeleted?: boolean;
    IsImplicitFilteringRequired?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Length?: number;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExternalDataTranField;
    MktDataTranField?: MktDataTranField;
    MktDataTranFieldId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Precision?: number;
    PrimaryIndexOrder?: number;
    Scale?: number;
    Sequence?: number;
    SystemModstamp?: Date;
}

export type ExternalDataTranObject = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationType?: DefinitionCreationType;
    DeveloperName?: string;
    ExtDataTranObjectTemplate?: ExtDataTranObjectTemplate;
    ExtDataTranObjectTemplateExternalDataTranObject?: QueryResult;
    ExtDataTranObjectTemplateId?: ID;
    ExternalDataConnectorId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExternalDataTranObject;
    MktDataTranObject?: MktDataTranObject;
    MktDataTranObjectId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectCategory?: DataObjectCategory;
    ObjectCategoryId?: ID;
    SystemModstamp?: Date;
}

export type ExternalDocStorageConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DocumentPath?: string;
    ExternalDocStorageIdentifier?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExternalDocStorageConfig;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    NamespacePrefix?: string;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    StorageDriveType?: StorageDriveType;
    SystemModstamp?: Date;
    TargetObject?: TargetObject;
}

export type ExternalServiceDataType = sObject &  {
    ImplementorType?: string;
}

export type ExternalServiceListType = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    ElementDataType?: sObject;
    ElementDataTypeId?: ID;
    IsDeleted?: boolean;
    IsOrdered?: boolean;
    IsUnique?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ListTypeName?: string;
    MaxOccurs?: number;
    MinOccurs?: number;
    Parent?: sObject;
    ParentId?: ID;
    Service?: ExternalServiceRegistration;
    ServiceId?: ID;
    SystemModstamp?: Date;
}

export type ExternalServiceMapType = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    IsDeleted?: boolean;
    IsOrdered?: boolean;
    KeyDataType?: sObject;
    KeyDataTypeId?: ID;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MapTypeName?: string;
    MaxOccurs?: number;
    MinOccurs?: number;
    Parent?: sObject;
    ParentId?: ID;
    Service?: ExternalServiceRegistration;
    ServiceId?: ID;
    SystemModstamp?: Date;
    ValueDataType?: sObject;
    ValueDataTypeId?: ID;
}

export type ExternalServiceObjectType = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectBinding?: string;
    ObjectName?: string;
    Parent?: sObject;
    ParentId?: ID;
    Service?: ExternalServiceRegistration;
    ServiceId?: ID;
    SystemModstamp?: Date;
    Variant?: ExternalServiceObjectVariant;
}

export type ExternalServiceOperation =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsDeprecated?: boolean;
    Kind?: ExternalServiceOperationKind;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OperationBinding?: string;
    OperationName?: string;
    Parent?: sObject;
    ParentId?: ID;
    Position?: number;
    Service?: ExternalServiceRegistration;
    ServiceId?: ID;
    SystemModstamp?: Date;
}

export type ExternalServiceParameter = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: sObject;
    DataTypeId?: ID;
    DefaultValue?: string;
    Description?: string;
    IsDeleted?: boolean;
    IsDeprecated?: boolean;
    IsRequired?: boolean;
    Kind?: ExternalServiceParameterKind;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MaxOccurs?: number;
    MinOccurs?: number;
    Operation?: ExternalServiceOperation;
    OperationDataType?: ExternalServiceOperation;
    OperationDataTypeId?: ID;
    OperationId?: ID;
    ParameterBinding?: string;
    ParameterName?: string;
    Position?: number;
    SystemModstamp?: Date;
}

export type ExternalServiceProperty = sObject &  {
    AllowEmptyValue?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: sObject;
    DataTypeId?: ID;
    DefaultValue?: string;
    Description?: string;
    Example?: string;
    IsDeleted?: boolean;
    IsNullable?: boolean;
    IsObjectTypeName?: boolean;
    IsReadOnly?: boolean;
    IsRequired?: boolean;
    IsWriteOnly?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ObjectType?: ExternalServiceObjectType;
    ObjectTypeId?: ID;
    Position?: number;
    PropertyBinding?: string;
    PropertyName?: string;
    SystemModstamp?: Date;
}

export type ExternalServiceRegistration = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ExternalServiceRegistration;
    ModuleNamespace?: string;
    NamedCredential?: string;
    NamedCredentialReference?: NamedCredential;
    NamedCredentialReferenceId?: ID;
    NamespacePrefix?: string;
    ObjectTypes?: QueryResult;
    Operations?: QueryResult;
    ProviderAssetEndpoint?: string;
    RegistrationProviderType?: ExternalServiceRegistrationProviderType;
    Schema?: string;
    SchemaAbsoluteUrl?: string;
    SchemaType?: ExternalServiceSchemaType;
    SchemaUploadFileExtension?: string;
    SchemaUploadFileName?: string;
    SchemaUrl?: string;
    ServiceBinding?: string;
    ServiceDescriptor?: string;
    Status?: ExternalServiceStatus;
    SystemModstamp?: Date;
    SystemVersion?: number;
}

export type ExternalServiceSimpleType = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Format?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Service?: ExternalServiceRegistration;
    ServiceId?: ID;
    SimpleType?: ExternalServiceSimpleType;
    SystemModstamp?: Date;
}

export type ExternalString = sObject &  {
    AllManagedPackageMemberId?: ID;
    Category?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    IsProtected?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Localization?: QueryResult;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Name?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type ExternalStringLocalization = sObject &  {
    CountryCode?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyCode?: string;
    ExternalString?: ExternalString;
    ExternalStringId?: ID;
    IsOutOfDate?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    NamespacePrefix?: string;
    RegionCode?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type FTestAccessSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsTestPrefEnabled?: boolean;
    Metadata?: FTestAccessSettings;
}

export type FTestCart = sObject &  {
    CartKey?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    DeliveryGroups?: QueryResult;
    Description?: string;
    ExternalId?: string;
    FlsCartTextField?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MailingAddress?: any;
    MailingCity?: string;
    MailingCountryCode?: string;
    MailingGeocodeAccuracy?: GeocodePrecision;
    MailingLatitude?: number;
    MailingLongitude?: number;
    MailingPostalCode?: string;
    MailingStateCode?: string;
    MailingStreet?: string;
    Name?: string;
    NetTotal?: number;
    ProductItems?: QueryResult;
    ShopperIdentifier?: string;
    SystemModstamp?: Date;
    Total?: number;
    UserId?: ID;
    Uvid?: string;
}

export type FTestCartItemTax = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    ExternalId?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LineagePath?: string;
    Name?: string;
    Price?: number;
    ProductItem?: FTestProductItem;
    ProductItemId?: ID;
    SystemModstamp?: Date;
    TaxType?: TaxTypes;
}

export type FTestDeliveryGroup = sObject &  {
    Cart?: FTestCart;
    CartId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    ExternalId?: string;
    FlsDeliveryGroupTextField?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LineagePath?: string;
    MailingAddress?: any;
    MailingCity?: string;
    MailingCountryCode?: string;
    MailingGeocodeAccuracy?: GeocodePrecision;
    MailingLatitude?: number;
    MailingLongitude?: number;
    MailingPostalCode?: string;
    MailingStateCode?: string;
    MailingStreet?: string;
    Name?: string;
    ProductItems?: QueryResult;
    SystemModstamp?: Date;
}

export type FTestFieldMappingMd = Metadata & sObject &  {
    Label?: string;
}

export type FTestFlatZos = sObject &  {
    ApplicationType?: ApplicationType;
    Cost?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    ExternalId?: string;
    FtestVirtualBpoLookupId?: ID;
    IsOrderActive?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    OrderedDate?: Date;
    SystemModstamp?: Date;
}

export type FTestMetadataCatalogEntity = sObject &  {
    DurableId?: string;
    Name?: string;
}

export type FTestProductItem = sObject &  {
    Cart?: FTestCart;
    CartId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    DeliveryGroup?: FTestDeliveryGroup;
    DeliveryGroupId?: ID;
    ExternalId?: string;
    FlsProductItemCurrencyField?: number;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LineagePath?: string;
    Name?: string;
    Price?: number;
    Quantity?: number;
    SystemModstamp?: Date;
    Tax?: number;
    Taxes?: QueryResult;
    Total?: number;
}

export type FTestSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsTestPrefEnabled?: boolean;
    Metadata?: FTestSettings;
}

export type FTestSystemCatalogEntity = sObject &  {
    DurableId?: string;
    Name?: string;
}

export type FTestToolingFLU = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    Int?: number;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: FTestToolingFLU;
    ModuleNamespace?: string;
    StringWithDifferentName?: string;
    SystemModstamp?: Date;
    Text2?: string;
}

export type FTestToolingFLUInfo = sObject &  {
    DeveloperName?: string;
    DurableId?: string;
    EnumOrId?: string;
    FullName?: string;
    Int?: number;
    Metadata?: FTestToolingFLU;
    Text?: string;
    Text2?: string;
}

export type FeedItemSettings =  & sObject &  {
    CharacterLimit?: number;
    DisplayFormat?: FeedItemDisplayFormat;
    DurableId?: string;
    FeedItemType?: FeedItemType;
}

export type PostTemplate = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    TableEnumOrId?: string;
}

export type FieldClassificationSetting =  & sObject &  {
    ConfidenceThreshold?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PredictionField?: sObject;
    PredictionFieldId?: ID;
    SystemModstamp?: Date;
    Type?: FieldClassificationConfigType;
}

export type FieldDefinition = sObject &  {
    BusinessOwner?: sObject;
    BusinessOwnerId?: ID;
    BusinessStatus?: string;
    CalculatedFormulaJavaScript?: string;
    CalculatedFormulaReferences?: string;
    CompactLayoutItems?: QueryResult;
    ComplianceGroup?: string;
    ControlledFields?: QueryResult;
    ControllingFieldDefinition?: FieldDefinition;
    ControllingFieldDefinitionId?: string;
    DataType?: string;
    Description?: string;
    DeveloperName?: string;
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    ExtraTypeInfo?: string;
    FullName?: string;
    IsAiPredictionField?: boolean;
    IsApiFilterable?: boolean;
    IsApiGroupable?: boolean;
    IsApiSortable?: boolean;
    IsCalculated?: boolean;
    IsCompactLayoutable?: boolean;
    IsCompound?: boolean;
    IsEverApiAccessible?: boolean;
    IsFieldHistoryTracked?: boolean;
    IsFlsEnabled?: boolean;
    IsHighScaleNumber?: boolean;
    IsHtmlFormatted?: boolean;
    IsIndexed?: boolean;
    IsListFilterable?: boolean;
    IsListSortable?: boolean;
    IsListVisible?: boolean;
    IsNameField?: boolean;
    IsNillable?: boolean;
    IsPolymorphicForeignKey?: boolean;
    IsSearchPrefilterable?: boolean;
    IsWorkflowFilterable?: boolean;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Length?: number;
    LookupFilters?: QueryResult;
    MasterLabel?: string;
    Metadata?: CustomField;
    NamespacePrefix?: string;
    ParentEnumOrId?: string;
    Particles?: QueryResult;
    Precision?: number;
    Publisher?: Publisher;
    PublisherId?: string;
    QualifiedApiName?: string;
    ReferenceTargetField?: string;
    ReferenceTo?: RelationshipReferenceTo;
    RelationshipDomains?: QueryResult;
    RelationshipName?: string;
    RunningUserFieldAccess?: UserFieldAccess;
    RunningUserFieldAccessId?: string;
    Scale?: number;
    SecurityClassification?: string;
    ValueType?: DataType;
    ValueTypeId?: string;
    WorkflowFieldUpdates?: QueryResult;
}

export type FieldImplements =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityImplements?: EntityImplements;
    EntityImplementsId?: ID;
    FieldEnumOrId?: string;
    InterfaceFieldEnumOrId?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
}

export type FieldMapping =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FieldMappingClient?: CleanRule;
    FieldMappingClientId?: ID;
    FieldMappings?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type FieldMappingField =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataServiceField?: string;
    DataServiceObjectName?: string;
    FieldMappingRow?: FieldMappingRow;
    FieldMappingRowId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Priority?: number;
    SystemModstamp?: Date;
}

export type FieldMappingRow =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FieldMapping?: FieldMapping;
    FieldMappingId?: ID;
    FieldMappingRows?: QueryResult;
    FieldName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Operation?: MappingOperation;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type FieldRestrictionRule = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Classification?: string;
    ClassificationType?: ClassificationType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EnforcementType?: EnforcementType;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: FieldRestrictionRule;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordFilter?: string;
    SystemModstamp?: Date;
    TargetEntity?: string;
    UserCriteria?: string;
    Version?: number;
}

export type FieldServiceSettings = MetadataForSettings & sObject &  {
    ApptAssistantExpiration?: number;
    ApptAssistantInfoUrl?: string;
    ApptAssistantRadiusUnitValue?: ApptAssistantRadiusUnit;
    ApptAssistantRadiusValue?: number;
    ApptAssistantStatus?: string;
    CanPopulateGoogleAddress?: boolean;
    CanSendAppCenterCrashReports?: boolean;
    CanStoreMobileAnalytics?: boolean;
    DeepLinkPublicSecurityKey?: string;
    DoesAllowEditSaForCrew?: boolean;
    DoesAvlCalcInclOvertime?: boolean;
    DoesAvlCalcInclPrimOnly?: boolean;
    DoesShareSaParentWoWithAr?: boolean;
    DoesShareSaWithAr?: boolean;
    DurableId?: string;
    FieldServiceNotificationsOrgPref?: boolean;
    FieldServiceOrgPref?: boolean;
    FullName?: string;
    IsBatchWindowEnabled?: boolean;
    IsFloatingWorkOrderEnabled?: boolean;
    IsGeoCodeSyncEnabled?: boolean;
    IsLocationHistoryEnabled?: boolean;
    IsPopulateWorkOrderAddressEnabled?: boolean;
    IsWorkOrdersEnabled?: boolean;
    IsWorkPlansAutoGenerationEnabled?: boolean;
    IsWorkStepManualStatusUpdateEnabled?: boolean;
    Metadata?: FieldServiceSettings;
    MobileFeedbackEmails?: string;
    O2EngineEnabled?: boolean;
    OptimizationServiceAccess?: boolean;
    ServiceAppointmentsDueDateOffsetOrgValue?: number;
    WorkOrderDurationSource?: WorkOrderDurationSource;
    WorkOrderLineItemSearchFields?: string;
    WorkOrderSearchFields?: string;
}

export type FieldSet = Metadata & sObject &  {
    AggrCriteriaFieldsets?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DisplayFieldSets?: QueryResult;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    NamespacePrefix?: string;
    ParsingFieldSets?: QueryResult;
    ResultFieldsets?: QueryResult;
    SearchCriteriaFieldsets?: QueryResult;
    SortingCriteriaFieldsets?: QueryResult;
}

export type FileTypeDispositionAssignmentBean =  & sObject &  {
    Behavior?: string;
    DurableId?: string;
    FileType?: FileType;
    SecurityRiskFileType?: boolean;
}

export type FileUploadAndDownloadSecuritySettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    Metadata?: FileUploadAndDownloadSecuritySettings;
    NoHtmlUploadAsAttachment?: boolean;
}

export type FilesConnectSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsContentHubAllowedEnabled?: boolean;
    IsContentHubCvtLinksAllowedEnabled?: boolean;
    IsContentHubEoSearchLayoutEnabled?: boolean;
    Metadata?: FilesConnectSettings;
}

export type FindSimilarOppFilter =  & sObject &  {
    DurableId?: string;
    SimilarOpportunitiesDisplayColumns?: string;
    SimilarOpportunitiesMatchFields?: string;
}

export type FlexiPage = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreatedVersion?: number;
    Description?: string;
    DeveloperName?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: FlexiPage;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParentFlexiPage?: string;
    SystemModstamp?: Date;
    Type?: FlexiPageType;
}

export type FlowApexClassDescriptor = sObject &  {
    DurableId?: string;
    IdentifierEnumOrId?: string;
    InnerTypes?: QueryResult;
    Name?: string;
    Namespace?: string;
    Parent?: FlowApexClassDescriptor;
    ParentId?: string;
    Properties?: QueryResult;
}

export type FlowApexClassPropertyDesc = sObject &  {
    ApexClass?: string;
    DurableId?: string;
    IdentifierEnumOrId?: string;
    IsCollection?: boolean;
    Name?: string;
    ObjectType?: string;
    Parent?: FlowApexClassDescriptor;
    ParentId?: string;
    Type?: string;
}

export type FlowCategory = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: FlowCategory;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type FlowDefinition = Metadata & sObject &  {
    ActiveVersion?: Flow;
    ActiveVersionId?: ID;
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LatestVersion?: Flow;
    LatestVersionId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: FlowDefinition;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Versions?: QueryResult;
}

export type FlowElementSubtype = sObject &  {
    Color?: string;
    DescriptionKey?: string;
    DescriptionSection?: string;
    DurableId?: string;
    EnumOrId?: string;
    FieldInputCategory?: FieldInputCategory;
    FlowBuilderConfigComponent?: string;
    FullName?: string;
    Icon?: string;
    LabelKey?: string;
    LabelPluralKey?: string;
    LabelPluralSection?: string;
    LabelSection?: string;
    Metadata?: FlowElementSubtypeDefinition;
    Name?: string;
    SupportsBranching?: boolean;
}

export type FlowElementTestCoverage = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ElementName?: string;
    FlowTestCoverage?: FlowTestCoverage;
    FlowTestCoverageId?: ID;
    FlowVersion?: Flow;
    FlowVersionId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type FlowEnvironmentDefinition = Metadata & sObject &  {
    DurableId?: string;
    EnumOrId?: string;
    FullName?: string;
    Label?: string;
    Metadata?: FlowEnvironmentDefinition;
    Name?: string;
}

export type FlowExtension = sObject &  {
    AllowMultipleChoices?: boolean;
    AllowSingleChoice?: boolean;
    Category?: string;
    ConfigurationEditor?: string;
    Description?: string;
    DesignSubstitute?: string;
    DurableId?: string;
    ExtensionType?: string;
    GenericTypes?: QueryResult;
    Label?: string;
    Parameters?: QueryResult;
    ProcessTypes?: QueryResult;
    QualifiedApiName?: string;
    Source?: string;
}

export type FlowExtensionGenericType = sObject &  {
    Description?: string;
    DurableId?: string;
    FlowExtension?: FlowExtension;
    FlowExtensionId?: string;
    Label?: string;
    Name?: string;
    SuperType?: string;
}

export type FlowExtensionParam = sObject &  {
    ApexClass?: string;
    ApiName?: string;
    AvailableValues?: string;
    DataType?: string;
    DefaultValue?: string;
    Description?: string;
    DurableId?: string;
    FlowExtension?: FlowExtension;
    FlowExtensionId?: string;
    HasDefaultValue?: boolean;
    IsInput?: boolean;
    IsOutput?: boolean;
    IsRequired?: boolean;
    IsTranslatable?: boolean;
    Label?: string;
    MaxOccurs?: number;
    MaxValue?: string;
    MinValue?: string;
    ObjectType?: string;
}

export type FlowExtensionProcessType = sObject &  {
    DurableId?: string;
    FlowExtension?: FlowExtension;
    FlowExtensionId?: string;
    ProcessType?: string;
}

export type FlowSettings = MetadataForSettings & sObject &  {
    CanDebugFlowAsAnotherUser?: boolean;
    DoesEnforceApexCpuTimeLimit?: boolean;
    DoesFormulaEnforceDataAccess?: boolean;
    DoesFormulaGenerateHtmlOutput?: boolean;
    DurableId?: string;
    FullName?: string;
    IsApexPluginAccessModifierRespected?: boolean;
    IsEmailSimpleRespectProfilesEnabled?: boolean;
    IsEmailsimpleSecureProfilesEnabled?: boolean;
    IsEnhancedFlowListViewVisible?: boolean;
    IsFlowBlockAccessToSessionIdEnabled?: boolean;
    IsFlowBrEncodedFixEnabledEnabled?: boolean;
    IsFlowCustomPropertyEditorEnabled?: boolean;
    IsFlowDeployAsActiveEnabledEnabled?: boolean;
    IsFlowFieldFilterEnabledEnabled?: boolean;
    IsFlowFormulasFixEnabledEnabled?: boolean;
    IsFlowInterviewSharingEnabledEnabled?: boolean;
    IsFlowNullPreviousValueFixEnabled?: boolean;
    IsFlowPauseEnabledEnabled?: boolean;
    IsFlowReactiveChoiceOptionsEnabled?: boolean;
    IsFlowReactiveScreensEnabled?: boolean;
    IsFlowUseApexExceptionEmailEnabled?: boolean;
    IsFlowViaRestUsesUserCtxtEnabled?: boolean;
    IsLightningRuntimeEnabledEnabled?: boolean;
    IsManageFlowRequiredForAutomationCharts?: boolean;
    IsSupportRollbackOnErrorForApexInvocableActionsEnabled?: boolean;
    Metadata?: FlowSettings;
}

export type FlowTest = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: FlowTest;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type FlowTestCoverage = sObject &  {
    ApexTestClass?: ApexClass;
    ApexTestClassId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FlowVersion?: Flow;
    FlowVersionId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NumElementsCovered?: number;
    NumElementsNotCovered?: number;
    SystemModstamp?: Date;
    TestMethodName?: string;
}

export type FlowTriggerTypeDefinition = Metadata & sObject &  {
    DurableId?: string;
    EnumOrId?: string;
    FullName?: string;
    Label?: string;
    Metadata?: FlowTriggerTypeDefinition;
    Name?: string;
}

export type ForecastRangeSettings =  & sObject &  {
    Beginning?: number;
    Displaying?: number;
    DurableId?: string;
    PeriodType?: PeriodTypes;
}

export type ForecastingDisplayedFamily = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayPosition?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ProductFamily?: string;
    SystemModstamp?: Date;
}

export type ForecastingDisplayedFamilySettings =  & sObject &  {
    DurableId?: string;
    ProductFamily?: string;
}

export type ForecastingFilter = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FilterLogic?: string;
    ForecastingType?: ForecastingType;
    ForecastingTypeId?: ID;
    ForecastingTypeSource?: ForecastingTypeSource;
    ForecastingTypeSourceId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ForecastingFilter;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type ForecastingFilterCondition = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FieldName?: string;
    ForecastingFilter?: ForecastingFilter;
    ForecastingFilterId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ForecastingFilterCondition;
    ModuleNamespace?: string;
    Operation?: FilterOperation;
    SortOrder?: number;
    SystemModstamp?: Date;
    Value?: string;
}

export type ForecastingObjectListSelectedSettings =  & sObject &  {
    DurableId?: string;
    Field?: string;
}

export type ForecastingObjectListSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    Metadata?: ForecastingObjectListSettings;
}

export type ForecastingSettings = MetadataForSettings & sObject &  {
    DefaultToPersonalCurrency?: boolean;
    DurableId?: string;
    FullName?: string;
    GlobalAdjustmentsSettingsId?: string;
    GlobalForecastRangeSettingsId?: string;
    GlobalQuotasSettingsId?: string;
    IsForecastsEnabled?: boolean;
    Metadata?: ForecastingSettings;
}

export type ForecastingSourceDefinition = Metadata & sObject &  {
    CategoryField?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DateField?: string;
    DeveloperName?: string;
    FamilyField?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    MeasureField?: string;
    Metadata?: ForecastingSourceDefinition;
    ModuleNamespace?: string;
    SourceObject?: string;
    SystemModstamp?: Date;
    Territory2Field?: string;
    UserField?: string;
}

export type ForecastingType = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DateType?: ForecastingDateType;
    DeveloperName?: string;
    FullName?: string;
    HasProductFamily?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ForecastingType;
    ModuleNamespace?: string;
    OpportunitySplitType?: OpportunitySplitType;
    OpportunitySplitTypeId?: ID;
    OpptyLineItemSplitType?: OpptyLineItemSplitType;
    OpptyLineItemSplitTypeId?: ID;
    RoleType?: string;
    SystemModstamp?: Date;
    Territory2ModelId?: ID;
}

export type ForecastingTypeSettings =  & sObject &  {
    Active?: boolean;
    DisplayedCategoryApiNames?: string;
    DurableId?: string;
    ForecastedCategoryApiNames?: string;
    ForecastingDateType?: ForecastingDateType;
    HasProductFamily?: boolean;
    IsAmount?: boolean;
    IsAvailable?: boolean;
    IsQuantity?: boolean;
    ManagerAdjustableCategoryApiNames?: string;
    MasterLabel?: string;
    Name?: string;
    OpportunityListFieldsSelectedSettings?: OpportunityListFieldsSelectedSettings;
    OpportunityListFieldsSelectedSettingsId?: string;
    OpportunityListFieldsUnselectedSettings?: OpportunityListFieldsUnselectedSettings;
    OpportunityListFieldsUnselectedSettingsId?: string;
    OpportunitySplitName?: string;
    OwnerAdjustableCategoryApiNames?: string;
    Territory2ModelName?: string;
}

export type ForecastingTypeSource = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ForecastingSourceDefinition?: ForecastingSourceDefinition;
    ForecastingSourceDefinitionId?: ID;
    ForecastingType?: ForecastingType;
    ForecastingTypeId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ForecastingTypeSource;
    ModuleNamespace?: string;
    ParentSourceDefinition?: ForecastingSourceDefinition;
    ParentSourceDefinitionId?: ID;
    RelationField?: string;
    SourceGroup?: number;
    SystemModstamp?: Date;
}

export type FormulaFunction = sObject &  {
    Category?: FormulaFunctionCategory;
    CategoryId?: string;
    Description?: string;
    DurableId?: string;
    ExampleString?: string;
    Label?: string;
    Name?: string;
    Types?: QueryResult;
}

export type FormulaFunctionAllowedType = sObject &  {
    DurableId?: string;
    Function?: FormulaFunction;
    FunctionId?: string;
    Type?: UddFormulaType;
}

export type FormulaFunctionCategory = sObject &  {
    DurableId?: string;
    Functions?: QueryResult;
    Label?: string;
    Name?: string;
}

export type FormulaOperator = sObject &  {
    DurableId?: string;
    Label?: string;
    Name?: string;
    Value?: string;
}

export type FormulaParticle = sObject &  {
    DurableId?: string;
    EntityParticle?: EntityParticle;
    EntityParticleId?: string;
    IsAvailableForFormulas?: boolean;
    IsAvailableForMerge?: boolean;
    IsPolymorphic?: boolean;
    IsSpanningAllowed?: boolean;
}

export type FormulaSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsDstAwareDatevalueEnabled?: boolean;
    Metadata?: FormulaSettings;
}

export type FormulaVariable = sObject &  {
    Children?: QueryResult;
    DataType?: string;
    DataTypeLabel?: string;
    DurableId?: string;
    Entity?: EntityDefinition;
    EntityId?: string;
    FormulaType?: UddFormulaType;
    HasChildren?: boolean;
    Label?: string;
    Name?: string;
    Parent?: FormulaVariable;
    ParentId?: string;
    Value?: string;
}

export type FtestDeclMd1Member = sObject &  {
    Content?: string;
    ContentEntity?: FtestTopLevelWithDeclMd1;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: FtestTopLevelWithDeclMd1;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type FtestDeclMd2Member = sObject &  {
    Content?: string;
    ContentEntity?: FtestTopLevelWithDeclMd2;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: FtestTopLevelWithDeclMd2;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type FtestDeclMd3Member = sObject &  {
    Content?: string;
    ContentEntity?: FtestTopLevelWithDeclMd3;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: FtestTopLevelWithDeclMd3;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type FtestDetailWithDeclMd1 =  & sObject &  {
    BooleanField?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DateField?: Date;
    DateTimeField?: Date;
    DoubleField?: number;
    EmailField?: string;
    EnumOrIdField?: string;
    IntegerField?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StaticEnumField?: FTestTopLevelSelection;
    SubItems?: QueryResult;
    SystemModstamp?: Date;
}

export type FtestDetailWithDeclMd2 =  & sObject &  {
    BooleanField?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DateField?: Date;
    DateTimeField?: Date;
    DoubleField?: number;
    EmailField?: string;
    IntegerField?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StaticEnumField?: FTestTopLevelSelection;
    SystemModstamp?: Date;
}

export type FtestSetup = sObject &  {
    AutoNum?: string;
    Body?: string;
    BodyCompressedLength?: number;
    BodyLength?: number;
    Clob?: string;
    ContentType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomFieldDefinition?: CustomField;
    CustomFieldDefinitionId?: ID;
    Date?: Date;
    DateTime?: Date;
    DefaultedInt?: number;
    DerivedText?: string;
    Double?: number;
    Formula?: number;
    FtestPackagedSetupId?: ID;
    Int?: number;
    IsBoolean?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LongBinary?: string;
    LongClob?: string;
    LongEncryptedBinary?: string;
    LongUrl?: string;
    LongUrlNewSlot?: string;
    OptionsSample?: boolean;
    OptionsVal1?: boolean;
    OptionsVal2?: boolean;
    Picklist?: string;
    SystemModstamp?: Date;
    Text?: string;
    User?: User;
    UserId?: ID;
}

export type FtestSubDetailWithDeclMd =  & sObject &  {
    BooleanField?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DateField?: Date;
    DateTimeField?: Date;
    DoubleField?: number;
    EmailField?: string;
    IntegerField?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StaticEnumField?: FTestTopLevelSelection;
    SystemModstamp?: Date;
}

export type FtestTopLevelWithCrud = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    TextField?: string;
}

export type FtestTopLevelWithDeclMd1 = Metadata & sObject &  {
    BooleanField?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DateField?: Date;
    DateTimeField?: Date;
    DeveloperName?: string;
    DoubleField?: number;
    EmailField?: string;
    FullName?: string;
    IntegerField?: number;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: FtestTopLevelWithDeclMd1;
    ModuleNamespace?: string;
    StaticEnumField?: FTestTopLevelSelection;
    SystemModstamp?: Date;
    TypeOneItems?: QueryResult;
    TypeTwoItems?: QueryResult;
}

export type FtestTopLevelWithDeclMd2 = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EnumOrIdField?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LookupField?: FtestTopLevelWithDeclMd3;
    LookupFieldId?: ID;
    MasterLabel?: string;
    Metadata?: FtestTopLevelWithDeclMd2;
    ModuleNamespace?: string;
    OnOrOffField?: FTestOnOffSelection;
    OverriddenMaxVersionedField?: string;
    Season?: FTestSeasonSelection;
    SomeUser?: User;
    SomeUserId?: ID;
    StaticResourceLookup?: StaticResource;
    StaticResourceLookupId?: ID;
    SystemModstamp?: Date;
    TextField?: string;
    UrlField?: string;
}

export type FtestTopLevelWithDeclMd3 = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LookupThatCameBefore?: FtestTopLevelWithDeclMd1;
    LookupThatCameBeforeId?: ID;
    MasterLabel?: string;
    Metadata?: FtestTopLevelWithDeclMd3;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type FuelType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsStationaryAssetFuel?: boolean;
    IsVehicleAssetFuel?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type FuelTypeSustnUom = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FuelType?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    UnitOfMeasure?: string;
}

export type FulfillmentStepType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Handler?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type FundraisingConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DonorMatchingMethod?: DonorMatchingMethod;
    FailedTransactionCount?: number;
    FullName?: string;
    HouseholdSoftCreditRole?: string;
    InstallmentExtDayCount?: number;
    IsDeleted?: boolean;
    IsHshldSoftCrAutoCrea?: boolean;
    Language?: string;
    LapsedUnpaidTrxnCount?: number;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: FundraisingConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ShouldClosePaidRcrCmt?: boolean;
    ShouldCreateRcrSchdTrxn?: boolean;
    SystemModstamp?: Date;
    UtmCampaignSrcObj?: string;
    UtmCampaignSrcObjField?: string;
    UtmMediumSrcObj?: string;
    UtmMediumSrcObjField?: string;
    UtmSourceSrcObj?: string;
    UtmSourceSrcObjField?: string;
}

export type GenAiConvDefPlanner = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParentRecord?: sObject;
    ParentRecordId?: ID;
    Planner?: GenAiPlannerDefinition;
    PlannerId?: ID;
    SystemModstamp?: Date;
}

export type GenAiFunctionDefinition = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    InvocationTarget?: string;
    InvocationTargetType?: string;
    IsConfirmationRequired?: boolean;
    IsDeleted?: boolean;
    IsFallback?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: GenAiFunction;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type GenAiFunctionTypeDef = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: GenAiFunction;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type GenAiPlannerAttrDefinition = sObject &  {
    AllowedValues?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: PlannerAttrDataType;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsDisplayable?: boolean;
    IsPersIdentInfo?: boolean;
    IsRequired?: boolean;
    IsUserInput?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MappingType?: PlannerAttrMappingType;
    MasterLabel?: string;
    Metadata?: GenAiPlannerAttr;
    ModuleNamespace?: string;
    Parent?: sObject;
    ParentId?: ID;
    Pattern?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type GenAiPlannerDefinition = sObject &  {
    AllManagedPackageMemberId?: ID;
    Capabilities?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    GenAiPlannerAttrDefinitions?: QueryResult;
    GenAiPlannerBotVersionDefinitions?: QueryResult;
    GenAiPlannerPluginDefinitions?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: GenAiPlanner;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PlannerType?: string;
    SystemModstamp?: Date;
}

export type GenAiPlannerFunctionDef =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    IsFallback?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Planner?: GenAiPlannerDefinition;
    PlannerId?: ID;
    Plugin?: string;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type GenAiPluginDefinition = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    GenAIPluginFunctionDefinitions?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: GenAiPlugin;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type GenAiPluginFunctionDef =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Function?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Plugin?: GenAiPluginDefinition;
    PluginId?: ID;
    SystemModstamp?: Date;
}

export type GenAiPromptOutputParameter = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Fullname?: string;
    GenAiPromptTemplateOutputParameters?: QueryResult;
    Instruction?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: GenAiPromptOutputParameterType;
    Value?: string;
}

export type GenAiPromptTemplate = sObject &  {
    ActiveVersion?: GenAiPromptTemplateVersion;
    ActiveVersionId?: ID;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreatedInVersion?: number;
    Description?: string;
    DeveloperName?: string;
    ExternalId?: string;
    Fullname?: string;
    GenAiPromptTemplateVersions?: QueryResult;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsInternal?: boolean;
    IsLocked?: boolean;
    IsPilotRecord?: boolean;
    Language?: string;
    LastCreatedVersion?: GenAiPromptTemplateVersion;
    LastCreatedVersionId?: ID;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RelatedEntity?: string;
    RelatedField?: string;
    SystemModstamp?: Date;
    Type?: string;
    Visibility?: GenAiPromptTemplateVisibilityType;
}

export type GenAiPromptTemplateActv = sObject &  {
    AccessLevel?: GenAiPromptTemplateActvAccessLevel;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    GenAiPromptTemplateDevName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type GenAiPromptTemplateDataProvider = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Definition?: string;
    GenAiPromptTemplateDataProviderParams?: QueryResult;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Parent?: GenAiPromptTemplateVersion;
    ParentId?: ID;
    ReferenceName?: string;
    SystemModstamp?: Date;
}

export type GenAiPromptTemplateDataProviderParam = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataProvider?: GenAiPromptTemplateDataProvider;
    DataProviderId?: ID;
    Definition?: string;
    IsDeleted?: boolean;
    IsRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParameterName?: string;
    SystemModstamp?: Date;
    ValueExpression?: string;
}

export type GenAiPromptTemplateInput = sObject &  {
    ApiName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Definition?: string;
    Description?: string;
    IsDeleted?: boolean;
    IsRequired?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Parent?: sObject;
    ParentId?: ID;
    ReferenceName?: string;
    SystemModstamp?: Date;
}

export type GenAiPromptTemplateOutputParameter = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    GenAiPromptOutputParameter?: GenAiPromptOutputParameter;
    GenAiPromptOutputParameterId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Parent?: GenAiPromptTemplateType;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type GenAiPromptTemplateSampleData = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    GenAiPromptTemplateVersionKey?: GenAiPromptTemplateVersion;
    GenAiPromptTemplateVersionKeyId?: ID;
    GenAiSampleDataKey?: GenAiSampleData;
    GenAiSampleDataKeyId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type GenAiPromptTemplateType = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Fullname?: string;
    GenAiPromptTemplateInputs?: QueryResult;
    GenAiPromptTemplateOutputParameters?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: string;
}

export type GenAiPromptTemplateVersion = sObject &  {
    AllManagedPackageMemberId?: ID;
    Classification?: string;
    Content?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreatedInVersion?: number;
    Description?: string;
    Fullname?: string;
    GenAiPromptTemplate?: GenAiPromptTemplate;
    GenAiPromptTemplateDataProviders?: QueryResult;
    GenAiPromptTemplateId?: ID;
    GenAiPromptTemplateInputs?: QueryResult;
    GenAiPromptTemplateVersions?: QueryResult;
    IsDeleted?: boolean;
    IsPilotRecord?: boolean;
    Keywords?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    PrimaryModel?: string;
    Status?: GenAiPromptTemplateStatus;
    SystemModstamp?: Date;
    UniquenessCheck?: string;
    VersionNumber?: number;
}

export type GenAiSampleData = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    GenAiSampleData?: QueryResult;
    IsDeleted?: boolean;
    Key?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    Sample?: string;
    SampleDataType?: string;
    SystemModstamp?: Date;
}

export type GlobalVariable = sObject &  {
    Datatype?: string;
    DurableId?: string;
    Label?: string;
    Name?: string;
    Type?: GlobalVariableType;
    TypeId?: string;
}

export type GlobalVariableType = sObject &  {
    ChildTypes?: QueryResult;
    Context?: GlobalVariableContext;
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    HasChildTypes?: boolean;
    Label?: string;
    Name?: string;
    ParentType?: GlobalVariableType;
    ParentTypeId?: string;
    Variables?: QueryResult;
}

export type GoogleAppsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    GoogleAppsDomain?: string;
    GoogleAppsDomainLinked?: boolean;
    GoogleAppsDomainValidated?: boolean;
    IsGmailButtonsAndLinksEnabled?: boolean;
    IsGmailButtonsEnabled?: boolean;
    IsGmailLinksEnabled?: boolean;
    IsGoogleDocsEnabled?: boolean;
    IsGoogleDocsTabEnabled?: boolean;
    IsGoogleTalkEnabled?: boolean;
    Metadata?: GoogleAppsSettings;
}

export type Group = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DelegatedUsers?: QueryResult;
    DeveloperName?: string;
    DoesIncludeBosses?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    Owner?: sObject;
    OwnerId?: ID;
    QueueRoutingConfigId?: ID;
    Related?: sObject;
    RelatedId?: ID;
    SystemModstamp?: Date;
    Type?: string;
}

export type GtwyProvPaymentMethodType = sObject &  {
    AllManagedPackageMemberId?: ID;
    Comments?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    GtwyProviderPaymentMethodType?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastViewedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: GatewayProviderPaymentMethodType;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PaymentGatewayProvider?: PaymentGatewayProvider;
    PaymentGatewayProviderId?: ID;
    PaymentMethodType?: string;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SystemModstamp?: Date;
}

export type HighVelocitySalesSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAcAutoSendEmailEnabled?: boolean;
    IsAcChangeTargetAssigneeEnabled?: boolean;
    IsAcSkipWeekendsEnabled?: boolean;
    IsBusinessHoursEnabled?: boolean;
    IsCadenceVariantTestingPrefEnabled?: boolean;
    IsChgTgtAssigneeUsrPermPrefEnabled?: boolean;
    IsDispositionCategoryEnabled?: boolean;
    IsEngagementWaveAnalyticsPrefEnabled?: boolean;
    IsHighVelocitySalesEnabled?: boolean;
    IsHighVelocitySalesSetupEnabled?: boolean;
    IsInvoiceAttributionPrefEnabled?: boolean;
    IsLogAcallForCtiPrefEnabled?: boolean;
    IsLogTasksForLinkedInPrefEnabled?: boolean;
    IsMultipleCadencesPrefEnabled?: boolean;
    IsOpportunityAttributionPermPrefEnabled?: boolean;
    IsQuickCadenceAutoSendEmailEnabled?: boolean;
    IsTaskLoggingPrefEnabled?: boolean;
    Metadata?: HighVelocitySalesSettings;
}

export type HistoryRetentionJob = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DurationSeconds?: number;
    HistoryType?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NumberOfRowsRetained?: number;
    RetainOlderThanDate?: Date;
    Status?: RetentionJobStatus;
    SystemModstamp?: Date;
}

export type IDEPerspective = sObject &  {
    Content?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    SystemModstamp?: Date;
    User?: User;
    UserId?: ID;
}

export type IDEWorkspace = sObject &  {
    Content?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    SystemModstamp?: Date;
    User?: User;
    UserId?: ID;
}

export type IPAddressRange = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EndAddress?: string;
    FullName?: string;
    IpAddressFeature?: IPAddressFeature;
    IpAddressUsageScope?: IPAddressUsageScope;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: IPAddressRange;
    ModuleNamespace?: string;
    StartAddress?: string;
    SystemModstamp?: Date;
}

export type IconDefinition = sObject &  {
    ContentType?: string;
    DurableId?: string;
    Height?: number;
    TabDefinition?: TabDefinition;
    TabDefinitionId?: string;
    Theme?: string;
    Url?: string;
    Width?: number;
}

export type IdeasSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    HalfLife?: number;
    IdeasProfilePage?: string;
    IsChatterProfileEnabled?: boolean;
    IsHtmlIdeaEnabled?: boolean;
    IsIdeaMultipleCategoryEnabled?: boolean;
    IsIdeaThemesEnabled?: boolean;
    IsIdeasControllerExtensionsEnabled?: boolean;
    IsIdeasEnabled?: boolean;
    IsIdeasReputationEnabled?: boolean;
    Metadata?: IdeasSettings;
}

export type IdentityVerificationProcDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IdentityVerificationProcDefs?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: IdentityVerificationProcDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SearchLayoutType?: IdentityVerificationSearchLayoutType;
    SystemModstamp?: Date;
}

export type IdentityVerificationProcDtl = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSourceType?: IdentityVerificationDataSourceType;
    DeveloperName?: string;
    DisplayRecordFieldName?: string;
    FullName?: string;
    IdentityVerificationProcDef?: IdentityVerificationProcDef;
    IdentityVerificationProcDefId?: ID;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsRetryAllowedAfterLimit?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LinkedIdVerfProcessDet?: IdentityVerificationProcDtl;
    LinkedIdVerfProcessDetId?: ID;
    LinkedIdVerfProcessDets?: QueryResult;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: IdentityVerificationProcDtl;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectName?: string;
    OptionalVerifiersMinVerfCount?: number;
    RetryLimit?: number;
    SearchFilter?: string;
    SearchRecordUniqueIdField?: string;
    SearchResultSortBy?: string;
    SearchSequenceNumber?: number;
    SearchType?: IdentityVerificationSearchType;
    SystemModstamp?: Date;
}

export type IdentityVerificationProcFld = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSourceType?: IdentityVerificationProcFldDataSourceType;
    DeveloperName?: string;
    FieldDataType?: IdentityVerificationProcFldFieldDataType;
    FieldName?: string;
    FieldType?: IdentityVerificationProcFldFieldType;
    FieldValueFormula?: string;
    FullName?: string;
    IdentityVerificationProcDtl?: IdentityVerificationProcDtl;
    IdentityVerificationProcDtlId?: ID;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsManualInput?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: IdentityVerificationProcFld;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SequenceNumber?: number;
    SystemModstamp?: Date;
}

export type InboundNetworkConnProperty =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InboundNetworkConnection?: InboundNetworkConnection;
    InboundNetworkConnectionId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PropertyName?: InboundConnPropertyName;
    PropertyValue?: string;
    SystemModstamp?: Date;
}

export type InboundNetworkConnection = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConnectionType?: ExternalConnectionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    InboundNetworkConnProperties?: QueryResult;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: InboundNetworkConnection;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Status?: ExternalConnectionStatus;
    SystemModstamp?: Date;
}

export type IncidentMgmtSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAlertBroadcastTypeEnabled?: boolean;
    IsEmailBroadcastTypeEnabled?: boolean;
    IsIncidentMgmtEnabled?: boolean;
    IsSiteBannerBroadcastTypeEnabled?: boolean;
    IsSlackBroadcastTypeEnabled?: boolean;
    Metadata?: IncidentMgmtSettings;
}

export type IncludeEstTaxInQuoteSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsQuoteEstimatedTaxEnabled?: boolean;
    Metadata?: IncludeEstTaxInQuoteSettings;
}

export type IndustriesAutomotiveSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAutomotiveCloudEnabled?: boolean;
    IsAutomotiveSchedulerEnabled?: boolean;
    IsAutomotiveServiceExcellenceEnabled?: boolean;
    Metadata?: IndustriesAutomotiveSettings;
}

export type IndustriesEinsteinFeatureSettings = MetadataForSettings & sObject &  {
    DocumentReaderConfidenceOrgValue?: number;
    DurableId?: string;
    FullName?: string;
    Metadata?: IndustriesEinsteinFeatureSettings;
}

export type IndustriesLoyaltySettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAutomaticMemberTierAssessmentSelectionEnabled?: boolean;
    IsAutomaticVoucherCodeGenerationEnabled?: boolean;
    IsFixedTypeNqpAggregationEnabled?: boolean;
    IsLoyaltyApiAccessForExternalSiteUsersEnabled?: boolean;
    IsLoyaltyRedeemedPointsExpirationInfoPrefEnabled?: boolean;
    IsLoyaltyRulesVerifyCdpMemberSegmentEnabled?: boolean;
    IsLoyaltyServiceExcellenceEnabled?: boolean;
    IsNonQualifyingPointsConsolidationEnabled?: boolean;
    IsNqpRealTimePointBalanceEnabled?: boolean;
    IsQpRealTimePointBalanceEnabled?: boolean;
    Metadata?: IndustriesLoyaltySettings;
}

export type IndustriesManufacturingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsFleetManagementEnabled?: boolean;
    IsIndManufacturingEnabled?: boolean;
    IsIndustriesMfgAccountForecastEnabled?: boolean;
    IsIndustriesMfgAdvForecastEnabled?: boolean;
    IsIndustriesMfgIasEnabled?: boolean;
    IsIndustriesMfgProgramEnabled?: boolean;
    IsIndustriesMfgTargetsEnabled?: boolean;
    IsPartnerLeadManagementEnabled?: boolean;
    IsPartnerPerformanceManagementEnabled?: boolean;
    IsPartnerVisitManagementEnabled?: boolean;
    IsPtnrLeadMgmtMappingsEnabled?: boolean;
    IsRevMgmtForSlsAgrEnabled?: boolean;
    IsVehAssetFinAddtnlCmpntsEnabled?: boolean;
    IsVehicleAndAssetFinanceEnabled?: boolean;
    Metadata?: IndustriesManufacturingSettings;
}

export type IndustriesSettings = MetadataForSettings & sObject &  {
    AllowMultipleProducersToWorkOnSamePolicy?: boolean;
    AppointmentDistributionOrgPref?: boolean;
    CaptureResourceUtilizationOrgPref?: boolean;
    CreateCustomerPropertyFromLaProperty?: boolean;
    CreateFinancialAccountFromLaAsset?: boolean;
    CreateFinancialAccountFromLaLiability?: boolean;
    CreateFinancialAccountsFromLaFinancials?: boolean;
    CreateFinancialAccountsFromLaProperty?: boolean;
    CreateFscAssetFromLaAsset?: boolean;
    CreateFscAssetFromLaProperty?: boolean;
    CreateFscLiabilityFromLaFinancial?: boolean;
    CreateFscLiabilityFromLaLiability?: boolean;
    DurableId?: string;
    FullName?: string;
    IsAcademicOperationsEnabled?: boolean;
    IsAccessToMasterListOfCoverageTypesEnabled?: boolean;
    IsAccountScoreEnabledEnabled?: boolean;
    IsActionableListEnabled?: boolean;
    IsActionableListOrgPrefEnabled?: boolean;
    IsAdvancedSchedulingEnabled?: boolean;
    IsAiAcceleratorEnabled?: boolean;
    IsAlumniRelationsEnabled?: boolean;
    IsAnyResourceTypeOrgPrefEnabled?: boolean;
    IsAppFrmAnywhereOrgPrefEnabled?: boolean;
    IsAppInviteOrgPrefEnabled?: boolean;
    IsAwsTextractAnalyzeIdPrefEnabled?: boolean;
    IsAwsTextractQueriesPrefEnabled?: boolean;
    IsAwsTextractTablesPrefEnabled?: boolean;
    IsBehavioralHealthAppPrefEnabled?: boolean;
    IsBenefitAndGoalSharingPrefEnabled?: boolean;
    IsBenefitManagementPreferenceEnabled?: boolean;
    IsBlockResourceAvailabilityOrgPrefEnabled?: boolean;
    IsBusinessMessengerEnabled?: boolean;
    IsCalculationUsingParentPolicyOnlyEnabled?: boolean;
    IsCallReportAdminContextPrefEnabled?: boolean;
    IsCareGapPrefSettingEnabled?: boolean;
    IsCareMgmtSlackAccessEnabled?: boolean;
    IsCarePlansPreferenceEnabled?: boolean;
    IsCdpSalesExcellenceEnabled?: boolean;
    IsChurnPredictionRtEnabled?: boolean;
    IsClaimMgmtEnabled?: boolean;
    IsClinicalDataModelEnabled?: boolean;
    IsCompliantDataSharingForAccountEnabled?: boolean;
    IsCompliantDataSharingForAppFormProductSiteUsersEnabled?: boolean;
    IsCompliantDataSharingForAppFormSiteUsersEnabled?: boolean;
    IsCompliantDataSharingForApplicationFormEnabled?: boolean;
    IsCompliantDataSharingForApplicationFormProductEnabled?: boolean;
    IsCompliantDataSharingForBudgetEnabled?: boolean;
    IsCompliantDataSharingForBudgetSiteUsersEnabled?: boolean;
    IsCompliantDataSharingForCustomObjectsEnabled?: boolean;
    IsCompliantDataSharingForFinancialDealEnabled?: boolean;
    IsCompliantDataSharingForFundingAwardEnabled?: boolean;
    IsCompliantDataSharingForFundingAwardSiteUsersEnabled?: boolean;
    IsCompliantDataSharingForFundingOpportunityEnabled?: boolean;
    IsCompliantDataSharingForFundingOpportunitySiteUsersEnabled?: boolean;
    IsCompliantDataSharingForIndividualApplicationEnabled?: boolean;
    IsCompliantDataSharingForIndividualApplicationSiteUsersEnabled?: boolean;
    IsCompliantDataSharingForInteractionEnabled?: boolean;
    IsCompliantDataSharingForInteractionSummaryEnabled?: boolean;
    IsCompliantDataSharingForOpportunityEnabled?: boolean;
    IsCompliantDataSharingForPartyProfileEnabled?: boolean;
    IsCompliantDataSharingForPartyProfileSiteUsersEnabled?: boolean;
    IsCompliantDataSharingForPreliminaryApplicationRefEnabled?: boolean;
    IsCompliantDataSharingForPreliminaryApplicationRefSiteUsersEnabled?: boolean;
    IsComprehendMedicalEnabled?: boolean;
    IsContactCenterAccessEnabled?: boolean;
    IsContractMgmtPrefEnabled?: boolean;
    IsContractsAiPrefEnabled?: boolean;
    IsCreateMultiAttendeeEventOrgPrefEnabled?: boolean;
    IsCrisisCenterAccessEnabled?: boolean;
    IsCriteriaBasedSearchAndFilterEnabled?: boolean;
    IsCustomFlowsOnCycleCountEnabled?: boolean;
    IsCustomFlowsOnExpiryPageEnabled?: boolean;
    IsDataCloudEventsOnTimelineEnabled?: boolean;
    IsDchmsO365AddInEnabled?: boolean;
    IsDealManagementEnabled?: boolean;
    IsDeleteCustomObjectParticipantRecordCompliantDataSharingEnabled?: boolean;
    IsDepriveSoqlAccessGuestUserOrgPrefEnabled?: boolean;
    IsDepriveSoqlAccessOrgPrefEnabled?: boolean;
    IsDiscoveryFrameworkMetadataEnabled?: boolean;
    IsDiscoveryFrwrkSampleTemplateEnabled?: boolean;
    IsDisplaySummaryOnTimelineEnabled?: boolean;
    IsDpeProviderSearchSettingsOrgPrefEnabled?: boolean;
    IsDropInAppointmentsOrgPrefEnabled?: boolean;
    IsDropInFallbackMechOrgPrefEnabled?: boolean;
    IsDropInSkillMatchingOrgPrefEnabled?: boolean;
    IsEdcGenerativeAiEnabled?: boolean;
    IsEducationCloudEnabled?: boolean;
    IsEinsteinDocReaderEnabled?: boolean;
    IsEinsteinVisitsEnabled?: boolean;
    IsEnhancedQuestionCreationEnabled?: boolean;
    IsEpcDeleteAccessEnabled?: boolean;
    IsEventManagementOrgPrefEnabled?: boolean;
    IsEventWriteOrgPrefEnabled?: boolean;
    IsExistingHealthCloudOrgEnabled?: boolean;
    IsFinancialAccountMgmtEnabled?: boolean;
    IsFinancialDealCallReportCmpPrefEnabled?: boolean;
    IsFinancialDealCallReportPrefEnabled?: boolean;
    IsFinancialDealRoleHierarchyEnabled?: boolean;
    IsFscInsuranceReportEnabled?: boolean;
    IsFscInsuranceServiceConsoleEnabled?: boolean;
    IsFundraisingEnabled?: boolean;
    IsGenAiAssessmentQuestionsEnabled?: boolean;
    IsGnrcDisclsFrmwrkEnabled?: boolean;
    IsGrantmakingEnabled?: boolean;
    IsGroupMembershipPrefEnabled?: boolean;
    IsHcReferralScoringEnabled?: boolean;
    IsHomeHealthEnabled?: boolean;
    IsHomeHlthRschdFlowRcntVerEnabled?: boolean;
    IsIeSentimentAnalysisEnabled?: boolean;
    IsIndustriesAssessmentEnabled?: boolean;
    IsIndustriesAssessmentGuestOrgPrefEnabled?: boolean;
    IsIndustriesAssessmentPrefillEnabled?: boolean;
    IsIndustriesCaptchaVerificationEnabled?: boolean;
    IsIndustriesIntegrationOrchestratorPrefEnabled?: boolean;
    IsIndustriesKycEnabled?: boolean;
    IsIndustriesOnboardingEnabled?: boolean;
    IsIndustriesRebatesEnabled?: boolean;
    IsIndustriesShipAndDebitEnabled?: boolean;
    IsIndustriesStageManagementPrefEnabled?: boolean;
    IsIntegratedCareManagementSettingEnabled?: boolean;
    IsInteractionCstmSharingPrefEnabled?: boolean;
    IsInteractionRoleHierarchyEnabled?: boolean;
    IsInteractionSummaryPrefEnabled?: boolean;
    IsInteractionSummaryRoleHierarchyEnabled?: boolean;
    IsLifeSciencesClinialTrailManagementEnabled?: boolean;
    IsManyToManyRelationshipsEnabled?: boolean;
    IsMaterialityAssessmentEnabled?: boolean;
    IsMcgSettingEnabled?: boolean;
    IsMedRecSettingEnabled?: boolean;
    IsMedicalDeviceEnabledEnabled?: boolean;
    IsMedicationManagementEnabledEnabled?: boolean;
    IsMentoringEnabled?: boolean;
    IsMicrosoftWordAddInEnabledEnabled?: boolean;
    IsMortgageRlaTotalsOrgPrefEnabled?: boolean;
    IsMulesoftFhirR4ApisEnabled?: boolean;
    IsMultiResourceOrgPrefEnabled?: boolean;
    IsMultipleCareProgramEnrolleeOrgPrefEnabled?: boolean;
    IsMultipleTopicsForShiftsOrgPrefEnabled?: boolean;
    IsNearcoreRuleProcessingEnabled?: boolean;
    IsNzcMngEnrgyAttrCrEnabled?: boolean;
    IsNzcMngEsgPgmEnabled?: boolean;
    IsObjectDetectionEnabled?: boolean;
    IsOutcomesEnabled?: boolean;
    IsOverbookingOrgPrefEnabled?: boolean;
    IsPatientAppointmentSchedulingOrgPrefEnabled?: boolean;
    IsPatientServicesOrchestrationEnabled?: boolean;
    IsPolicyAdministrationEnabled?: boolean;
    IsPreBookedFallbackMechOrgPrefEnabled?: boolean;
    IsProviderSearchForGuestUserEnabled?: boolean;
    IsProviderSearchSyncOrgPrefEnabled?: boolean;
    IsRblUsingCalcServiceEnabled?: boolean;
    IsRecordRollupEnabled?: boolean;
    IsReferralManagementAppEnabled?: boolean;
    IsReferralScoringEnabled?: boolean;
    IsRemindersEnabled?: boolean;
    IsScAssignFootprintEnabled?: boolean;
    IsScCarbonAccountingEnabled?: boolean;
    IsScCarbonCreditAllocEnabled?: boolean;
    IsScCreateFootprintEnabled?: boolean;
    IsScEmssnsForecastingEnabled?: boolean;
    IsScExpansionUseCaseEnabled?: boolean;
    IsScExternalEngMgmtEnabled?: boolean;
    IsScGenrateCnsmpRcdEnabled?: boolean;
    IsScScope3HubEnabledEnabled?: boolean;
    IsScSnGaffiliatesEnabled?: boolean;
    IsScSplitCnsmpRcdEnabled?: boolean;
    IsScTargetSettingEnabled?: boolean;
    IsScWasteManagementEnabled?: boolean;
    IsScWaterManagementEnabled?: boolean;
    IsScbeiEnabledEnabled?: boolean;
    IsScdgfEnabled?: boolean;
    IsScoringFrameworkCrmaPrefEnabled?: boolean;
    IsScoringFrameworkOrgPrefEnabled?: boolean;
    IsScsngManagementEnabled?: boolean;
    IsSentimentAnalysisEnabled?: boolean;
    IsShareSaWithArOrgPrefEnabled?: boolean;
    IsSlackForCibEnabled?: boolean;
    IsSmartTagsEnabled?: boolean;
    IsStudentSuccessEnabled?: boolean;
    IsSustainabilityCloudEnabled?: boolean;
    IsSyncInteractionsPrefEnabled?: boolean;
    IsTearSheetPrefEnabled?: boolean;
    IsTextExtractEnabled?: boolean;
    IsTimelinePrefEnabled?: boolean;
    IsTopicOrTemplateEnabled?: boolean;
    IsTopicTimeSlotEnabled?: boolean;
    IsTurnOffDsclsReprtPbsrNameEnabled?: boolean;
    IsUmPayerAppAccessOrgPreferenceEnabled?: boolean;
    IsVideoVisitsOrgPrefEnabled?: boolean;
    IsVisitCalendarSyncEnabled?: boolean;
    IsVisitInventoryEnabledEnabled?: boolean;
    LoanApplicantAddressAutoCreation?: boolean;
    LoanApplicantAutoCreation?: boolean;
    Metadata?: IndustriesSettings;
    MortgageSalesforceSharing?: boolean;
    RlaEditIfAccHasEdit?: boolean;
    TransformRbLtoDpe?: boolean;
}

export type InstalledSubscriberPackage = sObject &  {
    MinPackageVersionId?: ID;
    SubscriberPackage?: SubscriberPackage;
    SubscriberPackageId?: ID;
    SubscriberPackageVersion?: SubscriberPackageVersion;
    SubscriberPackageVersionId?: ID;
}

export type InstalledSubscriberPackageVersion = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MinPackageVersion?: SubscriberPackageVersion;
    MinPackageVersionId?: ID;
    SubscriberPackage?: SubscriberPackage;
    SubscriberPackageId?: ID;
    SubscriberPackageVersion?: SubscriberPackageVersion;
    SubscriberPackageVersionId?: ID;
    SystemModstamp?: Date;
}

export type IntegrationEnvApplication = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeploymentErrorMessage?: string;
    DeploymentIdentifier?: string;
    DeploymentStatus?: IntegrationDeploymentStatus;
    DomainName?: string;
    ExternalAppUpdateVersion?: string;
    ExternalApplicationCategory?: IntegrationCategory;
    ExternalApplicationName?: string;
    ExternalApplicationType?: IntegrationApplicationType;
    ExternalApplicationVersion?: string;
    ExternalApplnGrpIdentifier?: string;
    ExternalApplnIdentifier?: string;
    ExternalApplnOrgIdentifier?: string;
    ExternalEnvIdentifier?: string;
    ExternalEnvironmentName?: string;
    ExternalEnvironmentType?: IntegrationEnvironmentType;
    ExternalEnvironmentZone?: IntegrationEnvironmentZone;
    ExternalOrgIdentifier?: string;
    ExternalOrganizationName?: string;
    ExtlAppVersionUpdateStatus?: IntegrationVerUpdateStatus;
    ExtlApplnPolicyIdentifier?: string;
    ExtlIntegrationType?: ExternalIntegrationType;
    FullyQualifiedDomainName?: string;
    InstanceName?: string;
    IntegrationEnvApplications?: QueryResult;
    IntegrationEnvConfig?: IntegrationEnvConfig;
    IntegrationEnvConfigId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    SystemModstamp?: Date;
}

export type IntegrationEnvConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalEnvConnectionType?: ExternalEnvConnectionType;
    ExternalHostEnvRegion?: IntegrationEnvironmentRegion;
    ExternalUserIdentifier?: string;
    FirstName?: string;
    IntegrationEnvConfigs?: QueryResult;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastName?: string;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    SystemModstamp?: Date;
    Username?: string;
}

export type IntegrationEnvResource = sObject &  {
    ClientAppIdentifier?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeploymentStatus?: ResourceDeploymentStatus;
    ErrorMessage?: string;
    ExternalEnvIdentifier?: string;
    ExternalEnvironmentZone?: IntegrationEnvironmentZone;
    ExternalOrgIdentifier?: string;
    IntegrationEnvConfig?: IntegrationEnvConfig;
    IntegrationEnvConfigId?: ID;
    IntegrationEnvResources?: QueryResult;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ResourceExternalIdentifier?: string;
    ResourceIdentifier?: string;
    ResourceType?: IntegrationResourceType;
    ResourceUrl?: string;
    SystemModstamp?: Date;
}

export type IntegrationEnvSysDependency = sObject &  {
    AuthenticationType?: IntegrationAuthenticationType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DependentEnvApplication?: IntegrationEnvApplication;
    DependentEnvApplicationId?: ID;
    DependentEnvResource?: IntegrationEnvResource;
    DependentEnvResourceId?: ID;
    IntegrationEnvApplication?: IntegrationEnvApplication;
    IntegrationEnvApplicationId?: ID;
    IntegrationEnvConfig?: IntegrationEnvConfig;
    IntegrationEnvConfigId?: ID;
    IntegrationEnvResource?: IntegrationEnvResource;
    IntegrationEnvResourceId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type IntegrationProviderAttr =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: AttrDataType;
    DateTimeValue?: Date;
    DateValue?: Date;
    Description?: string;
    DeveloperName?: string;
    DoubleValue?: number;
    IntegerValue?: number;
    IntegrationProviderDef?: IntegrationProviderDef;
    IntegrationProviderDefId?: ID;
    IsDeleted?: boolean;
    IsRequired?: boolean;
    IsTrueOrFalseValue?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    PercentageValue?: number;
    StringValue?: string;
    SystemModstamp?: Date;
}

export type IntegrationProviderDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExternalServiceOperationName?: string;
    ExternalServiceRegistration?: ExternalServiceRegistration;
    ExternalServiceRegistrationId?: ID;
    FileBasedApexClass?: string;
    FullName?: string;
    InputDataProcessor?: OmniIntegrationProcConfig;
    InputDataProcessorId?: ID;
    IntegrationProviderAttrs?: QueryResult;
    IsDeleted?: boolean;
    JavaClassName?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: IntegrationProviderDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OutputDataProcessor?: OmniIntegrationProcConfig;
    OutputDataProcessorId?: ID;
    SystemModstamp?: Date;
    Type?: DefinitionType;
}

export type Flow = Metadata & sObject &  {
    ApiVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Definition?: FlowDefinition;
    DefinitionId?: ID;
    Description?: string;
    Environments?: string;
    FullName?: string;
    IsOverridable?: boolean;
    IsPaused?: boolean;
    IsTemplate?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: Flow;
    OverriddenFlow?: string;
    ProcessType?: FlowProcessType;
    ProgressStatus?: FlowProgressStatus;
    RunInMode?: FlowRunInMode;
    SourceTemplate?: string;
    Status?: FlowVersionStatus;
    TimeZoneSidKey?: string;
    TriggerOrder?: number;
    VersionNumber?: number;
}

export type InterestTaggingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsInterestTaggingEnabled?: boolean;
    Metadata?: InterestTaggingSettings;
}

export type InterfaceFieldMapping = sObject &  {
    DurableId?: string;
    EntityFieldQualifiedApiName?: string;
    EntityQualifiedApiName?: string;
    InterfaceFieldQualifiedApiName?: string;
    InterfaceQualifiedApiName?: string;
    IsCustom?: boolean;
}

export type InternalOrganization = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataStreamDefinitionBusinessUnits?: QueryResult;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsForDataExport?: boolean;
    IsForDataImport?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: InternalOrganization;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type InvLatePymntRiskCalcSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsInvLatePymntRiskCalcEnabled?: boolean;
    Metadata?: InvLatePymntRiskCalcSettings;
}

export type InventorySettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsOciB2CintegrationEnabled?: boolean;
    IsOmniChannelInventoryEnabled?: boolean;
    Metadata?: InventorySettings;
}

export type InvocableAction = sObject &  {
    AllowsTransactionControl?: boolean;
    CapabilityType?: string;
    Category?: string;
    ConfigurationEditor?: string;
    Description?: string;
    DurableId?: string;
    GenericTypes?: QueryResult;
    HasCallout?: boolean;
    Icon?: StaticResource;
    IconId?: ID;
    IconName?: string;
    IsStandard?: boolean;
    Label?: string;
    Name?: string;
    Parameters?: QueryResult;
    Type?: string;
    Version?: number;
}

export type InvocableActionGenericType = sObject &  {
    Description?: string;
    DurableId?: string;
    InvocableAction?: InvocableAction;
    InvocableActionId?: string;
    Label?: string;
    Name?: string;
    SuperType?: string;
}

export type InvocableActionParameter = sObject &  {
    ApexClass?: string;
    DataType?: string;
    Description?: string;
    DurableId?: string;
    InvocableAction?: InvocableAction;
    InvocableActionId?: string;
    IsInput?: boolean;
    IsOutput?: boolean;
    IsRequired?: boolean;
    IsSystemGeneratedOutput?: boolean;
    Label?: string;
    MaxOccurs?: number;
    Name?: string;
    PicklistValues?: QueryResult;
    SetupReferenceType?: RelationshipReferenceTo;
    SobjectType?: string;
}

export type InvocableActionPicklist = sObject &  {
    DurableId?: string;
    InvocableActionParameter?: InvocableActionParameter;
    InvocableActionParameterId?: string;
    IsDefaultValue?: boolean;
    Label?: string;
    ValidFor?: string;
    Value?: string;
}

export type InvocableActionSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsPartialSaveAllowed?: boolean;
    Metadata?: InvocableActionSettings;
}

export type IpRange =  & sObject &  {
    Description?: string;
    DurableId?: string;
    End?: string;
    Start?: string;
}

export type KeywordList = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: KeywordList;
    ModuleNamespace?: string;
    SobjectType?: sObject;
    SobjectTypeId?: ID;
    SystemModstamp?: Date;
}

export type KnowledgeAnswerSettings =  & sObject &  {
    AssignTo?: string;
    DefaultArticleType?: string;
    DurableId?: string;
    IsArticleCreationEnabled?: boolean;
}

export type KnowledgeCaseField =  & sObject &  {
    DurableId?: string;
    Name?: string;
}

export type KnowledgeCaseFieldsSettings =  & sObject &  {
    DurableId?: string;
}

export type KnowledgeCaseSettings =  & sObject &  {
    ArticlePdfCreationProfile?: string;
    ArticlePublicSharingCommunities?: string;
    ArticlePublicSharingSitesChatterAnswersId?: string;
    ArticlePublicSharingSitesId?: string;
    AssignTo?: string;
    CustomizationClass?: string;
    DefaultContributionArticleType?: string;
    DurableId?: string;
    Editor?: string;
    IsArticleCreationEnabled?: boolean;
    IsArticlePublicSharingSitesEnabled?: boolean;
    IsCaseDataCategoryMappingEnabled?: boolean;
    UseProfileForPdfCreation?: boolean;
}

export type KnowledgeGenerationSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsKnowledgeGenerationEnabled?: boolean;
    Metadata?: KnowledgeGenerationSettings;
}

export type KnowledgeLanguage =  & sObject &  {
    Active?: boolean;
    DefaultAssignee?: string;
    DefaultAssigneeType?: string;
    DefaultReviewer?: string;
    DefaultReviewerType?: string;
    DurableId?: string;
    Name?: string;
}

export type KnowledgeLanguageSettings =  & sObject &  {
    DurableId?: string;
}

export type KnowledgeSettings = MetadataForSettings & sObject &  {
    AnswersId?: string;
    CasesId?: string;
    DefaultLanguage?: string;
    DurableId?: string;
    FullName?: string;
    IsChatterQuestionKbDeflectionEnabled?: boolean;
    IsCreateEditOnArticlesTabEnabled?: boolean;
    IsExternalMediaContentEnabled?: boolean;
    IsKbStandardSharingEnabled?: boolean;
    IsKnowledgeAgentContributionEnabled?: boolean;
    IsKnowledgeAnswersPromotionEnabled?: boolean;
    IsKnowledgeArticleTextHighlightsEnabled?: boolean;
    IsKnowledgeCaseRlEnabled?: boolean;
    IsKnowledgeEnabled?: boolean;
    IsKnowledgeKeywordAutoCompleteEnabled?: boolean;
    IsKnowledgeTitleAutoCompleteEnabled?: boolean;
    IsLightningKbAutoLoadRichTextFieldEnabled?: boolean;
    IsLightningKnowledgeEnabled?: boolean;
    LanguagesId?: string;
    Metadata?: KnowledgeSettings;
    ShowArticleSummariesCustomerPortal?: boolean;
    ShowArticleSummariesInternalApp?: boolean;
    ShowArticleSummariesPartnerPortal?: boolean;
    ShowValidationStatusField?: boolean;
    SuggestedArticlesId?: string;
    VotingEnabled?: boolean;
}

export type KnowledgeSitesSettings =  & sObject &  {
    DurableId?: string;
    Site?: string;
}

export type KnowledgeSuggestedArticlesSettings =  & sObject &  {
    CaseFieldsId?: string;
    DurableId?: string;
    UseSuggestedArticlesForCase?: boolean;
    WorkOrderFieldsId?: string;
    WorkOrderLineItemFieldsId?: string;
}

export type KnowledgeWorkOrderField =  & sObject &  {
    DurableId?: string;
    Name?: string;
}

export type KnowledgeWorkOrderFieldsSettings =  & sObject &  {
    DurableId?: string;
}

export type KnowledgeWorkOrderLineItemField =  & sObject &  {
    DurableId?: string;
    Name?: string;
}

export type KnowledgeWorkOrderLineItemFieldsSettings =  & sObject &  {
    DurableId?: string;
}

export type LanguageSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCanadaIcuFormatEnabled?: boolean;
    IsDataTranslationEnabled?: boolean;
    IsEndUserLanguagesEnabled?: boolean;
    IsIcuLocaleDateFormatEnabled?: boolean;
    IsLanguageExtensionPackageEnabled?: boolean;
    IsLocalNamesForStdObjectsEnabled?: boolean;
    IsLocaleInsensitiveFilteringEnabled?: boolean;
    IsPlatformLanguagesEnabled?: boolean;
    IsTranslationWorkbenchEnabled?: boolean;
    Metadata?: LanguageSettings;
    UseLanguageFallback?: boolean;
}

export type Layout = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LayoutType?: LayoutType;
    ManageableState?: ManageableState;
    Metadata?: Layout;
    Name?: string;
    NamespacePrefix?: string;
    ShowSubmitAndAttachButton?: boolean;
    TableEnumOrId?: string;
}

export type LayoutDefinition = sObject &  {
    DurableId?: string;
    Entity?: string;
    FieldsInfo?: FieldsInfo;
    LayoutId?: string;
    Name?: string;
    RelatedListsInfo?: RelatedListsInfo;
}

export type LayoutParticle = sObject &  {
    DurableId?: string;
    EntityParticle?: EntityParticle;
    EntityParticleId?: string;
    IsAvailableForQuickAction?: boolean;
    IsAvailableForUpdateQuickAction?: boolean;
    IsOnEveryLayout?: boolean;
    IsUiRequired?: boolean;
}

export type LeadConfigSettings = MetadataForSettings & sObject &  {
    DoesEnableLeadConvertDefaultSubjectBlankTaskCreation?: boolean;
    DoesHideOpportunityInConvertLeadWindow?: boolean;
    DoesPreserveLeadStatus?: boolean;
    DoesSelectNoOpportunityOnConvertLead?: boolean;
    DoesTrackHistory?: boolean;
    DurableId?: string;
    FullName?: string;
    IsConversionsOnMobileEnabled?: boolean;
    IsOrgWideMergeAndDeleteEnabled?: boolean;
    Metadata?: LeadConfigSettings;
    ShouldLeadConvertRequireValidation?: boolean;
    ShouldSendNotificationEmailWhenLeadOwnerUpdatesViaApexInLex?: boolean;
}

export type LeadConvertSettings = Metadata & sObject &  {
    AllowOwnerChange?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: LeadConvertSettings;
    ModuleNamespace?: string;
    OpportunityCreationOptions?: VisibleOrRequired;
    SystemModstamp?: Date;
}

export type LearningAchievementConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IconName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LearningAchievementType?: LearningAchievementType;
    LearningAchvRecordType?: RecordType;
    LearningAchvRecordTypeId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: LearningAchievementConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type LicensingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAutoCreateLicenseDefinitionEnabled?: boolean;
    Metadata?: LicensingSettings;
}

export type LightningBolt = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Category?: LightningBoltCategory;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: LightningBolt;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Publisher?: string;
    Summary?: string;
    SystemModstamp?: Date;
}

export type LightningComponentBundle = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsExplicitImport?: boolean;
    IsExposed?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: LightningComponentBundle;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RuntimeNamespace?: string;
    SystemModstamp?: Date;
    TargetConfigs?: string;
}

export type LightningComponentResource = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FilePath?: string;
    Format?: LCResourceFormat;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LightningComponentBundle?: LightningComponentBundle;
    LightningComponentBundleId?: ID;
    ManageableState?: ManageableState;
    Source?: string;
    SystemModstamp?: Date;
}

export type LightningExperienceSettings = MetadataForSettings & sObject &  {
    ActiveThemeName?: string;
    DurableId?: string;
    FullName?: string;
    IsAccessCheckCrucPrefEnabled?: boolean;
    IsApiUserLtngOutAccessPrefEnabled?: boolean;
    IsAuraCdnPrefEnabled?: boolean;
    IsAuraSecStaticResCrucPrefEnabled?: boolean;
    IsErrorExperienceEnabledEnabled?: boolean;
    IsFeedbackInMobileEnabled?: boolean;
    IsGoogleSheetsForSfdcEnabledEnabled?: boolean;
    IsHideOpenInQuipEnabled?: boolean;
    IsIe11DeprecationMsgHiddenEnabled?: boolean;
    IsIe11LexCrucPrefEnabled?: boolean;
    IsInAppLearningEnabled?: boolean;
    IsInAppTooltipsEnabled?: boolean;
    IsLexEndUsersNoSwitchingEnabled?: boolean;
    IsLexExtensionComponentCustomizationEnabled?: boolean;
    IsLexExtensionComponentCustomizationOff?: boolean;
    IsLexExtensionDarkModeEnabled?: boolean;
    IsLexExtensionDarkModeOff?: boolean;
    IsLexExtensionInlineEditModifierEnabled?: boolean;
    IsLexExtensionLinkGrabberEnabled?: boolean;
    IsLexExtensionLinkGrabberOff?: boolean;
    IsLexExtensionOff?: boolean;
    IsLexExtensionRelatedListsEnabled?: boolean;
    IsLexExtensionRequiredFieldsEnabled?: boolean;
    IsLexExtensionTrailheadEnabled?: boolean;
    IsLexOnIpadEnabledEnabled?: boolean;
    IsNavPersonalizationOptOutEnabled?: boolean;
    IsNoBackgroundNavigationsEnabled?: boolean;
    IsQuipEnabled?: boolean;
    IsRemoveThemeBrandBannerEnabled?: boolean;
    IsS1BannerPrefEnabled?: boolean;
    IsS1BrowserEnabledEnabled?: boolean;
    IsS1DesktopEnabledEnabled?: boolean;
    IsS1UiLoggingEnabledEnabled?: boolean;
    IsSalesforceNextEnabled?: boolean;
    IsSidToken3rdPartyAuraAppEnabled?: boolean;
    IsSkypeChatEnabledEnabled?: boolean;
    IsSparkAllUsersEnabled?: boolean;
    IsSparkConversationEnabledEnabled?: boolean;
    IsTryLightningOptOutEnabled?: boolean;
    IsUseS1AlohaDesktopEnabled?: boolean;
    IsUsersAreLightningOnlyEnabled?: boolean;
    IsWebExEnabledEnabled?: boolean;
    IsWebexAllUsersEnabled?: boolean;
    Metadata?: LightningExperienceSettings;
}

export type LightningExperienceTheme = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultBrandingSet?: BrandingSet;
    DefaultBrandingSetId?: ID;
    Description?: string;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: LightningExperienceTheme;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ShouldOverrideLoadingImage?: boolean;
    SystemModstamp?: Date;
}

export type LightningMessageChannel = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    IsExposed?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: LightningMessageChannel;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type LightningMessageField =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    FieldName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LightningMessageChannel?: LightningMessageChannel;
    LightningMessageChannelId?: ID;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
}

export type LightningOnboardingConfig = Metadata & sObject &  {
    CollaborationGroupId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomQuestion?: string;
    DeveloperName?: string;
    FeedbackFormDaysFrequency?: number;
    Fullname?: string;
    IsCustom?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: LightningOnboardingConfig;
    ModuleNamespace?: string;
    PromptDelayTime?: number;
    SendFeedbackToSalesforce?: boolean;
    SystemModstamp?: Date;
}

export type LinkedInLeadGenAdAccount = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LinkedInAccountIdentifier?: string;
    LinkedInAccountName?: string;
    LinkedInAccountStatus?: string;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type LinkedInLeadGenConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultLeadCreator?: User;
    DefaultLeadCreatorId?: ID;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LeadRecordType?: RecordType;
    LeadRecordTypeId?: ID;
    LeadSourceDefault?: string;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ObjectMapping?: ObjectMapping;
    ObjectMappingId?: ID;
    SystemModstamp?: Date;
}

export type ListLayout = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LayoutType?: ListLayoutTypes;
    ObjectEnumOrId?: string;
    Profile?: string;
    SystemModstamp?: Date;
}

export type LiveAgentSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsChatFindOrCreateEnableEnabled?: boolean;
    IsLiveAgentEnabled?: boolean;
    IsQuickTextEnabledEnabled?: boolean;
    Metadata?: LiveAgentSettings;
}

export type LiveChatButton = Metadata & sObject &  {
    Animation?: LiveChatButtonPresentation;
    AutoGreeting?: string;
    ChasitorIdleTimeout?: number;
    ChasitorIdleTimeoutWarning?: number;
    ChatPage?: ApexPage;
    ChatPageId?: ID;
    ConversationDefinitions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomAgentName?: string;
    CustomChatPageUrl?: string;
    CustomRoutingClass?: ApexClass;
    CustomRoutingClassId?: ID;
    DeveloperName?: string;
    HasQueue?: boolean;
    InviteImage?: StaticResource;
    InviteImageHeight?: number;
    InviteImageId?: ID;
    InviteImageWidth?: number;
    InviteInfixFormula?: string;
    InvitePrefixFormula?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsRoutingFlowEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NumberOfReroutingAttempts?: number;
    OfflineImage?: StaticResource;
    OfflineImageId?: ID;
    OnlineImage?: StaticResource;
    OnlineImageId?: ID;
    OptionsCustomRoutingIsEnabled?: boolean;
    OptionsHasChasitorIdleTimeout?: boolean;
    OptionsHasCustomLogic?: boolean;
    OptionsHasInviteAfterAccept?: boolean;
    OptionsHasInviteAfterReject?: boolean;
    OptionsHasRerouteDeclinedRequest?: boolean;
    OptionsIsAutoAccept?: boolean;
    OptionsIsInviteAutoRemove?: boolean;
    OverallQueueLength?: number;
    PerAgentQueueLength?: number;
    PostchatPage?: ApexPage;
    PostchatPageId?: ID;
    PostchatUrl?: string;
    PrechatFormPage?: ApexPage;
    PrechatFormPageId?: ID;
    PrechatFormUrl?: string;
    PushTimeout?: number;
    Queue?: Group;
    QueueId?: ID;
    RoutingConfigurationId?: ID;
    RoutingFlow?: FlowDefinition;
    RoutingFlowId?: ID;
    RoutingType?: LiveChatButtonRoutingType;
    SiteId?: ID;
    SkillId?: ID;
    SystemModstamp?: Date;
    TimeToRemoveInvite?: number;
    Type?: LiveChatButtonType;
    WindowLanguage?: string;
}

export type LmaApiSession = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    Expires?: Date;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LinkedSession?: string;
    MayEdit?: boolean;
    Name?: string;
    Owner?: sObject;
    OwnerId?: ID;
    Perms1?: number;
    ProxyUsername?: string;
    RealAuthSession?: string;
    SourceIp?: string;
    SystemModstamp?: Date;
    Type?: LmaApiSessionType;
}

export type LocalizedValue =  & sObject &  {
    Aspect?: TranslationAspect;
    CountryCode?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyCode?: string;
    IsOutOfDate?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    NamespacePrefix?: string;
    PackagedAncestor?: string;
    ParentId?: ID;
    ParentValue?: string;
    RegionCode?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type LocationUse = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LocationType?: string;
    MasterLabel?: string;
    Metadata?: LocationUse;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type MLDataDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EntityDeveloperName?: string;
    ExternalId?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MLDataDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParentDefinition?: sObject;
    ParentDefinitionId?: ID;
    ScoringFilter?: MLFilter;
    ScoringFilterId?: ID;
    SegmentFilter?: MLFilter;
    SegmentFilterId?: ID;
    SystemModstamp?: Date;
    TrainingFilter?: MLFilter;
    TrainingFilterId?: ID;
    Type?: MLDataDefinitionType;
}

export type MLField =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Entity?: string;
    EntityName?: string;
    Field?: string;
    FieldName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParentDefinition?: sObject;
    ParentDefinitionId?: ID;
    RelatedField?: MLField;
    RelatedFieldId?: ID;
    RelationType?: MLRelationType;
    SystemModstamp?: Date;
    Type?: MLFieldType;
}

export type MLFilter =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FilterName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LhFilter?: MLFilter;
    LhFilterId?: ID;
    LhPredictionField?: string;
    LhType?: AIValueType;
    LhUnit?: AIFilterUnit;
    LhValue?: string;
    Operation?: AIFilterOperation;
    ParentDefinition?: sObject;
    ParentDefinitionId?: ID;
    RhFilter?: MLFilter;
    RhFilterId?: ID;
    RhPredictionField?: string;
    RhType?: AIValueType;
    RhUnit?: AIFilterUnit;
    RhValue?: string;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type MLFilterValue =  & sObject &  {
}

export type MLGenerativeDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Application?: AIApplication;
    ApplicationId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MLGenerativeDefinition;
    MlDataDefinitions?: QueryResult;
    MlExternalIdentifier?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Status?: MLGenerativeDefinitionStatus;
    SystemModstamp?: Date;
    Type?: MLGenerativeType;
}

export type MLPredictionDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Application?: AIApplication;
    ApplicationId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExternalId?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MLPredictionDefinition;
    MlDataDefinitions?: QueryResult;
    MlExternalId?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    NegativeExpression?: MLFilter;
    NegativeExpressionId?: ID;
    PositiveExpression?: MLFilter;
    PositiveExpressionId?: ID;
    PredictionField?: string;
    PredictionStrategy?: string;
    Priority?: number;
    PushbackField?: string;
    Status?: MLPredictionDefinitionStatus;
    SystemModstamp?: Date;
    Type?: AIPredictionType;
}

export type MLRecommendationDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Application?: AIApplication;
    ApplicationId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExternalId?: string;
    FullName?: string;
    InteractionDateField?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MLRecommendationDefinition;
    MlDataDefinitions?: QueryResult;
    MlExternalId?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    NegativeExpression?: MLFilter;
    NegativeExpressionId?: ID;
    PositiveExpression?: MLFilter;
    PositiveExpressionId?: ID;
    Status?: MLRecommendationDefinitionStatus;
    SystemModstamp?: Date;
}

export type MacroSettings = MetadataForSettings & sObject &  {
    ContextualMacroFiltering?: boolean;
    DurableId?: string;
    FullName?: string;
    IsAdvancedSearchEnabled?: boolean;
    MacrosInFolders?: boolean;
    Metadata?: MacroSettings;
}

export type MailAppOwaWhitelist = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Domain?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type MailMergeSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsExtendedMailMergeEnabled?: boolean;
    Metadata?: MailMergeSettings;
    SaveMailMergeDocsAsSalesforceDocs?: boolean;
}

export type ManagedContentNodeType =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    HelpText?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NodeLabel?: string;
    NodeName?: string;
    NodeOptionsAddToCompact?: boolean;
    NodeOptionsIsLocalizable?: boolean;
    NodeOptionsIsRepeatable?: boolean;
    NodeOptionsIsRequired?: boolean;
    NodeType?: MCNodeType;
    PlaceholderText?: string;
    SystemModstamp?: Date;
}

export type ManagedContentType = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ManagedContentType;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type ManagedEventSubscription = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CommonEventSubscriptions?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ManagedEventSubscription;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Version?: string;
}

export type MapsAndLocationSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAddressAutoCompleteEnabled?: boolean;
    IsMapsAndLocationEnabled?: boolean;
    Metadata?: MapsAndLocationSettings;
}

export type MarketAudienceDefinition = Metadata & sObject &  {
    AudienceContactPoints?: QueryResult;
    AudiencePackageOwner?: string;
    Channels?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExternalKey?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastAudienceExcludedCount?: number;
    LastAudienceMemberCount?: number;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MarketAudienceFields?: QueryResult;
    MasterLabel?: string;
    ModuleNamespace?: string;
    Status?: MarketAudienceStatus;
    SystemModstamp?: Date;
}

export type MarketAudienceField =  & sObject &  {
    AudienceDefinition?: MarketAudienceDefinition;
    AudienceDefinitionId?: ID;
    AudienceVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FieldDataType?: AudienceFieldType;
    FieldDescription?: string;
    FieldName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SlotName?: string;
    SystemModstamp?: Date;
}

export type MarketingAppExtAction =  & sObject &  {
    ActionName?: string;
    ActionParams?: string;
    ActionSchema?: string;
    ActionSelector?: string;
    AllManagedPackageMemberId?: ID;
    ApiName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MarketingAppExtension?: MarketingAppExtension;
    MarketingAppExtensionId?: ID;
    SystemModstamp?: Date;
    Version?: number;
}

export type MarketingAppExtActivity = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EndpointUrl?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MarketingAppExtension?: MarketingAppExtension;
    MarketingAppExtensionId?: ID;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type MarketingAppExtAssignment = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MarketingAppExtension?: MarketingAppExtension;
    MarketingAppExtensionId?: ID;
    Parent?: PardotTenant;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type MarketingAppExtension = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MarketingAppExtActions?: QueryResult;
    MarketingAppExtActivities?: QueryResult;
    MarketingAppExtAssignments?: QueryResult;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type MatchingRule = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BooleanFilter?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DuplicateJobMatchingRuleDefinitions?: QueryResult;
    ExternalRuleName?: string;
    IndexDefinitionId?: ID;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LookupIndexDefinitionId?: ID;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MatchEngine?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RuleStatus?: MatchingRuleStatus;
    SobjectSubtype?: MatchingRuleSobjectSubtype;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type MediaAdSalesSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsMediaAdSalesEnabled?: boolean;
    Metadata?: MediaAdSalesSettings;
}

export type MeetingsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsSalesforceMeetingsEnabled?: boolean;
    IsSalesforceMeetingsSyncCheckEnabled?: boolean;
    IsZoomVideoConferenceEnabled?: boolean;
    Metadata?: MeetingsSettings;
}

export type MenuItem = sObject &  {
    Active?: boolean;
    AppId?: string;
    Color?: string;
    IconUrl?: string;
    Label?: string;
    MenuType?: AppMenuType;
    SortOrder?: number;
    Theme?: string;
}

export type MessagingChannel = Metadata & sObject &  {
    ActionParameterMappings?: QueryResult;
    BusinessHours?: BusinessHours;
    BusinessHoursId?: ID;
    ChannelAddressIdentifier?: string;
    ChannelDefinition?: ConversationChannelDefinition;
    ChannelDefinitionId?: ID;
    ChannelProviderStatus?: ChannelProviderStatus;
    ConsentType?: MessagingChannelConsentType;
    ContactCenterChannels?: QueryResult;
    ConversationChannelType?: string;
    ConversationDefinitions?: QueryResult;
    ConversationEndResponse?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DoubleOptInPrompt?: string;
    EndUserIdleTimeOut?: number;
    EngagedResponse?: string;
    ExternalAccountIdentifier?: string;
    FallbackQueue?: Group;
    FallbackQueueId?: ID;
    InitialResponse?: string;
    IsActive?: boolean;
    IsAuthenticated?: boolean;
    IsDeleted?: boolean;
    IsRequireDoubleOptIn?: boolean;
    IsRestrictedToBusinessHours?: boolean;
    IsUnifiedMessagingEnabled?: boolean;
    IsoCountryCode?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    MaxWaitTime?: number;
    MessageType?: MessageType;
    MessagingChannelAutoResponses?: QueryResult;
    MessagingChannelPaymentConfigs?: QueryResult;
    MessagingPlatformKey?: string;
    ModuleNamespace?: string;
    MsgChannelLanguageKeywords?: QueryResult;
    OfflineAgentsResponse?: string;
    OptInPrompt?: string;
    OutsideBusinessHoursResponse?: string;
    ParameterValueMappings?: QueryResult;
    PlatformType?: ChannelPlatformType;
    RoutingConfigurationId?: ID;
    RoutingType?: MessagingChannelRoutingType;
    SessionHandler?: string;
    SystemModstamp?: Date;
    TargetQueue?: Group;
    TargetQueueId?: ID;
    UniqueAddressIdentifierIndex?: boolean;
}

export type MessagingChannelActionParameterMapping =  & sObject &  {
    ActionParameterName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannelParameter?: string;
    Parent?: MessagingChannel;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type MessagingChannelAuthorization = sObject &  {
    AuthIdentifier?: string;
    AuthorizationConfig?: sObject;
    AuthorizationConfigId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Disabled?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    SystemModstamp?: Date;
}

export type MessagingChannelAutoResponse = sObject &  {
    AutoResponseType?: MessagingChannelAutoResponseType;
    ContentReferenceRecord?: ConversationMessageDefinition;
    ContentReferenceRecordId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    ResponseTimeoutInMins?: number;
    SystemModstamp?: Date;
}

export type MessagingChannelEmailTemplate = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EmailTemplate?: EmailTemplate;
    EmailTemplateId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    SenderEmailAddress?: OrgWideEmailAddress;
    SenderEmailAddressId?: ID;
    SystemModstamp?: Date;
    Type?: EmailPurposeType;
}

export type MessagingChannelParameter = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalParameterName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    MaxLength?: number;
    ModuleNamespace?: string;
    ParameterDataType?: string;
    Parent?: sObject;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type MessagingChannelParameterValueMapping =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannelParameter?: string;
    ParameterValue?: string;
    Parent?: MessagingChannel;
    ParentId?: ID;
    SystemModstamp?: Date;
    TargetLookupValue?: sObject;
    TargetLookupValueId?: ID;
}

export type MessagingChannelPaymentConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MerchantCertificate?: Certificate;
    MerchantCertificateId?: ID;
    MerchantIdentifier?: string;
    MerchantName?: string;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    PaymentSystem?: MessagingPaymentSystemType;
    SystemModstamp?: Date;
}

export type MessagingChannelUsage = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeploymentStatus?: ChannelUsageDeploymentStatus;
    DeploymentType?: ChannelUsageDeploymentType;
    DisabledTime?: Date;
    ErrorReason?: ChannelUsageErrorReason;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    RoutingOverride?: ChannelUsageRoutingOverride;
    SystemModstamp?: Date;
}

export type MessagingTemplate = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastViewedDate?: Date;
    MasterLabel?: string;
    Message?: string;
    MessagingTemplateChannels?: QueryResult;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type MessagingTemplateChannel = sObject &  {
    ApprovalStatus?: MessagingTemplateApprovalStatus;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessageIntent?: MessagingTemplateIntent;
    MessagingChannel?: string;
    Parent?: MessagingTemplate;
    ParentId?: ID;
    SystemModstamp?: Date;
}

export type MetadataComponentDependency = sObject &  {
    MetadataComponentId?: string;
    MetadataComponentName?: string;
    MetadataComponentNamespace?: string;
    MetadataComponentType?: string;
    RefMetadataComponentId?: string;
    RefMetadataComponentName?: string;
    RefMetadataComponentNamespace?: string;
    RefMetadataComponentType?: string;
}

export type MetadataContainer = sObject &  {
    ApexClassMembers?: QueryResult;
    ApexComponentMembers?: QueryResult;
    ApexPageMembers?: QueryResult;
    ApexTriggerMembers?: QueryResult;
    AuraDefinitionChanges?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomFieldMembers?: QueryResult;
    FtestDeclMd1Members?: QueryResult;
    FtestDeclMd2Members?: QueryResult;
    FtestDeclMd3Members?: QueryResult;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    SystemModstamp?: Date;
    ValidationRuleMembers?: QueryResult;
    WorkflowAlertMembers?: QueryResult;
    WorkflowFieldUpdateMembers?: QueryResult;
    WorkflowOutboundMessageMembers?: QueryResult;
    WorkflowRuleMembers?: QueryResult;
    WorkflowTaskMembers?: QueryResult;
}

export type MetadataContainerMember = sObject &  {
    Content?: string;
    ContentEntity?: sObject;
    ContentEntityId?: ID;
    FullName?: string;
    ImplementorType?: string;
    LastSyncDate?: Date;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
}

export type MetadataDependency = sObject &  {
    MetadataComponentId?: string;
    MetadataComponentName?: string;
    MetadataComponentNamespace?: string;
    MetadataComponentType?: string;
    RefMetadataComponentId?: string;
    RefMetadataComponentName?: string;
    RefMetadataComponentNamespace?: string;
    RefMetadataComponentType?: string;
}

export type MetadataPackage = sObject &  {
    MetadataPackageVersions?: QueryResult;
    Name?: string;
    NamespacePrefix?: string;
    PackageCategory?: PackageCategory;
    SystemModstamp?: Date;
}

export type MetadataPackageVersion = sObject &  {
    BuildNumber?: number;
    IsDeprecated?: boolean;
    MajorVersion?: number;
    MetadataPackageId?: ID;
    MetadataZip?: string;
    MinorVersion?: number;
    Name?: string;
    PatchVersion?: number;
    ReleaseState?: PackageReleaseState;
    SystemModstamp?: Date;
}

export type MfgProgramTemplate = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: MfgProgramTemplate;
    MfgProgramTemplate?: QueryResult;
    ModuleNamespace?: string;
    ProgramTemplateName?: string;
    Status?: MfgProgramTemplateStatus;
    SystemModstamp?: Date;
}

export type MfgProgramTemplateItem =  & sObject &  {
    AdvAccountForecastSet?: AdvAccountForecastSet;
    AdvAccountForecastSetId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MfgProgramTemplate?: MfgProgramTemplate;
    MfgProgramTemplateId?: ID;
    SystemModstamp?: Date;
    TemplateItemName?: string;
    TransformationDisplayOrder?: number;
    TransformationType?: MfgProgramTransformationType;
}

export type MfgServiceConsoleSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsMfgServiceConsoleEnabled?: boolean;
    Metadata?: MfgServiceConsoleSettings;
}

export type MktCalculatedInsightField = sObject &  {
    DataApplicationObjectFieldSourceField?: QueryResult;
    DataRecencyCriteriaField?: QueryResult;
}

export type MktCalculatedInsightObject = sObject &  {
    SourceObject?: QueryResult;
}

export type MktDataConnection = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConnectionMethod?: MktDataConnectionMethod;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataConnectors?: QueryResult;
    DataStreamDefinitionConnections?: QueryResult;
    ExternalRecordIdentifier?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MktDataConnection;
    MktDataConnectionCreds?: QueryResult;
    MktDataConnectionParams?: QueryResult;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OrgUnits?: QueryResult;
    SystemModstamp?: Date;
}

export type MktDataConnectionCred = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CredentialName?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: MktDataConnectionCred;
    MktDataConnection?: MktDataConnection;
    MktDataConnectionId?: ID;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type MktDataConnectionParam = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MktDataConnectionParam;
    MktDataConnection?: MktDataConnection;
    MktDataConnectionId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParamName?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type MktDataConnectionSrcParam = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MktDataConnectionSrcParam;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParamName?: string;
    ReferenceObject?: DataStreamDefinition;
    ReferenceObjectId?: ID;
    SystemModstamp?: Date;
    Value?: string;
}

export type MktDataLakeField = sObject &  {
}

export type MktDataLakeObject = sObject &  {
    DataStreamDefinitionLandEntities?: QueryResult;
}

export type MktDataModelField = sObject &  {
    DataApplicationObjectFieldSourceField?: QueryResult;
    DataRecencyCriteriaField?: QueryResult;
    TargetField?: QueryResult;
}

export type MktDataModelObject = sObject &  {
    DataApplicationObjectDependencyMapping?: QueryResult;
    SourceObject?: QueryResult;
    TargetObject?: QueryResult;
    referenceObject?: QueryResult;
}

export type MktDataTranField = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationType?: DefinitionCreationType;
    Datatype?: string;
    DateFormat?: string;
    DeveloperName?: string;
    ExternalName?: string;
    FullName?: string;
    IsDataRequired?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Length?: number;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MktDataTranField;
    MktDataTranObject?: MktDataTranObject;
    MktDataTranObjectId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Precision?: number;
    PrimaryIndexOrder?: number;
    Scale?: number;
    Sequence?: number;
    SystemModstamp?: Date;
}

export type MktDataTranObject = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationType?: DefinitionCreationType;
    DataSource?: DataSource;
    DataSourceId?: ID;
    DataSourceObject?: DataSourceObject;
    DataSourceObjectId?: ID;
    DataStreamDefinitionTranEntities?: QueryResult;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MktDataTranObject;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectCategory?: DataObjectCategory;
    ObjectCategoryId?: ID;
    SystemModstamp?: Date;
}

export type MktProfileActionOverride =  & sObject &  {
    Action?: string;
    Content?: FlexiPage;
    ContentId?: ID;
    ContentName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomApplication?: CustomApplication;
    CustomApplicationId?: ID;
    FormFactor?: FormFactor;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ObjectType?: string;
    Profile?: Profile;
    ProfileId?: ID;
    SystemModstamp?: Date;
}

export type MlDomain = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MlDomain;
    MlIntents?: QueryResult;
    MlSlotClasses?: QueryResult;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: MlDomainType;
}

export type MlExternalModel = sObject &  {
    CompletePercentage?: number;
    CorrectnessPercent?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Dataset?: string;
    ErrorMessage?: string;
    F1Score?: number;
    IncorrectnessPercent?: number;
    IntentCount?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MlIntentModelMetrics?: QueryResult;
    MlIntentModelMisclassifications?: QueryResult;
    Model?: string;
    ModelLanguage?: string;
    ModelMetric?: string;
    ShouldDisplayMetrics?: boolean;
    Source?: BotVersion;
    SourceId?: ID;
    Status?: MlModelStatus;
    SystemModstamp?: Date;
    UnrecognizedPercent?: number;
    UtteranceCount?: number;
}

export type MlIntent =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConversationDefinitionDialogs?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DependentMlIntents?: QueryResult;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MlIntent;
    MlActualIntentModelMisclassifications?: QueryResult;
    MlDomain?: MlDomain;
    MlDomainId?: ID;
    MlIntentModelMetrics?: QueryResult;
    MlIntentUtterances?: QueryResult;
    MlPredictedIntentModelMisclassifications?: QueryResult;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RelatedMlIntents?: QueryResult;
    SystemModstamp?: Date;
}

export type MlIntentModelMetric = sObject &  {
    ConfusionType?: MlIntentModelConfusionType;
    CorrectCount?: number;
    CorrectnessPercent?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    F1Score?: number;
    IncorrectCount?: number;
    IncorrectnessPercent?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MlExternalModel?: MlExternalModel;
    MlExternalModelId?: ID;
    MlIntent?: MlIntent;
    MlIntentId?: ID;
    Precision?: number;
    PredictionThreshold?: number;
    Recall?: number;
    ShouldDisplayMetrics?: boolean;
    SystemModstamp?: Date;
    UnrecognizedCount?: number;
    UnrecognizedPercent?: number;
    UtteranceCount?: number;
}

export type MlIntentModelMisclassification = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MisclassificationCount?: number;
    MisclassificationPercent?: number;
    MlActualIntent?: MlIntent;
    MlActualIntentId?: ID;
    MlExternalModel?: MlExternalModel;
    MlExternalModelId?: ID;
    MlPredictedIntent?: MlIntent;
    MlPredictedIntentId?: ID;
    SystemModstamp?: Date;
}

export type MlIntentUtterance =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MlDomain?: MlDomain;
    MlDomainId?: ID;
    MlIntent?: MlIntent;
    MlIntentId?: ID;
    SystemModstamp?: Date;
    Utterance?: string;
}

export type MlRelatedIntent =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MlIntent?: MlIntent;
    MlIntentId?: ID;
    RelatedMlIntent?: MlIntent;
    RelatedMlIntentId?: ID;
    SystemModstamp?: Date;
}

export type MlSlotClass =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: MlSlotClassDataType;
    Description?: string;
    DeveloperName?: string;
    ExtractionRegex?: string;
    ExtractionType?: MlSlotClassExtractionType;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MlSlotClass;
    MlDomain?: MlDomain;
    MlDomainId?: ID;
    MlSlotClassValues?: QueryResult;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type MlSlotClassValue =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MlSlotClass?: MlSlotClass;
    MlSlotClassId?: ID;
    SystemModstamp?: Date;
    Value?: string;
}

export type MobSecurityCertPinConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CertificateHash?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DomainName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    IsSubdomainIncluded?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MobSecurityCertPinConfig;
    MobilePlatform?: MobileSecurityMobilePlatform;
    MobileSecurityAssignment?: MobileSecurityAssignment;
    MobileSecurityAssignmentId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SeverityLevel?: MobileSecurityPolicySeverityLevel;
    SystemModstamp?: Date;
    Type?: MobileSecurityCertPinType;
}

export type MobilePushNotificationCredential = sObject &  {
    ApplicationBundle?: string;
    Certificate?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CredentialType?: MobileCredentialType;
    DatabaseUrl?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    KeyIdentifier?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    Password?: string;
    PlatformType?: MobilePlatformType;
    ServiceJson?: string;
    SigningKey?: string;
    SystemModstamp?: Date;
    TeamIdentifier?: string;
}

export type MobileSecurityAssignment = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConnectedApplicationId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MobileSecurityAssignment;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Profile?: Profile;
    ProfileId?: ID;
    SystemModstamp?: Date;
}

export type MobileSecurityPolicy = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EffectiveDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: MobileSecurityPolicy;
    MobilePlatform?: MobileSecurityMobilePlatform;
    MobileSecurityAssignment?: MobileSecurityAssignment;
    MobileSecurityAssignmentId?: ID;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RuleValue?: string;
    RuleValueType?: MobileSecurityPolicyRuleValueType;
    SeverityLevel?: MobileSecurityPolicySeverityLevel;
    SystemModstamp?: Date;
    Type?: MobileSecurityPolicyType;
}

export type MobileSettings = MetadataForSettings & sObject &  {
    DashboardMobileId?: string;
    DurableId?: string;
    FullName?: string;
    IsImportContactFromDeviceEnabled?: boolean;
    IsOfflineDraftsEnabledEnabled?: boolean;
    IsPopulateNameManuallyInTodayEnabled?: boolean;
    IsS1EncryptedStoragePref2Enabled?: boolean;
    IsS1OfflinePrefEnabled?: boolean;
    Metadata?: MobileSettings;
}

export type ModerationRule = Metadata & sObject &  {
    Action?: ModerationRuleAction;
    ActionLimit?: number;
    Active?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ModerationRule;
    ModuleNamespace?: string;
    NotifyLimit?: number;
    SobjectType?: sObject;
    SobjectTypeId?: ID;
    SystemModstamp?: Date;
    TimePeriod?: RateLimitTimePeriod;
    Type?: ModerationRuleType;
    UserMessage?: string;
}

export type MsgChannelLanguageKeyword = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomKeywords?: string;
    CustomResponse?: string;
    DoubleOptInKeywords?: string;
    HelpKeywords?: string;
    HelpResponse?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLanguage?: string;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    OptInConfirmation?: string;
    OptInKeywords?: string;
    OptOutConfirmation?: string;
    OptOutKeywords?: string;
    SystemModstamp?: Date;
}

export type MsgChannelProcureRequest = sObject &  {
    ChannelAddressIdentifier?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExpirationDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannel?: MessagingChannel;
    MessagingChannelId?: ID;
    MessagingPlatformKey?: string;
    Parent?: MsgChannelProvisionRequest;
    ParentId?: ID;
    ProcurementRequestIdentifier?: string;
    Status?: MessagingChannelProcurementRequestStatus;
    SystemModstamp?: Date;
}

export type MsgChannelProvisionRequest = sObject &  {
    ChannelType?: MessageType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FinalizationDate?: Date;
    FinalizedBy?: User;
    FinalizedById?: ID;
    IsDeleted?: boolean;
    IsInternal?: boolean;
    IsoCountryCode?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannelProcurementRequests?: QueryResult;
    ProvisioningRequestIdentifier?: string;
    Quantity?: number;
    Status?: MessagingChannelProvisioningRequestStatus;
    SystemModstamp?: Date;
}

export type MsgChannelUsageExternalOrg = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExternalOrgIdentifier?: string;
    ExternalSubOrgIdentifier?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MessagingChannelUsage?: MessagingChannelUsage;
    MessagingChannelUsageId?: ID;
    SystemModstamp?: Date;
}

export type MutingPermissionSet = PermissionSet & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    PermissionsAECommunityAccess?: boolean;
    PermissionsAICommerceAgentUser?: boolean;
    PermissionsAICreateInsightObjects?: boolean;
    PermissionsAIViewInsightObjects?: boolean;
    PermissionsAccessActivation?: boolean;
    PermissionsAccessApplication?: boolean;
    PermissionsAccessApplicationFormObjects?: boolean;
    PermissionsAccessBudgetManagement?: boolean;
    PermissionsAccessCMC?: boolean;
    PermissionsAccessCdpApp?: boolean;
    PermissionsAccessCdpDataExplorer?: boolean;
    PermissionsAccessCdpProfileExplorer?: boolean;
    PermissionsAccessContentBuilder?: boolean;
    PermissionsAccessCustomerDataCloudSetup?: boolean;
    PermissionsAccessEDCGenerativeAI?: boolean;
    PermissionsAccessEducationCloud?: boolean;
    PermissionsAccessEducationCloudCmty?: boolean;
    PermissionsAccessEducationCloudReview?: boolean;
    PermissionsAccessFinancialAccounts?: boolean;
    PermissionsAccessFundraisingCmty?: boolean;
    PermissionsAccessGeniePlatform?: boolean;
    PermissionsAccessSegment?: boolean;
    PermissionsAccessToComplaintMgmt?: boolean;
    PermissionsAccessToDisputeManagement?: boolean;
    PermissionsAccessToServiceProcess?: boolean;
    PermissionsAccessWalkthroughs?: boolean;
    PermissionsAccessZeroDeployment?: boolean;
    PermissionsAccountAddressManager?: boolean;
    PermissionsAccountSwitcherUser?: boolean;
    PermissionsAccountingJobUser?: boolean;
    PermissionsAccountingSubledgerAdmin?: boolean;
    PermissionsAccountingSubledgerStarterUser?: boolean;
    PermissionsActionPlansUserAccess?: boolean;
    PermissionsActionableListCompUser?: boolean;
    PermissionsActionableListConfigUser?: boolean;
    PermissionsActionableListCreator?: boolean;
    PermissionsActionableListUser?: boolean;
    PermissionsActivateContract?: boolean;
    PermissionsActivateDeactivateNonSetupFlow?: boolean;
    PermissionsActivateOrder?: boolean;
    PermissionsActivateSystemModeFlows?: boolean;
    PermissionsActivitiesAccess?: boolean;
    PermissionsAddAnalyticsRemoteConnections?: boolean;
    PermissionsAddCreaRecElmntToNonSetupFlow?: boolean;
    PermissionsAddDecisionElmntNonSetupFlow?: boolean;
    PermissionsAddDirectMessageMembers?: boolean;
    PermissionsAddUpdtRecElmntToNonSetupFlow?: boolean;
    PermissionsAddWaitToNonSetupFlow?: boolean;
    PermissionsAddWaveNotificationRecipients?: boolean;
    PermissionsAdminAnalyticsUser?: boolean;
    PermissionsAdminProvisioning?: boolean;
    PermissionsAdoptionAnalyticsUser?: boolean;
    PermissionsAdvancedCsvDataImportUser?: boolean;
    PermissionsAdvancedPricingUser?: boolean;
    PermissionsAllowAIAccelerator?: boolean;
    PermissionsAllowBotInboxFeatureAccess?: boolean;
    PermissionsAllowDeleteDandBCompany?: boolean;
    PermissionsAllowERIBasicAccess?: boolean;
    PermissionsAllowERIGrowthAccess?: boolean;
    PermissionsAllowERIStarterAccess?: boolean;
    PermissionsAllowERITwitterAccess?: boolean;
    PermissionsAllowEmailIC?: boolean;
    PermissionsAllowGnrcDisclsFrmwk?: boolean;
    PermissionsAllowHCReferralScoring?: boolean;
    PermissionsAllowIndustriesCSVDataLoading?: boolean;
    PermissionsAllowLightningLogin?: boolean;
    PermissionsAllowMaterialityAssessment?: boolean;
    PermissionsAllowNZCMngEsgPgm?: boolean;
    PermissionsAllowReadDandBCompany?: boolean;
    PermissionsAllowReferralScoring?: boolean;
    PermissionsAllowSCBEI?: boolean;
    PermissionsAllowSCCalcAndLock?: boolean;
    PermissionsAllowSCCarbonAccounting?: boolean;
    PermissionsAllowSCCarbonCreditAlloc?: boolean;
    PermissionsAllowSCCmtyExtEngMgmt?: boolean;
    PermissionsAllowSCCreditSync?: boolean;
    PermissionsAllowSCDGF?: boolean;
    PermissionsAllowSCEmssnsForecasting?: boolean;
    PermissionsAllowSCExpansionUseCase?: boolean;
    PermissionsAllowSCExternalEngMgmt?: boolean;
    PermissionsAllowSCSNGManagement?: boolean;
    PermissionsAllowSCScope3Hub?: boolean;
    PermissionsAllowSCSnGAffiliates?: boolean;
    PermissionsAllowSCTargetSetting?: boolean;
    PermissionsAllowSCWasteManagement?: boolean;
    PermissionsAllowSCWaterManagement?: boolean;
    PermissionsAllowSFDCToAdminOrg?: boolean;
    PermissionsAllowSurveyAdvancedFeatures?: boolean;
    PermissionsAllowSurveyLimitedAdvFeatures?: boolean;
    PermissionsAllowUniversalSearch?: boolean;
    PermissionsAllowViewEditConvertedLeads?: boolean;
    PermissionsAllowViewKnowledge?: boolean;
    PermissionsAllowVisitRecommendation?: boolean;
    PermissionsAlumniCommunityPages?: boolean;
    PermissionsAmendAssets?: boolean;
    PermissionsAnalyticsBackupFileAccess?: boolean;
    PermissionsAnalyticsPublicGalleryUser?: boolean;
    PermissionsAnalyticsQueryServiceConsumer?: boolean;
    PermissionsAnalyticsWatchUser?: boolean;
    PermissionsApexRestServices?: boolean;
    PermissionsApiEnabled?: boolean;
    PermissionsApiImpersonateUser?: boolean;
    PermissionsApiUserOnly?: boolean;
    PermissionsApplicantCommunityPages?: boolean;
    PermissionsAppointmentBookingUserAccess?: boolean;
    PermissionsApproveContract?: boolean;
    PermissionsApproveOrder?: boolean;
    PermissionsAssessmentPlatformUser?: boolean;
    PermissionsAssessmentQuestionGeneration?: boolean;
    PermissionsAssignPermissionSets?: boolean;
    PermissionsAssignPublicGroups?: boolean;
    PermissionsAssignQueues?: boolean;
    PermissionsAssignRoles?: boolean;
    PermissionsAssignTopics?: boolean;
    PermissionsAssignUserToSkill?: boolean;
    PermissionsAssociationEngineUserAccess?: boolean;
    PermissionsAuthorApex?: boolean;
    PermissionsAuthorizePayments?: boolean;
    PermissionsAutomateEmailContent?: boolean;
    PermissionsAutomatedActionsUser?: boolean;
    PermissionsAutomatedDataEntry?: boolean;
    PermissionsAutomaticActivityCapture?: boolean;
    PermissionsAutonomousAnalyticsAuditor?: boolean;
    PermissionsAutonomousAnalyticsPrivacy?: boolean;
    PermissionsB2BCommerceIntegrator?: boolean;
    PermissionsB2BCommerceSuperUser?: boolean;
    PermissionsB2BCommerceUser?: boolean;
    PermissionsB2BMarketingAnalyticsUser?: boolean;
    PermissionsB2CCommerceUser?: boolean;
    PermissionsB2bmaAppUser?: boolean;
    PermissionsB2bmaIntegrationUser?: boolean;
    PermissionsBACommunityAccess?: boolean;
    PermissionsBREAlertsUserAccess?: boolean;
    PermissionsBVCommunityAccess?: boolean;
    PermissionsBehavioralHealthAppUserAccess?: boolean;
    PermissionsBenefitManagementAccess?: boolean;
    PermissionsBotManageBots?: boolean;
    PermissionsBotManageBotsTrainingData?: boolean;
    PermissionsBranchManagementUserAccess?: boolean;
    PermissionsBroadcaster?: boolean;
    PermissionsBulkApiHardDelete?: boolean;
    PermissionsBulkMacrosAllowed?: boolean;
    PermissionsBypassEmailApproval?: boolean;
    PermissionsBypassMFAForUiLogins?: boolean;
    PermissionsCCMCommunityAccess?: boolean;
    PermissionsCCMFieldAccess?: boolean;
    PermissionsCCUserHasEAndUProgramAccess?: boolean;
    PermissionsCDPDataManagerConsumer?: boolean;
    PermissionsCGCTradePromotionManagement?: boolean;
    PermissionsCIPartnerIntegrationUser?: boolean;
    PermissionsCMSECEAuthoringAccess?: boolean;
    PermissionsCallCoachingUser?: boolean;
    PermissionsCallExplorer?: boolean;
    PermissionsCallSummarization?: boolean;
    PermissionsCalmSobjectAccessUser?: boolean;
    PermissionsCampaignInfluence2?: boolean;
    PermissionsCanAccessCE?: boolean;
    PermissionsCanApproveFeedPost?: boolean;
    PermissionsCanDisableConnectedApps?: boolean;
    PermissionsCanDisablePackages?: boolean;
    PermissionsCanEditDataPrepRecipe?: boolean;
    PermissionsCanEditPrompts?: boolean;
    PermissionsCanInitiateMessagingSessions?: boolean;
    PermissionsCanInsertFeedSystemFields?: boolean;
    PermissionsCanManageMaps?: boolean;
    PermissionsCanRunAnalysis?: boolean;
    PermissionsCanSave?: boolean;
    PermissionsCanToggleCallRecordings?: boolean;
    PermissionsCanTransferScrt2Conversation?: boolean;
    PermissionsCanUpdateEmailMessage?: boolean;
    PermissionsCanUseDshbdWoSameUsrLic?: boolean;
    PermissionsCanUseNewDashboardBuilder?: boolean;
    PermissionsCanVerifyComment?: boolean;
    PermissionsCancelAssets?: boolean;
    PermissionsCaptureAndReversePayments?: boolean;
    PermissionsCarePlansAccess?: boolean;
    PermissionsCaseProceedingsAccess?: boolean;
    PermissionsCaseReferralAccess?: boolean;
    PermissionsCaseWrapUpUser?: boolean;
    PermissionsCdcReportingCreateReports?: boolean;
    PermissionsCdcReportingManageFolders?: boolean;
    PermissionsCdcReportingViewReports?: boolean;
    PermissionsChampionUser?: boolean;
    PermissionsChangeDashboardColors?: boolean;
    PermissionsChangeTargetAssignee?: boolean;
    PermissionsChatterComposeUiCodesnippet?: boolean;
    PermissionsChatterEditOwnPost?: boolean;
    PermissionsChatterEditOwnRecordPost?: boolean;
    PermissionsChatterEnabledForUser?: boolean;
    PermissionsChatterFileLink?: boolean;
    PermissionsChatterInternalUser?: boolean;
    PermissionsChatterInviteExternalUsers?: boolean;
    PermissionsChatterOwnGroups?: boolean;
    PermissionsCidbPermission?: boolean;
    PermissionsClauseDEUser?: boolean;
    PermissionsClauseDesigner?: boolean;
    PermissionsClauseUser?: boolean;
    PermissionsClientSecretRotation?: boolean;
    PermissionsCloseConversations?: boolean;
    PermissionsCodeBuilderUser?: boolean;
    PermissionsCollectionAgent?: boolean;
    PermissionsCollectionAssigner?: boolean;
    PermissionsCombAuthAndCapPayments?: boolean;
    PermissionsCommandCenterUser?: boolean;
    PermissionsCommerceEntitlementIntegrator?: boolean;
    PermissionsCommerceShipmentIntegrator?: boolean;
    PermissionsCommerceTaxApiUser?: boolean;
    PermissionsComplaintsManagementAccess?: boolean;
    PermissionsComputeAccess?: boolean;
    PermissionsComputeProductionAccess?: boolean;
    PermissionsConfigCompliantDataSharing?: boolean;
    PermissionsConfigCustomRecs?: boolean;
    PermissionsConfigureDataspaceScope?: boolean;
    PermissionsConfigureLiveMessage?: boolean;
    PermissionsConfigureMerchantAccounts?: boolean;
    PermissionsConfigurePayments?: boolean;
    PermissionsConnectOrgToEnvironmentHub?: boolean;
    PermissionsConsentApiUpdate?: boolean;
    PermissionsConsentBannerSettingsSetup?: boolean;
    PermissionsConsoleTab?: boolean;
    PermissionsContactCenterUserAccess?: boolean;
    PermissionsContactInspectorUser?: boolean;
    PermissionsContentAdministrator?: boolean;
    PermissionsContentHubUser?: boolean;
    PermissionsContentWorkspaces?: boolean;
    PermissionsContextServiceAdmin?: boolean;
    PermissionsContextServiceRuntime?: boolean;
    PermissionsContractManagementCCPlusDEUser?: boolean;
    PermissionsContractMgmtAdmin?: boolean;
    PermissionsContractMgmtRuntime?: boolean;
    PermissionsContractMgmtRuntimePC?: boolean;
    PermissionsContractorHasEUProgramAccess?: boolean;
    PermissionsContractorHasWorkReportAccess?: boolean;
    PermissionsContractsAIClauseDesigner?: boolean;
    PermissionsContractsAIRuntimeUser?: boolean;
    PermissionsConvertLeads?: boolean;
    PermissionsCoreCPQUser?: boolean;
    PermissionsCorePricingAdmin?: boolean;
    PermissionsCorePricingDesignTimeUser?: boolean;
    PermissionsCorePricingManager?: boolean;
    PermissionsCorePricingRunTimeUser?: boolean;
    PermissionsCpqIntegrationUser?: boolean;
    PermissionsCreateAuditFields?: boolean;
    PermissionsCreateCustomizeDashboards?: boolean;
    PermissionsCreateCustomizeFilters?: boolean;
    PermissionsCreateCustomizeReports?: boolean;
    PermissionsCreateDashboardFolders?: boolean;
    PermissionsCreateEditNonSetupFlow?: boolean;
    PermissionsCreateLtngTempFolder?: boolean;
    PermissionsCreateLtngTempInPub?: boolean;
    PermissionsCreateModFormTrigNonSetupFlow?: boolean;
    PermissionsCreateModSgmtTrigNonSetupFlow?: boolean;
    PermissionsCreatePackaging?: boolean;
    PermissionsCreateQuickCadence?: boolean;
    PermissionsCreateReductionOrder?: boolean;
    PermissionsCreateReportFolders?: boolean;
    PermissionsCreateReportInLightning?: boolean;
    PermissionsCreateStandardCadence?: boolean;
    PermissionsCreateTopics?: boolean;
    PermissionsCreateUpdateSDDDataset?: boolean;
    PermissionsCreateUpdateSDDStory?: boolean;
    PermissionsCreateWorkBadgeDefinition?: boolean;
    PermissionsCreateWorkspaces?: boolean;
    PermissionsCreditMemoAPIUser?: boolean;
    PermissionsCrisisCenterUserAccess?: boolean;
    PermissionsCrossCampaignIntelligenceUser?: boolean;
    PermissionsCustomAppsOnFSMobile?: boolean;
    PermissionsCustomMobileAppsAccess?: boolean;
    PermissionsCustomSidebarOnAllPages?: boolean;
    PermissionsCustomTabBarOnMobile?: boolean;
    PermissionsCustomerMetricsSubmissionUser?: boolean;
    PermissionsCustomizeApplication?: boolean;
    PermissionsDCHMSO365AddInAuthor?: boolean;
    PermissionsDataExport?: boolean;
    PermissionsDataPipelinesAppConsumer?: boolean;
    PermissionsDataPrepPilotUser?: boolean;
    PermissionsDebugApex?: boolean;
    PermissionsDecisionTableExecUserAccess?: boolean;
    PermissionsDefenseIntegrationReserveOne?: boolean;
    PermissionsDeferSharingCalculations?: boolean;
    PermissionsDelegateHubEnvironmentManagement?: boolean;
    PermissionsDelegatedPortalUserAdmin?: boolean;
    PermissionsDelegatedTwoFactor?: boolean;
    PermissionsDeleteActivatedContract?: boolean;
    PermissionsDeleteCrMemoAndInvoice?: boolean;
    PermissionsDeleteDraftAndCanceledInvoices?: boolean;
    PermissionsDeleteEventMonitoringData?: boolean;
    PermissionsDeleteFieldHistory?: boolean;
    PermissionsDeleteFieldHistoryArchive?: boolean;
    PermissionsDeleteNonDraftSalesAgreement?: boolean;
    PermissionsDeleteNonSetupFlow?: boolean;
    PermissionsDeleteRevenueRecords?: boolean;
    PermissionsDeleteTopics?: boolean;
    PermissionsDesignActnableEvntOrchProcess?: boolean;
    PermissionsDesignContextRule?: boolean;
    PermissionsDialerBasicInbound?: boolean;
    PermissionsDialerBasicOutbound?: boolean;
    PermissionsDigitalLendingAdminUser?: boolean;
    PermissionsDigitalLendingUser?: boolean;
    PermissionsDisbursementUserAccess?: boolean;
    PermissionsDistributeFromPersWksp?: boolean;
    PermissionsDivisionAffected?: boolean;
    PermissionsDocGenDesigner?: boolean;
    PermissionsDocGenRuntimeCCUser?: boolean;
    PermissionsDocGenRuntimeUser?: boolean;
    PermissionsDocumentAutomationUserAccess?: boolean;
    PermissionsDocumentBuilder?: boolean;
    PermissionsDocumentChecklistUserAccess?: boolean;
    PermissionsDocumentWorkspaceCmtyAccess?: boolean;
    PermissionsDocumentWorkspaceUserAccess?: boolean;
    PermissionsDownloadPackageVersionZips?: boolean;
    PermissionsDynamicAssessmentAccess?: boolean;
    PermissionsEGPTSalesSummariesUser?: boolean;
    PermissionsERMUserAccess?: boolean;
    PermissionsEditASEFields?: boolean;
    PermissionsEditActivatedOrders?: boolean;
    PermissionsEditBillingInfo?: boolean;
    PermissionsEditBrandTemplates?: boolean;
    PermissionsEditBuildingEnergyIntensity?: boolean;
    PermissionsEditCaseComments?: boolean;
    PermissionsEditDeliveryInformation?: boolean;
    PermissionsEditEvent?: boolean;
    PermissionsEditForecast?: boolean;
    PermissionsEditHtmlTemplates?: boolean;
    PermissionsEditIQFields?: boolean;
    PermissionsEditInvoice?: boolean;
    PermissionsEditKnowledge?: boolean;
    PermissionsEditManagedOrderSummaries?: boolean;
    PermissionsEditMaterialityAssessment?: boolean;
    PermissionsEditMyDashboards?: boolean;
    PermissionsEditMyReports?: boolean;
    PermissionsEditOppLineItemUnitPrice?: boolean;
    PermissionsEditPastActualsSalesAgreement?: boolean;
    PermissionsEditPayment?: boolean;
    PermissionsEditPublicDocuments?: boolean;
    PermissionsEditPublicFilters?: boolean;
    PermissionsEditPublicReports?: boolean;
    PermissionsEditPublicTemplates?: boolean;
    PermissionsEditReadonlyFields?: boolean;
    PermissionsEditReports?: boolean;
    PermissionsEditRepricing?: boolean;
    PermissionsEditSalesPlan?: boolean;
    PermissionsEditTask?: boolean;
    PermissionsEditTopics?: boolean;
    PermissionsEditUnmanagedOrderSummaries?: boolean;
    PermissionsEinsteinAgentUser?: boolean;
    PermissionsEinsteinAiC2cUser?: boolean;
    PermissionsEinsteinArticleRecForVoicePilotUser?: boolean;
    PermissionsEinsteinArticleRecPilotUser?: boolean;
    PermissionsEinsteinArticleRecUser?: boolean;
    PermissionsEinsteinAssistantUser?: boolean;
    PermissionsEinsteinBrandVoiceReplyUser?: boolean;
    PermissionsEinsteinCoCreateSettingsSetup?: boolean;
    PermissionsEinsteinGPTSalesEmailsUser?: boolean;
    PermissionsEinsteinMetadataUserAccess?: boolean;
    PermissionsEinsteinReplyManager?: boolean;
    PermissionsEmailAdministration?: boolean;
    PermissionsEmailMass?: boolean;
    PermissionsEmailSingle?: boolean;
    PermissionsEmailTemplateManagement?: boolean;
    PermissionsEmbeddedMessagingAgent?: boolean;
    PermissionsEmployeeExperience?: boolean;
    PermissionsEmployeeExperience4?: boolean;
    PermissionsEmployeeExperience5?: boolean;
    PermissionsEnableAssignCrbnFtprntToEur?: boolean;
    PermissionsEnableAutoCreateCrbnFtprnts?: boolean;
    PermissionsEnableBCTransactionPolling?: boolean;
    PermissionsEnableCommunityAppLauncher?: boolean;
    PermissionsEnableIPFSUpload?: boolean;
    PermissionsEnableImpCSVForMfgAAFCmty?: boolean;
    PermissionsEnableImportCSVForMfgAAF?: boolean;
    PermissionsEnableMassUpdateForMfgAAF?: boolean;
    PermissionsEnableMassUpdateForMfgSA?: boolean;
    PermissionsEnableMassUpdtForMfgAAFCmty?: boolean;
    PermissionsEnableMassUpdtForMfgSACmty?: boolean;
    PermissionsEnableNotifications?: boolean;
    PermissionsEnableSOS?: boolean;
    PermissionsEnablementAdmin?: boolean;
    PermissionsEnablementUser?: boolean;
    PermissionsEnblLiteAdmin?: boolean;
    PermissionsEnblLiteUser?: boolean;
    PermissionsEnforceMutualAuthentication?: boolean;
    PermissionsEventLogReadAccess?: boolean;
    PermissionsEvidenceManagementAccess?: boolean;
    PermissionsExecuteDSARPolicies?: boolean;
    PermissionsExecutePromptTemplates?: boolean;
    PermissionsExplainabilityCmtyAccess?: boolean;
    PermissionsExplainabilityUserAccess?: boolean;
    PermissionsExportReport?: boolean;
    PermissionsExternalClientAppAdmin?: boolean;
    PermissionsExternalClientAppDeveloper?: boolean;
    PermissionsExternalClientAppViewer?: boolean;
    PermissionsFHIRCmtyAccess?: boolean;
    PermissionsFSCAlertFrameworkUserAccess?: boolean;
    PermissionsFSCArcGraphCommunityUser?: boolean;
    PermissionsFSCComprehensiveUserAccess?: boolean;
    PermissionsFSCDealMgmtCompUser?: boolean;
    PermissionsFSCDealMgmtPlatformUser?: boolean;
    PermissionsFSCInsClaimMgmtPlatformUser?: boolean;
    PermissionsFSCInsPolicyAdminPlatformUser?: boolean;
    PermissionsFSCInsuranceCmpCmtyAccess?: boolean;
    PermissionsFSCInsuranceCmpLexOnlyAccess?: boolean;
    PermissionsFSCInsurancePlatformUser?: boolean;
    PermissionsFeedPinning?: boolean;
    PermissionsFieldMappingUser?: boolean;
    PermissionsFieldServiceAccess?: boolean;
    PermissionsFieldServiceDispatcher?: boolean;
    PermissionsFieldServiceLastMile?: boolean;
    PermissionsFieldServiceMobileApp?: boolean;
    PermissionsFieldServiceScheduling?: boolean;
    PermissionsFinancialAccMgmtUser?: boolean;
    PermissionsFinancialServices2UserAccess?: boolean;
    PermissionsFlowUFLRequired?: boolean;
    PermissionsForceTwoFactor?: boolean;
    PermissionsForecastTab?: boolean;
    PermissionsFreezeCompromisedUsers?: boolean;
    PermissionsFreezeUsers?: boolean;
    PermissionsFunctionsManagerUser?: boolean;
    PermissionsFundraisingUser?: boolean;
    PermissionsGPTCopilotCustomerAdmin?: boolean;
    PermissionsGPTCopilotEmployeeAdmin?: boolean;
    PermissionsGPTCopilotEmployeeUser?: boolean;
    PermissionsGenEmailResponseUser?: boolean;
    PermissionsGenReplyRecommendationUser?: boolean;
    PermissionsGetRecordDetailsUserAccess?: boolean;
    PermissionsGetSmartDataDiscovery?: boolean;
    PermissionsGetSmartDataDiscoveryApi?: boolean;
    PermissionsGetSmartDataDiscoveryExternal?: boolean;
    PermissionsGiveRecognitionBadge?: boolean;
    PermissionsGlobalCbPQueryAccess?: boolean;
    PermissionsGovernNetworks?: boolean;
    PermissionsGroupMembershipPsl?: boolean;
    PermissionsHCMedTherapyMgmtUser?: boolean;
    PermissionsHVPEnabledOnFSMobile?: boolean;
    PermissionsHasFileSync?: boolean;
    PermissionsHasUnlimitedErbScoringRequests?: boolean;
    PermissionsHasUnlimitedNBAExecutions?: boolean;
    PermissionsHcAdvancedTherapyUser?: boolean;
    PermissionsHcMedReconciliationUser?: boolean;
    PermissionsHcPnmSiteUser?: boolean;
    PermissionsHeadlessCMSAccess?: boolean;
    PermissionsHeadlessConfiguratorUser?: boolean;
    PermissionsHealthCloudCmtyAccess?: boolean;
    PermissionsHealthCloudStarter?: boolean;
    PermissionsHealthCloudUtilizationMgmtUser?: boolean;
    PermissionsHideReadByList?: boolean;
    PermissionsHighVelocitySalesUser?: boolean;
    PermissionsHomeHealthAdminAccess?: boolean;
    PermissionsHomeHealthCaregiverAccess?: boolean;
    PermissionsHomeHealthClinicianAccess?: boolean;
    PermissionsHomeHealthCommunity?: boolean;
    PermissionsHubAccess?: boolean;
    PermissionsHubCommerceGlobalProductsUser?: boolean;
    PermissionsHubEnvironmentManagement?: boolean;
    PermissionsIPRestrictRequests?: boolean;
    PermissionsIcmCmtyAccess?: boolean;
    PermissionsIdentityConnect?: boolean;
    PermissionsIdentityEnabled?: boolean;
    PermissionsIdentityVerificationUserAccess?: boolean;
    PermissionsImplisitIntegrationUser?: boolean;
    PermissionsImplisitRunCompleted?: boolean;
    PermissionsImportCustomObjects?: boolean;
    PermissionsImportLeads?: boolean;
    PermissionsImportPersonal?: boolean;
    PermissionsInboundMigrationToolsUser?: boolean;
    PermissionsIndustriesEpcMvpNext?: boolean;
    PermissionsIndustriesEpcNextPilot?: boolean;
    PermissionsIndustriesEpcNextSvcCatalog?: boolean;
    PermissionsIndustryMilestonePlatformUser?: boolean;
    PermissionsInsightsAppAdmin?: boolean;
    PermissionsInsightsAppDashboardEditor?: boolean;
    PermissionsInsightsAppEltEditor?: boolean;
    PermissionsInsightsAppUploadUser?: boolean;
    PermissionsInsightsAppUser?: boolean;
    PermissionsInsightsCreateApplication?: boolean;
    PermissionsInsightsIntegrationUser?: boolean;
    PermissionsInsightsIntelAppUser?: boolean;
    PermissionsInstallAnalyticsTemplatedApp?: boolean;
    PermissionsInstallDEIAnalyticsApp?: boolean;
    PermissionsInstallNetZeroAnalyticsApp?: boolean;
    PermissionsInstallPackaging?: boolean;
    PermissionsInsuranceGroupBenefitsUser?: boolean;
    PermissionsIntelligenceUser?: boolean;
    PermissionsInteractionCalcAdminPerm?: boolean;
    PermissionsInteractionCalcUserPerm?: boolean;
    PermissionsInteractionObjStateDefUserPerm?: boolean;
    PermissionsInteractionSummaryCompUser?: boolean;
    PermissionsInteractionSummaryUser?: boolean;
    PermissionsInterestTaggingUserAccess?: boolean;
    PermissionsInviteBuyerToReorderPortal?: boolean;
    PermissionsInvoiceOrErrorRecoveryAPI?: boolean;
    PermissionsInvoiceSchedulerUser?: boolean;
    PermissionsIotUser?: boolean;
    PermissionsIsContactCenterAdmin?: boolean;
    PermissionsIsContactCenterAdminBYOT?: boolean;
    PermissionsIsContactCenterAgent?: boolean;
    PermissionsIsContactCenterAgentBYOT?: boolean;
    PermissionsIsContactCenterSupervisor?: boolean;
    PermissionsIsSsoEnabled?: boolean;
    PermissionsIsotopeAccess?: boolean;
    PermissionsIsotopeCToCUser?: boolean;
    PermissionsIsotopeLEX?: boolean;
    PermissionsKycPlatformUser?: boolean;
    PermissionsLMEndMessagingSessionUserPerm?: boolean;
    PermissionsLMOutboundMessagingUserPerm?: boolean;
    PermissionsLPICommunityAccess?: boolean;
    PermissionsLeadIQReservedUserPerm?: boolean;
    PermissionsLeadInspectorUser?: boolean;
    PermissionsLeadScoreResultPublisher?: boolean;
    PermissionsLeadScoreUser?: boolean;
    PermissionsLearningManager?: boolean;
    PermissionsLifecycleManagementAPIUser?: boolean;
    PermissionsLightningConsoleAllowedForUser?: boolean;
    PermissionsLightningExperienceUser?: boolean;
    PermissionsLightningOnFSMobile?: boolean;
    PermissionsLightningSchedulerUserAccess?: boolean;
    PermissionsListEmailSend?: boolean;
    PermissionsLiveMessageAgent?: boolean;
    PermissionsLoanOfficerUser?: boolean;
    PermissionsLobbyManagementUserAccess?: boolean;
    PermissionsLtngPromoReserved01UserPerm?: boolean;
    PermissionsMDWConsumer?: boolean;
    PermissionsMakePayments?: boolean;
    PermissionsManageAnalyticSnapshots?: boolean;
    PermissionsManageApplication?: boolean;
    PermissionsManageAssets?: boolean;
    PermissionsManageAuthProviders?: boolean;
    PermissionsManageAutomotiveAnalytics?: boolean;
    PermissionsManageBusinessHourHolidays?: boolean;
    PermissionsManageC2CHighVolumePriming?: boolean;
    PermissionsManageC360AConnections?: boolean;
    PermissionsManageCGAnalytics?: boolean;
    PermissionsManageCLMAnalytics?: boolean;
    PermissionsManageCMS?: boolean;
    PermissionsManageCallCenters?: boolean;
    PermissionsManageCampaigns?: boolean;
    PermissionsManageCases?: boolean;
    PermissionsManageCategories?: boolean;
    PermissionsManageCertificates?: boolean;
    PermissionsManageChatterMessages?: boolean;
    PermissionsManageContactTracing?: boolean;
    PermissionsManageContentDesignKit?: boolean;
    PermissionsManageContentPermissions?: boolean;
    PermissionsManageContentProperties?: boolean;
    PermissionsManageContentTaxonomy?: boolean;
    PermissionsManageContentTypes?: boolean;
    PermissionsManageConvMiningReports?: boolean;
    PermissionsManageCssUsers?: boolean;
    PermissionsManageCustomPermissions?: boolean;
    PermissionsManageCustomReportTypes?: boolean;
    PermissionsManageCustomerExperienceAnalytics?: boolean;
    PermissionsManageDSARPolicies?: boolean;
    PermissionsManageDashbdsInPubFolders?: boolean;
    PermissionsManageDashboards?: boolean;
    PermissionsManageDataCategories?: boolean;
    PermissionsManageDataIntegrations?: boolean;
    PermissionsManageDataMaskPolicies?: boolean;
    PermissionsManageDataProcessingEngine?: boolean;
    PermissionsManageDataspaceScope?: boolean;
    PermissionsManageDefaultReportingYearType?: boolean;
    PermissionsManageDefinedSkills?: boolean;
    PermissionsManageDevices?: boolean;
    PermissionsManageDynamicDashboards?: boolean;
    PermissionsManageEAForB2BMarketing?: boolean;
    PermissionsManageERMAnalytics?: boolean;
    PermissionsManageEducationAnalytics?: boolean;
    PermissionsManageEmailClientConfig?: boolean;
    PermissionsManageEmailConnectorEvent?: boolean;
    PermissionsManageEmailContent?: boolean;
    PermissionsManageEmailMessagingSetup?: boolean;
    PermissionsManageEncryptionKeys?: boolean;
    PermissionsManageEntitlements?: boolean;
    PermissionsManageExchangeConfig?: boolean;
    PermissionsManageExternalConnections?: boolean;
    PermissionsManageFSCAnalytics?: boolean;
    PermissionsManageForecastingCustomData?: boolean;
    PermissionsManageFuelTypes?: boolean;
    PermissionsManageFundingAward?: boolean;
    PermissionsManageGlobalPreferences?: boolean;
    PermissionsManageGlobalPrivacyCenterVO?: boolean;
    PermissionsManageHcProviderNtwkMgmt?: boolean;
    PermissionsManageHcProviderRelMgmt?: boolean;
    PermissionsManageHealthCareAnalytics?: boolean;
    PermissionsManageHealthCheck?: boolean;
    PermissionsManageHealthCloud?: boolean;
    PermissionsManageHealthCloudFinancialData?: boolean;
    PermissionsManageHubConnections?: boolean;
    PermissionsManageInAppGuidanceForSites?: boolean;
    PermissionsManageIndustriesVisit?: boolean;
    PermissionsManageIntegrationPermsets?: boolean;
    PermissionsManageInteraction?: boolean;
    PermissionsManageInternalUsers?: boolean;
    PermissionsManageIpAddresses?: boolean;
    PermissionsManageKnowledge?: boolean;
    PermissionsManageKnowledgeImportExport?: boolean;
    PermissionsManageLeads?: boolean;
    PermissionsManageLearningReporting?: boolean;
    PermissionsManageLoadReferenceData?: boolean;
    PermissionsManageLoginAccessPolicies?: boolean;
    PermissionsManageLoyalty?: boolean;
    PermissionsManageLoyaltyAnalytics?: boolean;
    PermissionsManageManufacturingAnalytics?: boolean;
    PermissionsManageMediaAnalytics?: boolean;
    PermissionsManageMobile?: boolean;
    PermissionsManageMobileAppSecurity?: boolean;
    PermissionsManageMobilePublisherIntegration?: boolean;
    PermissionsManageMyS1App?: boolean;
    PermissionsManageMySavedPaymentMethods?: boolean;
    PermissionsManageNamedCredentials?: boolean;
    PermissionsManageNetZeroCloudSettings?: boolean;
    PermissionsManageNetworks?: boolean;
    PermissionsManageNonProfitIntelligence?: boolean;
    PermissionsManageOrchInstsAndWorkItems?: boolean;
    PermissionsManageOrchestrationRuns?: boolean;
    PermissionsManageOutcomeManagement?: boolean;
    PermissionsManagePackageLicenses?: boolean;
    PermissionsManagePartnerNetConn?: boolean;
    PermissionsManagePartners?: boolean;
    PermissionsManagePasswordPolicies?: boolean;
    PermissionsManagePaymentLinks?: boolean;
    PermissionsManagePreferenceCenter?: boolean;
    PermissionsManagePrivacyCenterPolicies?: boolean;
    PermissionsManagePrivacyHold?: boolean;
    PermissionsManageProductCatalog?: boolean;
    PermissionsManageProductDiscovery?: boolean;
    PermissionsManageProfilesPermissionsets?: boolean;
    PermissionsManageProgramManagement?: boolean;
    PermissionsManageProgramsBenefitsCases?: boolean;
    PermissionsManagePromptTemplates?: boolean;
    PermissionsManagePropositions?: boolean;
    PermissionsManageProviderSearch?: boolean;
    PermissionsManagePublicGroups?: boolean;
    PermissionsManagePvtRptsAndDashbds?: boolean;
    PermissionsManageQueues?: boolean;
    PermissionsManageQuotas?: boolean;
    PermissionsManageRealm?: boolean;
    PermissionsManageRecommendationStrategies?: boolean;
    PermissionsManageReferral?: boolean;
    PermissionsManageReleaseUpdates?: boolean;
    PermissionsManageRemoteAccess?: boolean;
    PermissionsManageReportsInPubFolders?: boolean;
    PermissionsManageRetentionStores?: boolean;
    PermissionsManageRoles?: boolean;
    PermissionsManageSMSMessagingSetup?: boolean;
    PermissionsManageSandboxes?: boolean;
    PermissionsManageSavedPaymentMethods?: boolean;
    PermissionsManageSearchPromotionRules?: boolean;
    PermissionsManageSecurityCommandCenter?: boolean;
    PermissionsManageSelfService?: boolean;
    PermissionsManageSessionPermissionSets?: boolean;
    PermissionsManageSharing?: boolean;
    PermissionsManageShiftScheduling?: boolean;
    PermissionsManageSlackUserMappings?: boolean;
    PermissionsManageSmartDataDiscovery?: boolean;
    PermissionsManageSmartDataDiscoveryModel?: boolean;
    PermissionsManageSolutions?: boolean;
    PermissionsManageStores?: boolean;
    PermissionsManageSubscriptions?: boolean;
    PermissionsManageSurveys?: boolean;
    PermissionsManageSustainabilityUOM?: boolean;
    PermissionsManageSvcCatalog?: boolean;
    PermissionsManageSynonyms?: boolean;
    PermissionsManageTCRMforComms?: boolean;
    PermissionsManageTCRMforEandU?: boolean;
    PermissionsManageTCRMforSustainability?: boolean;
    PermissionsManageTemplatedApp?: boolean;
    PermissionsManageTemplatedIntelApp?: boolean;
    PermissionsManageTenants?: boolean;
    PermissionsManageTerritories?: boolean;
    PermissionsManageTranslation?: boolean;
    PermissionsManageTrustMeasures?: boolean;
    PermissionsManageTwoFactor?: boolean;
    PermissionsManageUnlistedGroups?: boolean;
    PermissionsManageUserAccessPolicies?: boolean;
    PermissionsManageUsers?: boolean;
    PermissionsManageVehicleAssetRecordTypes?: boolean;
    PermissionsManageWarrantyClaims?: boolean;
    PermissionsManageWatch?: boolean;
    PermissionsManageWhatsAppMessagingSetup?: boolean;
    PermissionsManageWorkForecasting?: boolean;
    PermissionsManageWorkScheduling?: boolean;
    PermissionsMarketingAdmin?: boolean;
    PermissionsMassInlineEdit?: boolean;
    PermissionsMaterialLineUser?: boolean;
    PermissionsMcScoringRulesConfig?: boolean;
    PermissionsMedMgmtExperienceCloudUser?: boolean;
    PermissionsMediaBase?: boolean;
    PermissionsMergeAndSplitGroups?: boolean;
    PermissionsMergeTopics?: boolean;
    PermissionsMessengerUser?: boolean;
    PermissionsMicrobatching?: boolean;
    PermissionsMicrosoft365WordDEUser?: boolean;
    PermissionsMicrosoft365WordDesigner?: boolean;
    PermissionsMicrosoft365WordUser?: boolean;
    PermissionsMicrosoftTeamsUser?: boolean;
    PermissionsMngBuildingEnergyRecordTypes?: boolean;
    PermissionsMngCGCDirStoreDlvrOffline?: boolean;
    PermissionsMngEnrgyAttrCertCredit?: boolean;
    PermissionsMngFuelTypeSustainabilityUOM?: boolean;
    PermissionsMngStationaryAssetRecordTypes?: boolean;
    PermissionsMngSustainabilityUOConversion?: boolean;
    PermissionsMobileAppSecurity?: boolean;
    PermissionsModerateChatter?: boolean;
    PermissionsModerateNetworkFeeds?: boolean;
    PermissionsModerateNetworkFiles?: boolean;
    PermissionsModerateNetworkMessages?: boolean;
    PermissionsModerateNetworkUsers?: boolean;
    PermissionsModifyAllData?: boolean;
    PermissionsModifyDataClassification?: boolean;
    PermissionsModifyMetadata?: boolean;
    PermissionsMortgageUserAccess?: boolean;
    PermissionsMultiStepSchedulingUser?: boolean;
    PermissionsMyTrailheadBranding?: boolean;
    PermissionsMyTrailheadContentAccess?: boolean;
    PermissionsMyTrailheadContentCreation?: boolean;
    PermissionsMyTrailheadCustomSteps?: boolean;
    PermissionsMyTrailheadManageCollections?: boolean;
    PermissionsMyTrailheadPreviewMode?: boolean;
    PermissionsMyTrailheadReleaseMgmt?: boolean;
    PermissionsNativeWebviewScrolling?: boolean;
    PermissionsNewReportBuilder?: boolean;
    PermissionsNotificationTrayPolling?: boolean;
    PermissionsObligationAssignee?: boolean;
    PermissionsObligationDEAssignee?: boolean;
    PermissionsObligationDEManager?: boolean;
    PermissionsObligationDEUser?: boolean;
    PermissionsObligationManager?: boolean;
    PermissionsObligationUser?: boolean;
    PermissionsOfflineForMobilePlus?: boolean;
    PermissionsOfflineProducts?: boolean;
    PermissionsOmniChannelPricingUser?: boolean;
    PermissionsOmniStudioDesigner?: boolean;
    PermissionsOmniStudioRuntime?: boolean;
    PermissionsOmniStudioRuntimeCC?: boolean;
    PermissionsOmniSupervisorManageQueue?: boolean;
    PermissionsOmnichannelInventoryBasic?: boolean;
    PermissionsOmnichannelInventorySync?: boolean;
    PermissionsOpportunityScoreUser?: boolean;
    PermissionsOptOutGeoLocationTracking?: boolean;
    PermissionsOrderToBSAPIUser?: boolean;
    PermissionsOrderToInvoiceAPIUser?: boolean;
    PermissionsOrgPerformanceAccess?: boolean;
    PermissionsOutboundMigrationToolsUser?: boolean;
    PermissionsOverrideForecasts?: boolean;
    PermissionsPRMChannelMgmtConsoleUser?: boolean;
    PermissionsPRMForSlackPartnerManagerUser?: boolean;
    PermissionsPRMForSlackPartnerUser?: boolean;
    PermissionsPackaging2?: boolean;
    PermissionsPackaging2Delete?: boolean;
    PermissionsPackaging2PromoteVersion?: boolean;
    PermissionsPardotPilotUser?: boolean;
    PermissionsPardotUser?: boolean;
    PermissionsPasswordNeverExpires?: boolean;
    PermissionsPayByBillingCardPaymentMethod?: boolean;
    PermissionsPaymentSchedulerUser?: boolean;
    PermissionsPaymentsAPIUser?: boolean;
    PermissionsPerformanceAnalysisAccess?: boolean;
    PermissionsPermitSubscriberLogin?: boolean;
    PermissionsPersonalizationPlatform?: boolean;
    PermissionsPersonalizedFinanceUserAccess?: boolean;
    PermissionsPipelineInspectorUser?: boolean;
    PermissionsPortalSuperUser?: boolean;
    PermissionsPortalTab?: boolean;
    PermissionsPredictivePlatformAnalyze?: boolean;
    PermissionsPredictivePlatformQuery?: boolean;
    PermissionsPreventClassicExperience?: boolean;
    PermissionsPreviewExperienceUser?: boolean;
    PermissionsPreviewTestSendEmail?: boolean;
    PermissionsPreviewTestSendSMS?: boolean;
    PermissionsPriceSheetConfiguration?: boolean;
    PermissionsPricingRuleUser?: boolean;
    PermissionsPrivacyDataAccess?: boolean;
    PermissionsProcessInvoice?: boolean;
    PermissionsProcessOrder?: boolean;
    PermissionsProductAdmin?: boolean;
    PermissionsProductCatalogApiAccess?: boolean;
    PermissionsProductCatalogMgmtApiCCAccess?: boolean;
    PermissionsProductCatalogMgmtApiPCAccess?: boolean;
    PermissionsProductCatalogMgmtBaseCCUser?: boolean;
    PermissionsProductCatalogMgmtBasePCUser?: boolean;
    PermissionsProductConfiguratorUser?: boolean;
    PermissionsProductDiscoveryUser?: boolean;
    PermissionsProspectingCenterUser?: boolean;
    PermissionsProviderManagementAccess?: boolean;
    PermissionsProviderMgmtCmtyAccess?: boolean;
    PermissionsProviderSearchUserAccess?: boolean;
    PermissionsPubSecServiceExcellenceAccess?: boolean;
    PermissionsPublicEnhancedTemplateMgmt?: boolean;
    PermissionsPublicSectorCmtyAccess?: boolean;
    PermissionsPublicSectorPlatformUserAccess?: boolean;
    PermissionsPublicTwitterResponse?: boolean;
    PermissionsPublishMalwareSignatures?: boolean;
    PermissionsPublishPackaging?: boolean;
    PermissionsPushDownReportAggregates?: boolean;
    PermissionsQueryAllFiles?: boolean;
    PermissionsQueryCustomerInfo?: boolean;
    PermissionsQuipMetricsAccess?: boolean;
    PermissionsQuipUserEngagementMetrics?: boolean;
    PermissionsQuoteToOrderUser?: boolean;
    PermissionsReadCrossOrgMetrics?: boolean;
    PermissionsReassignOrchestrationWorkItems?: boolean;
    PermissionsRecVisibilityFilterAPI?: boolean;
    PermissionsRecordAggregationAccess?: boolean;
    PermissionsRecordVisibilityAPI?: boolean;
    PermissionsRedirectToNetworkExperience?: boolean;
    PermissionsRefundPayments?: boolean;
    PermissionsRemoteMediaVirtualDesktop?: boolean;
    PermissionsRemoveDirectMessageMembers?: boolean;
    PermissionsRenewAssets?: boolean;
    PermissionsReplyRecommendationPilotUser?: boolean;
    PermissionsReplyRecommendationUser?: boolean;
    PermissionsRequirePhyTokenToLogin?: boolean;
    PermissionsResetPasswords?: boolean;
    PermissionsRetainFieldHistory?: boolean;
    PermissionsRevenueIntelligenceUser?: boolean;
    PermissionsRevenueProductImportUser?: boolean;
    PermissionsReviewApplication?: boolean;
    PermissionsRunActnableEvntOrchProcess?: boolean;
    PermissionsRunAsynchronousReports?: boolean;
    PermissionsRunCGCloudREPackage?: boolean;
    PermissionsRunCGCloudSyncPackage?: boolean;
    PermissionsRunCGServiceExcellence?: boolean;
    PermissionsRunContextRule?: boolean;
    PermissionsRunDecisionMatrix?: boolean;
    PermissionsRunDirectStoreDelivery?: boolean;
    PermissionsRunExpressionSet?: boolean;
    PermissionsRunFlow?: boolean;
    PermissionsRunNetZeroAnalyticsRecipe?: boolean;
    PermissionsRunRegisterProcessingServices?: boolean;
    PermissionsRunReports?: boolean;
    PermissionsRunRetailExecution?: boolean;
    PermissionsSCEViewAllData?: boolean;
    PermissionsSDCommunityAccess?: boolean;
    PermissionsSalesAnalyticsUser?: boolean;
    PermissionsSalesConsole?: boolean;
    PermissionsSalesforceIQInbox?: boolean;
    PermissionsSalesforceIQIntegrationUser?: boolean;
    PermissionsSalesforceIQInternal?: boolean;
    PermissionsSalesforceMeetingsUserPerm?: boolean;
    PermissionsSandboxTestingInCommunityApp?: boolean;
    PermissionsScheduleJob?: boolean;
    PermissionsScheduleReports?: boolean;
    PermissionsScheduledRemindersFeature?: boolean;
    PermissionsSchedulingFacilityManager?: boolean;
    PermissionsSchedulingLineAmbassador?: boolean;
    PermissionsScoringFrameworkAdmin?: boolean;
    PermissionsScoringFrameworkUser?: boolean;
    PermissionsScsRequireApproval?: boolean;
    PermissionsSecureGatewayAdmin?: boolean;
    PermissionsSegmentIntelligenceUser?: boolean;
    PermissionsSelectFilesFromSalesforce?: boolean;
    PermissionsSendAnnouncementEmails?: boolean;
    PermissionsSendCustomNotifications?: boolean;
    PermissionsSendEmail?: boolean;
    PermissionsSendExternalEmailAvailable?: boolean;
    PermissionsSendSMS?: boolean;
    PermissionsSendSitRequests?: boolean;
    PermissionsServiceAnalyticsUser?: boolean;
    PermissionsServiceECIUser?: boolean;
    PermissionsServiceExcellenceCompUser?: boolean;
    PermissionsServiceExcellencePlatformUser?: boolean;
    PermissionsShareAnalyticsImages?: boolean;
    PermissionsShareFilesWithNetworks?: boolean;
    PermissionsShareInternalArticles?: boolean;
    PermissionsShareSmartDataDiscoveryStory?: boolean;
    PermissionsShieldKeyBrokerHubAppUser?: boolean;
    PermissionsShowCompanyNameAsUserBadge?: boolean;
    PermissionsShowPreWorkBrief?: boolean;
    PermissionsSimpleCsvDataImportUser?: boolean;
    PermissionsSkipIdentityConfirmation?: boolean;
    PermissionsSkypeConversation?: boolean;
    PermissionsSlackAppAdministrator?: boolean;
    PermissionsSlackCibUser?: boolean;
    PermissionsSlackRecordChannels?: boolean;
    PermissionsSlackSalesUser?: boolean;
    PermissionsSlackServiceUser?: boolean;
    PermissionsSmartDataDiscoveryForCommunity?: boolean;
    PermissionsSmsAs2faUserPerm?: boolean;
    PermissionsSolutionImport?: boolean;
    PermissionsSonicConsumer?: boolean;
    PermissionsSparkConversation?: boolean;
    PermissionsStageManagementDesignUser?: boolean;
    PermissionsStdAutomaticActivityCapture?: boolean;
    PermissionsStoryOnDSWithPredicate?: boolean;
    PermissionsStudentCommunityPages?: boolean;
    PermissionsSubmitMacrosAllowed?: boolean;
    PermissionsSubmitOrder?: boolean;
    PermissionsSubmitOrder2?: boolean;
    PermissionsSubscrMgmtOrderItemToAssetUser?: boolean;
    PermissionsSubscrMgmtOrderToAssetUser?: boolean;
    PermissionsSubscrMgmtPymtSchedAutomation?: boolean;
    PermissionsSubscrMgmtRefundAutomation?: boolean;
    PermissionsSubscribeDashboardRolesGrps?: boolean;
    PermissionsSubscribeDashboardToOtherUsers?: boolean;
    PermissionsSubscribeReportRolesGrps?: boolean;
    PermissionsSubscribeReportToOtherUsers?: boolean;
    PermissionsSubscribeReportsRunAsUser?: boolean;
    PermissionsSubscribeToLightningDashboards?: boolean;
    PermissionsSubscribeToLightningReports?: boolean;
    PermissionsSubscriptionManagementUser?: boolean;
    PermissionsSummarizationUser?: boolean;
    PermissionsSustainabilityUserPermission?: boolean;
    PermissionsTagManager?: boolean;
    PermissionsTakePartnerProgram?: boolean;
    PermissionsTearSheetUserAccess?: boolean;
    PermissionsTestEnvironmentSetupAccess?: boolean;
    PermissionsTestExecutionAccess?: boolean;
    PermissionsTestInstanceCreate?: boolean;
    PermissionsTestPlanCreationAccess?: boolean;
    PermissionsTestSchedulerAccess?: boolean;
    PermissionsTraceXdsQueries?: boolean;
    PermissionsTrailheadSync?: boolean;
    PermissionsTransactionSecurityExempt?: boolean;
    PermissionsTransactionalEmailSend?: boolean;
    PermissionsTransferAnyCase?: boolean;
    PermissionsTransferAnyEntity?: boolean;
    PermissionsTransferAnyLead?: boolean;
    PermissionsTwoFactorApi?: boolean;
    PermissionsUMAStandaloneUserPerm?: boolean;
    PermissionsUmaEditConsentSettings?: boolean;
    PermissionsUmaQueryCMSEmailContent?: boolean;
    PermissionsUnderwriterUser?: boolean;
    PermissionsUnifiedHealthScoringUser?: boolean;
    PermissionsUnrestrictedLogin?: boolean;
    PermissionsUpdateDEIAnalyticsApp?: boolean;
    PermissionsUpdateNetZeroAnalyticsApp?: boolean;
    PermissionsUpdateReportTypeReferences?: boolean;
    PermissionsUpdateWithInactiveOwner?: boolean;
    PermissionsUpldNetZeroAnlytBusMetricsData?: boolean;
    PermissionsUpldNetZeroAnlytEfcyFctorData?: boolean;
    PermissionsUpldNetZeroAnlytInitSavData?: boolean;
    PermissionsUpldNetZeroAnlytRenewableData?: boolean;
    PermissionsUploadDEIAnalyticsData?: boolean;
    PermissionsUsageServiceEnabled?: boolean;
    PermissionsUseAddOrderItemSummaryAPIs?: boolean;
    PermissionsUseAnyApiClient?: boolean;
    PermissionsUseAssistantDialog?: boolean;
    PermissionsUseAutoSchedulerInExprcCloud?: boolean;
    PermissionsUseAutomotiveAnalytics?: boolean;
    PermissionsUseCGAnalytics?: boolean;
    PermissionsUseCLMAnalytics?: boolean;
    PermissionsUseClientQueryExecution?: boolean;
    PermissionsUseCommsB2CBusinessProcesses?: boolean;
    PermissionsUseCommsB2cServiceConsole?: boolean;
    PermissionsUseCompliantDataSharing?: boolean;
    PermissionsUseCrisisSuptCtrMgmtExprcCloud?: boolean;
    PermissionsUseCriteriaBasedSearchFilter?: boolean;
    PermissionsUseCustomerExperienceAnalytics?: boolean;
    PermissionsUseEAForB2BMarketing?: boolean;
    PermissionsUseERMAnalytics?: boolean;
    PermissionsUseEUCCore?: boolean;
    PermissionsUseEducationAnalytics?: boolean;
    PermissionsUseEducationCloudComp?: boolean;
    PermissionsUseExchangesAPIs?: boolean;
    PermissionsUseExperienceCloudInAuto?: boolean;
    PermissionsUseFSCAnalytics?: boolean;
    PermissionsUseFleetMngmntFeatures?: boolean;
    PermissionsUseFleetMngmntInExprncCloud?: boolean;
    PermissionsUseFulfillmentAPIs?: boolean;
    PermissionsUseGrantsManagement?: boolean;
    PermissionsUseHealthCareAnalytics?: boolean;
    PermissionsUseIndustriesAutomotive?: boolean;
    PermissionsUseIndustriesFieldService?: boolean;
    PermissionsUseLeadMgmtInExperienceCloud?: boolean;
    PermissionsUseLoyaltyAnalytics?: boolean;
    PermissionsUseManufacturingAnalytics?: boolean;
    PermissionsUseMediaAnalytics?: boolean;
    PermissionsUseMfgAccountForecast?: boolean;
    PermissionsUseMfgAcctMgrTargets?: boolean;
    PermissionsUseMfgAdvAccountForecast?: boolean;
    PermissionsUseMfgAdvAcctForecastCmty?: boolean;
    PermissionsUseMfgPartnerLeadMgmt?: boolean;
    PermissionsUseMfgPartnerPerfMgmt?: boolean;
    PermissionsUseMfgPartnerVisitMgmt?: boolean;
    PermissionsUseMfgProgram?: boolean;
    PermissionsUseMfgRebates?: boolean;
    PermissionsUseMfgRebatesCmty?: boolean;
    PermissionsUseMfgSalesAgreements?: boolean;
    PermissionsUseMfgSalesAgreementsCmty?: boolean;
    PermissionsUseMfgServiceConsole?: boolean;
    PermissionsUseMySearch?: boolean;
    PermissionsUseNonProfitIntelligence?: boolean;
    PermissionsUseOMAnalytics?: boolean;
    PermissionsUseOmnichannelInventoryAPIs?: boolean;
    PermissionsUseOrderEntry?: boolean;
    PermissionsUseOrderManagementAPIs?: boolean;
    PermissionsUseOrderSummaryCreateAPI?: boolean;
    PermissionsUsePricingFeatrSlsAgr?: boolean;
    PermissionsUsePricingFeatrSlsAgrExprc?: boolean;
    PermissionsUseProdtCtlgForSlsAgrExprc?: boolean;
    PermissionsUseProductCatalogForSlsAgr?: boolean;
    PermissionsUsePrtnrPerfInExperienceCloud?: boolean;
    PermissionsUseQuerySuggestions?: boolean;
    PermissionsUseRegisterGuestBuyerAPI?: boolean;
    PermissionsUseRepricing?: boolean;
    PermissionsUseReturnOrder?: boolean;
    PermissionsUseReturnOrderAPIs?: boolean;
    PermissionsUseSalesforceEngage?: boolean;
    PermissionsUseSchedulerForAutomotive?: boolean;
    PermissionsUseServiceIntelligence?: boolean;
    PermissionsUseShipAndDebit?: boolean;
    PermissionsUseShipAndDebitCmty?: boolean;
    PermissionsUseShipment?: boolean;
    PermissionsUseSmartDataDiscovery?: boolean;
    PermissionsUseSmartDataDiscoveryApi?: boolean;
    PermissionsUseSubscriptionEmails?: boolean;
    PermissionsUseSvcCatalog?: boolean;
    PermissionsUseTCRMforComms?: boolean;
    PermissionsUseTCRMforEandU?: boolean;
    PermissionsUseTCRMforSustainability?: boolean;
    PermissionsUseTPMRevenuePrediction?: boolean;
    PermissionsUseTeamReassignWizards?: boolean;
    PermissionsUseTemplatedApp?: boolean;
    PermissionsUseTemplatedIntelApp?: boolean;
    PermissionsUseVehicleAssetFinance?: boolean;
    PermissionsUseVehicleAssetFinanceExprc?: boolean;
    PermissionsUseVisitMgmtInExperienceCloud?: boolean;
    PermissionsUseWarrantyLifecycleMgmt?: boolean;
    PermissionsUseWebLink?: boolean;
    PermissionsUserCanAccessNLPResult?: boolean;
    PermissionsUserCanPerformNLPOperation?: boolean;
    PermissionsUserHasEAndUProgramAccess?: boolean;
    PermissionsUserHasUsageImpactAccess?: boolean;
    PermissionsUserHasWorkReportAccess?: boolean;
    PermissionsUserManagementAdmin?: boolean;
    PermissionsUserManagementBasic?: boolean;
    PermissionsUserSites?: boolean;
    PermissionsUserSlackCapabilities?: boolean;
    PermissionsUtilMgmtExperienceCloudUser?: boolean;
    PermissionsUtilMgmtProviderExprcCloudUser?: boolean;
    PermissionsUtilizationMgmtProviderUser?: boolean;
    PermissionsValidateYubiKeyToken?: boolean;
    PermissionsVideoCallsUserAccess?: boolean;
    PermissionsVideoConferenceMeetUser?: boolean;
    PermissionsVideoConferenceTeamsUser?: boolean;
    PermissionsVideoConferenceZoomUser?: boolean;
    PermissionsViewAllActivities?: boolean;
    PermissionsViewAllCustomSettings?: boolean;
    PermissionsViewAllData?: boolean;
    PermissionsViewAllForecasts?: boolean;
    PermissionsViewAllForeignKeyNames?: boolean;
    PermissionsViewAllNonSetupFlows?: boolean;
    PermissionsViewAllProfiles?: boolean;
    PermissionsViewAllUsers?: boolean;
    PermissionsViewAnomalyEvents?: boolean;
    PermissionsViewApexLimitEvents?: boolean;
    PermissionsViewCaseInteraction?: boolean;
    PermissionsViewClientSecret?: boolean;
    PermissionsViewConsentAuditTrail?: boolean;
    PermissionsViewContent?: boolean;
    PermissionsViewContentTaxonomy?: boolean;
    PermissionsViewCustomerSentiment?: boolean;
    PermissionsViewDataAssessment?: boolean;
    PermissionsViewDataCategories?: boolean;
    PermissionsViewDataLeakageEvents?: boolean;
    PermissionsViewDeveloperName?: boolean;
    PermissionsViewDevices?: boolean;
    PermissionsViewEmailMessagingSetup?: boolean;
    PermissionsViewEncryptedData?: boolean;
    PermissionsViewEventLogFiles?: boolean;
    PermissionsViewForecastingPredictive?: boolean;
    PermissionsViewGlobalHeader?: boolean;
    PermissionsViewHealthCheck?: boolean;
    PermissionsViewHelpLink?: boolean;
    PermissionsViewInAppGuidanceForSites?: boolean;
    PermissionsViewMLModels?: boolean;
    PermissionsViewMyTeamsDashboards?: boolean;
    PermissionsViewNonSetupFlow?: boolean;
    PermissionsViewOnlyEmbeddedAppUser?: boolean;
    PermissionsViewPayments?: boolean;
    PermissionsViewPlatformEvents?: boolean;
    PermissionsViewPrivateStaticResources?: boolean;
    PermissionsViewProductCatalogObjects?: boolean;
    PermissionsViewPublicDashboards?: boolean;
    PermissionsViewPublicEnhancedTemplate?: boolean;
    PermissionsViewPublicFiles?: boolean;
    PermissionsViewPublicReports?: boolean;
    PermissionsViewRestrictionAndScopingRules?: boolean;
    PermissionsViewRoles?: boolean;
    PermissionsViewSMSMessagingSetup?: boolean;
    PermissionsViewSalesPlan?: boolean;
    PermissionsViewSecurityCommandCenter?: boolean;
    PermissionsViewSetup?: boolean;
    PermissionsViewShiftSchedulingResults?: boolean;
    PermissionsViewTopics?: boolean;
    PermissionsViewTrustMeasures?: boolean;
    PermissionsViewUserPII?: boolean;
    PermissionsViewWhatsAppMessagingSetup?: boolean;
    PermissionsViewWorkForecastingResult?: boolean;
    PermissionsViewWorkScheduling?: boolean;
    PermissionsVoiceCoach?: boolean;
    PermissionsVoiceInbound?: boolean;
    PermissionsVoiceMinutes?: boolean;
    PermissionsVoiceOutbound?: boolean;
    PermissionsVoiceWrapUpUser?: boolean;
    PermissionsVoidInvoiceAPIUser?: boolean;
    PermissionsVolunteerMgmtUserAccess?: boolean;
    PermissionsWalkthroughAuthoring?: boolean;
    PermissionsWaveCommunityUser?: boolean;
    PermissionsWaveManagePrivateAssetsUser?: boolean;
    PermissionsWaveTabularDownload?: boolean;
    PermissionsWaveTrendReports?: boolean;
    PermissionsWebExMeetings?: boolean;
    PermissionsWorkCalibrationUser?: boolean;
    PermissionsWorkDotComUserPerm?: boolean;
    PermissionsWorkplaceCommandCenter?: boolean;
    PermissionsWriteCrossOrgUsages?: boolean;
    SystemModstamp?: Date;
}

export type MyDomainSettings = MetadataForSettings & sObject &  {
    CanOnlyLoginWithMyDomainUrl?: boolean;
    DoesApiLoginRequireOrgDomain?: boolean;
    DoesWarnOnForceComRedirect?: boolean;
    DoesWarnOnRedirect?: boolean;
    DomainPartition?: OrgDomainShard;
    DurableId?: string;
    FullName?: string;
    InstancedUrlRedirectHandling?: OrgDomainRedirectOption;
    IsEdgeDuringRolloutEnabled?: boolean;
    IsNativeBrowserForAuthOnAndroidEnabled?: boolean;
    IsNativeBrowserForAuthOnIosEnabled?: boolean;
    IsShareBrowserSessionAndroidForAuthEnabled?: boolean;
    IsShareBrowserSessionIosForAuthEnabled?: boolean;
    LogRedirections?: boolean;
    Metadata?: MyDomainSettings;
    MyDomainName?: string;
    MyDomainSuffix?: OrgDomainProdSuffix;
    RedirectForceComSiteUrls?: boolean;
    RedirectPriorMyDomain?: boolean;
    Use3rdPartyCookieBlockingCompatibleHostnames?: boolean;
    UseEdge?: boolean;
    UseEnhancedDomainsInSandbox?: boolean;
    UseStabilizedMyDomainHostnames?: boolean;
    UseStabilizedSandboxMyDomainHostnames?: boolean;
}

export type Name = sObject &  {
    AddressableName?: string;
    Alias?: string;
    CommunityNickname?: string;
    CompanyName?: string;
    DeveloperName?: string;
    Email?: string;
    FirstName?: string;
    InformalName?: string;
    IsActive?: boolean;
    IsArchived?: boolean;
    IsDeleted?: boolean;
    LastName?: string;
    LastReferencedDate?: Date;
    LastViewedDate?: Date;
    MiddleName?: string;
    Name?: string;
    NameOrAlias?: string;
    NamespacePrefix?: string;
    OwnerType?: string;
    Phone?: string;
    Profile?: Profile;
    ProfileId?: ID;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    Subtype?: string;
    Suffix?: string;
    TableEnumOrId?: string;
    Title?: string;
    Type?: string;
    UserRole?: UserRole;
    UserRoleId?: ID;
    Username?: string;
}

export type NameSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsInformalNameEnabled?: boolean;
    IsMiddleNameEnabled?: boolean;
    IsNameSuffixEnabled?: boolean;
    Metadata?: NameSettings;
}

export type NamedCredential = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AuthProviderId?: ID;
    AuthTokenEndpointUrl?: string;
    AwsAccessKey?: string;
    AwsAccessSecret?: string;
    AwsRegion?: string;
    AwsService?: string;
    CalloutStatus?: CalloutStatus;
    Certificate?: Certificate;
    CertificateId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomHttpHeaders?: QueryResult;
    DeveloperName?: string;
    Endpoint?: string;
    FullName?: string;
    IsDeleted?: boolean;
    JwtAudience?: string;
    JwtFormulaSubject?: string;
    JwtIssuer?: string;
    JwtSigningCertificate?: Certificate;
    JwtSigningCertificateId?: ID;
    JwtTextSubject?: string;
    JwtValidityPeriodSeconds?: number;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: NamedCredential;
    ModuleNamespace?: string;
    NamedCredentialParameters?: QueryResult;
    NamedCredentialType?: NamedCredentialType;
    NamespacePrefix?: string;
    OauthRefreshToken?: string;
    OauthScope?: string;
    OauthToken?: string;
    OutboundNetworkConnection?: OutboundNetworkConnection;
    OutboundNetworkConnectionId?: ID;
    Password?: string;
    PrincipalType?: ExternalPrincipalType;
    Protocol?: AuthenticationProtocol;
    SystemModstamp?: Date;
    Username?: string;
}

export type NamedCredentialParameter =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    Certificate?: Certificate;
    CertificateId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    ExternalCredential?: ExternalCredential;
    ExternalCredentialId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    OutboundNetworkConnection?: OutboundNetworkConnection;
    OutboundNetworkConnectionId?: ID;
    ParameterName?: string;
    ParameterType?: NamedCredentialParamType;
    ParameterValue?: string;
    SequenceNumber?: number;
    SystemModstamp?: Date;
}

export type LookupFilter =  & sObject &  {
    Active?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsOptional?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: LookupFilter;
    NamespacePrefix?: string;
    SourceFieldDefinition?: FieldDefinition;
    SourceFieldDefinitionId?: string;
    SourceObject?: string;
    TargetEntityDefinition?: EntityDefinition;
    TargetEntityDefinitionId?: string;
}

export type NavigationMenu = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: NavigationMenu;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type NetworkAccess =  & sObject &  {
    DurableId?: string;
}

export type NotificationsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsActvityReminderBrowserNotifsEnabled?: boolean;
    IsMobileAppPushNotificationsEnabled?: boolean;
    IsNotificationsEnabled?: boolean;
    Metadata?: NotificationsSettings;
}

export type OauthOidcSettings = MetadataForSettings & sObject &  {
    BlockOauthUnPwFlow?: boolean;
    BlockOauthUsrAgtFlow?: boolean;
    DurableId?: string;
    FullName?: string;
    IsPkceRequired?: boolean;
    Metadata?: OauthOidcSettings;
    OauthCdCrdtFlowEnable?: boolean;
}

export type ObjectHierarchyRelationship = Metadata & sObject &  {
    ChildObjectMapping?: ObjectMapping;
    ChildObjectMappingId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    InputObjRecordsGrpFieldName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MappingType?: ObjHierarchyMappingType;
    MasterLabel?: string;
    Metadata?: ObjectHierarchyRelationship;
    ModuleNamespace?: string;
    OutputPntRelationshipFieldName?: string;
    ParentObjectMapping?: ObjectMapping;
    ParentObjectMappingId?: ID;
    ParentRecord?: ObjectHierarchyRelationship;
    ParentRecordId?: ID;
    ParentRelationshipFieldName?: string;
    SourceReferenceRelaFieldName?: string;
    SystemModstamp?: Date;
    UsageType?: MappingUsageType;
}

export type ObjectLinkingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsObjectLinkingEnabled?: boolean;
    Metadata?: ObjectLinkingSettings;
}

export type ObjectMapping =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DuplicateJobMatchingRuleDefinitions?: QueryResult;
    InputObject?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectMappings?: QueryResult;
    OutputObject?: string;
    SystemModstamp?: Date;
}

export type ObjectMappingField =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InputField?: string;
    InputLookupObject?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    ObjectMapping?: ObjectMapping;
    ObjectMappingId?: ID;
    OutputField?: string;
    OutputLookupObject?: string;
    SystemModstamp?: Date;
}

export type ObjectSearchSetting =  & sObject &  {
    DurableId?: string;
    EnhancedLookupEnabled?: boolean;
    LookupAutoCompleteEnabled?: boolean;
    Name?: string;
    ResultsPerPageCount?: number;
}

export type OcrSampleDocument = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApplicationType?: OcrApplicationType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DocumentHeight?: number;
    DocumentSignature?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OcrSampleDocument;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type OcrSampleDocumentField =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CellColumnNumber?: number;
    CellColumnSpanValue?: number;
    CellRowNumber?: number;
    CellRowSpanValue?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FieldLabelMaxX?: number;
    FieldLabelMaxY?: number;
    FieldLabelMinX?: number;
    FieldLabelMinY?: number;
    FieldValueMaxX?: number;
    FieldValueMaxY?: number;
    FieldValueMinX?: number;
    FieldValueMinY?: number;
    FieldValueName?: string;
    IsAutoExtracted?: boolean;
    IsDeleted?: boolean;
    ItemType?: ItemType;
    KeyContent?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    OcrSampleDocument?: OcrSampleDocument;
    OcrSampleDocumentId?: ID;
    OcrSampleDocumentPage?: OcrSampleDocumentPage;
    OcrSampleDocumentPageId?: ID;
    OcrSampleDocumentPageItem?: OcrSampleDocumentPageItem;
    OcrSampleDocumentPageItemId?: ID;
    SystemModstamp?: Date;
}

export type OcrSampleDocumentPage =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    OcrSampleDocument?: OcrSampleDocument;
    OcrSampleDocumentId?: ID;
    PageHeight?: number;
    PageNumber?: number;
    PageSignature?: string;
    SystemModstamp?: Date;
}

export type OcrSampleDocumentPageItem =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    HasHeader?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    OcrSampleDocumentPage?: OcrSampleDocumentPage;
    OcrSampleDocumentPageId?: ID;
    SequenceNumber?: number;
    SystemModstamp?: Date;
    Title?: string;
    Type?: ItemType;
}

export type OcrTargetObjFieldMapping =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsActive?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    OcrSampleDocField?: OcrSampleDocumentField;
    OcrSampleDocFieldId?: ID;
    OcrTargetObject?: OcrTargetObject;
    OcrTargetObjectId?: ID;
    SystemModstamp?: Date;
    TargetField?: string;
    Type?: OcrMappingType;
}

export type OcrTargetObject =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    OcrTemplate?: OcrTemplate;
    OcrTemplateId?: ID;
    SystemModstamp?: Date;
    TargetObject?: string;
    TargetObjectRecordType?: string;
    TargetObjectSequence?: number;
}

export type OcrTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OcrTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OcrTemplateTargetObjectDetails?: QueryResult;
    PageCount?: number;
    SystemModstamp?: Date;
    TemplateName?: string;
}

export type OcrTemplateSampleDocument =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    OcrSampleDocument?: OcrSampleDocument;
    OcrSampleDocumentId?: ID;
    OcrTemplate?: OcrTemplate;
    OcrTemplateId?: ID;
    SystemModstamp?: Date;
}

export type OmniChannelPricingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsOmniChannelPricingEnabled?: boolean;
    Metadata?: OmniChannelPricingSettings;
}

export type OmniDataTransformConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: OmniDataTransform;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type OmniExtTrackingDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExtTrackingConfigDefs?: QueryResult;
    Fullname?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OmniExtTrackingDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OmniExtTrackingDefKey?: string;
    OmniExtTrackingDefs?: QueryResult;
    SystemModstamp?: Date;
    TrackingFrameworkInformation?: string;
    TrackingServiceProvider?: ExternalTrackingVendor;
}

export type OmniExtTrackingEventDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ComponentType?: OmniAnalyticsComponentType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Fullname?: string;
    InclusionRule?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OmniExtTrackingEventDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OmniExtTrackingDef?: OmniExtTrackingDef;
    OmniExtTrackingDefId?: ID;
    OmniExtTrackingEventDefKey?: string;
    PayloadTemplate?: string;
    SystemModstamp?: Date;
}

export type OmniIntegrationProcConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: OmniIntegrationProcedure;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type OmniInteractionAccessConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConfigName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsAsyncCardCachingEnabled?: boolean;
    IsCardApexRemoteDisabled?: boolean;
    IsCardCacheDisabled?: boolean;
    IsCardDataTfrmDisabled?: boolean;
    IsCardIntegrationProcDisabled?: boolean;
    IsCardRestApiDisabled?: boolean;
    IsCardSoqlDisabled?: boolean;
    IsCardSoslDisabled?: boolean;
    IsCardStreamingApiDisabled?: boolean;
    IsDataTfrmEncrpFieldsDisabled?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OmniInteractionAccessConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SetupOwner?: sObject;
    SetupOwnerId?: ID;
    SystemModstamp?: Date;
}

export type OmniInteractionConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OmniInteractionConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Value?: string;
}

export type OmniScriptConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: OmniScript;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type OmniSupervisorConfig = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsTimelineHidden?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: OmniSupervisorConfig;
    ModuleNamespace?: string;
    SkillVisibility?: OmniSuperSkillVisibilityType;
    SystemModstamp?: Date;
}

export type OmniTrackingComponentDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ComponentType?: OmniAnalyticsComponentType;
    ComponentVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OmniTrackingComponentDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OmniTrackingComponentDefKey?: string;
    OmniTrackingGroup?: OmniTrackingGroup;
    OmniTrackingGroupId?: ID;
    SystemModstamp?: Date;
}

export type OmniTrackingGroup = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EndDate?: Date;
    Fullname?: string;
    GroupType?: OmniTrackingGroupType;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MaxAgeInDays?: number;
    Metadata?: OmniTrackingGroup;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OmniExtTrackingDef?: OmniExtTrackingDef;
    OmniExtTrackingDefId?: ID;
    OmniTrackingGroupKey?: string;
    OmniTrackingGroups?: QueryResult;
    StartDate?: Date;
    SystemModstamp?: Date;
}

export type OmniUiCardConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: OmniUiCard;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type OnlineSalesSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsSubscriptionAppEnrolledEnabled?: boolean;
    Metadata?: OnlineSalesSettings;
}

export type OperationLog = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DetailedStatus?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Message?: string;
    Parameters?: OperationParameters;
    Status?: OperationStatus;
    SystemModstamp?: Date;
    Type?: OperationType;
}

export type OpportunityListFieldsLabelMapping =  & sObject &  {
    DurableId?: string;
    Field?: string;
    Label?: string;
}

export type OpportunityListFieldsSelectedSettings =  & sObject &  {
    DurableId?: string;
    Field?: string;
}

export type OpportunityListFieldsUnselectedSettings =  & sObject &  {
    DurableId?: string;
    Field?: string;
}

export type OpportunityScoreSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsOpportunityScoringEnabled?: boolean;
    Metadata?: OpportunityScoreSettings;
}

export type OpportunitySettings = MetadataForSettings & sObject &  {
    AutoActivateNewReminders?: boolean;
    CustomizableProductSchedulesEnabled?: boolean;
    DoesEnforceStandardOpportunitySaveLogic?: boolean;
    DurableId?: string;
    FindSimilarOppFilter?: FindSimilarOppFilter;
    FindSimilarOppFilterId?: string;
    FullName?: string;
    IsExpandedPipelineInspectionSetupEnabled?: boolean;
    IsFindSimilarOpportunitiesEnabled?: boolean;
    IsForecastCategoryMetricsEnabled?: boolean;
    IsOpportunityFieldHistoryTrackingEnabled?: boolean;
    IsOpportunityInsightsInMobileEnabled?: boolean;
    IsOpportunityTeamEnabled?: boolean;
    IsPipelineChangesMetricsEnabled?: boolean;
    IsPipelineInspectionEnabled?: boolean;
    IsPipelineInspectionFlowEnabled?: boolean;
    IsPipelineInspectionSingleCategoryRollupEnabled?: boolean;
    IsRevenueInsightsEnabled?: boolean;
    IsServiceCaseInsightsEnabled?: boolean;
    IsUpdateRemindersEnabled?: boolean;
    Metadata?: OpportunitySettings;
    OppAmountDealMotionEnabled?: boolean;
    OppCloseDateDealMotionEnabled?: boolean;
    PromptToAddProducts?: boolean;
    PushCountEnabled?: boolean;
    SimpleOppCreateFromContact?: boolean;
    SimpleOppCreateFromEvent?: boolean;
}

export type OpportunitySplitType = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsTotalValidated?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OpptyLineItemSplitTypes?: QueryResult;
    SplitDataStatus?: SplitDataStatus;
    SplitEntity?: string;
    SplitField?: string;
    SystemModstamp?: Date;
}

export type OpptyLineItemSplitType = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsTotalValidated?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OpportunitySplitType?: OpportunitySplitType;
    OpportunitySplitTypeId?: ID;
    SplitDataStatus?: SplitDataStatus;
    SplitEntity?: string;
    SplitField?: string;
    SystemModstamp?: Date;
}

export type OrderManagementSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IngestOrdersAtScale?: boolean;
    InitOmAutomation?: boolean;
    IsB2ChighScaleOrdersEnabled?: boolean;
    IsB2CintegrationEnabled?: boolean;
    IsDuplicateManagementEnabled?: boolean;
    IsHighScaleOrdersEnabled?: boolean;
    IsIndividualOrderItemTaxAdjustmentsEnabled?: boolean;
    IsOmAutomationEnabled?: boolean;
    IsOrderManagementEnabled?: boolean;
    IsPersonAccountsForShoppersEnabled?: boolean;
    Metadata?: OrderManagementSettings;
    OrgHasCommerceB2BpromotionsEnabled?: boolean;
    OrgHasHighScaleOrdersEnabledForB2Cintegration?: boolean;
    RepricingEnabled?: boolean;
}

export type OrderSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEnhancedCommerceOrdersEnabled?: boolean;
    IsNegativeQuantityEnabled?: boolean;
    IsOptionalPricebookEnabled?: boolean;
    IsOrderEventsEnabled?: boolean;
    IsOrderWithMultiplePriceBooksEnabled?: boolean;
    IsOrdersEnabled?: boolean;
    IsReductionOrdersEnabled?: boolean;
    IsZeroQuantityEnabled?: boolean;
    Metadata?: OrderSettings;
}

export type OrgDomainLog = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DomainPartition?: OrgDomainShard;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MyDomainName?: string;
    ProdSuffixType?: OrgDomainProdSuffix;
    SystemModstamp?: Date;
}

export type OrgSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCustomerSuccessPortalEnabled?: boolean;
    IsIncludeContractStatusEnabled?: boolean;
    IsMakeDeploymentsMandatoryEnabled?: boolean;
    IsManageSelfServiceUsersEnabled?: boolean;
    IsOrgFeedSentimentAnalysisEnabled?: boolean;
    IsRaDeploymentAttributeOnlyEnabled?: boolean;
    IsResetDivisionOnLoginEnabled?: boolean;
    Metadata?: OrgSettings;
}

export type OrgWideEmailAddress = sObject &  {
    Address?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayName?: string;
    IsAllowAllProfiles?: boolean;
    IsVerified?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Purpose?: OrgWideEmailAddressPurpose;
    SystemModstamp?: Date;
}

export type OutboundNetworkConnProperty =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OutboundNetworkConnection?: OutboundNetworkConnection;
    OutboundNetworkConnectionId?: ID;
    PropertyName?: OutboundConnPropertyName;
    PropertyValue?: string;
    SystemModstamp?: Date;
}

export type OutboundNetworkConnection = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConnectionType?: ExternalConnectionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: OutboundNetworkConnection;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OutboundNetworkConnProperties?: QueryResult;
    Status?: ExternalConnectionStatus;
    SystemModstamp?: Date;
}

export type OverridableEntities = sObject &  {
    Action?: string;
    DurableId?: string;
    FormFactor?: FormFactor;
    PageOrSobjectType?: string;
    SobjectType?: EntityDefinition;
    SobjectTypeId?: string;
    Type?: ActionOverrideType;
}

export type OwnerChangeOptionInfo = sObject &  {
    ChildOwnerChangeOptionInfo?: QueryResult;
    DefaultValue?: boolean;
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    IsEditable?: boolean;
    Label?: string;
    Name?: string;
    Parent?: OwnerChangeOptionInfo;
    ParentId?: string;
}

export type Package2 = sObject &  {
    AppAnalyticsEnabled?: boolean;
    ContainerOptions?: Package2ContainerOptions;
    ConvertedFromPackage?: SubscriberPackage;
    ConvertedFromPackageId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataCloudPackage?: boolean;
    Description?: string;
    IsDeleted?: boolean;
    IsDeprecated?: boolean;
    IsOrgDependent?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Name?: string;
    NamespacePrefix?: string;
    Package2VersionCreateRequests?: QueryResult;
    Package2Versions?: QueryResult;
    PackageErrorUsername?: string;
    SubscriberPackage?: SubscriberPackage;
    SubscriberPackageId?: ID;
    SystemModstamp?: Date;
    WasTransferred?: boolean;
}

export type Package2Member = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrentPackageVersion?: SubscriberPackageVersion;
    CurrentPackageVersionId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MaxPackageVersion?: SubscriberPackageVersion;
    MaxPackageVersionId?: ID;
    MinPackageVersion?: SubscriberPackageVersion;
    MinPackageVersionId?: ID;
    Subject?: sObject;
    SubjectId?: ID;
    SubjectKeyPrefix?: string;
    SubjectManageableState?: ManageableState;
    SubscriberPackage?: SubscriberPackage;
    SubscriberPackageId?: ID;
    SystemModstamp?: Date;
}

export type Package2TransferRequest = sObject &  {
    AllPackage?: AllPackage;
    AllPackageId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DestinationDevHubId?: ID;
    ErrorMessage?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SourceDevHubId?: ID;
    Stage?: Package2TransferStage;
    SystemModstamp?: Date;
    ValidateOnly?: boolean;
}

export type Package2UpgradeExport = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExpirationDate?: Date;
    ExportContent?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SubscriberPackage?: SubscriberPackage;
    SubscriberPackageId?: ID;
    SubscriberPackageVersion?: SubscriberPackageVersion;
    SubscriberPackageVersionId?: ID;
    SystemModstamp?: Date;
}

export type Package2Version = sObject &  {
    Ancestor?: SubscriberPackageVersion;
    AncestorId?: ID;
    Branch?: string;
    BuildDurationInSeconds?: number;
    BuildNumber?: number;
    CodeCoverage?: Package2VersionCodeCoverage;
    CodeCoveragePercentages?: Package2VersionCodeCoveragePercentages;
    ConvertedFromVersion?: SubscriberPackageVersion;
    ConvertedFromVersionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    HasMetadataRemoved?: boolean;
    HasPassedCodeCoverageCheck?: boolean;
    InstallKey?: string;
    IsDeleted?: boolean;
    IsDeprecated?: boolean;
    IsPasswordProtected?: boolean;
    IsReleased?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MajorVersion?: number;
    MinorVersion?: number;
    Name?: string;
    Package2?: Package2;
    Package2Id?: ID;
    PatchVersion?: number;
    ReleaseVersion?: number;
    SnapshotName?: string;
    SubscriberPackageVersion?: SubscriberPackageVersion;
    SubscriberPackageVersionId?: ID;
    SystemModstamp?: Date;
    Tag?: string;
    ValidationSkipped?: boolean;
}

export type Package2VersionBuildRequest = sObject &  {
    AncestorPackageVersion?: SubscriberPackageVersion;
    AncestorPackageVersionId?: ID;
    AsyncDeployOtherReqFfx?: DeployRequest;
    AsyncDeployOtherReqFfxId?: ID;
    AsyncDeployRequestFfx?: DeployRequest;
    AsyncDeployRequestFfxId?: ID;
    AsyncDeploySeedReqFfx?: DeployRequest;
    AsyncDeploySeedReqFfxId?: ID;
    AsyncDeployTestReqFfx?: DeployRequest;
    AsyncDeployTestReqFfxId?: ID;
    AsyncRetrieveRequestFfxId?: ID;
    AsyncSettingsRequestFfx?: DeployRequest;
    AsyncSettingsRequestFfxId?: ID;
    CalculateCodeCoverage?: boolean;
    ContainerOptions?: Package2ContainerOptions;
    ConversionRequest?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    HubOrgId?: ID;
    HubUser?: User;
    HubUserId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Pkg2VersCreateRequest?: Package2VersionCreateRequest;
    Pkg2VersCreateRequestId?: ID;
    PollMaxLockRetryCount?: number;
    PollMaxRetryCount?: number;
    Status?: Package2VersionBuildStatus;
    SubscriberPackage?: SubscriberPackage;
    SubscriberPackageId?: ID;
    SystemModstamp?: Date;
    VersionInfo?: string;
    VersionNumber?: string;
}

export type Package2VersionCreateRequest = sObject &  {
    Branch?: string;
    CalculateCodeCoverage?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InstallKey?: string;
    Instance?: string;
    IsConversionRequest?: boolean;
    IsDeleted?: boolean;
    IsPasswordProtected?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Package2?: Package2;
    Package2Id?: ID;
    Package2Version?: Package2Version;
    Package2VersionCreateRequestErrors?: QueryResult;
    Package2VersionId?: ID;
    SkipValidation?: boolean;
    Status?: Package2VersionCreateRequestStatus;
    SystemModstamp?: Date;
    Tag?: string;
    VersionInfo?: string;
}

export type Package2VersionCreateRequestError = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Message?: string;
    ParentRequest?: Package2VersionCreateRequest;
    ParentRequestId?: ID;
    SystemModstamp?: Date;
}

export type PackageConversion = sObject &  {
    ConvertedFromPackage?: AllPackage;
    ConvertedFromPackageId?: ID;
    ConvertedToPackage?: AllPackage;
    ConvertedToPackageId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DevHubOrgId?: ID;
    EndDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StartDate?: Date;
    SystemModstamp?: Date;
}

export type PackageInstallRequest = sObject &  {
    ApexCompileType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ElasticComputeStatus?: ElasticComputeStatus;
    EnableRss?: boolean;
    Errors?: SubscriberPackageInstallErrors;
    IsDeleted?: boolean;
    IsHighScale?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NameConflictResolution?: PackageNameConflictResolution;
    PackageInstallRequestErrors?: QueryResult;
    PackageInstallSource?: PackageInstallSource;
    Password?: string;
    ProfileMappings?: SubscriberPackageProfileMappings;
    SecurityType?: PackageInstallSecurityType;
    SkipHandlers?: string;
    Status?: PackageInstallRequestStatus;
    SubscriberPackageVersionKey?: string;
    SystemModstamp?: Date;
    UpgradeType?: string;
    ZeroOrgDeployment?: ZeroOrgDeployment;
    ZeroOrgDeploymentId?: ID;
}

export type PackageMember = sObject &  {
    AllPackage?: AllPackage;
    AllPackageId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDerived?: boolean;
    KeyPrefix?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SourceMetadataId?: ID;
    SourceOrgId?: ID;
    SubjectId?: ID;
    SystemModstamp?: Date;
}

export type PackageUploadRequest = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    Errors?: PackageUploadErrors;
    IsDeleted?: boolean;
    IsReleaseVersion?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MajorVersion?: number;
    MetadataPackage?: MetadataPackage;
    MetadataPackageId?: ID;
    MetadataPackageVersion?: MetadataPackageVersion;
    MetadataPackageVersionId?: ID;
    MinorVersion?: number;
    Password?: string;
    PostInstallUrl?: string;
    ReleaseNotesUrl?: string;
    Status?: PackageUploadRequestStatus;
    SystemModstamp?: Date;
    VersionName?: string;
}

export type PackageVersionInstallRequestError = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Message?: string;
    ParentRequest?: PackageInstallRequest;
    ParentRequestId?: ID;
    SystemModstamp?: Date;
}

export type PackageVersionUninstallRequestError = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Message?: string;
    ParentRequest?: SubscriberPackageVersionUninstallRequest;
    ParentRequestId?: ID;
    SystemModstamp?: Date;
}

export type HomePageComponent = Metadata & sObject &  {
    Body?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Height?: number;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Name?: string;
    NamespacePrefix?: string;
    ShowLabel?: boolean;
    ShowScrollbars?: boolean;
}

export type PardotEinsteinSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCampaignInsightEnabled?: boolean;
    IsEngagementScoreEnabled?: boolean;
    Metadata?: PardotEinsteinSettings;
}

export type PardotSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAiEinsteinEngageFreqEnabled?: boolean;
    IsAiOptimizedSendTimeEnabled?: boolean;
    IsB2bmaAppEnabledEnabled?: boolean;
    IsEngagementHistoryDashboardsEnabled?: boolean;
    IsEnhancedProspectCustomFieldsSyncEnabled?: boolean;
    IsPardotAppV1EnabledEnabled?: boolean;
    IsPardotEnabledEnabled?: boolean;
    IsPardotObjectSyncEnabled?: boolean;
    IsProspectActivityDatasetEnabled?: boolean;
    Metadata?: PardotSettings;
}

export type PardotTenant = sObject &  {
    B2BMktCampaignSyncConfigs?: QueryResult;
    CdpEnablementStatus?: CdpEnablementStatus;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationStatus?: PardotTenantStatus;
    DeleteOn?: Date;
    DeveloperName?: string;
    InitialPardotAdmin?: User;
    InitialPardotAdminId?: ID;
    IsDeleted?: boolean;
    IsEinsteinAssistantEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MarketingAppExtAssignments?: QueryResult;
    MasterLabel?: string;
    ModuleNamespace?: string;
    PardotGdotTenantKey?: string;
    PardotTenantAccountType?: PardotTenantAccountType;
    PardotTenantEnvironment?: PardotTenantEnvironment;
    PardotTenantId?: string;
    PardotTenantName?: string;
    PardotTenantStatusCode?: PardotTenantStatusCode;
    SystemModstamp?: Date;
}

export type PartitionLevelScheme = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type PartyDataModelSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAutoSelectIndividualOnMergeEnabled?: boolean;
    IsConsentManagementEnabled?: boolean;
    IsIndividualAutoCreateEnabled?: boolean;
    Metadata?: PartyDataModelSettings;
}

export type PasswordPolicies =  & sObject &  {
    ApiOnlyUserHomePageUrl?: string;
    Complexity?: string;
    DurableId?: string;
    Expiration?: string;
    HistoryRestriction?: string;
    LockoutInterval?: string;
    MaxLoginAttempts?: string;
    MinimumPasswordLength?: string;
    MinimumPasswordLifetime?: boolean;
    ObscureSecretAnswer?: boolean;
    PasswordAssistanceMessage?: string;
    PasswordAssistanceUrl?: string;
    QuestionRestriction?: string;
}

export type PathAssistant = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsMasterRecordType?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: PathAssistant;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PathAssistantStepItems?: QueryResult;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SobjectProcessField?: string;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type PathAssistantSettings = MetadataForSettings & sObject &  {
    CanOverrideAutoPathCollapseWithUserPref?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: PathAssistantSettings;
    PathAssistantEnabled?: boolean;
}

export type PathAssistantStepInfo = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Info?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type PathAssistantStepItem = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    Item?: sObject;
    ItemId?: ID;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PathAssistant?: PathAssistant;
    PathAssistantId?: ID;
    PicklistMaster?: sObject;
    PicklistMasterId?: ID;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SystemModstamp?: Date;
    Type?: PathAssistantStepItemType;
}

export type PaymentGatewayProvider = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApexAdapter?: ApexClass;
    ApexAdapterId?: ID;
    Comments?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IdempotencySupported?: IdempotencySupportStatus;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastViewedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: PaymentGatewayProvider;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type PaymentsManagementEnabledSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    Metadata?: PaymentsManagementEnabledSettings;
    PaymentsManagementEnabled?: boolean;
}

export type PaymentsSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsPaymentsEnabled?: boolean;
    Metadata?: PaymentsSettings;
}

export type PermissionDependency = sObject &  {
    Permission?: string;
    PermissionType?: string;
    RequiredPermission?: string;
    RequiredPermissionType?: string;
}

export type PermissionSet = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Assignments?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    HasActivationRequired?: boolean;
    IsCustom?: boolean;
    IsOwnedByProfile?: boolean;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    License?: sObject;
    LicenseId?: ID;
    ManageableState?: ManageableState;
    Name?: string;
    NamespacePrefix?: string;
    PermissionSetGroup?: PermissionSetGroup;
    PermissionSetGroupComponents?: QueryResult;
    PermissionSetGroupId?: ID;
    PermissionsAECommunityAccess?: boolean;
    PermissionsAICommerceAgentUser?: boolean;
    PermissionsAICreateInsightObjects?: boolean;
    PermissionsAIViewInsightObjects?: boolean;
    PermissionsAccessActivation?: boolean;
    PermissionsAccessApplication?: boolean;
    PermissionsAccessApplicationFormObjects?: boolean;
    PermissionsAccessBudgetManagement?: boolean;
    PermissionsAccessCMC?: boolean;
    PermissionsAccessCdpApp?: boolean;
    PermissionsAccessCdpDataExplorer?: boolean;
    PermissionsAccessCdpProfileExplorer?: boolean;
    PermissionsAccessContentBuilder?: boolean;
    PermissionsAccessCustomerDataCloudSetup?: boolean;
    PermissionsAccessEDCGenerativeAI?: boolean;
    PermissionsAccessEducationCloud?: boolean;
    PermissionsAccessEducationCloudCmty?: boolean;
    PermissionsAccessEducationCloudReview?: boolean;
    PermissionsAccessFinancialAccounts?: boolean;
    PermissionsAccessFundraisingCmty?: boolean;
    PermissionsAccessGeniePlatform?: boolean;
    PermissionsAccessSegment?: boolean;
    PermissionsAccessToComplaintMgmt?: boolean;
    PermissionsAccessToDisputeManagement?: boolean;
    PermissionsAccessToServiceProcess?: boolean;
    PermissionsAccessWalkthroughs?: boolean;
    PermissionsAccessZeroDeployment?: boolean;
    PermissionsAccountAddressManager?: boolean;
    PermissionsAccountSwitcherUser?: boolean;
    PermissionsAccountingJobUser?: boolean;
    PermissionsAccountingSubledgerAdmin?: boolean;
    PermissionsAccountingSubledgerStarterUser?: boolean;
    PermissionsActionPlansUserAccess?: boolean;
    PermissionsActionableListCompUser?: boolean;
    PermissionsActionableListConfigUser?: boolean;
    PermissionsActionableListCreator?: boolean;
    PermissionsActionableListUser?: boolean;
    PermissionsActivateContract?: boolean;
    PermissionsActivateDeactivateNonSetupFlow?: boolean;
    PermissionsActivateOrder?: boolean;
    PermissionsActivateSystemModeFlows?: boolean;
    PermissionsActivitiesAccess?: boolean;
    PermissionsAddAnalyticsRemoteConnections?: boolean;
    PermissionsAddCreaRecElmntToNonSetupFlow?: boolean;
    PermissionsAddDecisionElmntNonSetupFlow?: boolean;
    PermissionsAddDirectMessageMembers?: boolean;
    PermissionsAddUpdtRecElmntToNonSetupFlow?: boolean;
    PermissionsAddWaitToNonSetupFlow?: boolean;
    PermissionsAddWaveNotificationRecipients?: boolean;
    PermissionsAdminAnalyticsUser?: boolean;
    PermissionsAdminProvisioning?: boolean;
    PermissionsAdoptionAnalyticsUser?: boolean;
    PermissionsAdvancedCsvDataImportUser?: boolean;
    PermissionsAdvancedPricingUser?: boolean;
    PermissionsAllowAIAccelerator?: boolean;
    PermissionsAllowBotInboxFeatureAccess?: boolean;
    PermissionsAllowDeleteDandBCompany?: boolean;
    PermissionsAllowERIBasicAccess?: boolean;
    PermissionsAllowERIGrowthAccess?: boolean;
    PermissionsAllowERIStarterAccess?: boolean;
    PermissionsAllowERITwitterAccess?: boolean;
    PermissionsAllowEmailIC?: boolean;
    PermissionsAllowGnrcDisclsFrmwk?: boolean;
    PermissionsAllowHCReferralScoring?: boolean;
    PermissionsAllowIndustriesCSVDataLoading?: boolean;
    PermissionsAllowLightningLogin?: boolean;
    PermissionsAllowMaterialityAssessment?: boolean;
    PermissionsAllowNZCMngEsgPgm?: boolean;
    PermissionsAllowReadDandBCompany?: boolean;
    PermissionsAllowReferralScoring?: boolean;
    PermissionsAllowSCBEI?: boolean;
    PermissionsAllowSCCalcAndLock?: boolean;
    PermissionsAllowSCCarbonAccounting?: boolean;
    PermissionsAllowSCCarbonCreditAlloc?: boolean;
    PermissionsAllowSCCmtyExtEngMgmt?: boolean;
    PermissionsAllowSCCreditSync?: boolean;
    PermissionsAllowSCDGF?: boolean;
    PermissionsAllowSCEmssnsForecasting?: boolean;
    PermissionsAllowSCExpansionUseCase?: boolean;
    PermissionsAllowSCExternalEngMgmt?: boolean;
    PermissionsAllowSCSNGManagement?: boolean;
    PermissionsAllowSCScope3Hub?: boolean;
    PermissionsAllowSCSnGAffiliates?: boolean;
    PermissionsAllowSCTargetSetting?: boolean;
    PermissionsAllowSCWasteManagement?: boolean;
    PermissionsAllowSCWaterManagement?: boolean;
    PermissionsAllowSFDCToAdminOrg?: boolean;
    PermissionsAllowSurveyAdvancedFeatures?: boolean;
    PermissionsAllowSurveyLimitedAdvFeatures?: boolean;
    PermissionsAllowUniversalSearch?: boolean;
    PermissionsAllowViewEditConvertedLeads?: boolean;
    PermissionsAllowViewKnowledge?: boolean;
    PermissionsAllowVisitRecommendation?: boolean;
    PermissionsAlumniCommunityPages?: boolean;
    PermissionsAmendAssets?: boolean;
    PermissionsAnalyticsBackupFileAccess?: boolean;
    PermissionsAnalyticsPublicGalleryUser?: boolean;
    PermissionsAnalyticsQueryServiceConsumer?: boolean;
    PermissionsAnalyticsWatchUser?: boolean;
    PermissionsApexRestServices?: boolean;
    PermissionsApiEnabled?: boolean;
    PermissionsApiImpersonateUser?: boolean;
    PermissionsApiUserOnly?: boolean;
    PermissionsApplicantCommunityPages?: boolean;
    PermissionsAppointmentBookingUserAccess?: boolean;
    PermissionsApproveContract?: boolean;
    PermissionsApproveOrder?: boolean;
    PermissionsAssessmentPlatformUser?: boolean;
    PermissionsAssessmentQuestionGeneration?: boolean;
    PermissionsAssignPermissionSets?: boolean;
    PermissionsAssignPublicGroups?: boolean;
    PermissionsAssignQueues?: boolean;
    PermissionsAssignRoles?: boolean;
    PermissionsAssignTopics?: boolean;
    PermissionsAssignUserToSkill?: boolean;
    PermissionsAssociationEngineUserAccess?: boolean;
    PermissionsAuthorApex?: boolean;
    PermissionsAuthorizePayments?: boolean;
    PermissionsAutomateEmailContent?: boolean;
    PermissionsAutomatedActionsUser?: boolean;
    PermissionsAutomatedDataEntry?: boolean;
    PermissionsAutomaticActivityCapture?: boolean;
    PermissionsAutonomousAnalyticsAuditor?: boolean;
    PermissionsAutonomousAnalyticsPrivacy?: boolean;
    PermissionsB2BCommerceIntegrator?: boolean;
    PermissionsB2BCommerceSuperUser?: boolean;
    PermissionsB2BCommerceUser?: boolean;
    PermissionsB2BMarketingAnalyticsUser?: boolean;
    PermissionsB2CCommerceUser?: boolean;
    PermissionsB2bmaAppUser?: boolean;
    PermissionsB2bmaIntegrationUser?: boolean;
    PermissionsBACommunityAccess?: boolean;
    PermissionsBREAlertsUserAccess?: boolean;
    PermissionsBVCommunityAccess?: boolean;
    PermissionsBehavioralHealthAppUserAccess?: boolean;
    PermissionsBenefitManagementAccess?: boolean;
    PermissionsBotManageBots?: boolean;
    PermissionsBotManageBotsTrainingData?: boolean;
    PermissionsBranchManagementUserAccess?: boolean;
    PermissionsBroadcaster?: boolean;
    PermissionsBulkApiHardDelete?: boolean;
    PermissionsBulkMacrosAllowed?: boolean;
    PermissionsBypassEmailApproval?: boolean;
    PermissionsBypassMFAForUiLogins?: boolean;
    PermissionsCCMCommunityAccess?: boolean;
    PermissionsCCMFieldAccess?: boolean;
    PermissionsCCUserHasEAndUProgramAccess?: boolean;
    PermissionsCDPDataManagerConsumer?: boolean;
    PermissionsCGCTradePromotionManagement?: boolean;
    PermissionsCIPartnerIntegrationUser?: boolean;
    PermissionsCMSECEAuthoringAccess?: boolean;
    PermissionsCallCoachingUser?: boolean;
    PermissionsCallExplorer?: boolean;
    PermissionsCallSummarization?: boolean;
    PermissionsCalmSobjectAccessUser?: boolean;
    PermissionsCampaignInfluence2?: boolean;
    PermissionsCanAccessCE?: boolean;
    PermissionsCanApproveFeedPost?: boolean;
    PermissionsCanDisableConnectedApps?: boolean;
    PermissionsCanDisablePackages?: boolean;
    PermissionsCanEditDataPrepRecipe?: boolean;
    PermissionsCanEditPrompts?: boolean;
    PermissionsCanInitiateMessagingSessions?: boolean;
    PermissionsCanInsertFeedSystemFields?: boolean;
    PermissionsCanManageMaps?: boolean;
    PermissionsCanRunAnalysis?: boolean;
    PermissionsCanSave?: boolean;
    PermissionsCanToggleCallRecordings?: boolean;
    PermissionsCanTransferScrt2Conversation?: boolean;
    PermissionsCanUpdateEmailMessage?: boolean;
    PermissionsCanUseDshbdWoSameUsrLic?: boolean;
    PermissionsCanUseNewDashboardBuilder?: boolean;
    PermissionsCanVerifyComment?: boolean;
    PermissionsCancelAssets?: boolean;
    PermissionsCaptureAndReversePayments?: boolean;
    PermissionsCarePlansAccess?: boolean;
    PermissionsCaseProceedingsAccess?: boolean;
    PermissionsCaseReferralAccess?: boolean;
    PermissionsCaseWrapUpUser?: boolean;
    PermissionsCdcReportingCreateReports?: boolean;
    PermissionsCdcReportingManageFolders?: boolean;
    PermissionsCdcReportingViewReports?: boolean;
    PermissionsChampionUser?: boolean;
    PermissionsChangeDashboardColors?: boolean;
    PermissionsChangeTargetAssignee?: boolean;
    PermissionsChatterComposeUiCodesnippet?: boolean;
    PermissionsChatterEditOwnPost?: boolean;
    PermissionsChatterEditOwnRecordPost?: boolean;
    PermissionsChatterEnabledForUser?: boolean;
    PermissionsChatterFileLink?: boolean;
    PermissionsChatterInternalUser?: boolean;
    PermissionsChatterInviteExternalUsers?: boolean;
    PermissionsChatterOwnGroups?: boolean;
    PermissionsCidbPermission?: boolean;
    PermissionsClauseDEUser?: boolean;
    PermissionsClauseDesigner?: boolean;
    PermissionsClauseUser?: boolean;
    PermissionsClientSecretRotation?: boolean;
    PermissionsCloseConversations?: boolean;
    PermissionsCodeBuilderUser?: boolean;
    PermissionsCollectionAgent?: boolean;
    PermissionsCollectionAssigner?: boolean;
    PermissionsCombAuthAndCapPayments?: boolean;
    PermissionsCommandCenterUser?: boolean;
    PermissionsCommerceEntitlementIntegrator?: boolean;
    PermissionsCommerceShipmentIntegrator?: boolean;
    PermissionsCommerceTaxApiUser?: boolean;
    PermissionsComplaintsManagementAccess?: boolean;
    PermissionsComputeAccess?: boolean;
    PermissionsComputeProductionAccess?: boolean;
    PermissionsConfigCompliantDataSharing?: boolean;
    PermissionsConfigCustomRecs?: boolean;
    PermissionsConfigureDataspaceScope?: boolean;
    PermissionsConfigureLiveMessage?: boolean;
    PermissionsConfigureMerchantAccounts?: boolean;
    PermissionsConfigurePayments?: boolean;
    PermissionsConnectOrgToEnvironmentHub?: boolean;
    PermissionsConsentApiUpdate?: boolean;
    PermissionsConsentBannerSettingsSetup?: boolean;
    PermissionsConsoleTab?: boolean;
    PermissionsContactCenterUserAccess?: boolean;
    PermissionsContactInspectorUser?: boolean;
    PermissionsContentAdministrator?: boolean;
    PermissionsContentHubUser?: boolean;
    PermissionsContentWorkspaces?: boolean;
    PermissionsContextServiceAdmin?: boolean;
    PermissionsContextServiceRuntime?: boolean;
    PermissionsContractManagementCCPlusDEUser?: boolean;
    PermissionsContractMgmtAdmin?: boolean;
    PermissionsContractMgmtRuntime?: boolean;
    PermissionsContractMgmtRuntimePC?: boolean;
    PermissionsContractorHasEUProgramAccess?: boolean;
    PermissionsContractorHasWorkReportAccess?: boolean;
    PermissionsContractsAIClauseDesigner?: boolean;
    PermissionsContractsAIRuntimeUser?: boolean;
    PermissionsConvertLeads?: boolean;
    PermissionsCoreCPQUser?: boolean;
    PermissionsCorePricingAdmin?: boolean;
    PermissionsCorePricingDesignTimeUser?: boolean;
    PermissionsCorePricingManager?: boolean;
    PermissionsCorePricingRunTimeUser?: boolean;
    PermissionsCpqIntegrationUser?: boolean;
    PermissionsCreateAuditFields?: boolean;
    PermissionsCreateCustomizeDashboards?: boolean;
    PermissionsCreateCustomizeFilters?: boolean;
    PermissionsCreateCustomizeReports?: boolean;
    PermissionsCreateDashboardFolders?: boolean;
    PermissionsCreateEditNonSetupFlow?: boolean;
    PermissionsCreateLtngTempFolder?: boolean;
    PermissionsCreateLtngTempInPub?: boolean;
    PermissionsCreateModFormTrigNonSetupFlow?: boolean;
    PermissionsCreateModSgmtTrigNonSetupFlow?: boolean;
    PermissionsCreatePackaging?: boolean;
    PermissionsCreateQuickCadence?: boolean;
    PermissionsCreateReductionOrder?: boolean;
    PermissionsCreateReportFolders?: boolean;
    PermissionsCreateReportInLightning?: boolean;
    PermissionsCreateStandardCadence?: boolean;
    PermissionsCreateTopics?: boolean;
    PermissionsCreateUpdateSDDDataset?: boolean;
    PermissionsCreateUpdateSDDStory?: boolean;
    PermissionsCreateWorkBadgeDefinition?: boolean;
    PermissionsCreateWorkspaces?: boolean;
    PermissionsCreditMemoAPIUser?: boolean;
    PermissionsCrisisCenterUserAccess?: boolean;
    PermissionsCrossCampaignIntelligenceUser?: boolean;
    PermissionsCustomAppsOnFSMobile?: boolean;
    PermissionsCustomMobileAppsAccess?: boolean;
    PermissionsCustomSidebarOnAllPages?: boolean;
    PermissionsCustomTabBarOnMobile?: boolean;
    PermissionsCustomerMetricsSubmissionUser?: boolean;
    PermissionsCustomizeApplication?: boolean;
    PermissionsDCHMSO365AddInAuthor?: boolean;
    PermissionsDataExport?: boolean;
    PermissionsDataPipelinesAppConsumer?: boolean;
    PermissionsDataPrepPilotUser?: boolean;
    PermissionsDebugApex?: boolean;
    PermissionsDecisionTableExecUserAccess?: boolean;
    PermissionsDefenseIntegrationReserveOne?: boolean;
    PermissionsDeferSharingCalculations?: boolean;
    PermissionsDelegateHubEnvironmentManagement?: boolean;
    PermissionsDelegatedPortalUserAdmin?: boolean;
    PermissionsDelegatedTwoFactor?: boolean;
    PermissionsDeleteActivatedContract?: boolean;
    PermissionsDeleteCrMemoAndInvoice?: boolean;
    PermissionsDeleteDraftAndCanceledInvoices?: boolean;
    PermissionsDeleteEventMonitoringData?: boolean;
    PermissionsDeleteFieldHistory?: boolean;
    PermissionsDeleteFieldHistoryArchive?: boolean;
    PermissionsDeleteNonDraftSalesAgreement?: boolean;
    PermissionsDeleteNonSetupFlow?: boolean;
    PermissionsDeleteRevenueRecords?: boolean;
    PermissionsDeleteTopics?: boolean;
    PermissionsDesignActnableEvntOrchProcess?: boolean;
    PermissionsDesignContextRule?: boolean;
    PermissionsDialerBasicInbound?: boolean;
    PermissionsDialerBasicOutbound?: boolean;
    PermissionsDigitalLendingAdminUser?: boolean;
    PermissionsDigitalLendingUser?: boolean;
    PermissionsDisbursementUserAccess?: boolean;
    PermissionsDistributeFromPersWksp?: boolean;
    PermissionsDivisionAffected?: boolean;
    PermissionsDocGenDesigner?: boolean;
    PermissionsDocGenRuntimeCCUser?: boolean;
    PermissionsDocGenRuntimeUser?: boolean;
    PermissionsDocumentAutomationUserAccess?: boolean;
    PermissionsDocumentBuilder?: boolean;
    PermissionsDocumentChecklistUserAccess?: boolean;
    PermissionsDocumentWorkspaceCmtyAccess?: boolean;
    PermissionsDocumentWorkspaceUserAccess?: boolean;
    PermissionsDownloadPackageVersionZips?: boolean;
    PermissionsDynamicAssessmentAccess?: boolean;
    PermissionsEGPTSalesSummariesUser?: boolean;
    PermissionsERMUserAccess?: boolean;
    PermissionsEditASEFields?: boolean;
    PermissionsEditActivatedOrders?: boolean;
    PermissionsEditBillingInfo?: boolean;
    PermissionsEditBrandTemplates?: boolean;
    PermissionsEditBuildingEnergyIntensity?: boolean;
    PermissionsEditCaseComments?: boolean;
    PermissionsEditDeliveryInformation?: boolean;
    PermissionsEditEvent?: boolean;
    PermissionsEditForecast?: boolean;
    PermissionsEditHtmlTemplates?: boolean;
    PermissionsEditIQFields?: boolean;
    PermissionsEditInvoice?: boolean;
    PermissionsEditKnowledge?: boolean;
    PermissionsEditManagedOrderSummaries?: boolean;
    PermissionsEditMaterialityAssessment?: boolean;
    PermissionsEditMyDashboards?: boolean;
    PermissionsEditMyReports?: boolean;
    PermissionsEditOppLineItemUnitPrice?: boolean;
    PermissionsEditPastActualsSalesAgreement?: boolean;
    PermissionsEditPayment?: boolean;
    PermissionsEditPublicDocuments?: boolean;
    PermissionsEditPublicFilters?: boolean;
    PermissionsEditPublicReports?: boolean;
    PermissionsEditPublicTemplates?: boolean;
    PermissionsEditReadonlyFields?: boolean;
    PermissionsEditReports?: boolean;
    PermissionsEditRepricing?: boolean;
    PermissionsEditSalesPlan?: boolean;
    PermissionsEditTask?: boolean;
    PermissionsEditTopics?: boolean;
    PermissionsEditUnmanagedOrderSummaries?: boolean;
    PermissionsEinsteinAgentUser?: boolean;
    PermissionsEinsteinAiC2cUser?: boolean;
    PermissionsEinsteinArticleRecForVoicePilotUser?: boolean;
    PermissionsEinsteinArticleRecPilotUser?: boolean;
    PermissionsEinsteinArticleRecUser?: boolean;
    PermissionsEinsteinAssistantUser?: boolean;
    PermissionsEinsteinBrandVoiceReplyUser?: boolean;
    PermissionsEinsteinCoCreateSettingsSetup?: boolean;
    PermissionsEinsteinGPTSalesEmailsUser?: boolean;
    PermissionsEinsteinMetadataUserAccess?: boolean;
    PermissionsEinsteinReplyManager?: boolean;
    PermissionsEmailAdministration?: boolean;
    PermissionsEmailMass?: boolean;
    PermissionsEmailSingle?: boolean;
    PermissionsEmailTemplateManagement?: boolean;
    PermissionsEmbeddedMessagingAgent?: boolean;
    PermissionsEmployeeExperience?: boolean;
    PermissionsEmployeeExperience4?: boolean;
    PermissionsEmployeeExperience5?: boolean;
    PermissionsEnableAssignCrbnFtprntToEur?: boolean;
    PermissionsEnableAutoCreateCrbnFtprnts?: boolean;
    PermissionsEnableBCTransactionPolling?: boolean;
    PermissionsEnableCommunityAppLauncher?: boolean;
    PermissionsEnableIPFSUpload?: boolean;
    PermissionsEnableImpCSVForMfgAAFCmty?: boolean;
    PermissionsEnableImportCSVForMfgAAF?: boolean;
    PermissionsEnableMassUpdateForMfgAAF?: boolean;
    PermissionsEnableMassUpdateForMfgSA?: boolean;
    PermissionsEnableMassUpdtForMfgAAFCmty?: boolean;
    PermissionsEnableMassUpdtForMfgSACmty?: boolean;
    PermissionsEnableNotifications?: boolean;
    PermissionsEnableSOS?: boolean;
    PermissionsEnablementAdmin?: boolean;
    PermissionsEnablementUser?: boolean;
    PermissionsEnblLiteAdmin?: boolean;
    PermissionsEnblLiteUser?: boolean;
    PermissionsEnforceMutualAuthentication?: boolean;
    PermissionsEventLogReadAccess?: boolean;
    PermissionsEvidenceManagementAccess?: boolean;
    PermissionsExecuteDSARPolicies?: boolean;
    PermissionsExecutePromptTemplates?: boolean;
    PermissionsExplainabilityCmtyAccess?: boolean;
    PermissionsExplainabilityUserAccess?: boolean;
    PermissionsExportReport?: boolean;
    PermissionsExternalClientAppAdmin?: boolean;
    PermissionsExternalClientAppDeveloper?: boolean;
    PermissionsExternalClientAppViewer?: boolean;
    PermissionsFHIRCmtyAccess?: boolean;
    PermissionsFSCAlertFrameworkUserAccess?: boolean;
    PermissionsFSCArcGraphCommunityUser?: boolean;
    PermissionsFSCComprehensiveUserAccess?: boolean;
    PermissionsFSCDealMgmtCompUser?: boolean;
    PermissionsFSCDealMgmtPlatformUser?: boolean;
    PermissionsFSCInsClaimMgmtPlatformUser?: boolean;
    PermissionsFSCInsPolicyAdminPlatformUser?: boolean;
    PermissionsFSCInsuranceCmpCmtyAccess?: boolean;
    PermissionsFSCInsuranceCmpLexOnlyAccess?: boolean;
    PermissionsFSCInsurancePlatformUser?: boolean;
    PermissionsFeedPinning?: boolean;
    PermissionsFieldMappingUser?: boolean;
    PermissionsFieldServiceAccess?: boolean;
    PermissionsFieldServiceDispatcher?: boolean;
    PermissionsFieldServiceLastMile?: boolean;
    PermissionsFieldServiceMobileApp?: boolean;
    PermissionsFieldServiceScheduling?: boolean;
    PermissionsFinancialAccMgmtUser?: boolean;
    PermissionsFinancialServices2UserAccess?: boolean;
    PermissionsFlowUFLRequired?: boolean;
    PermissionsForceTwoFactor?: boolean;
    PermissionsForecastTab?: boolean;
    PermissionsFreezeCompromisedUsers?: boolean;
    PermissionsFreezeUsers?: boolean;
    PermissionsFunctionsManagerUser?: boolean;
    PermissionsFundraisingUser?: boolean;
    PermissionsGPTCopilotCustomerAdmin?: boolean;
    PermissionsGPTCopilotEmployeeAdmin?: boolean;
    PermissionsGPTCopilotEmployeeUser?: boolean;
    PermissionsGenEmailResponseUser?: boolean;
    PermissionsGenReplyRecommendationUser?: boolean;
    PermissionsGetRecordDetailsUserAccess?: boolean;
    PermissionsGetSmartDataDiscovery?: boolean;
    PermissionsGetSmartDataDiscoveryApi?: boolean;
    PermissionsGetSmartDataDiscoveryExternal?: boolean;
    PermissionsGiveRecognitionBadge?: boolean;
    PermissionsGlobalCbPQueryAccess?: boolean;
    PermissionsGovernNetworks?: boolean;
    PermissionsGroupMembershipPsl?: boolean;
    PermissionsHCMedTherapyMgmtUser?: boolean;
    PermissionsHVPEnabledOnFSMobile?: boolean;
    PermissionsHasFileSync?: boolean;
    PermissionsHasUnlimitedErbScoringRequests?: boolean;
    PermissionsHasUnlimitedNBAExecutions?: boolean;
    PermissionsHcAdvancedTherapyUser?: boolean;
    PermissionsHcMedReconciliationUser?: boolean;
    PermissionsHcPnmSiteUser?: boolean;
    PermissionsHeadlessCMSAccess?: boolean;
    PermissionsHeadlessConfiguratorUser?: boolean;
    PermissionsHealthCloudCmtyAccess?: boolean;
    PermissionsHealthCloudStarter?: boolean;
    PermissionsHealthCloudUtilizationMgmtUser?: boolean;
    PermissionsHideReadByList?: boolean;
    PermissionsHighVelocitySalesUser?: boolean;
    PermissionsHomeHealthAdminAccess?: boolean;
    PermissionsHomeHealthCaregiverAccess?: boolean;
    PermissionsHomeHealthClinicianAccess?: boolean;
    PermissionsHomeHealthCommunity?: boolean;
    PermissionsHubAccess?: boolean;
    PermissionsHubCommerceGlobalProductsUser?: boolean;
    PermissionsHubEnvironmentManagement?: boolean;
    PermissionsIPRestrictRequests?: boolean;
    PermissionsIcmCmtyAccess?: boolean;
    PermissionsIdentityConnect?: boolean;
    PermissionsIdentityEnabled?: boolean;
    PermissionsIdentityVerificationUserAccess?: boolean;
    PermissionsImplisitIntegrationUser?: boolean;
    PermissionsImplisitRunCompleted?: boolean;
    PermissionsImportCustomObjects?: boolean;
    PermissionsImportLeads?: boolean;
    PermissionsImportPersonal?: boolean;
    PermissionsInboundMigrationToolsUser?: boolean;
    PermissionsIndustriesEpcMvpNext?: boolean;
    PermissionsIndustriesEpcNextPilot?: boolean;
    PermissionsIndustriesEpcNextSvcCatalog?: boolean;
    PermissionsIndustryMilestonePlatformUser?: boolean;
    PermissionsInsightsAppAdmin?: boolean;
    PermissionsInsightsAppDashboardEditor?: boolean;
    PermissionsInsightsAppEltEditor?: boolean;
    PermissionsInsightsAppUploadUser?: boolean;
    PermissionsInsightsAppUser?: boolean;
    PermissionsInsightsCreateApplication?: boolean;
    PermissionsInsightsIntegrationUser?: boolean;
    PermissionsInsightsIntelAppUser?: boolean;
    PermissionsInstallAnalyticsTemplatedApp?: boolean;
    PermissionsInstallDEIAnalyticsApp?: boolean;
    PermissionsInstallNetZeroAnalyticsApp?: boolean;
    PermissionsInstallPackaging?: boolean;
    PermissionsInsuranceGroupBenefitsUser?: boolean;
    PermissionsIntelligenceUser?: boolean;
    PermissionsInteractionCalcAdminPerm?: boolean;
    PermissionsInteractionCalcUserPerm?: boolean;
    PermissionsInteractionObjStateDefUserPerm?: boolean;
    PermissionsInteractionSummaryCompUser?: boolean;
    PermissionsInteractionSummaryUser?: boolean;
    PermissionsInterestTaggingUserAccess?: boolean;
    PermissionsInviteBuyerToReorderPortal?: boolean;
    PermissionsInvoiceOrErrorRecoveryAPI?: boolean;
    PermissionsInvoiceSchedulerUser?: boolean;
    PermissionsIotUser?: boolean;
    PermissionsIsContactCenterAdmin?: boolean;
    PermissionsIsContactCenterAdminBYOT?: boolean;
    PermissionsIsContactCenterAgent?: boolean;
    PermissionsIsContactCenterAgentBYOT?: boolean;
    PermissionsIsContactCenterSupervisor?: boolean;
    PermissionsIsSsoEnabled?: boolean;
    PermissionsIsotopeAccess?: boolean;
    PermissionsIsotopeCToCUser?: boolean;
    PermissionsIsotopeLEX?: boolean;
    PermissionsKycPlatformUser?: boolean;
    PermissionsLMEndMessagingSessionUserPerm?: boolean;
    PermissionsLMOutboundMessagingUserPerm?: boolean;
    PermissionsLPICommunityAccess?: boolean;
    PermissionsLeadIQReservedUserPerm?: boolean;
    PermissionsLeadInspectorUser?: boolean;
    PermissionsLeadScoreResultPublisher?: boolean;
    PermissionsLeadScoreUser?: boolean;
    PermissionsLearningManager?: boolean;
    PermissionsLifecycleManagementAPIUser?: boolean;
    PermissionsLightningConsoleAllowedForUser?: boolean;
    PermissionsLightningExperienceUser?: boolean;
    PermissionsLightningOnFSMobile?: boolean;
    PermissionsLightningSchedulerUserAccess?: boolean;
    PermissionsListEmailSend?: boolean;
    PermissionsLiveMessageAgent?: boolean;
    PermissionsLoanOfficerUser?: boolean;
    PermissionsLobbyManagementUserAccess?: boolean;
    PermissionsLtngPromoReserved01UserPerm?: boolean;
    PermissionsMDWConsumer?: boolean;
    PermissionsMakePayments?: boolean;
    PermissionsManageAnalyticSnapshots?: boolean;
    PermissionsManageApplication?: boolean;
    PermissionsManageAssets?: boolean;
    PermissionsManageAuthProviders?: boolean;
    PermissionsManageAutomotiveAnalytics?: boolean;
    PermissionsManageBusinessHourHolidays?: boolean;
    PermissionsManageC2CHighVolumePriming?: boolean;
    PermissionsManageC360AConnections?: boolean;
    PermissionsManageCGAnalytics?: boolean;
    PermissionsManageCLMAnalytics?: boolean;
    PermissionsManageCMS?: boolean;
    PermissionsManageCallCenters?: boolean;
    PermissionsManageCampaigns?: boolean;
    PermissionsManageCases?: boolean;
    PermissionsManageCategories?: boolean;
    PermissionsManageCertificates?: boolean;
    PermissionsManageChatterMessages?: boolean;
    PermissionsManageContactTracing?: boolean;
    PermissionsManageContentDesignKit?: boolean;
    PermissionsManageContentPermissions?: boolean;
    PermissionsManageContentProperties?: boolean;
    PermissionsManageContentTaxonomy?: boolean;
    PermissionsManageContentTypes?: boolean;
    PermissionsManageConvMiningReports?: boolean;
    PermissionsManageCssUsers?: boolean;
    PermissionsManageCustomPermissions?: boolean;
    PermissionsManageCustomReportTypes?: boolean;
    PermissionsManageCustomerExperienceAnalytics?: boolean;
    PermissionsManageDSARPolicies?: boolean;
    PermissionsManageDashbdsInPubFolders?: boolean;
    PermissionsManageDashboards?: boolean;
    PermissionsManageDataCategories?: boolean;
    PermissionsManageDataIntegrations?: boolean;
    PermissionsManageDataMaskPolicies?: boolean;
    PermissionsManageDataProcessingEngine?: boolean;
    PermissionsManageDataspaceScope?: boolean;
    PermissionsManageDefaultReportingYearType?: boolean;
    PermissionsManageDefinedSkills?: boolean;
    PermissionsManageDevices?: boolean;
    PermissionsManageDynamicDashboards?: boolean;
    PermissionsManageEAForB2BMarketing?: boolean;
    PermissionsManageERMAnalytics?: boolean;
    PermissionsManageEducationAnalytics?: boolean;
    PermissionsManageEmailClientConfig?: boolean;
    PermissionsManageEmailConnectorEvent?: boolean;
    PermissionsManageEmailContent?: boolean;
    PermissionsManageEmailMessagingSetup?: boolean;
    PermissionsManageEncryptionKeys?: boolean;
    PermissionsManageEntitlements?: boolean;
    PermissionsManageExchangeConfig?: boolean;
    PermissionsManageExternalConnections?: boolean;
    PermissionsManageFSCAnalytics?: boolean;
    PermissionsManageForecastingCustomData?: boolean;
    PermissionsManageFuelTypes?: boolean;
    PermissionsManageFundingAward?: boolean;
    PermissionsManageGlobalPreferences?: boolean;
    PermissionsManageGlobalPrivacyCenterVO?: boolean;
    PermissionsManageHcProviderNtwkMgmt?: boolean;
    PermissionsManageHcProviderRelMgmt?: boolean;
    PermissionsManageHealthCareAnalytics?: boolean;
    PermissionsManageHealthCheck?: boolean;
    PermissionsManageHealthCloud?: boolean;
    PermissionsManageHealthCloudFinancialData?: boolean;
    PermissionsManageHubConnections?: boolean;
    PermissionsManageInAppGuidanceForSites?: boolean;
    PermissionsManageIndustriesVisit?: boolean;
    PermissionsManageIntegrationPermsets?: boolean;
    PermissionsManageInteraction?: boolean;
    PermissionsManageInternalUsers?: boolean;
    PermissionsManageIpAddresses?: boolean;
    PermissionsManageKnowledge?: boolean;
    PermissionsManageKnowledgeImportExport?: boolean;
    PermissionsManageLeads?: boolean;
    PermissionsManageLearningReporting?: boolean;
    PermissionsManageLoadReferenceData?: boolean;
    PermissionsManageLoginAccessPolicies?: boolean;
    PermissionsManageLoyalty?: boolean;
    PermissionsManageLoyaltyAnalytics?: boolean;
    PermissionsManageManufacturingAnalytics?: boolean;
    PermissionsManageMediaAnalytics?: boolean;
    PermissionsManageMobile?: boolean;
    PermissionsManageMobileAppSecurity?: boolean;
    PermissionsManageMobilePublisherIntegration?: boolean;
    PermissionsManageMyS1App?: boolean;
    PermissionsManageMySavedPaymentMethods?: boolean;
    PermissionsManageNamedCredentials?: boolean;
    PermissionsManageNetZeroCloudSettings?: boolean;
    PermissionsManageNetworks?: boolean;
    PermissionsManageNonProfitIntelligence?: boolean;
    PermissionsManageOrchInstsAndWorkItems?: boolean;
    PermissionsManageOrchestrationRuns?: boolean;
    PermissionsManageOutcomeManagement?: boolean;
    PermissionsManagePackageLicenses?: boolean;
    PermissionsManagePartnerNetConn?: boolean;
    PermissionsManagePartners?: boolean;
    PermissionsManagePasswordPolicies?: boolean;
    PermissionsManagePaymentLinks?: boolean;
    PermissionsManagePreferenceCenter?: boolean;
    PermissionsManagePrivacyCenterPolicies?: boolean;
    PermissionsManagePrivacyHold?: boolean;
    PermissionsManageProductCatalog?: boolean;
    PermissionsManageProductDiscovery?: boolean;
    PermissionsManageProfilesPermissionsets?: boolean;
    PermissionsManageProgramManagement?: boolean;
    PermissionsManageProgramsBenefitsCases?: boolean;
    PermissionsManagePromptTemplates?: boolean;
    PermissionsManagePropositions?: boolean;
    PermissionsManageProviderSearch?: boolean;
    PermissionsManagePublicGroups?: boolean;
    PermissionsManagePvtRptsAndDashbds?: boolean;
    PermissionsManageQueues?: boolean;
    PermissionsManageQuotas?: boolean;
    PermissionsManageRealm?: boolean;
    PermissionsManageRecommendationStrategies?: boolean;
    PermissionsManageReferral?: boolean;
    PermissionsManageReleaseUpdates?: boolean;
    PermissionsManageRemoteAccess?: boolean;
    PermissionsManageReportsInPubFolders?: boolean;
    PermissionsManageRetentionStores?: boolean;
    PermissionsManageRoles?: boolean;
    PermissionsManageSMSMessagingSetup?: boolean;
    PermissionsManageSandboxes?: boolean;
    PermissionsManageSavedPaymentMethods?: boolean;
    PermissionsManageSearchPromotionRules?: boolean;
    PermissionsManageSecurityCommandCenter?: boolean;
    PermissionsManageSelfService?: boolean;
    PermissionsManageSessionPermissionSets?: boolean;
    PermissionsManageSharing?: boolean;
    PermissionsManageShiftScheduling?: boolean;
    PermissionsManageSlackUserMappings?: boolean;
    PermissionsManageSmartDataDiscovery?: boolean;
    PermissionsManageSmartDataDiscoveryModel?: boolean;
    PermissionsManageSolutions?: boolean;
    PermissionsManageStores?: boolean;
    PermissionsManageSubscriptions?: boolean;
    PermissionsManageSurveys?: boolean;
    PermissionsManageSustainabilityUOM?: boolean;
    PermissionsManageSvcCatalog?: boolean;
    PermissionsManageSynonyms?: boolean;
    PermissionsManageTCRMforComms?: boolean;
    PermissionsManageTCRMforEandU?: boolean;
    PermissionsManageTCRMforSustainability?: boolean;
    PermissionsManageTemplatedApp?: boolean;
    PermissionsManageTemplatedIntelApp?: boolean;
    PermissionsManageTenants?: boolean;
    PermissionsManageTerritories?: boolean;
    PermissionsManageTranslation?: boolean;
    PermissionsManageTrustMeasures?: boolean;
    PermissionsManageTwoFactor?: boolean;
    PermissionsManageUnlistedGroups?: boolean;
    PermissionsManageUserAccessPolicies?: boolean;
    PermissionsManageUsers?: boolean;
    PermissionsManageVehicleAssetRecordTypes?: boolean;
    PermissionsManageWarrantyClaims?: boolean;
    PermissionsManageWatch?: boolean;
    PermissionsManageWhatsAppMessagingSetup?: boolean;
    PermissionsManageWorkForecasting?: boolean;
    PermissionsManageWorkScheduling?: boolean;
    PermissionsMarketingAdmin?: boolean;
    PermissionsMassInlineEdit?: boolean;
    PermissionsMaterialLineUser?: boolean;
    PermissionsMcScoringRulesConfig?: boolean;
    PermissionsMedMgmtExperienceCloudUser?: boolean;
    PermissionsMediaBase?: boolean;
    PermissionsMergeAndSplitGroups?: boolean;
    PermissionsMergeTopics?: boolean;
    PermissionsMessengerUser?: boolean;
    PermissionsMicrobatching?: boolean;
    PermissionsMicrosoft365WordDEUser?: boolean;
    PermissionsMicrosoft365WordDesigner?: boolean;
    PermissionsMicrosoft365WordUser?: boolean;
    PermissionsMicrosoftTeamsUser?: boolean;
    PermissionsMngBuildingEnergyRecordTypes?: boolean;
    PermissionsMngCGCDirStoreDlvrOffline?: boolean;
    PermissionsMngEnrgyAttrCertCredit?: boolean;
    PermissionsMngFuelTypeSustainabilityUOM?: boolean;
    PermissionsMngStationaryAssetRecordTypes?: boolean;
    PermissionsMngSustainabilityUOConversion?: boolean;
    PermissionsMobileAppSecurity?: boolean;
    PermissionsModerateChatter?: boolean;
    PermissionsModerateNetworkFeeds?: boolean;
    PermissionsModerateNetworkFiles?: boolean;
    PermissionsModerateNetworkMessages?: boolean;
    PermissionsModerateNetworkUsers?: boolean;
    PermissionsModifyAllData?: boolean;
    PermissionsModifyDataClassification?: boolean;
    PermissionsModifyMetadata?: boolean;
    PermissionsMortgageUserAccess?: boolean;
    PermissionsMultiStepSchedulingUser?: boolean;
    PermissionsMyTrailheadBranding?: boolean;
    PermissionsMyTrailheadContentAccess?: boolean;
    PermissionsMyTrailheadContentCreation?: boolean;
    PermissionsMyTrailheadCustomSteps?: boolean;
    PermissionsMyTrailheadManageCollections?: boolean;
    PermissionsMyTrailheadPreviewMode?: boolean;
    PermissionsMyTrailheadReleaseMgmt?: boolean;
    PermissionsNativeWebviewScrolling?: boolean;
    PermissionsNewReportBuilder?: boolean;
    PermissionsNotificationTrayPolling?: boolean;
    PermissionsObligationAssignee?: boolean;
    PermissionsObligationDEAssignee?: boolean;
    PermissionsObligationDEManager?: boolean;
    PermissionsObligationDEUser?: boolean;
    PermissionsObligationManager?: boolean;
    PermissionsObligationUser?: boolean;
    PermissionsOfflineForMobilePlus?: boolean;
    PermissionsOfflineProducts?: boolean;
    PermissionsOmniChannelPricingUser?: boolean;
    PermissionsOmniStudioDesigner?: boolean;
    PermissionsOmniStudioRuntime?: boolean;
    PermissionsOmniStudioRuntimeCC?: boolean;
    PermissionsOmniSupervisorManageQueue?: boolean;
    PermissionsOmnichannelInventoryBasic?: boolean;
    PermissionsOmnichannelInventorySync?: boolean;
    PermissionsOpportunityScoreUser?: boolean;
    PermissionsOptOutGeoLocationTracking?: boolean;
    PermissionsOrderToBSAPIUser?: boolean;
    PermissionsOrderToInvoiceAPIUser?: boolean;
    PermissionsOrgPerformanceAccess?: boolean;
    PermissionsOutboundMigrationToolsUser?: boolean;
    PermissionsOverrideForecasts?: boolean;
    PermissionsPRMChannelMgmtConsoleUser?: boolean;
    PermissionsPRMForSlackPartnerManagerUser?: boolean;
    PermissionsPRMForSlackPartnerUser?: boolean;
    PermissionsPackaging2?: boolean;
    PermissionsPackaging2Delete?: boolean;
    PermissionsPackaging2PromoteVersion?: boolean;
    PermissionsPardotPilotUser?: boolean;
    PermissionsPardotUser?: boolean;
    PermissionsPasswordNeverExpires?: boolean;
    PermissionsPayByBillingCardPaymentMethod?: boolean;
    PermissionsPaymentSchedulerUser?: boolean;
    PermissionsPaymentsAPIUser?: boolean;
    PermissionsPerformanceAnalysisAccess?: boolean;
    PermissionsPermitSubscriberLogin?: boolean;
    PermissionsPersonalizationPlatform?: boolean;
    PermissionsPersonalizedFinanceUserAccess?: boolean;
    PermissionsPipelineInspectorUser?: boolean;
    PermissionsPortalSuperUser?: boolean;
    PermissionsPortalTab?: boolean;
    PermissionsPredictivePlatformAnalyze?: boolean;
    PermissionsPredictivePlatformQuery?: boolean;
    PermissionsPreventClassicExperience?: boolean;
    PermissionsPreviewExperienceUser?: boolean;
    PermissionsPreviewTestSendEmail?: boolean;
    PermissionsPreviewTestSendSMS?: boolean;
    PermissionsPriceSheetConfiguration?: boolean;
    PermissionsPricingRuleUser?: boolean;
    PermissionsPrivacyDataAccess?: boolean;
    PermissionsProcessInvoice?: boolean;
    PermissionsProcessOrder?: boolean;
    PermissionsProductAdmin?: boolean;
    PermissionsProductCatalogApiAccess?: boolean;
    PermissionsProductCatalogMgmtApiCCAccess?: boolean;
    PermissionsProductCatalogMgmtApiPCAccess?: boolean;
    PermissionsProductCatalogMgmtBaseCCUser?: boolean;
    PermissionsProductCatalogMgmtBasePCUser?: boolean;
    PermissionsProductConfiguratorUser?: boolean;
    PermissionsProductDiscoveryUser?: boolean;
    PermissionsProspectingCenterUser?: boolean;
    PermissionsProviderManagementAccess?: boolean;
    PermissionsProviderMgmtCmtyAccess?: boolean;
    PermissionsProviderSearchUserAccess?: boolean;
    PermissionsPubSecServiceExcellenceAccess?: boolean;
    PermissionsPublicEnhancedTemplateMgmt?: boolean;
    PermissionsPublicSectorCmtyAccess?: boolean;
    PermissionsPublicSectorPlatformUserAccess?: boolean;
    PermissionsPublicTwitterResponse?: boolean;
    PermissionsPublishMalwareSignatures?: boolean;
    PermissionsPublishPackaging?: boolean;
    PermissionsPushDownReportAggregates?: boolean;
    PermissionsQueryAllFiles?: boolean;
    PermissionsQueryCustomerInfo?: boolean;
    PermissionsQuipMetricsAccess?: boolean;
    PermissionsQuipUserEngagementMetrics?: boolean;
    PermissionsQuoteToOrderUser?: boolean;
    PermissionsReadCrossOrgMetrics?: boolean;
    PermissionsReassignOrchestrationWorkItems?: boolean;
    PermissionsRecVisibilityFilterAPI?: boolean;
    PermissionsRecordAggregationAccess?: boolean;
    PermissionsRecordVisibilityAPI?: boolean;
    PermissionsRedirectToNetworkExperience?: boolean;
    PermissionsRefundPayments?: boolean;
    PermissionsRemoteMediaVirtualDesktop?: boolean;
    PermissionsRemoveDirectMessageMembers?: boolean;
    PermissionsRenewAssets?: boolean;
    PermissionsReplyRecommendationPilotUser?: boolean;
    PermissionsReplyRecommendationUser?: boolean;
    PermissionsRequirePhyTokenToLogin?: boolean;
    PermissionsResetPasswords?: boolean;
    PermissionsRetainFieldHistory?: boolean;
    PermissionsRevenueIntelligenceUser?: boolean;
    PermissionsRevenueProductImportUser?: boolean;
    PermissionsReviewApplication?: boolean;
    PermissionsRunActnableEvntOrchProcess?: boolean;
    PermissionsRunAsynchronousReports?: boolean;
    PermissionsRunCGCloudREPackage?: boolean;
    PermissionsRunCGCloudSyncPackage?: boolean;
    PermissionsRunCGServiceExcellence?: boolean;
    PermissionsRunContextRule?: boolean;
    PermissionsRunDecisionMatrix?: boolean;
    PermissionsRunDirectStoreDelivery?: boolean;
    PermissionsRunExpressionSet?: boolean;
    PermissionsRunFlow?: boolean;
    PermissionsRunNetZeroAnalyticsRecipe?: boolean;
    PermissionsRunRegisterProcessingServices?: boolean;
    PermissionsRunReports?: boolean;
    PermissionsRunRetailExecution?: boolean;
    PermissionsSCEViewAllData?: boolean;
    PermissionsSDCommunityAccess?: boolean;
    PermissionsSalesAnalyticsUser?: boolean;
    PermissionsSalesConsole?: boolean;
    PermissionsSalesforceIQInbox?: boolean;
    PermissionsSalesforceIQIntegrationUser?: boolean;
    PermissionsSalesforceIQInternal?: boolean;
    PermissionsSalesforceMeetingsUserPerm?: boolean;
    PermissionsSandboxTestingInCommunityApp?: boolean;
    PermissionsScheduleJob?: boolean;
    PermissionsScheduleReports?: boolean;
    PermissionsScheduledRemindersFeature?: boolean;
    PermissionsSchedulingFacilityManager?: boolean;
    PermissionsSchedulingLineAmbassador?: boolean;
    PermissionsScoringFrameworkAdmin?: boolean;
    PermissionsScoringFrameworkUser?: boolean;
    PermissionsScsRequireApproval?: boolean;
    PermissionsSecureGatewayAdmin?: boolean;
    PermissionsSegmentIntelligenceUser?: boolean;
    PermissionsSelectFilesFromSalesforce?: boolean;
    PermissionsSendAnnouncementEmails?: boolean;
    PermissionsSendCustomNotifications?: boolean;
    PermissionsSendEmail?: boolean;
    PermissionsSendExternalEmailAvailable?: boolean;
    PermissionsSendSMS?: boolean;
    PermissionsSendSitRequests?: boolean;
    PermissionsServiceAnalyticsUser?: boolean;
    PermissionsServiceECIUser?: boolean;
    PermissionsServiceExcellenceCompUser?: boolean;
    PermissionsServiceExcellencePlatformUser?: boolean;
    PermissionsShareAnalyticsImages?: boolean;
    PermissionsShareFilesWithNetworks?: boolean;
    PermissionsShareInternalArticles?: boolean;
    PermissionsShareSmartDataDiscoveryStory?: boolean;
    PermissionsShieldKeyBrokerHubAppUser?: boolean;
    PermissionsShowCompanyNameAsUserBadge?: boolean;
    PermissionsShowPreWorkBrief?: boolean;
    PermissionsSimpleCsvDataImportUser?: boolean;
    PermissionsSkipIdentityConfirmation?: boolean;
    PermissionsSkypeConversation?: boolean;
    PermissionsSlackAppAdministrator?: boolean;
    PermissionsSlackCibUser?: boolean;
    PermissionsSlackRecordChannels?: boolean;
    PermissionsSlackSalesUser?: boolean;
    PermissionsSlackServiceUser?: boolean;
    PermissionsSmartDataDiscoveryForCommunity?: boolean;
    PermissionsSmsAs2faUserPerm?: boolean;
    PermissionsSolutionImport?: boolean;
    PermissionsSonicConsumer?: boolean;
    PermissionsSparkConversation?: boolean;
    PermissionsStageManagementDesignUser?: boolean;
    PermissionsStdAutomaticActivityCapture?: boolean;
    PermissionsStoryOnDSWithPredicate?: boolean;
    PermissionsStudentCommunityPages?: boolean;
    PermissionsSubmitMacrosAllowed?: boolean;
    PermissionsSubmitOrder?: boolean;
    PermissionsSubmitOrder2?: boolean;
    PermissionsSubscrMgmtOrderItemToAssetUser?: boolean;
    PermissionsSubscrMgmtOrderToAssetUser?: boolean;
    PermissionsSubscrMgmtPymtSchedAutomation?: boolean;
    PermissionsSubscrMgmtRefundAutomation?: boolean;
    PermissionsSubscribeDashboardRolesGrps?: boolean;
    PermissionsSubscribeDashboardToOtherUsers?: boolean;
    PermissionsSubscribeReportRolesGrps?: boolean;
    PermissionsSubscribeReportToOtherUsers?: boolean;
    PermissionsSubscribeReportsRunAsUser?: boolean;
    PermissionsSubscribeToLightningDashboards?: boolean;
    PermissionsSubscribeToLightningReports?: boolean;
    PermissionsSubscriptionManagementUser?: boolean;
    PermissionsSummarizationUser?: boolean;
    PermissionsSustainabilityUserPermission?: boolean;
    PermissionsTagManager?: boolean;
    PermissionsTakePartnerProgram?: boolean;
    PermissionsTearSheetUserAccess?: boolean;
    PermissionsTestEnvironmentSetupAccess?: boolean;
    PermissionsTestExecutionAccess?: boolean;
    PermissionsTestInstanceCreate?: boolean;
    PermissionsTestPlanCreationAccess?: boolean;
    PermissionsTestSchedulerAccess?: boolean;
    PermissionsTraceXdsQueries?: boolean;
    PermissionsTrailheadSync?: boolean;
    PermissionsTransactionSecurityExempt?: boolean;
    PermissionsTransactionalEmailSend?: boolean;
    PermissionsTransferAnyCase?: boolean;
    PermissionsTransferAnyEntity?: boolean;
    PermissionsTransferAnyLead?: boolean;
    PermissionsTwoFactorApi?: boolean;
    PermissionsUMAStandaloneUserPerm?: boolean;
    PermissionsUmaEditConsentSettings?: boolean;
    PermissionsUmaQueryCMSEmailContent?: boolean;
    PermissionsUnderwriterUser?: boolean;
    PermissionsUnifiedHealthScoringUser?: boolean;
    PermissionsUnrestrictedLogin?: boolean;
    PermissionsUpdateDEIAnalyticsApp?: boolean;
    PermissionsUpdateNetZeroAnalyticsApp?: boolean;
    PermissionsUpdateReportTypeReferences?: boolean;
    PermissionsUpdateWithInactiveOwner?: boolean;
    PermissionsUpldNetZeroAnlytBusMetricsData?: boolean;
    PermissionsUpldNetZeroAnlytEfcyFctorData?: boolean;
    PermissionsUpldNetZeroAnlytInitSavData?: boolean;
    PermissionsUpldNetZeroAnlytRenewableData?: boolean;
    PermissionsUploadDEIAnalyticsData?: boolean;
    PermissionsUsageServiceEnabled?: boolean;
    PermissionsUseAddOrderItemSummaryAPIs?: boolean;
    PermissionsUseAnyApiClient?: boolean;
    PermissionsUseAssistantDialog?: boolean;
    PermissionsUseAutoSchedulerInExprcCloud?: boolean;
    PermissionsUseAutomotiveAnalytics?: boolean;
    PermissionsUseCGAnalytics?: boolean;
    PermissionsUseCLMAnalytics?: boolean;
    PermissionsUseClientQueryExecution?: boolean;
    PermissionsUseCommsB2CBusinessProcesses?: boolean;
    PermissionsUseCommsB2cServiceConsole?: boolean;
    PermissionsUseCompliantDataSharing?: boolean;
    PermissionsUseCrisisSuptCtrMgmtExprcCloud?: boolean;
    PermissionsUseCriteriaBasedSearchFilter?: boolean;
    PermissionsUseCustomerExperienceAnalytics?: boolean;
    PermissionsUseEAForB2BMarketing?: boolean;
    PermissionsUseERMAnalytics?: boolean;
    PermissionsUseEUCCore?: boolean;
    PermissionsUseEducationAnalytics?: boolean;
    PermissionsUseEducationCloudComp?: boolean;
    PermissionsUseExchangesAPIs?: boolean;
    PermissionsUseExperienceCloudInAuto?: boolean;
    PermissionsUseFSCAnalytics?: boolean;
    PermissionsUseFleetMngmntFeatures?: boolean;
    PermissionsUseFleetMngmntInExprncCloud?: boolean;
    PermissionsUseFulfillmentAPIs?: boolean;
    PermissionsUseGrantsManagement?: boolean;
    PermissionsUseHealthCareAnalytics?: boolean;
    PermissionsUseIndustriesAutomotive?: boolean;
    PermissionsUseIndustriesFieldService?: boolean;
    PermissionsUseLeadMgmtInExperienceCloud?: boolean;
    PermissionsUseLoyaltyAnalytics?: boolean;
    PermissionsUseManufacturingAnalytics?: boolean;
    PermissionsUseMediaAnalytics?: boolean;
    PermissionsUseMfgAccountForecast?: boolean;
    PermissionsUseMfgAcctMgrTargets?: boolean;
    PermissionsUseMfgAdvAccountForecast?: boolean;
    PermissionsUseMfgAdvAcctForecastCmty?: boolean;
    PermissionsUseMfgPartnerLeadMgmt?: boolean;
    PermissionsUseMfgPartnerPerfMgmt?: boolean;
    PermissionsUseMfgPartnerVisitMgmt?: boolean;
    PermissionsUseMfgProgram?: boolean;
    PermissionsUseMfgRebates?: boolean;
    PermissionsUseMfgRebatesCmty?: boolean;
    PermissionsUseMfgSalesAgreements?: boolean;
    PermissionsUseMfgSalesAgreementsCmty?: boolean;
    PermissionsUseMfgServiceConsole?: boolean;
    PermissionsUseMySearch?: boolean;
    PermissionsUseNonProfitIntelligence?: boolean;
    PermissionsUseOMAnalytics?: boolean;
    PermissionsUseOmnichannelInventoryAPIs?: boolean;
    PermissionsUseOrderEntry?: boolean;
    PermissionsUseOrderManagementAPIs?: boolean;
    PermissionsUseOrderSummaryCreateAPI?: boolean;
    PermissionsUsePricingFeatrSlsAgr?: boolean;
    PermissionsUsePricingFeatrSlsAgrExprc?: boolean;
    PermissionsUseProdtCtlgForSlsAgrExprc?: boolean;
    PermissionsUseProductCatalogForSlsAgr?: boolean;
    PermissionsUsePrtnrPerfInExperienceCloud?: boolean;
    PermissionsUseQuerySuggestions?: boolean;
    PermissionsUseRegisterGuestBuyerAPI?: boolean;
    PermissionsUseRepricing?: boolean;
    PermissionsUseReturnOrder?: boolean;
    PermissionsUseReturnOrderAPIs?: boolean;
    PermissionsUseSalesforceEngage?: boolean;
    PermissionsUseSchedulerForAutomotive?: boolean;
    PermissionsUseServiceIntelligence?: boolean;
    PermissionsUseShipAndDebit?: boolean;
    PermissionsUseShipAndDebitCmty?: boolean;
    PermissionsUseShipment?: boolean;
    PermissionsUseSmartDataDiscovery?: boolean;
    PermissionsUseSmartDataDiscoveryApi?: boolean;
    PermissionsUseSubscriptionEmails?: boolean;
    PermissionsUseSvcCatalog?: boolean;
    PermissionsUseTCRMforComms?: boolean;
    PermissionsUseTCRMforEandU?: boolean;
    PermissionsUseTCRMforSustainability?: boolean;
    PermissionsUseTPMRevenuePrediction?: boolean;
    PermissionsUseTeamReassignWizards?: boolean;
    PermissionsUseTemplatedApp?: boolean;
    PermissionsUseTemplatedIntelApp?: boolean;
    PermissionsUseVehicleAssetFinance?: boolean;
    PermissionsUseVehicleAssetFinanceExprc?: boolean;
    PermissionsUseVisitMgmtInExperienceCloud?: boolean;
    PermissionsUseWarrantyLifecycleMgmt?: boolean;
    PermissionsUseWebLink?: boolean;
    PermissionsUserCanAccessNLPResult?: boolean;
    PermissionsUserCanPerformNLPOperation?: boolean;
    PermissionsUserHasEAndUProgramAccess?: boolean;
    PermissionsUserHasUsageImpactAccess?: boolean;
    PermissionsUserHasWorkReportAccess?: boolean;
    PermissionsUserManagementAdmin?: boolean;
    PermissionsUserManagementBasic?: boolean;
    PermissionsUserSites?: boolean;
    PermissionsUserSlackCapabilities?: boolean;
    PermissionsUtilMgmtExperienceCloudUser?: boolean;
    PermissionsUtilMgmtProviderExprcCloudUser?: boolean;
    PermissionsUtilizationMgmtProviderUser?: boolean;
    PermissionsValidateYubiKeyToken?: boolean;
    PermissionsVideoCallsUserAccess?: boolean;
    PermissionsVideoConferenceMeetUser?: boolean;
    PermissionsVideoConferenceTeamsUser?: boolean;
    PermissionsVideoConferenceZoomUser?: boolean;
    PermissionsViewAllActivities?: boolean;
    PermissionsViewAllCustomSettings?: boolean;
    PermissionsViewAllData?: boolean;
    PermissionsViewAllForecasts?: boolean;
    PermissionsViewAllForeignKeyNames?: boolean;
    PermissionsViewAllNonSetupFlows?: boolean;
    PermissionsViewAllProfiles?: boolean;
    PermissionsViewAllUsers?: boolean;
    PermissionsViewAnomalyEvents?: boolean;
    PermissionsViewApexLimitEvents?: boolean;
    PermissionsViewCaseInteraction?: boolean;
    PermissionsViewClientSecret?: boolean;
    PermissionsViewConsentAuditTrail?: boolean;
    PermissionsViewContent?: boolean;
    PermissionsViewContentTaxonomy?: boolean;
    PermissionsViewCustomerSentiment?: boolean;
    PermissionsViewDataAssessment?: boolean;
    PermissionsViewDataCategories?: boolean;
    PermissionsViewDataLeakageEvents?: boolean;
    PermissionsViewDeveloperName?: boolean;
    PermissionsViewDevices?: boolean;
    PermissionsViewEmailMessagingSetup?: boolean;
    PermissionsViewEncryptedData?: boolean;
    PermissionsViewEventLogFiles?: boolean;
    PermissionsViewForecastingPredictive?: boolean;
    PermissionsViewGlobalHeader?: boolean;
    PermissionsViewHealthCheck?: boolean;
    PermissionsViewHelpLink?: boolean;
    PermissionsViewInAppGuidanceForSites?: boolean;
    PermissionsViewMLModels?: boolean;
    PermissionsViewMyTeamsDashboards?: boolean;
    PermissionsViewNonSetupFlow?: boolean;
    PermissionsViewOnlyEmbeddedAppUser?: boolean;
    PermissionsViewPayments?: boolean;
    PermissionsViewPlatformEvents?: boolean;
    PermissionsViewPrivateStaticResources?: boolean;
    PermissionsViewProductCatalogObjects?: boolean;
    PermissionsViewPublicDashboards?: boolean;
    PermissionsViewPublicEnhancedTemplate?: boolean;
    PermissionsViewPublicFiles?: boolean;
    PermissionsViewPublicReports?: boolean;
    PermissionsViewRestrictionAndScopingRules?: boolean;
    PermissionsViewRoles?: boolean;
    PermissionsViewSMSMessagingSetup?: boolean;
    PermissionsViewSalesPlan?: boolean;
    PermissionsViewSecurityCommandCenter?: boolean;
    PermissionsViewSetup?: boolean;
    PermissionsViewShiftSchedulingResults?: boolean;
    PermissionsViewTopics?: boolean;
    PermissionsViewTrustMeasures?: boolean;
    PermissionsViewUserPII?: boolean;
    PermissionsViewWhatsAppMessagingSetup?: boolean;
    PermissionsViewWorkForecastingResult?: boolean;
    PermissionsViewWorkScheduling?: boolean;
    PermissionsVoiceCoach?: boolean;
    PermissionsVoiceInbound?: boolean;
    PermissionsVoiceMinutes?: boolean;
    PermissionsVoiceOutbound?: boolean;
    PermissionsVoiceWrapUpUser?: boolean;
    PermissionsVoidInvoiceAPIUser?: boolean;
    PermissionsVolunteerMgmtUserAccess?: boolean;
    PermissionsWalkthroughAuthoring?: boolean;
    PermissionsWaveCommunityUser?: boolean;
    PermissionsWaveManagePrivateAssetsUser?: boolean;
    PermissionsWaveTabularDownload?: boolean;
    PermissionsWaveTrendReports?: boolean;
    PermissionsWebExMeetings?: boolean;
    PermissionsWorkCalibrationUser?: boolean;
    PermissionsWorkDotComUserPerm?: boolean;
    PermissionsWorkplaceCommandCenter?: boolean;
    PermissionsWriteCrossOrgUsages?: boolean;
    Profile?: Profile;
    ProfileId?: ID;
    SystemModstamp?: Date;
    Type?: PermissionSetType;
}

export type PermissionSetAssignment = sObject &  {
    Assignee?: User;
    AssigneeId?: ID;
    ExpirationDate?: Date;
    IsActive?: boolean;
    IsRevoked?: boolean;
    LastCreatedByChangeId?: ID;
    LastDeletedByChangeId?: ID;
    PermissionSet?: PermissionSet;
    PermissionSetGroup?: PermissionSetGroup;
    PermissionSetGroupId?: ID;
    PermissionSetId?: ID;
    SystemModstamp?: Date;
}

export type PermissionSetGroup = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Assignments?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    HasActivationRequired?: boolean;
    Hash?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PermissionSetGroupComponents?: QueryResult;
    Status?: PermissionSetGroupStatus;
    SystemModstamp?: Date;
}

export type PermissionSetGroupComponent = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Hash?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PermissionSet?: sObject;
    PermissionSetGroup?: PermissionSetGroup;
    PermissionSetGroupId?: ID;
    PermissionSetId?: ID;
    SystemModstamp?: Date;
}

export type PermissionSetGroupRecalc = sObject &  {
    Cause?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ElapsedTimeMills?: number;
    ErrorMsg?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LoggingInformation?: string;
    PermissionSetGroup?: PermissionSetGroup;
    PermissionSetGroupId?: ID;
    State?: PermissionSetGroupStatus;
    SystemModstamp?: Date;
}

export type PermissionSetTabSetting =  & sObject &  {
    Name?: string;
    Parent?: sObject;
    ParentId?: ID;
    Visibility?: TabVisibility;
}

export type PicklistSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsPicklistApiNameEditDisabled?: boolean;
    Metadata?: PicklistSettings;
}

export type PicklistValueInfo = sObject &  {
    DurableId?: string;
    EntityParticle?: EntityParticle;
    EntityParticleId?: string;
    IsActive?: boolean;
    IsDefaultValue?: boolean;
    Label?: string;
    ValidFor?: string;
    Value?: string;
}

export type PipelineInspMetricConfig = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ForecastingItemCategory?: string;
    IsCumulative?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metric?: PipelineInspectionMetric;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type PlatformAction = sObject &  {
    ActionListContext?: PlatformActionListContext;
    ActionTarget?: string;
    ActionTargetType?: PlatformActionTargetType;
    ApiName?: string;
    DeviceFormat?: PlatformActionDeviceFormat;
    ExternalId?: string;
    IconContentType?: string;
    IconHeight?: number;
    IconUrl?: string;
    IconWidth?: number;
    IsMassAction?: boolean;
    Label?: string;
    LastModifiedDate?: Date;
    OpenType?: WebLinkWindowType;
    PrimaryColor?: string;
    RelatedSourceEntity?: string;
    Section?: PlatformActionSection;
    SourceEntity?: string;
    Subtype?: string;
    TargetObject?: string;
    TargetUrl?: string;
    Type?: PlatformActionType;
}

export type PlatformActionList =  & sObject &  {
    ActionListContext?: PlatformActionListContext;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeviceFormat?: PlatformActionDeviceFormat;
    IsDeleted?: boolean;
    Items?: QueryResult;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ListSource?: sObject;
    ListSourceId?: ID;
    RelatedSourceEntity?: string;
    SystemModstamp?: Date;
}

export type PlatformActionListItem =  & sObject &  {
    Action?: sObject;
    ActionId?: ID;
    ActionName?: string;
    ActionType?: PlatformActionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PlatformActionList?: PlatformActionList;
    PlatformActionListId?: ID;
    SortOrder?: number;
    Subtype?: string;
    SystemModstamp?: Date;
}

export type PlatformCachePartition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDefaultPartition?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PlatforCachePartitionTypes?: QueryResult;
    SystemModstamp?: Date;
}

export type PlatformCachePartitionType =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    AllocatedCapacity?: number;
    AllocatedPartnerCapacity?: number;
    AllocatedPurchasedCapacity?: number;
    AllocatedTrialCapacity?: number;
    CacheType?: PlatformCacheType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    PlatformCachePartition?: PlatformCachePartition;
    PlatformCachePartitionId?: ID;
    SystemModstamp?: Date;
}

export type PlatformEncryptionSettings = MetadataForSettings & sObject &  {
    CanEncryptManagedPackageFields?: boolean;
    DurableId?: string;
    FullName?: string;
    IsDeterministicEncryptionEnabled?: boolean;
    IsEncryptFieldHistoryEnabled?: boolean;
    IsEncryptionSearchEnabledEnabled?: boolean;
    IsEventBusEncryptionEnabled?: boolean;
    IsMekForEncryptionRequired?: boolean;
    IsUseHighAssuranceKeysRequired?: boolean;
    Metadata?: PlatformEncryptionSettings;
}

export type PlatformEventChannel = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ChannelType?: PlatformEventChannelType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: PlatformEventChannel;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type PlatformEventChannelMember = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EventChannel?: string;
    FilterExpression?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: PlatformEventChannelMember;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ReferencedEntity?: string;
    SelectedEntity?: string;
    SystemModstamp?: Date;
}

export type EnrichedField =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    ChannelMember?: PlatformEventChannelMember;
    ChannelMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Field?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    SystemModstamp?: Date;
}

export type PlatformEventSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsEnhancedUsageMetricsEnabled?: boolean;
    Metadata?: PlatformEventSettings;
}

export type PlatformEventSubscriberConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BatchSize?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    NumPartitions?: number;
    PartitionKey?: string;
    PlatformEventConsumer?: ApexTrigger;
    PlatformEventConsumerId?: ID;
    SystemModstamp?: Date;
    User?: User;
    UserId?: ID;
}

export type PlatformSlackSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsSlackServiceAlertsEnabled?: boolean;
    IsSlackServiceEnabled?: boolean;
    Metadata?: PlatformSlackSettings;
    SlackCapabilitiesEnabled?: boolean;
}

export type PortalDelegablePermissionSet = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: PortalDelegablePermissionSet;
    ModuleNamespace?: string;
    PermissionSet?: PermissionSet;
    PermissionSetId?: ID;
    Profile?: Profile;
    ProfileId?: ID;
    SystemModstamp?: Date;
}

export type PortalsSettings = MetadataForSettings & sObject &  {
    ClickjackSspLoginPage?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: PortalsSettings;
    RedirectPortalLoginToHttps?: boolean;
}

export type PredictionBuilderSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsPredictionBuilderEnabled?: boolean;
    IsPredictionBuilderStarted?: boolean;
    Metadata?: PredictionBuilderSettings;
}

export type PredictionDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FailureReason?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Mode?: PredictionDefinitionMode;
    ModuleNamespace?: string;
    SobjectType?: string;
    SortOrder?: number;
    Status?: PredictionDefinitionStatus;
    SystemModstamp?: Date;
    Type?: RecordRecommendationType;
}

export type PredictionDefinitionField = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Field?: string;
    FieldType?: PredictionDefinitionFieldType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PredictionDefinition?: PredictionDefinition;
    PredictionDefinitionId?: ID;
    SobjectType?: string;
    SystemModstamp?: Date;
}

export type PresenceUserConfigInfo = sObject &  {
    DurableId?: string;
    PresenceUserConfigId?: string;
}

export type PriceRule = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConditionLogic?: ConditionLogic;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EffectiveDate?: Date;
    ExpirationDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: PriceRule;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Sequence?: number;
    Status?: RuleStatus;
    SystemModstamp?: Date;
}

export type PriceSheetDefinition = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: PriceSheetDefinition;
    ModuleNamespace?: string;
    PriceSheetEntity?: string;
    Status?: PriceSheetDefinitionStatus;
    SystemModstamp?: Date;
}

export type PricingActionParameters = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextDefinition?: string;
    ContextMapping?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EffectiveFrom?: Date;
    EffectiveTo?: Date;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: PricingActionParameters;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ObjectName?: PricingActionEntities;
    PricingProcedure?: string;
    SystemModstamp?: Date;
}

export type PricingProcedureOutputMap = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OutputFieldName?: sObject;
    OutputFieldNameId?: ID;
    OutputType?: OutputType;
    PricingComponentType?: PricingElementType;
    PricingRecipeTableMapping?: PricingRecipeTableMapping;
    PricingRecipeTableMappingId?: ID;
    SystemModstamp?: Date;
}

export type PricingRecipe = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultPricingProcedure?: ExpressionSetDefinition;
    DefaultPricingProcedureId?: ID;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsInternal?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: PricingRecipe;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PricingElementCanonicalMappings?: QueryResult;
    SystemModstamp?: Date;
}

export type PricingRecipeTableMapping =  & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FileBasedDecisionTableName?: string;
    IsDeleted?: boolean;
    IsInternal?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LookupTable?: sObject;
    LookupTableId?: ID;
    ManageableState?: ManageableState;
    PricingComponentType?: PricingElementType;
    PricingRecipe?: PricingRecipe;
    PricingRecipeId?: ID;
    PricingRecipeTableMappingForPOM?: QueryResult;
    SystemModstamp?: Date;
}

export type PrivacySettings = MetadataForSettings & sObject &  {
    AuthorizationCaptureBrowser?: boolean;
    AuthorizationCaptureEmail?: boolean;
    AuthorizationCaptureIp?: boolean;
    AuthorizationCaptureLocation?: boolean;
    AuthorizationCustomSharing?: boolean;
    AuthorizationLockingAndVersioning?: boolean;
    DurableId?: string;
    FullName?: string;
    IsConfigurableUserPiiActiveEnabled?: boolean;
    IsConsentAuditTrailEnabled?: boolean;
    IsConsentEventStreamEnabled?: boolean;
    IsDefaultMetadataValuesEnabled?: boolean;
    Metadata?: PrivacySettings;
    UseUmaDefaultConsentRecs?: boolean;
}

export type PrivateDomainDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Domain?: string;
    IsDeleted?: boolean;
    IsSelfHosted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    ValidationStatus?: PrivateDomainDefinitionValidationStatus;
}

export type ProcessFlowMigration = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DestinationFlowDefinition?: FlowDefinition;
    DestinationFlowDefinitionId?: ID;
    DestinationFlowVersion?: Flow;
    DestinationFlowVersionId?: ID;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MigratedCriteriaLabel?: string;
    MigratedCriteriaName?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ProcessVersion?: Flow;
    ProcessVersionId?: ID;
    SystemModstamp?: Date;
}

export type ProcessPalette = Metadata & sObject &  {
    DurableId?: string;
    EnumOrId?: string;
    FullName?: string;
    Metadata?: ProcessPalette;
}

export type ProcessPlugin = sObject &  {
    ApexClass?: string;
    Description?: string;
    DurableId?: string;
    Name?: string;
    Parameters?: QueryResult;
    Tag?: string;
}

export type ProcessPluginParameter = sObject &  {
    DataType?: string;
    Description?: string;
    DurableId?: string;
    IsInput?: boolean;
    IsOutput?: boolean;
    IsRequired?: boolean;
    Name?: string;
    ProcessPlugin?: ProcessPlugin;
    ProcessPluginId?: string;
}

export type ProcessTypeDefinition = Metadata & sObject &  {
    DurableId?: string;
    EnumOrId?: string;
    FullName?: string;
    IsFlowManaged?: boolean;
    IsListViewManaged?: boolean;
    Label?: string;
    Metadata?: ProcessTypeDefinition;
    Name?: string;
}

export type ProductAttrDisplayConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: ConfiguratorDataType;
    DeveloperName?: string;
    DisplayType?: AttributeDisplayType;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Status?: ConfiguratorStatus;
    SystemModstamp?: Date;
}

export type ProductAttributeSet = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ProductAttributeSet;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type ProductFamilyUsage = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ProductFamilyUsage;
    ModuleNamespace?: string;
    ProductFamily?: string;
    SystemModstamp?: Date;
    UsageType?: ProductFamilyUsageType;
}

export type ProductPropertyInfo = sObject &  {
    DurableId?: string;
    FieldId?: string;
    IsAttribute?: boolean;
    IsCustom?: boolean;
    IsDisplayable?: boolean;
    IsFacetable?: boolean;
    IsPublishable?: boolean;
    IsSearchable?: boolean;
    IsSortable?: boolean;
    IsVariantAttribute?: boolean;
    Name?: string;
    ObjectName?: string;
    Property?: EntityParticle;
    PropertyId?: string;
    PropertyObjectScope?: PropertyObjectScope;
}

export type ProductSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCascadeActivateToRelatedPricesEnabled?: boolean;
    IsMySettingsEnabled?: boolean;
    IsQuantityScheduleEnabled?: boolean;
    IsRevenueScheduleEnabled?: boolean;
    Metadata?: ProductSettings;
}

export type ProductSpecificationRecType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsCommercial?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ProductSpecificationType?: string;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SystemModstamp?: Date;
}

export type ProductSpecificationType = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type Profile = Metadata & sObject &  {
    AdvAcctForecastAdjPeriodProfile?: QueryResult;
    AdvAcctFrcstDisplayGroupProfile?: QueryResult;
    AssistantDefinitionProfiles?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Metadata?: Profile;
    Name?: string;
    OmniInteractionAccessConfigs?: QueryResult;
    ProfileLayouts?: QueryResult;
    TimeSheetTemplateAssignments?: QueryResult;
    UserLicenseId?: ID;
    Users?: QueryResult;
}

export type ProfileActionOverride =  & sObject &  {
    Action?: string;
    Content?: FlexiPage;
    ContentId?: ID;
    ContentName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomApplication?: CustomApplication;
    CustomApplicationId?: ID;
    FormFactor?: FormFactor;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PageOrSobjectType?: string;
    Profile?: Profile;
    ProfileId?: ID;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SystemModstamp?: Date;
    Type?: ActionOverrideType;
}

export type ProfileCallLogQuickAction = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Profile?: Profile;
    ProfileId?: ID;
    QuickActionDefinition?: QuickActionDefinition;
    QuickActionDefinitionId?: ID;
    SystemModstamp?: Date;
}

export type ProfileLayout = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Layout?: Layout;
    LayoutId?: ID;
    Profile?: Profile;
    ProfileId?: ID;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SystemModstamp?: Date;
    TableEnumOrId?: string;
}

export type ProfileManifestEntry = sObject &  {
    ComponentType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    StandardObjectOrFieldName?: string;
    SystemModstamp?: Date;
}

export type ProfileSearchCustomization =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Profile?: Profile;
    ProfileId?: ID;
    SearchCustomization?: SearchCustomization;
    SearchCustomizationId?: ID;
    SystemModstamp?: Date;
}

export type Prompt = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: Prompt;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type PromptVersion =  & sObject &  {
    ActionButtonLabel?: string;
    ActionButtonLink?: string;
    AllManagedPackageMemberId?: ID;
    Body?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomApplication?: CustomApplication;
    CustomApplicationId?: ID;
    DelayDays?: number;
    Description?: string;
    DismissButtonLabel?: string;
    DisplayPosition?: PromptDisplayPosition;
    DisplayType?: PromptDisplayType;
    ElementRelativePosition?: PromptElementRelativePosition;
    EndDate?: Date;
    Experience?: PromptExperience;
    ExperienceContext?: sObject;
    ExperienceContextId?: ID;
    Header?: string;
    Icon?: string;
    ImageAltText?: string;
    ImageId?: ID;
    ImageLink?: string;
    ImageLocation?: PromptImageLocation;
    IndexWithIsPublished?: string;
    IndexWithoutIsPublished?: string;
    IsDeleted?: boolean;
    IsPublished?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Parent?: Prompt;
    ParentId?: ID;
    PublishedByUser?: User;
    PublishedByUserId?: ID;
    PublishedDate?: Date;
    ReferenceElementContext?: string;
    ShouldDisplayActionButton?: boolean;
    ShouldIgnoreGlobalDelay?: boolean;
    StartDate?: Date;
    StepNumber?: number;
    SystemModstamp?: Date;
    TargetAppDeveloperName?: string;
    TargetAppNamespacePrefix?: string;
    TargetPageKey1?: string;
    TargetPageKey1Ref?: string;
    TargetPageKey2?: string;
    TargetPageKey3?: string;
    TargetPageKey4?: string;
    TargetPageType?: string;
    TargetRecordType?: RecordType;
    TargetRecordTypeId?: ID;
    ThemeColor?: PromptThemeColor;
    ThemeSaturation?: PromptThemeSaturation;
    TimesToDisplay?: number;
    Title?: string;
    UserAccess?: PromptUserAccess;
    UserProfileAccess?: PromptUserProfileAccess;
    VersionNumber?: number;
    VideoLink?: string;
}

export type ProvisionedFeature = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FalconCell?: string;
    FalconFunctionalDomain?: string;
    FalconInstance?: string;
    FeatureName?: string;
    FeatureVersion?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type PublicKeyCertificate = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExpiryDate?: Date;
    IsActive?: boolean;
    IsDeleted?: boolean;
    JsonWebKey?: string;
    KeyIdentifier?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type PublicKeyCertificateSet = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    JwksEndPoint?: string;
    JwtIssuer?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
    Type?: PublicKeyCertificateSetType;
}

export type PublicKeyCertificateSetKey = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    PublicKeyCertificate?: PublicKeyCertificate;
    PublicKeyCertificateId?: ID;
    PublicKeyCertificateSet?: PublicKeyCertificateSet;
    PublicKeyCertificateSetId?: ID;
    SystemModstamp?: Date;
}

export type Publisher = sObject &  {
    DurableId?: string;
    InstalledEntityDefinitions?: QueryResult;
    InstalledFieldDefinitions?: QueryResult;
    IsSalesforce?: boolean;
    MajorVersion?: number;
    MinorVersion?: number;
    Name?: string;
    NamespacePrefix?: string;
}

export type QuickActionDefinition = sObject &  {
    ActionSubtype?: ActionSubtype;
    AllManagedPackageMemberId?: ID;
    Component?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    Height?: number;
    Icon?: StaticResource;
    IconId?: ID;
    IsDeleted?: boolean;
    Label?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: QuickAction;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OptionsCreateFeedItem?: boolean;
    SobjectType?: string;
    StandardLabel?: QuickActionLabel;
    SuccessMessage?: string;
    SystemModstamp?: Date;
    TargetField?: string;
    TargetRecordType?: RecordType;
    TargetRecordTypeId?: ID;
    TargetSobjectType?: string;
    Type?: QuickActionType;
    Width?: number;
}

export type QuickActionList =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Layout?: sObject;
    LayoutId?: ID;
    SystemModstamp?: Date;
    items?: QueryResult;
}

export type QuickActionListItem =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    QuickActionDefinition?: string;
    QuickActionList?: QuickActionList;
    QuickActionListId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type QuickTextSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    HideQuickTextUiInLtng?: boolean;
    LightningQuickTextEnabled?: boolean;
    Metadata?: QuickTextSettings;
    QuickTextsInFolders?: boolean;
}

export type QuotasSettings =  & sObject &  {
    DurableId?: string;
    ShowQuotas?: boolean;
}

export type QuoteSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsQuoteEnabled?: boolean;
    IsQuotesWithoutOppEnabledEnabled?: boolean;
    Metadata?: QuoteSettings;
}

export type RealTimeEvent =  & sObject &  {
    DurableId?: string;
    EntityName?: string;
    IsEnabled?: boolean;
}

export type RealTimeEventSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    Metadata?: RealTimeEventSettings;
}

export type RecAlrtDataSrcExpSetDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExpressionSetDefinition?: ExpressionSetDefinition;
    ExpressionSetDefinitionId?: ID;
    ExpressionSetObject?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RecAlrtDataSrcExpSetDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordAlertDataSource?: RecordAlertDataSource;
    RecordAlertDataSourceId?: ID;
    SystemModstamp?: Date;
}

export type RecentlyViewed = sObject &  {
    AddressableName?: string;
    Alias?: string;
    CommunityNickname?: string;
    CompanyName?: string;
    Email?: string;
    FirstName?: string;
    InformalName?: string;
    IsActive?: boolean;
    IsArchived?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastName?: string;
    LastReferencedDate?: Date;
    LastViewedDate?: Date;
    MiddleName?: string;
    Name?: string;
    NameOrAlias?: string;
    NetworkId?: ID;
    OwnerType?: string;
    Phone?: string;
    Profile?: Profile;
    ProfileId?: ID;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    RelatedObject?: string;
    Suffix?: string;
    Title?: string;
    Type?: string;
    UserRole?: UserRole;
    UserRoleId?: ID;
}

export type RecommendationBuilderSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsErbEnabledPrefEnabled?: boolean;
    IsErbStartedPrefEnabled?: boolean;
    Metadata?: RecommendationBuilderSettings;
}

export type RecommendationDefReference = sObject &  {
    ExternalId?: string;
    RecommendationDefId?: string;
    RecommendationStrategyId?: string;
}

export type RecommendationStrategy = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextRecordType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Fullname?: string;
    IsDeleted?: boolean;
    IsTemplate?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RecommendationStrategy;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OnBehalfOfExpression?: string;
    SystemModstamp?: Date;
}

export type RecordActionDeployment = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ComponentName?: ComponentName;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    HasGuidedActions?: boolean;
    HasOmniscripts?: boolean;
    HasRecommendations?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RecordActionDeployment;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type RecordAggregationDefinition = Metadata & sObject &  {
    AggregateFromObject?: string;
    AggregateToObject?: string;
    AggregationType?: RecordAggregationDefinitionAggregationType;
    AllManagedPackageMemberId?: ID;
    BatchProcessingDefinition?: BatchCalcJobDefinition;
    BatchProcessingDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DisplayName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RecordAggregationDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordAggregationObjects?: QueryResult;
    Status?: RecordAggregationDefinitionStatus;
    SystemModstamp?: Date;
}

export type RecordAggregationJoinCondition =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    JoinField?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NavigationSequenceNumber?: number;
    RecordAggregationObject?: RecordAggregationObject;
    RecordAggregationObjectId?: ID;
    RelatedJoinField?: string;
    RelatedRecordAggrObject?: RecordAggregationObject;
    RelatedRecordAggrObjectId?: ID;
    SystemModstamp?: Date;
    Type?: RecordAggregationJoinConditionType;
}

export type RecordAggregationObject =  & sObject &  {
    AssociatedObject?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FilterLogic?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    RecordAggregationDefinition?: RecordAggregationDefinition;
    RecordAggregationDefinitionId?: ID;
    RecordAggregationObjectFilters?: QueryResult;
    RecordAggregationObjectForJoinConditions?: QueryResult;
    RelatedRecordAggrObjectForJoinConditions?: QueryResult;
    SystemModstamp?: Date;
}

export type RecordAggregationObjectFilter =  & sObject &  {
    AssociatedObjectField?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Operator?: RecordAggregationObjectFilterOperator;
    RecordAggregationObject?: RecordAggregationObject;
    RecordAggregationObjectId?: ID;
    SequenceNumber?: number;
    SystemModstamp?: Date;
    Value?: string;
}

export type RecordAlertCategory = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RecordAlertCategory;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordAlertCategory?: QueryResult;
    Severity?: string;
    SystemModstamp?: Date;
}

export type RecordAlertDataSource = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RecordAlertDataSource;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: RecordAlertDataSourceType;
}

export type RecordAlertTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RecordAlertTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordAlertCategory?: RecordAlertCategory;
    RecordAlertCategoryId?: ID;
    Subject?: string;
    SystemModstamp?: Date;
}

export type RecordPageSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsActivityRelatedListEnabled?: boolean;
    IsFullRecordViewEnabled?: boolean;
    Metadata?: RecordPageSettings;
}

export type RecordType = Metadata & sObject &  {
    BusinessProcessId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    IsActive?: boolean;
    IsPersonType?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LearningAchvRecordTypes?: QueryResult;
    ManageableState?: ManageableState;
    Metadata?: RecordType;
    Name?: string;
    NamespacePrefix?: string;
    RecordType?: QueryResult;
    RecordTypes?: QueryResult;
    SobjectType?: string;
}

export type RegisteredExternalService = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConfigUrl?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DocumentationUrl?: string;
    ExtensionPointName?: ExtensionPointName;
    ExternalServiceProvider?: ApexClass;
    ExternalServiceProviderId?: ID;
    ExternalServiceProviderType?: RegistryProviderType;
    FullName?: string;
    IconUri?: string;
    IsApplication?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RegisteredExternalService;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type RelatedEntity = sObject &  {
    DurableId?: string;
    RelatedId?: string;
    RelationshipType?: RelationshipType;
    RootId?: string;
}

export type RelatedListColumnDefinition = sObject &  {
    Alias?: string;
    ColumnSoql?: string;
    DataType?: string;
    DurableId?: string;
    FieldDefinition?: FieldDefinition;
    FieldDefinitionId?: string;
    IsDefault?: boolean;
    IsDescribable?: boolean;
    Label?: string;
    LookupId?: string;
    RelatedListDefinition?: RelatedListDefinition;
    RelatedListDefinitionId?: string;
}

export type RelatedListDefinition = sObject &  {
    DefaultSort?: string;
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    IsCustomizable?: boolean;
    IsDescribable?: boolean;
    IsLayoutable?: boolean;
    Label?: string;
    ParentEntityDefinition?: EntityDefinition;
    ParentEntityDefinitionId?: string;
    RelatedListColumnDefinitions?: QueryResult;
    RelatedListId?: string;
    RelatedListName?: string;
}

export type RelatedObjectPartySrchDef = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DisplayField1Name?: string;
    DisplayField2Name?: string;
    DisplayField3Name?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    RelationshipSequenceNumber?: number;
    RelationshipType?: ERIRelationshipType;
    SystemModstamp?: Date;
    TargetObject?: string;
    TargetRecordType?: RecordType;
    TargetRecordTypeId?: ID;
}

export type RelatedRecordAssocCriteria = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    AssociationHandlerApexClass?: ApexClass;
    AssociationHandlerApexClassId?: ID;
    AssociationType?: AssociationType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EventType?: AssociationEventType;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RelatedRecordAssocCriteria;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PreCondition?: string;
    ReferenceObject?: string;
    SelectedOwnerField?: string;
    Status?: AssociationStatusType;
    SystemModstamp?: Date;
}

export type RelationshipDomain = sObject &  {
    ChildSobject?: EntityDefinition;
    ChildSobjectId?: string;
    DurableId?: string;
    Field?: FieldDefinition;
    FieldId?: string;
    IsCascadeDelete?: boolean;
    IsDeprecatedAndHidden?: boolean;
    IsRestrictedDelete?: boolean;
    JunctionIdListNames?: JunctionIdListNames;
    ParentSobject?: EntityDefinition;
    ParentSobjectId?: string;
    RelationshipInfo?: RelationshipInfo;
    RelationshipInfoId?: string;
    RelationshipName?: string;
}

export type RelationshipGraphDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsTemplate?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RelationshipGraphDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RootObject?: EntityDefinition;
    RootObjectId?: string;
    SystemModstamp?: Date;
}

export type RelationshipInfo = sObject &  {
    ChildSobject?: EntityDefinition;
    ChildSobjectId?: string;
    DurableId?: string;
    Field?: FieldDefinition;
    FieldId?: string;
    IsCascadeDelete?: boolean;
    IsDeprecatedAndHidden?: boolean;
    IsRestrictedDelete?: boolean;
    JunctionIdListNames?: JunctionIdListNames;
    RelationshipDomains?: QueryResult;
}

export type ReleaseUpdate = sObject &  {
    ApiVersion?: number;
    Category?: string;
    Description?: string;
    DeveloperName?: string;
    DueDate?: Date;
    DurableId?: string;
    HasNewSteps?: boolean;
    IsReleased?: boolean;
    NumCompSteps?: number;
    NumReqSteps?: number;
    NumSteps?: number;
    Release?: string;
    ReleaseDate?: Date;
    ReleaseLabel?: string;
    Status?: ReleaseUpdateStatus;
    StepLog?: QueryResult;
    StepStage?: string;
    Steps?: QueryResult;
    SupportsRevoke?: boolean;
    Title?: string;
}

export type ReleaseUpdateStep = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayEdit?: boolean;
    Name?: string;
    Number?: number;
    ReleaseUpdate?: ReleaseUpdate;
    ReleaseUpdateId?: string;
    Status?: ReleaseUpdateStepStatus;
    SystemModstamp?: Date;
}

export type ReleaseUpdateStepLog = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CurrencyIsoCode?: string;
    IsDeleted?: boolean;
    IsLocked?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayEdit?: boolean;
    Name?: string;
    ReleaseUpdate?: ReleaseUpdate;
    ReleaseUpdateId?: string;
    Status?: ReleaseUpdateStepStatus;
    SystemModstamp?: Date;
}

export type ReleasedApexClassRel = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Package2Version?: Package2Version;
    Package2VersionId?: ID;
    ParentModuleNamespace?: string;
    ParentNameNorm?: string;
    ParentNamespacePrefix?: string;
    RelationshipType?: number;
    ReleasedApexIdentifier?: ReleasedApexIdentifier;
    ReleasedApexIdentifierId?: ID;
    ReleasedApexIdentifierUUID?: string;
    SystemModstamp?: Date;
}

export type ReleasedApexIdentifier = sObject &  {
    ApexClassIdentifierId?: ID;
    ApexReleasedEntityState?: ReleasedEntityState;
    ApexReleasedEntityStateId?: ID;
    ApexReleasedEntityStateUUID?: string;
    ColumnNumber?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IdentifierName?: string;
    IdentifierType?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LineNumber?: number;
    MaxPackageVersion?: SubscriberPackageVersion;
    MaxPackageVersionId?: ID;
    Options1?: number;
    Options2?: number;
    Package2Version?: Package2Version;
    Package2VersionId?: ID;
    Parent?: ReleasedApexIdentifier;
    ParentId?: ID;
    ParentUUID?: string;
    ReleasedApexClassRels?: QueryResult;
    ReleasedApexIdentifierOptions?: QueryResult;
    ReleasedApexIdentifiers?: QueryResult;
    Signature?: string;
    SubjectNameNorm?: string;
    SystemModstamp?: Date;
    UUID?: string;
}

export type ReleasedApexIdentifierOption = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OptionValue?: number;
    Package2Version?: Package2Version;
    Package2VersionId?: ID;
    Parent?: ReleasedApexIdentifier;
    ParentId?: ID;
    ParentUUID?: string;
    SystemModstamp?: Date;
}

export type ReleasedEntityState = sObject &  {
    ApiVersion?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EntityApiVersion?: number;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MaxPackageVersion?: SubscriberPackageVersion;
    MaxPackageVersionId?: ID;
    MinPackageVersion?: SubscriberPackageVersion;
    MinPackageVersionId?: ID;
    Package2?: Package2;
    Package2Id?: ID;
    Package2Version?: Package2Version;
    Package2VersionId?: ID;
    Parent?: string;
    ParentUUID?: string;
    ReleasedApexIdentifiers?: QueryResult;
    State?: string;
    StateLength?: number;
    Subject?: sObject;
    SubjectId?: ID;
    SubjectKeyPrefix?: string;
    SubjectManageableState?: ManageableState;
    SubjectManageableStateDb?: string;
    SubjectModuleNamespace?: string;
    SubjectNameNorm?: string;
    SubjectNamespacePrefix?: string;
    SystemModstamp?: Date;
    UUID?: string;
}

export type RemoteProxy = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    EndpointUrl?: string;
    FullName?: string;
    IsActive?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: RemoteSiteSetting;
    NamespacePrefix?: string;
    ProtocolMismatch?: boolean;
    SiteName?: string;
    SystemModstamp?: Date;
}

export type RestrictionRule = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EnforcementType?: EnforcementType;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: RestrictionRule;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParentId?: ID;
    RecordFilter?: string;
    SystemModstamp?: Date;
    TargetEntity?: string;
    UserCriteria?: string;
    Version?: number;
}

export type RetailExecutionSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsProductHierarchyEnabled?: boolean;
    IsRetailExecutionEnabled?: boolean;
    IsVisitSharingEnabled?: boolean;
    Metadata?: RetailExecutionSettings;
}

export type RevenueSourceCategoryConfig = sObject &  {
    ClosedDateFieldName?: string;
    ClosedLostStageOption?: string;
    ClosedWonStageOption?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsDraft?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    RevenueDataSource?: RevenueSourceObjectConfig;
    RevenueDataSourceFieldName?: string;
    RevenueDataSourceId?: ID;
    StageFieldName?: string;
    SystemModstamp?: Date;
}

export type RevenueSourceObjectConfig = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsDraft?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    PrimaryAccountFieldName?: string;
    ProductNameField?: string;
    ProductReferenceFieldName?: string;
    ProductReferenceObjectName?: string;
    RevDataSourceRefFieldName?: string;
    RevenueDataSource?: string;
    RevenueProductDataset?: string;
    RevenueSourceObjectConfigs?: QueryResult;
    SystemModstamp?: Date;
    UserIdentifierFieldName?: string;
}

export type RuleDefinition = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    RuleLibraryDefinition?: RuleLibraryDefinition;
    RuleLibraryDefinitionId?: ID;
    SystemModstamp?: Date;
}

export type RuleLibraryContextTag = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    HashableContextTag?: ContextTag;
    HashableContextTagId?: ID;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MappingName?: string;
    RuleLibraryDefinition?: RuleLibraryDefinition;
    RuleLibraryDefinitionId?: ID;
    SystemModstamp?: Date;
    UsageSubtype?: ContextRuleUsageSubtype;
}

export type RuleLibraryDefinition = Metadata & sObject &  {
    BodyLength?: number;
    CompressedBodyLength?: number;
    ContextDefinition?: ContextDefinition;
    ContextDefinitionId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: RuleLibraryDefinition;
    ModuleNamespace?: string;
    RuleLibrary?: string;
    Status?: ContextRuleStatus;
    SystemModstamp?: Date;
    UsageType?: ContextRuleUsageType;
}

export type RulesetDefinition = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    RuleLibraryDefinition?: RuleLibraryDefinition;
    RuleLibraryDefinitionId?: ID;
    SystemModstamp?: Date;
}

export type SalesAgreementSettings = Metadata & sObject &  {
    ActualsCalculationMode?: ActualsCalculationMode;
    AdvAcctFrcstDisplayGroupForecastSet?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DisplayedAgreementTermsMetrics?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsOnlyApprovalProcessUsed?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: SalesAgreementSettings;
    ModuleNamespace?: string;
    ObjectMapping?: ObjectMapping;
    ObjectMappingId?: ID;
    PrimaryNotifEmailAddress?: string;
    RenewalPeriodDayCount?: number;
    SecondaryNotifEmailAddress?: string;
    SystemModstamp?: Date;
}

export type SandboxInfo = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    AutoActivate?: boolean;
    CopyArchivedActivities?: boolean;
    CopyChatter?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    FfxCopyStrategy?: FfxCopyStrategy;
    HistoryDays?: number;
    IsDeleted?: boolean;
    IsNonPreview?: boolean;
    IsPreRelease?: boolean;
    IsPreview?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LicenseType?: SandboxLicenseType;
    PreConfigurableAddon?: string;
    ProdOrgId?: ID;
    SandboxName?: string;
    Source?: SandboxInfo;
    SourceId?: ID;
    Strategy?: OrgCopyStrategy;
    SystemModstamp?: Date;
    Template?: PartitionLevelScheme;
    TemplateId?: ID;
}

export type SandboxProcess = sObject &  {
    ActivatedBy?: User;
    ActivatedById?: ID;
    ActivatedDate?: Date;
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    AutoActivate?: boolean;
    CopyArchivedActivities?: boolean;
    CopyChatter?: boolean;
    CopyProgress?: number;
    CopyProgressInfo?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    EndDate?: Date;
    FfxCopyStrategy?: FfxCopyStrategy;
    HistoryDays?: number;
    IsDeleted?: boolean;
    IsQuickCopy?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LicenseType?: SandboxLicenseType;
    PostConfigurableAddon?: string;
    Priority?: number;
    QueueName?: string;
    RefreshAction?: SandboxRefreshAction;
    SandboxInfo?: SandboxInfo;
    SandboxInfoId?: ID;
    SandboxName?: string;
    SandboxOrgId?: ID;
    SandboxOrganization?: string;
    Source?: SandboxInfo;
    SourceId?: ID;
    StartDate?: Date;
    Status?: string;
    StatusEnum?: ScheduledProcessStatus;
    Strategy?: OrgCopyStrategy;
    SupportComments?: string;
    SuspendInfo?: string;
    SystemModstamp?: Date;
    Template?: PartitionLevelScheme;
    TemplateId?: ID;
}

export type SandboxSettings = MetadataForSettings & sObject &  {
    DisableSandboxExpirationEmails?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: SandboxSettings;
}

export type SchedulingObjective = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: SchedulingObjective;
    ModuleNamespace?: string;
    SchedulingCategory?: SchedulingCategory;
    SchedulingObjectiveType?: SchedulingObjectiveType;
    SystemModstamp?: Date;
}

export type SchedulingRule = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: SchedulingRule;
    ModuleNamespace?: string;
    SchedulingCategory?: SchedulingCategory;
    SchedulingRuleType?: SchedulingRuleType;
    SystemModstamp?: Date;
}

export type SchemaSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAdvancedCmtSecurityEnabled?: boolean;
    IsAdvancedCsSecurityEnabled?: boolean;
    IsListCustomSettingCreationEnabled?: boolean;
    IsSoslOnCustomSettingsEnabled?: boolean;
    Metadata?: SchemaSettings;
}

export type Scontrol = Metadata & sObject &  {
    ContentSource?: SControlContentSource;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    EncodingKey?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Name?: string;
    NamespacePrefix?: string;
    SupportsCaching?: boolean;
}

export type ScoreCategory = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CategoryName?: string;
    ChildScoreCategories?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IconUrl?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParentCategory?: ScoreCategory;
    ParentCategoryId?: ID;
    RangeCategory?: QueryResult;
    ScoreCalcInsightConfigs?: QueryResult;
    ScoreRangeClassification_Category?: QueryResult;
    SystemModstamp?: Date;
}

export type ScoreCategoryCalcInsight =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    InsightDateFieldName?: string;
    InsightName?: string;
    InsightScoreFieldName?: string;
    InsightSubjectFieldName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ScoreCategory?: ScoreCategory;
    ScoreCategoryId?: ID;
    SystemModstamp?: Date;
}

export type ScoreRangeClassification =  & sObject &  {
    ClassificationName?: string;
    ColorHexadecimalCode?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    RangeClassification?: QueryResult;
    RangeEndValue?: number;
    RangeStartValue?: number;
    ScoreCategory?: ScoreCategory;
    ScoreCategoryId?: ID;
    SystemModstamp?: Date;
}

export type SearchCriteriaConfiguration = Metadata & sObject &  {
    ActionList?: string;
    AggrCriteriaFieldset?: FieldSet;
    AggrCriteriaFieldsetId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    DistanceCriteria?: string;
    FilterType?: SearchCriteriaConfigurationFilterType;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: SearchCriteriaConfiguration;
    ModuleNamespace?: string;
    ResultDisplayFormat?: SearchCriteriaConfigurationResultDisplayFormat;
    ResultFieldset?: FieldSet;
    ResultFieldsetId?: ID;
    ResultFlexCard?: string;
    SearchCriteriaFieldset?: FieldSet;
    SearchCriteriaFieldsetId?: ID;
    SearchableObjDataSyncInfo?: SearchableObjDataSyncInfo;
    SearchableObjDataSyncInfoId?: ID;
    SearchableObject?: string;
    SortingCriteriaFieldset?: FieldSet;
    SortingCriteriaFieldsetId?: ID;
    SystemModstamp?: Date;
}

export type SearchCustomization = Metadata & sObject &  {
    Channel?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type SearchFieldCustomization =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FieldReference?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ObjectReference?: string;
    PropertyName?: string;
    PropertyValue?: string;
    SearchCustomization?: SearchCustomization;
    SearchCustomizationId?: ID;
    SystemModstamp?: Date;
}

export type SearchLayout = sObject &  {
    ButtonsDisplayed?: SearchLayoutButtonsDisplayed;
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FieldsDisplayed?: SearchLayoutFieldsDisplayed;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LayoutType?: string;
    ListLayout?: string;
    Profile?: string;
    ProfileName?: string;
}

export type SearchObjectCustomization =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ObjectReference?: string;
    PropertyName?: string;
    PropertyValue?: string;
    SearchCustomization?: SearchCustomization;
    SearchCustomizationId?: ID;
    SystemModstamp?: Date;
}

export type SearchResultActionConfig = Metadata & sObject &  {
    ActionReference?: string;
    ActionScope?: SearchResultActionScope;
    ActionType?: SearchResultActionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: SearchResultActionConfig;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type SearchSettings = MetadataForSettings & sObject &  {
    DocumentContentSearchEnabled?: boolean;
    DurableId?: string;
    FullName?: string;
    IsAdvancedSearchInAlohaSidebarEnabled?: boolean;
    IsEinsteinSearchAnswersGptEnabled?: boolean;
    IsEinsteinSearchAssistantDialogEnabled?: boolean;
    IsEinsteinSearchEs4kPilotEnabled?: boolean;
    IsEinsteinSearchNaturalLanguageEnabled?: boolean;
    IsEinsteinSearchNlsFiltersEnabled?: boolean;
    IsEinsteinSearchPersonalizationEnabled?: boolean;
    IsEinsteinSearchQaEnabled?: boolean;
    IsPersonalTaggingEnabled?: boolean;
    IsPublicTaggingEnabled?: boolean;
    IsQuerySuggestionPigOnEnabled?: boolean;
    IsSalesforceGeneratedSynonymsEnabled?: boolean;
    IsSearchTermHistoryEnabled?: boolean;
    IsSetupSearchEnabled?: boolean;
    IsSuggestArticlesLinksOnlyEnabled?: boolean;
    IsUseDefaultSearchEntityEnabled?: boolean;
    Metadata?: SearchSettings;
    OptimizeSearchForCjkEnabled?: boolean;
    RecentlyViewedUsersForBlankLookupEnabled?: boolean;
    SearchSettingsByObject?: SearchSettingsByObject;
    SearchSettingsByObjectId?: string;
    SidebarAutoCompleteEnabled?: boolean;
    SidebarDropDownListEnabled?: boolean;
    SidebarLimitToItemsIownCheckboxEnabled?: boolean;
    SingleSearchResultShortcutEnabled?: boolean;
    SpellCorrectKnowledgeSearchEnabled?: boolean;
}

export type SearchSettingsByObject =  & sObject &  {
    DurableId?: string;
}

export type SearchableField = sObject &  {
    ExperienceName?: string;
    ExternalId?: string;
    FieldApiName?: string;
    IsSearchable?: boolean;
    IsSearchableEditable?: boolean;
    ObjectName?: string;
}

export type SearchableObjDataSyncInfo = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSyncJob?: BatchCalcJobDefinition;
    DataSyncJobId?: ID;
    Description?: string;
    DeveloperName?: string;
    DisplayFieldSet?: FieldSet;
    DisplayFieldSetId?: ID;
    FullName?: string;
    IsDataSyncActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastDataSyncRunDate?: Date;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: SearchableObjDataSyncInfo;
    ModuleNamespace?: string;
    ParsingFieldSet?: FieldSet;
    ParsingFieldSetId?: ID;
    ScheduleFrequencyInHours?: number;
    SearchableObjDataSyncInfos?: QueryResult;
    SearchableObject?: string;
    SystemModstamp?: Date;
}

export type SecurityHealthCheck = sObject &  {
    CustomBaselineId?: string;
    DurableId?: string;
    Score?: string;
    SecurityHealthCheckRisk?: QueryResult;
}

export type SecurityHealthCheckRisks = sObject &  {
    DurableId?: string;
    OrgValue?: string;
    OrgValueRaw?: string;
    RiskType?: RiskType;
    SecurityHealthCheck?: SecurityHealthCheck;
    SecurityHealthCheckId?: string;
    Setting?: string;
    SettingGroup?: string;
    SettingRiskCategory?: SettingRiskCategory;
    StandardValue?: string;
    StandardValueRaw?: string;
}

export type SecuritySettings = MetadataForSettings & sObject &  {
    CanUsersGrantLoginAccess?: boolean;
    DurableId?: string;
    FullName?: string;
    IsAdminLoginAsAnyUserEnabled?: boolean;
    IsAuditFieldsInactiveOwnerEnabled?: boolean;
    IsAuraSecureEvalPrefEnabled?: boolean;
    IsCoepHeaderEnabled?: boolean;
    IsCoopHeaderEnabled?: boolean;
    IsCrossOrgRedirectsEnabled?: boolean;
    IsPermissionsPolicyEnabled?: boolean;
    IsRequireHttpsConnectionEnabled?: boolean;
    Metadata?: SecuritySettings;
    NetworkAccess?: NetworkAccess;
    NetworkAccessId?: string;
    PasswordPolicies?: PasswordPolicies;
    PasswordPoliciesId?: string;
    RedirectBlockModeEnabled?: boolean;
    SendCspForUncommonClients?: boolean;
    SessionSettings?: SessionSettings;
    SessionSettingsId?: string;
    SingleSignOnSettings?: SingleSignOnSettings;
    SingleSignOnSettingsId?: string;
}

export type SemanticDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: SemanticDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    Type?: SemanticDefinitionType;
}

export type SemanticModel = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    App?: string;
    Categories?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataSpaceDefinitionId?: ID;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: SemanticModel;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    UnrelatedDataObjectsQueryBehavior?: SemanticModelQueryUnrelatedDataObjectsType;
}

export type SenderFromDefinition = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    EmailFromAddress?: string;
    EmailFromName?: string;
    EmailReplyAddress?: string;
    EmailReplyName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    PrivateDomain?: PrivateDomainDefinition;
    PrivateDomainId?: ID;
    Status?: SenderFromDefinitionStatus;
    SystemModstamp?: Date;
}

export type Service = sObject &  {
    DeveloperName?: string;
    DurableId?: string;
    Types?: QueryResult;
    Versions?: QueryResult;
    WebServiceDefinitions?: QueryResult;
    WsdlDataTypes?: QueryResult;
    XmlSchemas?: QueryResult;
}

export type ServiceAISetupDefinition = Metadata & sObject &  {
    AppSourceType?: ApplicationSourceType;
    ConvDefPredictionSetups?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ServiceAISetupDefinition;
    ModuleNamespace?: string;
    SetupStatus?: ServiceAISetupDefStatus;
    SupportedLanguages?: string;
    SystemModstamp?: Date;
}

export type ServiceAISetupField = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Entity?: string;
    Field?: string;
    FieldMappingType?: ServiceAISetupFieldType;
    FieldPosition?: number;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: ServiceAISetupField;
    ModuleNamespace?: string;
    SetupDefinition?: ServiceAISetupDefinition;
    SetupDefinitionId?: ID;
    SystemModstamp?: Date;
}

export type ServiceCloudVoiceSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsAmazonQueueManagementEnabled?: boolean;
    IsDefaultChannelForScvEnabled?: boolean;
    IsEndUserForScvEnabled?: boolean;
    IsOmniCapacityForScvEnabled?: boolean;
    IsPtQueueManagementEnabled?: boolean;
    IsRzoneCloudVoiceOptInEnabled?: boolean;
    IsScvExternalTelephonyEnabled?: boolean;
    IsScvSupportBannerDisplayedEnabled?: boolean;
    IsScvbyotEnabled?: boolean;
    IsServiceCloudVoiceEnabled?: boolean;
    Metadata?: ServiceCloudVoiceSettings;
}

export type ServiceDataType = sObject &  {
    DataType?: DataType;
    DataTypeId?: string;
    DeveloperName?: string;
    DurableId?: string;
    Service?: Service;
    ServiceId?: string;
    Version?: ServiceVersion;
    VersionId?: string;
    WsdlDataTypes?: QueryResult;
}

export type ServicePresenceStatusInfo = sObject &  {
    DurableId?: string;
    HasChannels?: boolean;
    MasterLabel?: string;
    ServicePresenceStatusId?: string;
    StatusCapacityModel?: StatusCapacityType;
}

export type ServiceProcessAttribute =  & sObject &  {
    AttributeName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DataType?: ServiceProcessDataType;
    DefaultValue?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsRequired?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ParentAttribute?: ServiceProcessAttribute;
    ParentAttributeId?: ID;
    ServiceProcessDefinition?: ServiceProcessDefinition;
    ServiceProcessDefinitionId?: ID;
    SystemModstamp?: Date;
    Type?: ServiceProcessAttributeType;
}

export type ServiceProcessDefinition = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ProcessName?: string;
    Status?: ServiceProcessStatus;
    SystemModstamp?: Date;
    UsageType?: string;
    Version?: string;
}

export type ServiceSetupAssistantSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsServiceSetupAssistantEnabled?: boolean;
    Metadata?: ServiceSetupAssistantSettings;
}

export type ServiceVersion = sObject &  {
    DurableId?: string;
    IsLatest?: boolean;
    Service?: Service;
    ServiceId?: string;
    Types?: QueryResult;
    VersionIdentifier?: string;
    WebServiceDefinitions?: QueryResult;
    WsdlDataTypes?: QueryResult;
    XmlSchemas?: QueryResult;
}

export type SessionLevelPolicy = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    PolicyAction?: PolicyAction;
    RequiredSessionLevel?: SessionSecurityLevel;
    ResourceType?: string;
    SystemModstamp?: Date;
}

export type SessionSettings =  & sObject &  {
    AllowUserAuthenticationByCertificate?: boolean;
    AllowUserCertBasedAuthenticationWithOcspValidation?: boolean;
    CanConfirmEmailChangeInLightningCommunities?: boolean;
    CanConfirmIdentityBySmsOnly?: boolean;
    DisableTimeoutWarning?: boolean;
    DurableId?: string;
    EnforceIpRangesEveryRequest?: boolean;
    EnforceUserDeviceRevoked?: boolean;
    ForceLogoutOnSessionTimeout?: boolean;
    ForceRelogin?: boolean;
    GrantCameraAccess?: string;
    GrantMicrophoneAccess?: string;
    HasRetainedLoginHints?: boolean;
    HasUserSwitching?: boolean;
    HstsOnForcecomSites?: boolean;
    IdentityConfirmationOnEmailChange?: boolean;
    IdentityConfirmationOnTwoFactorRegistrationEnabled?: boolean;
    IsBuiltInAuthenticatorEnabled?: boolean;
    IsCacheAndAutocompleteEnabled?: boolean;
    IsClickjackNonsetupSfdcEnabled?: boolean;
    IsClickjackNonsetupUserEnabled?: boolean;
    IsClickjackNonsetupUserHeaderlessEnabled?: boolean;
    IsClickjackSetupEnabled?: boolean;
    IsCoepHeaderEnabled?: boolean;
    IsContentSniffingProtectionEnabled?: boolean;
    IsCoopHeaderEnabled?: boolean;
    IsCspOnEmailEnabled?: boolean;
    IsCsrfOnGetEnabled?: boolean;
    IsCsrfOnPostEnabled?: boolean;
    IsLightningLoginEnabled?: boolean;
    IsLightningLoginOnlyWithUserPermEnabled?: boolean;
    IsMfaDirectUiLoginOptInEnabled?: boolean;
    IsOauthCorsPolicyEnabled?: boolean;
    IsPermissionsPolicyEnabled?: boolean;
    IsPostForSessionsEnabled?: boolean;
    IsSmsIdentityEnabled?: boolean;
    IsU2Fenabled?: boolean;
    IsUpgradeInsecureRequestsEnabled?: boolean;
    IsXssProtectionEnabled?: boolean;
    LockSessionsToDomain?: boolean;
    LockSessionsToIp?: boolean;
    LockerServiceApiVersion?: string;
    LockerServiceCsp?: boolean;
    LockerServiceNext?: boolean;
    LockerServiceNextControl?: boolean;
    LogoutUrl?: string;
    RedirectBlockModeEnabled?: boolean;
    RedirectionWarning?: boolean;
    ReferrerPolicy?: boolean;
    ReferrerPolicyDirective?: string;
    RequireHttpOnly?: boolean;
    RequireHttps?: boolean;
    SendCspForUncommonClients?: boolean;
    SessionTimeout?: string;
    SidToken3rdPartyAuraApp?: boolean;
    SkipSfaWhenMfaDirectUiLogin?: boolean;
    TerminateUserSessionsWhenAdminResetsPassword?: boolean;
    UseEapiRateLimitForConnectApi?: boolean;
    UseLocalStorageForLogoutUrl?: boolean;
}

export type SettingsTemplate = sObject &  {
    DurableId?: string;
    FullName?: string;
    Metadata?: Metadata;
}

export type SetupApp = sObject &  {
    DeveloperName?: string;
    DurableId?: string;
    HeaderColor?: string;
    Label?: string;
    TreeNodeType?: NodeType;
}

export type SetupNode = sObject &  {
    ExternalId?: string;
    FullName?: string;
    IconUrl?: string;
    IsFullPage?: boolean;
    IsNew?: boolean;
    Label?: string;
    NodeType?: NodeType;
    RelatedEntities?: string;
    Tags?: string;
    Url?: string;
}

export type GlobalValueSet = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: GlobalValueSet;
    NamespacePrefix?: string;
}

export type SharingSettings = MetadataForSettings & sObject &  {
    DeferGroupMembership?: boolean;
    DeferSharingRules?: boolean;
    DurableId?: string;
    FullName?: string;
    IsAccountRoleOptimizationEnabled?: boolean;
    IsAssetSharingEnabled?: boolean;
    IsCommunityUserVisibilityEnabled?: boolean;
    IsExternalSharingModelEnabled?: boolean;
    IsManagerGroupsEnabled?: boolean;
    IsManualUserRecordSharingEnabled?: boolean;
    IsPartnerSuperUserAccessEnabled?: boolean;
    IsPortalUserCaseSharingEnabled?: boolean;
    IsPortalUserVisibilityEnabled?: boolean;
    IsRemoveTmGroupMembershipEnabled?: boolean;
    IsRestrictAccessLookupRecordsEnabled?: boolean;
    IsSecureGuestAccessEnabled?: boolean;
    IsShareObjectReportTypesEnabled?: boolean;
    IsStandardReportVisibilityEnabled?: boolean;
    IsTerritoryForecastManagerEnabled?: boolean;
    Metadata?: SharingSettings;
}

export type ShiftSegmentType = Metadata & sObject &  {
    AdherenceThreshold?: number;
    AllManagedPackageMemberId?: ID;
    Category?: ShiftSegmentTypeCategory;
    Color?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ShiftSegmentType;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ServicePresenceStatusId?: ID;
    SystemModstamp?: Date;
}

export type SingleSignOnSettings =  & sObject &  {
    DurableId?: string;
    IsCaseInsensitiveFederationIdEnabled?: boolean;
    IsForceDelegatedCalloutEnabled?: boolean;
    IsLoginWithSalesforceCredentialsDisabled?: boolean;
    IsMultipleSamlConfigsEnabled?: boolean;
    IsSamlJitProvisioningEnabled?: boolean;
    IsSamlLoginEnabled?: boolean;
}

export type SiteDetail = sObject &  {
    DurableId?: string;
    IsRegistrationEnabled?: boolean;
    SecureUrl?: string;
}

export type SkillType = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type SlackApp = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    AppKey?: string;
    AppToken?: string;
    ClientKey?: string;
    ClientSecret?: string;
    Config?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultUser?: User;
    DefaultUserId?: ID;
    DeveloperName?: string;
    FullName?: string;
    IntegrationUser?: User;
    IntegrationUserId?: ID;
    IsDeleted?: boolean;
    IsProtected?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: SlackApp;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SigningSecret?: string;
    SystemModstamp?: Date;
}

export type SlackAppAuthorization = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    NetworkId?: ID;
    Scopes?: string;
    SlackApp?: string;
    SlackContext?: SlackContext;
    SlackContextId?: ID;
    SlackUser?: SlackUser;
    SlackUserId?: ID;
    SystemModstamp?: Date;
    Token?: string;
}

export type SlackApplicationObject = sObject &  {
    ApplicationObject?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EnabledForSlack?: SlackAssociationType;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SlackApp?: string;
    SystemModstamp?: Date;
    UniqueIndex?: string;
}

export type SlackContext = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ParentSlackContext?: SlackContext;
    ParentSlackContextId?: ID;
    SlackKey?: string;
    SystemModstamp?: Date;
    Type?: SlackContextType;
}

export type SlackFeatureExtlConfig = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExternalRecordViewPreference?: RecordViewPreference;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type SlackFeatureSettings = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CreationSetting?: CreationSetting;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    RecordViewPreference?: RecordViewPreference;
    ShareInChannelPreference?: ShareInChannelPreference;
    SystemModstamp?: Date;
}

export type SlackRecordLayout = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: SlackRecordLayout;
    ModuleNamespace?: string;
    SobjectType?: string;
    SystemModstamp?: Date;
    ViewMode?: SlackRecordLayoutViewMode;
}

export type SlackUser = sObject &  {
    AppAuthorizations?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Identity?: string;
    IsConfirmed?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SlackContext?: SlackContext;
    SlackContextId?: ID;
    SlackKey?: string;
    SystemModstamp?: Date;
}

export type SocialCustomerServiceSettings = MetadataForSettings & sObject &  {
    CaseSubjectOption?: CaseSubjectOption;
    DurableId?: string;
    FullName?: string;
    IsAllFbResponseAccountsEnabled?: boolean;
    IsInboundProcessingConcurrencyEnabled?: boolean;
    IsSocialApprovalsEnabled?: boolean;
    IsSocialCaseAssignmentRulesEnabled?: boolean;
    IsSocialCustomerServiceEnabled?: boolean;
    IsSocialPersonaHistoryTrackingEnabled?: boolean;
    IsSocialPostHistoryTrackingEnabled?: boolean;
    IsSocialReceiveParentPostEnabled?: boolean;
    Metadata?: SocialCustomerServiceSettings;
}

export type SourceChangeNotification = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    EventUuid?: string;
    IsNameObsolete?: boolean;
    MemberName?: string;
    MemberType?: string;
    ReplayId?: string;
    RevisionNum?: number;
}

export type SourceMember = sObject &  {
    ChangedBy?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    IsNameObsolete?: boolean;
    IsNewMember?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MemberIdOrName?: string;
    MemberName?: string;
    MemberType?: string;
    RevisionCounter?: number;
    RevisionNum?: number;
    SystemModstamp?: Date;
}

export type SourceMemberDeployRequest = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeployOperation?: DeployOperation;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    MemberName?: string;
    MemberType?: string;
    ModuleNamespace?: string;
    Request?: DeployRequest;
    RequestId?: ID;
    RevisionCounter?: number;
    SystemModstamp?: Date;
}

export type SourceTrackingSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsSourceTrackingSandboxesEnabled?: boolean;
    Metadata?: SourceTrackingSettings;
}

export type StandardAction = sObject &  {
    ContentType?: ActionOverrideType;
    Description?: string;
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    IsOverridden?: boolean;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Name?: string;
    OverrideContent?: sObject;
    OverrideContentId?: ID;
}

export type StandardValueSet = Metadata & sObject &  {
    DurableId?: string;
    EnumOrId?: string;
    FullName?: string;
    MasterLabel?: string;
    Metadata?: StandardValueSet;
}

export type State =  & sObject &  {
    Active?: boolean;
    DurableId?: string;
    IntegrationValue?: string;
    IsoCode?: string;
    Label?: string;
    Standard?: boolean;
    Visible?: boolean;
}

export type StaticResource = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    Body?: string;
    BodyLength?: number;
    CacheControl?: StaticResourceCacheControl;
    ContentType?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: StaticResource;
    Name?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type StnryAssetEnvSrcCnfg = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    StationaryAssetType?: StationaryAssetType;
    SystemModstamp?: Date;
}

export type SubscriberPackage = sObject &  {
    Description?: string;
    IsPackageValid?: boolean;
    Name?: string;
    NamespacePrefix?: string;
    SubscriberPackageVersions?: QueryResult;
}

export type SubscriberPackageVersion = sObject &  {
    AppExchangeDescription?: string;
    AppExchangeLogoUrl?: string;
    AppExchangePackageName?: string;
    AppExchangePublisherName?: string;
    BuildNumber?: number;
    CspTrustedSites?: SubscriberPackageCspTrustedSites;
    Dependencies?: SubscriberPackageDependencies;
    Description?: string;
    InstallValidationStatus?: InstallValidationStatus;
    IsBeta?: boolean;
    IsDeprecated?: boolean;
    IsManaged?: boolean;
    IsOrgDependent?: boolean;
    IsPasswordProtected?: boolean;
    IsSecurityReviewed?: boolean;
    MajorVersion?: number;
    MinorVersion?: number;
    Name?: string;
    Package2ContainerOptions?: Package2ContainerOptions;
    PatchVersion?: number;
    PostInstallUrl?: string;
    Profiles?: SubscriberPackageProfiles;
    PublisherName?: string;
    ReleaseNotesUrl?: string;
    ReleaseState?: PackageReleaseState;
    RemoteSiteSettings?: SubscriberPackageRemoteSiteSettings;
    SubscriberPackageId?: ID;
}

export type SubscriberPackageVersionInstallRequest = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MetadataDeployRequestFormula?: string;
    Status?: SubscriberPackageVersionInstallRequestStatus;
    SubscriberPackageVersion?: SubscriberPackageVersion;
    SubscriberPackageVersionId?: ID;
    SystemModstamp?: Date;
}

export type SubscriberPackageVersionUninstallRequest = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Status?: SubscriberPackageVersionUninstallRequestStatus;
    SubscriberPackageVersion?: SubscriberPackageVersion;
    SubscriberPackageVersionId?: ID;
    SubscriberPackageVersionUninstallRequestErrors?: QueryResult;
    SystemModstamp?: Date;
}

export type SubscriptionManagementSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsConvertNegativeInvoiceLinesToCreditMemoAndApplyEnabled?: boolean;
    IsPaymentScheduleAutomationEnabled?: boolean;
    IsRefundAutomationEnabled?: boolean;
    IsRevSubMgmtBlngOptOutEnabled?: boolean;
    IsSubscriptionManagementEnabled?: boolean;
    Metadata?: SubscriptionManagementSettings;
}

export type SurveySettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsIndustriesCxmEnabledEnabled?: boolean;
    IsSurveyEnabled?: boolean;
    IsSurveyOwnerCanManageResponseEnabled?: boolean;
    Metadata?: SurveySettings;
}

export type SustainabilityUom = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsProductUom?: boolean;
    IsStationaryAssetUom?: boolean;
    IsVehicleAssetUom?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    UnitType?: UnitType;
}

export type SustnRefDataTracking = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    IsReferenceDataLoaded?: boolean;
    Language?: string;
    LastLoadStatus?: LastLoadStatusEnum;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ReferenceDataName?: ReferenceDataNameEnum;
    SourceType?: RefDataSourceTypeEnum;
    SystemModstamp?: Date;
    VersionNumber?: string;
}

export type SustnUomConversion = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ConversionFactor?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FuelType?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SourceUom?: string;
    SystemModstamp?: Date;
    TargetUom?: string;
    UomsKey?: string;
}

export type SvcCatalogCategory = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CatalogCategoryItems?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    ImageId?: ID;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: SvcCatalogCategory;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ParentCategory?: SvcCatalogCategory;
    ParentCategoryId?: ID;
    SortOrder?: number;
    SystemModstamp?: Date;
}

export type SvcCatalogCategoryItem =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    IsPrimaryCategory?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SortOrder?: number;
    SvcCatalogCategory?: SvcCatalogCategory;
    SvcCatalogCategoryId?: ID;
    SvcCatalogItemDef?: SvcCatalogItemDef;
    SvcCatalogItemDefId?: ID;
    SystemModstamp?: Date;
}

export type SvcCatalogFilterCriteria = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CriteriaRelation?: CriteriaRelationshipType;
    Description?: string;
    DeveloperName?: string;
    EligibilityFormula?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: SvcCatalogFilterCriteria;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    NumOfRelatedItems?: number;
    SystemModstamp?: Date;
}

export type SvcCatalogFulfillFlowItem =  & sObject &  {
}

export type SvcCatalogFulfillmentFlow = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ChangeNum?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Flow?: FlowDefinition;
    FlowId?: ID;
    FlowProcessType?: FlowProcessType;
    FullName?: string;
    Icon?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: SvcCatalogFulfillmentFlow;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type SvcCatalogItemDef = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CatalogCategoryItems?: QueryResult;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Flow?: FlowDefinition;
    FlowId?: ID;
    FulfillmentFlow?: SvcCatalogFulfillmentFlow;
    FulfillmentFlowId?: ID;
    FullName?: string;
    ImageId?: ID;
    InternalNotes?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    IsFeatured?: boolean;
    IsOutOfSync?: boolean;
    ItemEligibilityFormula?: string;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: SvcCatalogItemDef;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Product?: ProductName;
    ShortDescription?: string;
    Status?: PublishStatusType;
    SystemModstamp?: Date;
    UsageType?: SvcCatalogItemUsageType;
}

export type SystemNotificationSettings = MetadataForSettings & sObject &  {
    DisableDowntimeNotifications?: boolean;
    DisableMaintenanceNotifications?: boolean;
    DurableId?: string;
    FullName?: string;
    Metadata?: SystemNotificationSettings;
}

export type TabAppRestriction = sObject &  {
    ApplicationId?: ID;
    DurableId?: string;
    TabDefinition?: TabDefinition;
    TabDefinitionId?: string;
}

export type TabDefinition = sObject &  {
    Colors?: QueryResult;
    DurableId?: string;
    Icons?: QueryResult;
    IsAvailableInAloha?: boolean;
    IsAvailableInDesktop?: boolean;
    IsAvailableInLightning?: boolean;
    IsAvailableInMobile?: boolean;
    IsCustom?: boolean;
    Label?: string;
    MobileUrl?: string;
    Name?: string;
    SobjectName?: string;
    Url?: string;
}

export type CustomApplication = Metadata & sObject &  {
    BrandId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FormFactors?: string;
    FullName?: string;
    IsNavAutoTempTabsDisabled?: boolean;
    IsNavPersonalizationDisabled?: boolean;
    IsNavTabPersistenceDisabled?: boolean;
    IsOmniPinnedViewEnabled?: boolean;
    Label?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: CustomApplication;
    NamespacePrefix?: string;
    NavType?: NavType;
    SetupExperience?: SetupApp;
    SetupExperienceId?: string;
    TabSetType?: TabSetType;
    UiType?: UiType;
    UtilityBar?: FlexiPage;
    UtilityBarId?: ID;
}

export type Territory2Settings = MetadataForSettings & sObject &  {
    DefaultAccountAccessLevel?: string;
    DefaultCaseAccessLevel?: string;
    DefaultContactAccessLevel?: string;
    DefaultOpportunityAccessLevel?: string;
    DurableId?: string;
    FullName?: string;
    IsTerritoryManagement2Enabled?: boolean;
    Metadata?: Territory2Settings;
    OpportunityFilterSettingsId?: string;
    ShowTm2EnabledBanner?: boolean;
    T2ForecastAccessLevel?: string;
    Tm2BypassRealignAccInsert?: boolean;
    Tm2EnableUserAssignmentLog?: boolean;
}

export type Territory2SettingsOpportunityFilter =  & sObject &  {
    ApexClassName?: string;
    DurableId?: string;
    IsFilterEnabled?: boolean;
    RunOnCreate?: boolean;
}

export type Territory2SupportedObject =  & sObject &  {
    DefaultAccessLevel?: string;
    DurableId?: string;
    ObjectType?: string;
    State?: string;
}

export type TestSuiteMembership = sObject &  {
    ApexClass?: ApexClass;
    ApexClassId?: ID;
    ApexTestSuite?: ApexTestSuite;
    ApexTestSuiteId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type TimeSheetTemplate = Metadata & sObject &  {
    Active?: boolean;
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    Frequency?: TimeSheetFrequency;
    Fullname?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: TimeSheetTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    StartDate?: Date;
    SystemModstamp?: Date;
    TimeSheetTemplateAssignments?: QueryResult;
    WorkWeekEndDay?: DaysOfWeek;
    WorkWeekStartDay?: DaysOfWeek;
}

export type TimeSheetTemplateAssignment =  & sObject &  {
    AssignedTo?: Profile;
    AssignedToId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    TimeSheetTemplate?: TimeSheetTemplate;
    TimeSheetTemplateId?: ID;
}

export type TimelineObjectDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BaseObject?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Definition?: string;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: TimelineObjectDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
}

export type TraceFlag = sObject &  {
    ApexCode?: ApexLogLevel;
    ApexProfiling?: ApexLogLevel;
    Callout?: ApexLogLevel;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Database?: ApexLogLevel;
    DebugLevel?: DebugLevel;
    DebugLevelId?: ID;
    ExpirationDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LogType?: TraceFlagType;
    Nba?: ApexLogLevel;
    RequestedBy?: User;
    RequestedById?: ID;
    StartDate?: Date;
    System?: ApexLogLevel;
    SystemModstamp?: Date;
    TracedEntity?: sObject;
    TracedEntityId?: ID;
    Validation?: ApexLogLevel;
    Visualforce?: ApexLogLevel;
    Wave?: ApexLogLevel;
    Workflow?: ApexLogLevel;
}

export type TrailheadSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsConfettiEffectEnabled?: boolean;
    IsMyTrailheadPrefEnabled?: boolean;
    IsTrailheadInLexTermsEnabled?: boolean;
    Metadata?: TrailheadSettings;
}

export type TransactionSecurityPolicy = Metadata & sObject &  {
    ActionConfig?: string;
    AllManagedPackageMemberId?: ID;
    ApexPolicy?: ApexClass;
    ApexPolicyId?: ID;
    BlockMessage?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomEmailContent?: string;
    Description?: string;
    DeveloperName?: string;
    EventName?: TransactionSecurityEventName;
    EventType?: MonitoredEvents;
    ExecutionUser?: User;
    ExecutionUserId?: ID;
    Flow?: Flow;
    FlowId?: ID;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: TransactionSecurityPolicy;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    ResourceName?: string;
    State?: TxnSecurityPolicyState;
    SystemModstamp?: Date;
    Type?: TxnSecurityPolicyType;
}

export type TranslationImportExportJob = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    File?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
}

export type TrialOrgSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsSampleDataDeletedEnabled?: boolean;
    Metadata?: TrialOrgSettings;
}

export type UIObjectRelationConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ContextObject?: string;
    ContextObjectRecordType?: RecordType;
    ContextObjectRecordTypeId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    DirectRelationshipField?: string;
    FullName?: string;
    IndirectObjectContextField?: string;
    IndirectObjectRelatedField?: string;
    IndirectRelationshipObject?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: UIObjectRelationConfig;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RelatedObject?: string;
    RelatedObjectRecordType?: RecordType;
    RelatedObjectRecordTypeId?: ID;
    RelationshipType?: ObjectRelationshipType;
    SystemModstamp?: Date;
    UIObjectRelationFieldConfigs?: QueryResult;
}

export type UIObjectRelationFieldConfig =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DisplayLabel?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    QueryText?: string;
    RowOrder?: number;
    SystemModstamp?: Date;
}

export type UiAppFeatureActivationCrit = sObject &  {
    Content?: FlexiPage;
    ContentId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Order?: number;
    SystemModstamp?: Date;
    UiAppFeatureActivationDef?: UiAppFeatureActivationDef;
    UiAppFeatureActivationDefId?: ID;
    UiFormulaRule?: UiFormulaRule;
    UiFormulaRuleId?: ID;
}

export type UiAppFeatureActivationDef = sObject &  {
    Application?: ActivationAppType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Feature?: ActivationFeatureType;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ReferenceObject?: EntityDefinition;
    ReferenceObjectId?: string;
    SystemModstamp?: Date;
}

export type UiCardActivation = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FormFactor?: FormFactor;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    Target?: string;
    UiView?: FlexiPage;
    UiViewId?: ID;
}

export type UiFormulaCriterion =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LeftHandSide?: string;
    Operator?: FormulaOperator;
    OperatorId?: string;
    ParentKeyPrefix?: string;
    RightHandSide?: string;
    Rule?: UiFormulaRule;
    RuleId?: ID;
    SystemModstamp?: Date;
}

export type UiFormulaRule =  & sObject &  {
    AssociatedElement?: sObject;
    AssociatedElementId?: ID;
    BooleanFilter?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Formula?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ParentKeyPrefix?: string;
    SystemModstamp?: Date;
}

export type UiPlugin = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    ExtensionPointIdentifier?: string;
    IsDeleted?: boolean;
    IsEnabled?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    Source?: string;
    SystemModstamp?: Date;
}

export type User = AbstractPlaceholderMetadata & sObject &  {
    DelegatedUsers?: QueryResult;
    FirstName?: string;
    FtestSetups?: QueryResult;
    InformalName?: string;
    LastName?: string;
    ManagedUsers?: QueryResult;
    MiddleName?: string;
    Name?: string;
    OmniInteractionAccessConfigs?: QueryResult;
    PermissionSetAssignments?: QueryResult;
    Suffix?: string;
    UserEntityAccessRights?: QueryResult;
    UserFieldAccessRights?: QueryResult;
    UserPreferences?: QueryResult;
    Username?: string;
    WorkspaceId?: ID;
}

export type UserAcceptedFeatureAgreement = sObject &  {
    AcceptedByUser?: User;
    AcceptedByUserId?: ID;
    AcceptedDate?: Date;
    AgreementLanguageCode?: string;
    AgreementText?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Feature?: string;
    FeatureMarketingName?: string;
    FullFeatureName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Subfeature?: string;
    SystemModstamp?: Date;
    Version?: string;
}

export type UserAccessPolicy = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    BooleanFilter?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    Status?: UserAccessPolicyStatus;
    SystemModstamp?: Date;
    TriggerType?: UserAccessPolicyTriggerType;
}

export type UserAccessPolicyAction =  & sObject &  {
    Action?: UserAccessPolicyActionType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    SystemModstamp?: Date;
    Target?: sObject;
    TargetId?: ID;
    UserAccessPolicy?: UserAccessPolicy;
    UserAccessPolicyId?: ID;
}

export type UserAccessPolicyFilter =  & sObject &  {
    ColumnName?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Operation?: UserAccessPolicyFilterOperation;
    SortOrder?: number;
    SystemModstamp?: Date;
    Target?: string;
    UserAccessPolicy?: UserAccessPolicy;
    UserAccessPolicyId?: ID;
    Value?: string;
}

export type UserCriteria = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: UserCriteria;
    ModuleNamespace?: string;
    SobjectType?: sObject;
    SobjectTypeId?: ID;
    SystemModstamp?: Date;
}

export type UserEngagementSettings = MetadataForSettings & sObject &  {
    CanGovCloudUseAdoptionApps?: boolean;
    DoesScheduledSwitcherRunDaily?: boolean;
    DurableId?: string;
    FullName?: string;
    IsAutoTransitionDelayed?: boolean;
    IsCrucNotificationDisabled?: boolean;
    IsCustomHelpGlobalSectionEnabled?: boolean;
    IsCustomProfileAutoTransitionDelayed?: boolean;
    IsHelpMenuShowFeedbackEnabled?: boolean;
    IsHelpMenuShowHelpEnabled?: boolean;
    IsHelpMenuShowNewUserEnabled?: boolean;
    IsHelpMenuShowSearchEnabled?: boolean;
    IsHelpMenuShowSfdcContentEnabled?: boolean;
    IsHelpMenuShowShortcutEnabled?: boolean;
    IsHelpMenuShowSupportEnabled?: boolean;
    IsHelpMenuShowTrailheadEnabled?: boolean;
    IsIbilOptOutDashboardsEnabled?: boolean;
    IsIbilOptOutEventsEnabled?: boolean;
    IsIbilOptOutReportsEnabled?: boolean;
    IsIbilOptOutTasksEnabled?: boolean;
    IsLexToClassicFeedbackEnableEnabled?: boolean;
    IsLexWelcomeMatDisabled?: boolean;
    IsMeetTheAssistantDisabledInClassic?: boolean;
    IsMeetTheAssistantDisabledInLightning?: boolean;
    IsOrchestrationInSandboxEnabled?: boolean;
    IsOrgUserAssistEnabledEnabled?: boolean;
    IsScheduledSwitcherEnabled?: boolean;
    IsSfdcProductFeedbackSurveyEnabled?: boolean;
    IsShowSalesforceUserAssistEnabled?: boolean;
    IsSmartNudgesDisabled?: boolean;
    Metadata?: UserEngagementSettings;
    OptimizerAppEnabled?: boolean;
}

export type UserEntityAccess = sObject &  {
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    IsActivateable?: boolean;
    IsCreatable?: boolean;
    IsDeletable?: boolean;
    IsEditable?: boolean;
    IsFlsUpdatable?: boolean;
    IsMergeable?: boolean;
    IsReadable?: boolean;
    IsUndeletable?: boolean;
    IsUpdatable?: boolean;
    User?: User;
    UserId?: ID;
}

export type UserFieldAccess = sObject &  {
    DurableId?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FieldDefinition?: FieldDefinition;
    FieldDefinitionId?: string;
    IsAccessible?: boolean;
    IsCreatable?: boolean;
    IsUpdatable?: boolean;
    User?: User;
    UserId?: ID;
}

export type UserInterfaceSettings = MetadataForSettings & sObject &  {
    AlternateAlohaListView?: boolean;
    DurableId?: string;
    DynamicMruActionsOff?: boolean;
    FullName?: string;
    IsAsyncRelatedListsEnabled?: boolean;
    IsClickjackUserPageHeaderlessEnabled?: boolean;
    IsCollapsibleSectionsEnabled?: boolean;
    IsCollapsibleSideBarEnabled?: boolean;
    IsCustomObjectTruncateEnabled?: boolean;
    IsCustomeSideBarOnAllPagesEnabled?: boolean;
    IsDeleteFieldHistoryEnabled?: boolean;
    IsExternalObjectAsyncRelatedListsEnabled?: boolean;
    IsHoverDetailsEnabled?: boolean;
    IsInlineEditEnabled?: boolean;
    IsLightningVerticalNavEnabled?: boolean;
    IsNewPageLayoutEditorEnabled?: boolean;
    IsPersonalCanvasEnabled?: boolean;
    IsPrintableListViewsEnabled?: boolean;
    IsProfileCustomTabsetsEnabled?: boolean;
    IsQuickCreateEnabled?: boolean;
    IsRelatedListHoversEnabled?: boolean;
    IsTabOrganizerEnabled?: boolean;
    IsVerticalNavSeamlessSwitchingEnabled?: boolean;
    Metadata?: UserInterfaceSettings;
}

export type UserManagementSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCanAnswerContainUsernameEnabled?: boolean;
    IsConcealPersonalInfoEnabled?: boolean;
    IsContactlessExternalIdentityUsersEnabled?: boolean;
    IsEnhancedConcealPersonalInfoEnabled?: boolean;
    IsEnhancedPermsetMgmtEnabled?: boolean;
    IsEnhancedProfileMgmtEnabled?: boolean;
    IsEnhcUiUserAccessPoliciesEnabled?: boolean;
    IsNewProfileUiEnabled?: boolean;
    IsProfileFilteringEnabled?: boolean;
    IsRestrictEmailDomainsEnabled?: boolean;
    IsScrambleUserDataEnabled?: boolean;
    IsUserSelfDeactivateEnabled?: boolean;
    Metadata?: UserManagementSettings;
    PermsetsInFieldCreation?: boolean;
    PsaExpirationUiEnabled?: boolean;
    RestrictedProfileCloning?: boolean;
    UserAccessPoliciesEnabled?: boolean;
}

export type UserPreference = sObject &  {
    Preference?: string;
    SystemModstamp?: Date;
    UserId?: ID;
    Value?: string;
}

export type UserProfileSearchScope = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: UserProfileSearchScope;
    ModuleNamespace?: string;
    Profile?: Profile;
    ProfileId?: ID;
    SystemModstamp?: Date;
}

export type UserProfileSearchScopeItem = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    Profile?: Profile;
    ProfileId?: ID;
    SearchableObject?: string;
    SortOrder?: number;
    SystemModstamp?: Date;
    UserProfileSearchScope?: UserProfileSearchScope;
    UserProfileSearchScopeId?: ID;
}

export type UserProvisioningConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApexProvisioningHandler?: string;
    ApprovalRequired?: string;
    ConnectedApp?: ConnectedApplication;
    ConnectedAppId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    Enabled?: boolean;
    EnabledOperations?: string;
    Flow?: FlowDefinition;
    FlowId?: ID;
    InvocationType?: ProvInvocationType;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastReconDateTime?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    NamespacePrefix?: string;
    Notes?: string;
    OnUpdateAttributes?: string;
    ReconFilter?: string;
    SystemModstamp?: Date;
    UserAccountMapping?: string;
}

export type UserRole = sObject &  {
    CaseAccessForAccountOwner?: string;
    ContactAccessForAccountOwner?: string;
    DeveloperName?: string;
    ForecastUserId?: ID;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MayForecastManagerShare?: boolean;
    Name?: string;
    OpportunityAccessForAccountOwner?: string;
    ParentRoleId?: ID;
    PortalAccountId?: ID;
    PortalAccountOwnerId?: ID;
    PortalRole?: PortalRoles;
    PortalType?: PortalTypes;
    RollupDescription?: string;
    SystemModstamp?: Date;
    Users?: QueryResult;
}

export type ValidationRule = Metadata & sObject &  {
    Active?: boolean;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    ErrorDisplayField?: string;
    ErrorMessage?: string;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: ValidationRule;
    NamespacePrefix?: string;
    ShouldEvaluateOnClient?: boolean;
    ValidationName?: string;
}

export type ValidationRuleMember = sObject &  {
    Content?: string;
    ContentEntity?: ValidationRule;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: ValidationRule;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type VehicleAssetEmssnSrcCnfg = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    RecordType?: RecordType;
    RecordTypeId?: ID;
    SystemModstamp?: Date;
    VehicleAssetType?: VehicleAssetType;
}

export type VendorCallCenterStatusMap =  & sObject &  {
    CallCenter?: CallCenter;
    CallCenterId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    ExternalStatus?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ServicePresenceStatusId?: ID;
    SystemModstamp?: Date;
}

export type ViewDefinition = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ApiVersion?: number;
    Content?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    IsDeleted?: boolean;
    IsProtected?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: ViewDefinition;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    TargetType?: ViewTargetType;
}

export type VirtualVisitConfig = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    ComprehendServiceType?: VirtualVisitComprehendServiceType;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    ExperienceCloudSiteUrl?: string;
    ExternalRoleIdentifier?: string;
    FullName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MessagingRegion?: string;
    Metadata?: VirtualVisitConfig;
    ModuleNamespace?: string;
    NamedCredential?: NamedCredential;
    NamedCredentialId?: ID;
    NamespacePrefix?: string;
    StorageBucketName?: string;
    SystemModstamp?: Date;
    UsageType?: VirtualVisitUsageType;
    VideoCallApptTypeValue?: string;
    VideoControlRegion?: string;
    VisitRegion?: VirtualVisitVisitRegion;
}

export type VisibilityOperation = sObject &  {
    Attempts?: number;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    OperationType?: VisibilityOperationType;
    Sequence?: string;
    Status?: VisibilityOperationStatus;
    SystemModstamp?: Date;
}

export type VisualforceAccessMetrics = sObject &  {
    ApexPage?: ApexPage;
    ApexPageId?: ID;
    DailyPageViewCount?: number;
    LogDate?: Date;
    MetricsDate?: Date;
    Profile?: Profile;
    ProfileId?: ID;
    SystemModstamp?: Date;
}

export type VoiceLocalPresenceNumber = sObject &  {
    CountryCode?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastUsedDate?: Date;
    PhoneNumber?: string;
    Prefix?: string;
    SystemModstamp?: Date;
}

export type VoiceOrgSetting = sObject &  {
    ConsentMessage?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    CustomDisposition?: string;
    DefaultDisposition?: string;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    SystemModstamp?: Date;
}

export type VoiceSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCallDispositionEnabled?: boolean;
    IsConsentReminderEnabled?: boolean;
    IsDefaultRecordingEnabled?: boolean;
    IsVoiceCallListEnabled?: boolean;
    IsVoiceCallRecordingEnabled?: boolean;
    IsVoiceCoachingEnabled?: boolean;
    IsVoiceConferencingEnabled?: boolean;
    IsVoiceLocalPresenceEnabled?: boolean;
    IsVoiceMailDropEnabled?: boolean;
    IsVoiceMailEnabled?: boolean;
    Metadata?: VoiceSettings;
}

export type VoiceVendorInfo = sObject &  {
    ApiKeyLastUpdatedTime?: Date;
    ConferenceNumber?: string;
    CorporateNumber?: string;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    IsActive?: boolean;
    IsCallerIdTwilioVerified?: boolean;
    IsDeleted?: boolean;
    IsOldApiKeyDeleted?: boolean;
    IsStirShakenEnrolled?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LocalPresenceDefaultNumber?: string;
    SystemModstamp?: Date;
    TenantConfigVersion?: string;
    VendorAccountKey?: string;
    VendorInfoJson?: string;
    VendorProviderName?: string;
    VendorType?: VoiceProviderType;
}

export type WarrantyLifecycleMgmtSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsWarrantyLcMgmtEnabled?: boolean;
    Metadata?: WarrantyLifecycleMgmtSettings;
}

export type Web3Settings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsMultisigEnabled?: boolean;
    Metadata?: Web3Settings;
}

export type WebLink = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Description?: string;
    DisplayType?: string;
    EncodingKey?: string;
    EntityDefinition?: EntityDefinition;
    EntityDefinitionId?: string;
    FullName?: string;
    HasMenubar?: boolean;
    HasScrollbars?: boolean;
    HasToolbar?: boolean;
    Height?: number;
    IsResizable?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LinkType?: WebLinkType;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    Metadata?: WebLink;
    Name?: string;
    NamespacePrefix?: string;
    OpenType?: WebLinkWindowType;
    Position?: WebLinkPosition;
    RequireRowSelection?: boolean;
    ScontrolId?: ID;
    ShowsLocation?: boolean;
    ShowsStatus?: boolean;
    Url?: string;
    Width?: number;
}

export type WebServiceDefinition = sObject &  {
    DeveloperName?: string;
    DurableId?: string;
    Service?: Service;
    ServiceId?: string;
    Version?: ServiceVersion;
    VersionId?: string;
    WsdlDataTypes?: QueryResult;
    XmlSchemas?: QueryResult;
}

export type WebStoreDefinition = sObject &  {
    AllManagedPackageMemberId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    SystemModstamp?: Date;
    WebStoreId?: ID;
}

export type WebStoreTemplate = Metadata & sObject &  {
    AllManagedPackageMemberId?: ID;
    CheckoutTimeToLive?: number;
    CheckoutValidAfterDate?: Date;
    Country?: CountryIsoCode;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DefaultCurrency?: string;
    DefaultLanguage?: string;
    DefaultTaxLocaleType?: TaxLocaleType;
    Description?: string;
    DeveloperName?: string;
    FullName?: string;
    GuestCartTimeToLive?: number;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    MasterLabel?: string;
    MaxValuesPerFacet?: number;
    Metadata?: WebStoreTemplate;
    ModuleNamespace?: string;
    NamespacePrefix?: string;
    OptionsAutoFacetingEnabled?: boolean;
    OptionsCartAsyncProcessingEnabled?: boolean;
    OptionsCartCalculateEnabled?: boolean;
    OptionsCartToOrderAutoCustomFieldMapping?: boolean;
    OptionsChannelPlayground?: boolean;
    OptionsCommerceEinsteinActivitiesTracked?: boolean;
    OptionsCommerceEinsteinDeployed?: boolean;
    OptionsDuplicateCartItemsEnabled?: boolean;
    OptionsGuestBrowsingEnabled?: boolean;
    OptionsGuestCartEnabled?: boolean;
    OptionsGuestCheckoutEnabled?: boolean;
    OptionsPreserveGuestCartEnabled?: boolean;
    OptionsSkipAdditionalEntitlementCheckForSearch?: boolean;
    OptionsSkuDetectionEnabled?: boolean;
    OptionsSplitShipmentEnabled?: boolean;
    OrderActivationStatus?: string;
    OrderLifeCycleType?: OrderLifeCycleType;
    PaginationSize?: number;
    PricingStrategy?: PricingStrategy;
    ProductGrouping?: ProductGrouping;
    SupportedCurrencies?: string;
    SupportedLanguages?: string;
    SupportedShipToCountries?: string;
    SystemModstamp?: Date;
    Type?: WebStoreType;
}

export type WebToCaseSettings =  & sObject &  {
    CaseOrigin?: string;
    DefaultResponseTemplate?: string;
    DurableId?: string;
    IsWebToCaseEnabled?: boolean;
}

export type WebToXSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    Metadata?: WebToXSettings;
    ShouldHideRecordInfoInEmail?: boolean;
    WebToCaseSpamFilter?: boolean;
    WebToLeadSpamFilter?: boolean;
}

export type WorkDotComSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsCoachingManagerGroupAccessEnabled?: boolean;
    IsGoalManagerGroupAccessEnabled?: boolean;
    IsProfileSkillsAddFeedPostEnabled?: boolean;
    IsProfileSkillsAutoSuggestEnabled?: boolean;
    IsProfileSkillsEnabled?: boolean;
    IsProfileSkillsUsePlatformEnabled?: boolean;
    IsWorkBadgeDefRestrictPrefEnabled?: boolean;
    IsWorkCalibrationEnabled?: boolean;
    IsWorkCanvasPrefEnabled?: boolean;
    IsWorkCertificationEnabled?: boolean;
    IsWorkCertificationNotificationEnabled?: boolean;
    IsWorkRewardsPrefEnabled?: boolean;
    IsWorkThanksPrefEnabled?: boolean;
    IsWorkUseObjectivesForGoalsEnabled?: boolean;
    Metadata?: WorkDotComSettings;
}

export type WorkSkillRouting = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeveloperName?: string;
    FullName?: string;
    IsActive?: boolean;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    Metadata?: WorkSkillRouting;
    ModuleNamespace?: string;
    RelatedEntity?: string;
    SystemModstamp?: Date;
}

export type WorkSkillRoutingAttribute =  & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    Field?: string;
    IsAdditionalSkill?: boolean;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    RelatedEntity?: string;
    SkillId?: ID;
    SkillLevel?: number;
    SkillPriority?: number;
    SystemModstamp?: Date;
    Value?: string;
    WorkSkillRouting?: WorkSkillRouting;
    WorkSkillRoutingId?: ID;
}

export type WorkflowAlertMember = sObject &  {
    Content?: string;
    ContentEntity?: WorkflowAlert;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: WorkflowAlert;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type WorkflowFieldUpdateMember = sObject &  {
    Content?: string;
    ContentEntity?: WorkflowFieldUpdate;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: WorkflowFieldUpdate;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type WorkflowOutboundMessageMember = sObject &  {
    Content?: string;
    ContentEntity?: WorkflowOutboundMessage;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: WorkflowOutboundMessage;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type WorkflowRule = Metadata & sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    ManageableState?: ManageableState;
    Metadata?: WorkflowRule;
    Name?: string;
    NamespacePrefix?: string;
    TableEnumOrId?: string;
}

export type WorkflowRuleMember = sObject &  {
    Content?: string;
    ContentEntity?: WorkflowRule;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: WorkflowRule;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type WorkflowTaskMember = sObject &  {
    Content?: string;
    ContentEntity?: WorkflowTask;
    ContentEntityId?: ID;
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    FullName?: string;
    IsDeleted?: boolean;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    LastSyncDate?: Date;
    Metadata?: WorkflowTask;
    MetadataContainer?: sObject;
    MetadataContainerId?: ID;
    SystemModstamp?: Date;
}

export type WorkforceEngagementSettings = MetadataForSettings & sObject &  {
    DurableId?: string;
    FullName?: string;
    IsHistoricalAdherenceEnabled?: boolean;
    IsIndividualAdherenceEnabled?: boolean;
    IsIntradayManagementEnabled?: boolean;
    IsMachineLearningForecastingEnabled?: boolean;
    IsRealTimeAdherenceEnabled?: boolean;
    IsWorkforceEngagementConfigurationEnabled?: boolean;
    IsWorkforceEngagementEnabled?: boolean;
    Metadata?: WorkforceEngagementSettings;
}

export type WsdlDataType = sObject &  {
    DataType?: DataType;
    DataTypeId?: string;
    DurableId?: string;
    Service?: Service;
    ServiceDataType?: ServiceDataType;
    ServiceDataTypeId?: string;
    ServiceId?: string;
    Version?: ServiceVersion;
    VersionId?: string;
    WebServiceDefinition?: WebServiceDefinition;
    WebServiceDefinitionId?: string;
    XmlQualifiedName?: string;
    XmlSchema?: XmlSchema;
    XmlSchemaId?: string;
}

export type XmlSchema = sObject &  {
    DurableId?: string;
    NamespacePrefix?: string;
    NamespaceUri?: string;
    Service?: Service;
    ServiceId?: string;
    Version?: ServiceVersion;
    VersionId?: string;
    WebServiceDefinition?: WebServiceDefinition;
    WebServiceDefinitionId?: string;
    WsdlDataTypes?: QueryResult;
}

export type ZeroOrgDeployment = sObject &  {
    CreatedBy?: User;
    CreatedById?: ID;
    CreatedDate?: Date;
    DeploymentMetadata?: string;
    DeploymentStatus?: ZeroDeploymentStatus;
    DeveloperName?: string;
    ExportGuid?: string;
    InvocationDefinition?: string;
    IsDeleted?: boolean;
    Language?: string;
    LastModifiedBy?: User;
    LastModifiedById?: ID;
    LastModifiedDate?: Date;
    MasterLabel?: string;
    ModuleNamespace?: string;
    ResourceIdentifier?: string;
    StatusDescription?: string;
    SystemModstamp?: Date;
    ZeroOrgDomain?: string;
    ZeroOrgIdentifier?: string;
    ZeroOrgTenant?: string;
    ZorseAdminUser?: string;
    ZorseOrg?: string;
}

export type ChangeOwnPasswordResult = {
}

export type SaveResult = {
    errors?: Error | Error[];
    id: ID;
    infos?: Info | Info[];
    success: boolean;
    warnings?: Warning | Warning[];
}

export type Error = {
    extendedErrorDetails?: ExtendedErrorDetails | ExtendedErrorDetails[];
    fields?: string | string[];
    message: string;
    statusCode: StatusCode;
}

export type ExtendedErrorDetails = {
    extendedErrorCode: ExtendedErrorCode;
}

export type Info = {
    extendedDetails?: ExtendedErrorDetails | ExtendedErrorDetails[];
    message: string;
    statusCode: StatusCode;
}

export type Warning = {
    extendedDetails?: ExtendedErrorDetails | ExtendedErrorDetails[];
    message: string;
    statusCode: StatusCode;
}

export type DeleteResult = {
    errors?: Error | Error[];
    id: ID;
    success: boolean;
}

export type DescribeGlobalResult = {
    encoding: string;
    maxBatchSize: number;
    sobjects?: DescribeGlobalSObjectResult | DescribeGlobalSObjectResult[];
}

export type DescribeGlobalSObjectResult = {
    activateable: boolean;
    associateEntityType: string;
    associateParentEntity: string;
    createable: boolean;
    custom: boolean;
    customSetting: boolean;
    dataTranslationEnabled?: boolean;
    deepCloneable: boolean;
    deletable: boolean;
    deprecatedAndHidden: boolean;
    feedEnabled: boolean;
    hasSubtypes: boolean;
    isInterface: boolean;
    isSubtype: boolean;
    keyPrefix: string;
    label: string;
    labelPlural: string;
    layoutable: boolean;
    mergeable: boolean;
    mruEnabled: boolean;
    name: string;
    queryable: boolean;
    replicateable: boolean;
    retrieveable: boolean;
    searchable: boolean;
    triggerable: boolean;
    undeletable: boolean;
    updateable: boolean;
}

export type DescribeLayoutResult = {
    layouts?: DescribeLayout | DescribeLayout[];
}

export type DescribeLayout = {
    buttonLayoutSection?: DescribeLayoutButtonSection;
    detailLayoutSections?: DescribeLayoutSection | DescribeLayoutSection[];
    editLayoutSections?: DescribeLayoutSection | DescribeLayoutSection[];
    feedView?: DescribeLayoutFeedView;
    highlightsPanelLayoutSection?: DescribeLayoutSection;
    id: ID;
    multirowEditLayoutSections?: DescribeLayoutSection | DescribeLayoutSection[];
    offlineLinks?: OfflineLink | OfflineLink[];
    quickActionList?: DescribeQuickActionListResult;
    relatedContent?: RelatedContent;
    relatedLists?: RelatedList | RelatedList[];
    saveOptions?: DescribeLayoutSaveOption | DescribeLayoutSaveOption[];
}

export type DescribeLayoutButtonSection = {
    detailButtons?: DescribeLayoutButton | DescribeLayoutButton[];
}

export type DescribeLayoutButton = {
    behavior?: WebLinkWindowType;
    colors?: DescribeColorResult | DescribeColorResult[];
    content?: string;
    contentSource?: WebLinkType;
    custom: boolean;
    encoding?: string;
    height?: number;
    icons?: DescribeIconResult | DescribeIconResult[];
    label: string;
    menubar: boolean;
    name: string;
    overridden: boolean;
    resizeable: boolean;
    scrollbars: boolean;
    showsLocation: boolean;
    showsStatus: boolean;
    toolbar: boolean;
    url?: string;
    width?: number;
    windowPosition?: WebLinkPosition;
}

export type DescribeColorResult = {
    color: string;
    context: string;
    theme: string;
}

export type DescribeIconResult = {
    contentType: string;
    height?: number;
    theme: string;
    url: string;
    width?: number;
}

export type DescribeLayoutSection = {
    collapsed: boolean;
    columns: number;
    heading?: string;
    layoutRows?: DescribeLayoutRow | DescribeLayoutRow[];
    layoutSectionId?: ID;
    parentLayoutId: ID;
    rows: number;
    tabOrder: TabOrderType;
    useCollapsibleSection: boolean;
    useHeading: boolean;
}

export type DescribeLayoutRow = {
    layoutItems?: DescribeLayoutItem | DescribeLayoutItem[];
    numItems: number;
}

export type DescribeLayoutItem = {
    editableForNew: boolean;
    editableForUpdate: boolean;
    label: string;
    layoutComponents?: DescribeLayoutComponent | DescribeLayoutComponent[];
    placeholder: boolean;
    required: boolean;
}

export type DescribeLayoutComponent = {
    displayLines: number;
    tabOrder: number;
    type: string;
    value: string;
}

export type AnalyticsCloudComponent = DescribeLayoutComponent &  {
    error: string;
    filter: string;
    height: number;
    hideOnError: boolean;
    showHeader: boolean;
    showSharing: boolean;
    showTitle: boolean;
    width: string;
}

export type AuraComponent = DescribeLayoutComponent &  {
}

export type Canvas = DescribeLayoutComponent &  {
    displayLocation: string;
    referenceId: string;
    showLabel: boolean;
    showScrollbars: boolean;
    suggestedHeight: string;
    suggestedWidth: string;
}

export type CustomLinkComponent = DescribeLayoutComponent &  {
    customLink: DescribeLayoutButton;
}

export type ExpandedLookup = DescribeLayoutComponent &  {
}

export type FieldComponent = DescribeLayoutComponent &  {
}

export type FieldLayoutComponent = FieldComponent &  {
    components?: DescribeLayoutComponent | DescribeLayoutComponent[];
    fieldType: string;
}

export type ReportChartComponent = DescribeLayoutComponent &  {
    cacheData: boolean;
    contextFilterableField: string;
    error: string;
    hideOnError: boolean;
    includeContext: boolean;
    showTitle: boolean;
    size: ReportChartComponentSize;
}

export type VisualforcePage = DescribeLayoutComponent &  {
    showLabel: boolean;
    showScrollbars: boolean;
    suggestedHeight: string;
    suggestedWidth: string;
    url: string;
}

export type DescribeLayoutFeedView = {
    feedFilters?: DescribeLayoutFeedFilter | DescribeLayoutFeedFilter[];
}

export type DescribeLayoutFeedFilter = {
    label: string;
    name: string;
    type: string;
}

export type OfflineLink = {
}

export type DescribeQuickActionListResult = {
    quickActionListItems?: DescribeQuickActionListItemResult | DescribeQuickActionListItemResult[];
}

export type DescribeQuickActionListItemResult = {
    accessLevelRequired?: ShareAccessLevel;
    colors?: DescribeColorResult | DescribeColorResult[];
    iconUrl?: string;
    icons?: DescribeIconResult | DescribeIconResult[];
    label: string;
    miniIconUrl: string;
    quickActionName: string;
    targetSobjectType?: string;
    type: string;
}

export type RelatedContent = {
    relatedContentItems?: DescribeRelatedContentItem | DescribeRelatedContentItem[];
}

export type DescribeRelatedContentItem = {
    describeLayoutItem: DescribeLayoutItem;
}

export type RelatedList = {
    accessLevelRequiredForCreate?: ShareAccessLevel;
    buttons?: DescribeLayoutButton | DescribeLayoutButton[];
    columns?: RelatedListColumn | RelatedListColumn[];
    custom: boolean;
    field: string;
    label: string;
    limitRows: number;
    name: string;
    sobject: string;
    sort?: RelatedListSort | RelatedListSort[];
}

export type RelatedListColumn = {
    field: string;
    fieldApiName: string;
    format: string;
    label: string;
    lookupId?: string;
    name: string;
    sortable: boolean;
}

export type RelatedListSort = {
}

export type DescribeLayoutSaveOption = {
    defaultValue: boolean;
    isDisplayed: boolean;
    label: string;
    name: string;
    restHeaderName: string;
    soapHeaderName: string;
}

export type DescribeSObjectResult = {
    actionOverrides?: ActionOverride | ActionOverride[];
    activateable: boolean;
    associateEntityType: string;
    associateParentEntity: string;
    childRelationships?: ChildRelationship | ChildRelationship[];
    createable: boolean;
    custom: boolean;
    customSetting: boolean;
    dataTranslationEnabled?: boolean;
    deepCloneable: boolean;
    defaultImplementation: string;
    deletable: boolean;
    deprecatedAndHidden: boolean;
    feedEnabled: boolean;
    fields?: Field | Field[];
    hasSubtypes: boolean;
    implementedBy: string;
    implementsInterfaces: string;
    isInterface: boolean;
    isSubtype: boolean;
    keyPrefix: string;
    label: string;
    labelPlural: string;
    layoutable: boolean;
    listviewable?: boolean;
    lookupLayoutable?: boolean;
    mergeable: boolean;
    mruEnabled: boolean;
    name: string;
    namedLayoutInfos?: NamedLayoutInfo | NamedLayoutInfo[];
    networkScopeFieldName: string;
    queryable: boolean;
    recordTypeInfos?: RecordTypeInfo | RecordTypeInfo[];
    replicateable: boolean;
    retrieveable: boolean;
    searchLayoutable?: boolean;
    searchable: boolean;
    supportedScopes?: ScopeInfo | ScopeInfo[];
    triggerable?: boolean;
    undeletable: boolean;
    updateable: boolean;
}

export type ActionOverride = {
    formFactor?: string;
    isAvailableInTouch: boolean;
    name: string;
    pageId: ID;
    url?: string;
}

export type ChildRelationship = {
    cascadeDelete: boolean;
    childSObject: string;
    deprecatedAndHidden: boolean;
    field: string;
    junctionIdListNames?: string | string[];
    junctionReferenceTo?: string | string[];
    relationshipName?: string;
    restrictedDelete?: boolean;
}

export type Field = {
    aggregatable: boolean;
    aiPredictionField: boolean;
    autoNumber: boolean;
    byteLength: number;
    calculated: boolean;
    calculatedFormula?: string;
    cascadeDelete?: boolean;
    caseSensitive: boolean;
    compoundFieldName?: string;
    controllerName?: string;
    createable: boolean;
    custom: boolean;
    dataTranslationEnabled?: boolean;
    defaultValue?: any;
    defaultValueFormula?: string;
    defaultedOnCreate: boolean;
    dependentPicklist?: boolean;
    deprecatedAndHidden: boolean;
    digits: number;
    displayLocationInDecimal?: boolean;
    encrypted?: boolean;
    externalId?: boolean;
    extraTypeInfo?: string;
    filterable: boolean;
    filteredLookupInfo?: FilteredLookupInfo;
    formulaTreatNullNumberAsZero?: boolean;
    groupable: boolean;
    highScaleNumber?: boolean;
    htmlFormatted?: boolean;
    idLookup: boolean;
    inlineHelpText?: string;
    label: string;
    length: number;
    mask?: string;
    maskType?: string;
    name: string;
    nameField: boolean;
    namePointing: boolean;
    nillable: boolean;
    permissionable: boolean;
    picklistValues?: PicklistEntry | PicklistEntry[];
    polymorphicForeignKey: boolean;
    precision: number;
    referenceTargetField?: string;
    referenceTo?: string | string[];
    relationshipName?: string;
    relationshipOrder?: number;
    restrictedDelete?: boolean;
    restrictedPicklist: boolean;
    scale: number;
    searchPrefilterable: boolean;
    soapType: string;
    sortable: boolean;
    type: string;
    unique: boolean;
    updateable: boolean;
    writeRequiresMasterRead?: boolean;
}

export type FilteredLookupInfo = {
    controllingFields?: string | string[];
    dependent: boolean;
    optionalFilter: boolean;
}

export type PicklistEntry = {
    active: boolean;
    defaultValue: boolean;
    label: string;
    validFor?: string;
    value: string;
}

export type NamedLayoutInfo = {
    name: string;
}

export type RecordTypeInfo = {
    active: boolean;
    available: boolean;
    defaultRecordTypeMapping: boolean;
    developerName: string;
    master: boolean;
    name: string;
    recordTypeId: ID;
}

export type ScopeInfo = {
    label: string;
    name: string;
}

export type DescribeSchemaResult = {
    fields?: SchemaField | SchemaField[];
    keyPrefix: string;
    name: string;
}

export type SchemaField = {
    digits: number;
    length: number;
    name: string;
    nillable: boolean;
    precision: number;
    scale: number;
    type: string;
    unique: boolean;
}

export type DescribeSoqlListViewsRequest = {
    listViewParams?: DescribeSoqlListViewParams | DescribeSoqlListViewParams[];
}

export type DescribeSoqlListViewParams = {
    developerNameOrId: string;
    sobjectType: string;
}

export type DescribeSoqlListViewResult = {
    describeSoqlListViews?: DescribeSoqlListView | DescribeSoqlListView[];
}

export type DescribeSoqlListView = {
    columns?: ListViewColumn | ListViewColumn[];
    id: ID;
    orderBy?: ListViewOrderBy | ListViewOrderBy[];
    query: string;
    relatedEntityId?: string;
    scope?: string;
    scopeEntityId?: string;
    sobjectType: string;
    whereCondition?: SoqlWhereCondition;
}

export type ListViewColumn = {
    ascendingLabel: string;
    descendingLabel: string;
    fieldNameOrPath: string;
    hidden: boolean;
    label: string;
    searchable: boolean;
    selectListItem: string;
    sortDirection: orderByDirection;
    sortIndex: number;
    sortable: boolean;
    type: string;
}

export type ListViewOrderBy = {
    fieldNameOrPath: string;
    nullsPosition?: orderByNullsPosition;
    sortDirection?: orderByDirection;
}

export type SoqlWhereCondition = {
}

export type SoqlCondition = SoqlWhereCondition &  {
    field: string;
    operator: soqlOperator;
    values?: string | string[];
}

export type SoqlConditionGroup = SoqlWhereCondition &  {
    conditions?: SoqlWhereCondition | SoqlWhereCondition[];
    conjunction: soqlConjunction;
}

export type SoqlNotCondition = SoqlWhereCondition &  {
    condition: SoqlWhereCondition;
}

export type SoqlSubQueryCondition = SoqlWhereCondition &  {
    field: string;
    operator: string;
    subQuery: string;
}

export type DescribeValueTypeResult = {
    apiCreatable: boolean;
    apiDeletable: boolean;
    apiReadable: boolean;
    apiUpdatable: boolean;
    parentField?: ValueTypeField;
    valueTypeFields?: ValueTypeField | ValueTypeField[];
}

export type ValueTypeField = {
    fields?: ValueTypeField | ValueTypeField[];
    foreignKeyDomain?: string | string[];
    isForeignKey: boolean;
    isNameField: boolean;
    minOccurs: number;
    name: string;
    picklistValues?: PicklistEntry | PicklistEntry[];
    soapType: string;
    valueRequired: boolean;
}

export type DescribeWorkitemActionResult = {
    actions?: AllowedWorkitemAction | AllowedWorkitemAction[];
    errors?: Error | Error[];
    success: boolean;
    targetObjectId: ID;
    workitemId: ID;
}

export type AllowedWorkitemAction = {
    commentsRequired: boolean;
    label: string;
    name: string;
    nextOwnerRequired: boolean;
    versionRequired: boolean;
}

export type ExecuteAnonymousResult = {
    column: number;
    compileProblem?: string;
    compiled: boolean;
    exceptionMessage?: string;
    exceptionStackTrace?: string;
    line: number;
    success: boolean;
}

export type GetDeletedResult = {
    deletedRecords?: DeletedRecord | DeletedRecord[];
    earliestDateAvailable: Date;
    latestDateCovered: Date;
}

export type DeletedRecord = {
    deletedDate: Date;
    id: ID;
}

export type GetServerTimestampResult = {
    timestamp: Date;
}

export type GetUpdatedResult = {
    ids?: ID | ID[];
    latestDateCovered: Date;
}

export type GetUserInfoResult = {
    accessibilityMode: boolean;
    chatterExternal: boolean;
    currencySymbol: string;
    defaultAppIdForProfile?: string;
    orgAttachmentFileSizeLimit: number;
    orgDefaultCurrencyIsoCode: string;
    orgDefaultCurrencyLocale: string;
    orgDisallowHtmlAttachments: boolean;
    orgHasPersonAccounts: boolean;
    organizationId: string;
    organizationMultiCurrency: boolean;
    organizationName: string;
    profileId: string;
    roleId: string;
    sessionSecondsValid: number;
    userDefaultCurrencyIsoCode: string;
    userEmail: string;
    userFullName: string;
    userId: string;
    userLanguage: string;
    userLocale: string;
    userName: string;
    userTimeZone: string;
    userType: string;
    userUiSkin: string;
}

export type InvalidateSessionsResult = {
    errors?: Error | Error[];
    success: boolean;
}

export type LoginResult = {
    metadataServerUrl: string;
    passwordExpired: boolean;
    sandbox: boolean;
    serverUrl: string;
    sessionId: string;
    upgradeMessage?: string;
    upgradeURL?: string;
    userId: string;
    userInfo?: GetUserInfoResult;
}

export type QueryResult = {
    done: boolean;
    entityTypeName: string;
    nextRecordsUrl?: string;
    queryLocator: QueryLocator;
    records?: sObject | sObject[];
    size: number;
    totalSize: number;
}

export type RunTestsRequest = {
    allTests: boolean;
    classes?: string | string[];
    maxFailedTests?: number;
    namespace: string;
    packages?: string | string[];
    skipCodeCoverage?: boolean;
    tests?: TestsNode | TestsNode[];
}

export type TestsNode = {
    classId: string;
    className: string;
    testMethods?: string | string[];
}

export type RunTestsResult = {
    apexLogId?: string;
    codeCoverage?: CodeCoverageResult | CodeCoverageResult[];
    codeCoverageWarnings?: CodeCoverageWarning | CodeCoverageWarning[];
    failures?: RunTestFailure | RunTestFailure[];
    flowCoverage?: FlowCoverageResult | FlowCoverageResult[];
    flowCoverageWarnings?: FlowCoverageWarning | FlowCoverageWarning[];
    numFailures: number;
    numTestsRun: number;
    successes?: RunTestSuccess | RunTestSuccess[];
    totalTime: number;
}

export type CodeCoverageResult = {
    id: ID;
    locationsNotCovered?: CodeLocation | CodeLocation[];
    name: string;
    namespace?: string;
    numLocations: number;
    numLocationsNotCovered: number;
    type: string;
}

export type CodeLocation = {
    column: number;
    line: number;
    numExecutions: number;
    time: number;
}

export type CodeCoverageWarning = {
    id: ID;
    message: string;
    name?: string;
    namespace?: string;
}

export type RunTestFailure = {
    id: ID;
    message: string;
    methodName?: string;
    name: string;
    namespace?: string;
    seeAllData?: boolean;
    stackTrace?: string;
    time: number;
    type: string;
}

export type FlowCoverageResult = {
    elementsNotCovered?: string | string[];
    flowId: string;
    flowName: string;
    flowNamespace?: string;
    numElements: number;
    numElementsNotCovered: number;
    processType: FlowProcessType;
}

export type FlowCoverageWarning = {
    flowId?: string;
    flowName?: string;
    flowNamespace?: string;
    message: string;
}

export type RunTestSuccess = {
    id: ID;
    methodName: string;
    name: string;
    namespace?: string;
    seeAllData?: boolean;
    time: number;
}

export type SearchResult = {
    queryId: string;
    searchRecords?: SearchRecord | SearchRecord[];
    searchResultsMetadata: SearchResultsMetadata;
}

export type SearchRecord = {
    record: sObject;
    searchRecordMetadata?: SearchRecordMetadata;
    snippet?: SearchSnippet;
}

export type SearchRecordMetadata = {
    searchPromoted: boolean;
    spellCorrected: boolean;
}

export type SearchSnippet = {
    text?: string;
    wholeFields?: NameValuePair | NameValuePair[];
}

export type NameValuePair = {
    name: string;
    value: string;
}

export type SearchResultsMetadata = {
    entityLabelMetadata?: LabelsSearchMetadata | LabelsSearchMetadata[];
    entityMetadata?: EntitySearchMetadata | EntitySearchMetadata[];
}

export type LabelsSearchMetadata = {
    entityFieldLabels?: NameValuePair | NameValuePair[];
    entityName: string;
}

export type EntitySearchMetadata = {
    entityName: string;
    errorMetadata?: EntityErrorMetadata;
    fieldMetadata?: FieldLevelSearchMetadata | FieldLevelSearchMetadata[];
    intentQueryMetadata?: EntityIntentQueryMetadata;
    searchPromotionMetadata?: EntitySearchPromotionMetadata;
    spellCorrectionMetadata?: EntitySpellCorrectionMetadata;
}

export type EntityErrorMetadata = {
    errorCode: string;
    message: string;
}

export type FieldLevelSearchMetadata = {
    label: string;
    name: string;
    type: string;
}

export type EntityIntentQueryMetadata = {
    intentQuery: boolean;
    message: string;
}

export type EntitySearchPromotionMetadata = {
    promotedResultCount: number;
}

export type EntitySpellCorrectionMetadata = {
    correctedQuery: string;
    hasNonCorrectedResults: boolean;
}

export type SetPasswordResult = {
}

export type UpsertResult = {
    created: boolean;
    errors?: Error | Error[];
    id: ID;
    infos?: Info | Info[];
    success: boolean;
    warnings?: Warning | Warning[];
}

export type LogInfo = {
    category: LogCategory;
    level: LogCategoryLevel;
}

export type Fact = {
    fact: MetadataVersionCheckFact;
    subject: string;
    token: string;
}

export type PackageVersion = {
    majorNumber: number;
    minorNumber: number;
    namespace: string;
}

export type SymbolTable = {
    constructors?: Constructor | Constructor[];
    externalReferences?: ExternalReference | ExternalReference[];
    id: string;
    innerClasses?: SymbolTable | SymbolTable[];
    interfaces?: string | string[];
    methods?: Method | Method[];
    name: string;
    namespace: string;
    parentClass: string;
    properties?: VisibilitySymbol | VisibilitySymbol[];
    tableDeclaration: Symbol;
    variables?: Symbol | Symbol[];
}

export type Constructor = VisibilitySymbol &  {
    parameters?: Parameter | Parameter[];
}

export type VisibilitySymbol = Symbol &  {
}

export type Symbol = {
    annotations?: Annotation | Annotation[];
    location: Position;
    modifiers?: string | string[];
    name: string;
    references?: Position | Position[];
    type: string;
}

export type Annotation = {
    name: string;
}

export type Position = {
    column: number;
    line: number;
}

export type Parameter = {
    name: string;
    type: string;
}

export type Method = Constructor &  {
    returnType: string;
}

export type ExternalReference = {
    methods?: ExternalMethod | ExternalMethod[];
    name: string;
    namespace: string;
    references?: Position | Position[];
    variables?: ExternalSymbol | ExternalSymbol[];
}

export type ExternalMethod = ExternalConstructor &  {
    argTypes?: string | string[];
    isStatic: boolean;
    returnType: string;
}

export type ExternalConstructor = ExternalSymbol &  {
    methodDoc: string;
    parameters?: Parameter | Parameter[];
}

export type ExternalSymbol = {
    name: string;
    references?: Position | Position[];
}

export type Coverage = {
    coveredLines?: number | number[];
    uncoveredLines?: number | number[];
}

export type HeapDump = {
    className: string;
    extents?: TypeExtent | TypeExtent[];
    heapDumpDate: Date;
    namespace: string;
}

export type TypeExtent = {
    collectionType: string;
    count: number;
    definition?: AttributeDefinition | AttributeDefinition[];
    extent?: HeapAddress | HeapAddress[];
    totalSize: number;
    typeName: string;
}

export type AttributeDefinition = {
    name: string;
    type: string;
}

export type HeapAddress = {
    address: string;
    isStatic: boolean;
    size: number;
    symbols?: string | string[];
    value: StateValue;
}

export type StateValue = {
}

export type BooleanValue = StateValue &  {
    value: boolean;
}

export type ListValue = StateValue &  {
    value?: StateValue | StateValue[];
}

export type MapValue = StateValue &  {
    entry?: MapEntry | MapEntry[];
}

export type MapEntry = {
    keyDisplayValue: string;
    value: StateValue;
}

export type NumberValue = StateValue &  {
    value: number;
}

export type SetValue = StateValue &  {
    value?: StateValue | StateValue[];
}

export type StringValue = StateValue &  {
    value: string;
}

export type ApexResult = {
    apexError: string;
    apexExecutionResult: ExecuteAnonymousResult;
}

export type SOQLResult = {
    queryError: string;
    queryMetadata: QueryResultMetadata;
    queryResult?: MapValue | MapValue[];
}

export type QueryResultMetadata = {
    columnMetadata?: QueryResultColumnMetadata | QueryResultColumnMetadata[];
    entityName: string;
    groupBy: boolean;
    idSelected: boolean;
    keyPrefix: string;
}

export type QueryResultColumnMetadata = {
    aggregate: boolean;
    apexType: string;
    booleanType: boolean;
    columnName: string;
    custom: boolean;
    displayName: string;
    foreignKeyName: string;
    insertable: boolean;
    joinColumns?: QueryResultColumnMetadata | QueryResultColumnMetadata[];
    numberType: boolean;
    textType: boolean;
    updatable: boolean;
}

export type AggregateExpressionResultColumnMetadata = QueryResultColumnMetadata &  {
}

export type ComplexQueryResultColumnMetadata = QueryResultColumnMetadata &  {
}

export type AggregateQueryResultColumnMetadata = ComplexQueryResultColumnMetadata &  {
}

export type PrimitiveQueryResultColumnMetadata = QueryResultColumnMetadata &  {
}

export type DeployDetails = {
    componentFailures?: DeployMessage | DeployMessage[];
    componentSuccesses?: DeployMessage | DeployMessage[];
    runTestResult?: RunTestsResult;
}

export type DeployMessage = {
    changed: boolean;
    columnNumber?: number;
    componentType?: string;
    created: boolean;
    createdDate: Date;
    deleted: boolean;
    fileName: string;
    fullName: string;
    id?: string;
    lineNumber?: number;
    problem?: string;
    problemType?: DeployProblemType;
    success: boolean;
}

export type RecordTypesSupported = {
    recordTypeInfos?: RecordTypeInfo | RecordTypeInfo[];
}

export type RelationshipReferenceTo = {
    referenceTo?: string | string[];
}

export type JunctionIdListNames = {
    names?: string | string[];
}

export type SearchLayoutButtonsDisplayed = {
    applicable: boolean;
    buttons?: SearchLayoutButton | SearchLayoutButton[];
}

export type SearchLayoutButton = {
    apiName: string;
    label: string;
}

export type SearchLayoutFieldsDisplayed = {
    applicable: boolean;
    fields?: SearchLayoutField | SearchLayoutField[];
}

export type SearchLayoutField = {
    apiName: string;
    label: string;
    sortable: boolean;
}

export type OperationPayload = {
}

export type FTestOperationPayload = OperationPayload &  {
    result: string;
}

export type Territory2RunOppTerrAssignmentApexPayload = OperationPayload &  {
    excludeClosedOpportunities: string;
    opportunityCloseDateFrom: string;
    opportunityCloseDateTo: string;
    opportunityLastModifiedDateFrom: string;
    opportunityLastModifiedDateTo: string;
    territoryModelId: string;
}

export type Territory2RunTerritoryRulesPayload = OperationPayload &  {
    field: string;
    keyPrefix: string;
    operator: string;
    ruleLastModifiedDateFrom: string;
    ruleLastModifiedDateTo: string;
    territoryId: string;
    territoryModelId: string;
    value: string;
}

export type OperationParameters = {
    payload: OperationPayload;
}

export type FieldsInfo = {
    fieldsInfo?: string | string[];
}

export type RelatedListsInfo = {
    relatedListsInfo?: SingleRelatedListInfo | SingleRelatedListInfo[];
}

export type SingleRelatedListInfo = {
    entity: string;
    id: string;
    label: string;
    name: string;
}

export type ApiFault = {
    exceptionCode: ExceptionCode;
    exceptionMessage?: string;
    extendedErrorDetails?: ExtendedErrorDetails | ExtendedErrorDetails[];
    upgradeURL?: string;
    upgradeMessage?: string;
}

export type ApiQueryFault = ApiFault &  {
    row: number;
    column: number;
}

export type LoginFault = ApiFault &  {
}

export type InvalidQueryLocatorFault = ApiFault &  {
}

export type InvalidNewPasswordFault = ApiFault &  {
}

export type InvalidOldPasswordFault = ApiFault &  {
}

export type InvalidIdFault = ApiFault &  {
}

export type UnexpectedErrorFault = ApiFault &  {
}

export type InvalidFieldFault = ApiQueryFault &  {
}

export type InvalidSObjectFault = ApiQueryFault &  {
}

export type MalformedQueryFault = ApiQueryFault &  {
}

export type MalformedSearchFault = ApiQueryFault &  {
}

